import{_ as n,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function c(l,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-12-16-stat-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-16-stat-c-程序"><span>Chapter 12.16 - stat.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 21 21:26</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-16-stat-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-16-stat-c-程序"><span>12.16 stat.c 程序</span></a></h2><h3 id="_12-16-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-16-1-功能描述"><span>12.16.1 功能描述</span></a></h3><p>实现获取文件状态信息的系统调用 <code>stat()</code> 和 <code>fstat()</code>，并将文件信息以 <code>stat</code> 结构体的形式返回到用户缓冲区中。<code>stat</code> 结构体中的所有字段信息都能在文件的 inode 中获得。</p><ul><li><code>stat()</code> 利用文件名获取信息</li><li><code>fstat()</code> 使用文件句柄 (描述符) 来取得信息</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">dev_t</span> st_dev<span class="token punctuation">;</span> <span class="token comment">// 含有文件的设备号</span></span>
<span class="line">    <span class="token class-name">ino_t</span> st_ino<span class="token punctuation">;</span> <span class="token comment">// 文件的 inode 号</span></span>
<span class="line">    <span class="token class-name">umode_t</span> st_mode<span class="token punctuation">;</span> <span class="token comment">// 文件类型和属性</span></span>
<span class="line">    <span class="token class-name">nlink_t</span> st_nlink<span class="token punctuation">;</span> <span class="token comment">// 文件的链接数</span></span>
<span class="line">    <span class="token class-name">uid_t</span> st_uid<span class="token punctuation">;</span> <span class="token comment">// 文件的用户号</span></span>
<span class="line">    <span class="token class-name">gid_t</span> st_gid<span class="token punctuation">;</span> <span class="token comment">// 文件的组号</span></span>
<span class="line">    <span class="token class-name">dev_t</span> st_rdev<span class="token punctuation">;</span> <span class="token comment">// 设备号 (如果文件是设备文件)</span></span>
<span class="line">    <span class="token class-name">off_t</span> st_size<span class="token punctuation">;</span> <span class="token comment">// 文件字节大小 (文件是常规文件)</span></span>
<span class="line">    <span class="token class-name">time_t</span> st_atime<span class="token punctuation">;</span> <span class="token comment">// 最后访问时间</span></span>
<span class="line">    <span class="token class-name">time_t</span> st_mtime<span class="token punctuation">;</span> <span class="token comment">// 最后修改时间</span></span>
<span class="line">    <span class="token class-name">time_t</span> st_ctime<span class="token punctuation">;</span> <span class="token comment">// 最后结点修改时间</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-16-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-16-2-代码注释"><span>12.16.2 代码注释</span></a></h3><h4 id="cp-stat-根据-inode-获取文件状态信息" tabindex="-1"><a class="header-anchor" href="#cp-stat-根据-inode-获取文件状态信息"><span>cp_stat() - 根据 inode 获取文件状态信息</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cp_stat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">stat</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 验证用户缓冲区大小可以放下 stat 结构体</span></span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>statbuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 将 inode 中的信息复制到 stat 结构体</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_dev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_ino <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_mode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_nlink <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_uid <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_uid<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_gid <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_gid<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_rdev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 设备文件设备号</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_size <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_atime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_atime<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_mtime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mtime<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>st_ctime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_ctime<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 将结构体拷贝到用户空间缓冲区中</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> statbuf <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-stat-根据文件名-获取相关文件状态信息的系统调用" tabindex="-1"><a class="header-anchor" href="#sys-stat-根据文件名-获取相关文件状态信息的系统调用"><span>sys_stat() - 根据文件名，获取相关文件状态信息的系统调用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_stat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 根据文件名找到 inode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">cp_stat</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放回 inode</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-fstat-根据文件句柄获取文件状态系统调用" tabindex="-1"><a class="header-anchor" href="#sys-fstat-根据文件句柄获取文件状态系统调用"><span>sys_fstat() - 根据文件句柄获取文件状态系统调用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_fstat</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> f<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 利用句柄取得文件 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>f <span class="token operator">=</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> f<span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">cp_stat</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-lstat-符号链接文件状态系统调用" tabindex="-1"><a class="header-anchor" href="#sys-lstat-符号链接文件状态系统调用"><span>sys_lstat() - 符号链接文件状态系统调用</span></a></h4><p>只取符号链接文件本身的状态，不跟随链接文件的状态。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_lstat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span> statbuf<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">lnamei</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 取符号链接 inode，不跟随符号链接</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">cp_stat</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-readlink-读取符号链接系统调用" tabindex="-1"><a class="header-anchor" href="#sys-readlink-读取符号链接系统调用"><span>sys_readlink() - 读取符号链接系统调用</span></a></h4><p>读取符号链接文件中的内容，放到指定长度的用户缓冲区中 (若缓冲区太小，就会截断符号链接的内容)。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_readlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> bufsiz<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 用户缓冲区长度必须在 1-1023 之间</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bufsiz <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bufsiz <span class="token operator">&gt;</span> <span class="token number">1023</span><span class="token punctuation">)</span></span>
<span class="line">        bufsiz <span class="token operator">=</span> <span class="token number">1023</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 验证用户缓冲区大小是否足够</span></span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> bufsiz<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">lnamei</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 取符号链接的 inode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读取符号链接文件到高速缓冲</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放回 inode</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 向用户缓冲区复制</span></span>
<span class="line">    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> bufsiz <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放高速缓冲</span></span>
<span class="line">    <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)]))}const i=n(e,[["render",c],["__file","Chapter 12.16 - stat.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.16%20-%20stat.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.16 - stat.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.16 stat.c 程序","slug":"_12-16-stat-c-程序","link":"#_12-16-stat-c-程序","children":[{"level":3,"title":"12.16.1 功能描述","slug":"_12-16-1-功能描述","link":"#_12-16-1-功能描述","children":[]},{"level":3,"title":"12.16.2 代码注释","slug":"_12-16-2-代码注释","link":"#_12-16-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.16 - stat.c 程序.md"}');export{i as comp,u as data};
