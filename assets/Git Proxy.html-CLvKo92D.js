import{_ as t,c as i,b as s,f as e,d as l,e as p,a as o,r,o as d}from"./app-7eKjwDat.js";const c="/blog/assets/git-proxy-VYwnOmGb.png",u={};function m(v,n){const a=r("RouteLink");return d(),i("div",null,[n[11]||(n[11]=s("h1",{id:"git-proxy",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#git-proxy"},[s("span",null,"Git - Proxy")])],-1)),n[12]||(n[12]=s("p",null,"Created by : Mr Dk.",-1)),n[13]||(n[13]=s("p",null,"2020 / 02 / 19 13:28",-1)),n[14]||(n[14]=s("p",null,"Ningbo, Zhejiang, China",-1)),n[15]||(n[15]=s("hr",null,null,-1)),s("p",null,[n[1]||(n[1]=e("受限于国内的网络环境，用 Git 从 GitHub 上 ")),n[2]||(n[2]=s("code",null,"clone",-1)),n[3]||(n[3]=e(" / ")),n[4]||(n[4]=s("code",null,"fetch",-1)),n[5]||(n[5]=e(" / ")),n[6]||(n[6]=s("code",null,"pull",-1)),n[7]||(n[7]=e(" / ")),n[8]||(n[8]=s("code",null,"push",-1)),n[9]||(n[9]=e(" 都痛苦异常。这段时间放假在家，家里的网速比实验室里的还慢，用 ")),l(a,{to:"/notes/Network/Network%20GitHub%20Accelerating.html"},{default:p(()=>n[0]||(n[0]=[e("配置 GitHub DNS")])),_:1}),n[10]||(n[10]=e(" 的方法已经不太奏效了。就算 IP 地址没有被污染，从国内连到国外相应服务器的延迟依旧很高。因此，试图配置 Git 的代理，借由在境外租用的服务器，来加速 Git 对 GitHub 的访问。"))]),n[16]||(n[16]=o(`<p>GitHub 有 HTTPS 和 SSH 两种访问方式。在我自己的电脑上，由于我有自己的 RSA 公私钥，所以一般使用 SSH 方式。对这两种访问方式，设置代理的方式也有所不同。</p><h2 id="https-proxy" tabindex="-1"><a class="header-anchor" href="#https-proxy"><span>HTTPS Proxy</span></a></h2><p>这种网上的解决方式是最多的，直接在 Git 命令行中设置即可。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config –global http.proxy http://<span class="token punctuation">[</span>user:password@<span class="token punctuation">]</span><span class="token number">10.167</span>.32.133:8080</span>
<span class="line"><span class="token function">git</span> config –global http.proxy https://<span class="token punctuation">[</span>user:password@<span class="token punctuation">]</span><span class="token number">10.167</span>.32.133:8080</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用本地代理，那么使用 <code>127.0.0.1</code>。</p><p>相应的撤销代理方法：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy</span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ssh-proxy" tabindex="-1"><a class="header-anchor" href="#ssh-proxy"><span>SSH Proxy</span></a></h2><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>Windows</span></a></h3><p>在 Baidu 上没有找到解决方案，后来通过 Google 看了一篇 <a href="https://communary.net/2017/01/12/getting-git-to-work-through-a-proxy-server-in-windows/" target="_blank" rel="noopener noreferrer">博客</a> 发现符合我的应用场景，并且经过测试方法是有效的。我的应用场景是 <a href="https://gitforwindows.org/" target="_blank" rel="noopener noreferrer"><em>Git for Windows</em></a> + <a href="https://github.com/2dust/v2rayN" target="_blank" rel="noopener noreferrer"><em>V2Ray</em></a> 的本地代理。</p><p>具体的设置方式是在 SSH 的配置文件 (<code>~/.ssh/config</code>) 中添加规则。规则中的代理命令需要使用到一个叫做 <code>connect.exe</code> 的程序。这个程序不用另外下载，在 Git for Windows 的安装目录下已经提供：<code>&lt;Git_Path&gt;/Git/mingw64/bin/</code>。该程序的使用方式如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ connect</span>
<span class="line">connect --- simple relaying <span class="token builtin class-name">command</span> via proxy.</span>
<span class="line">Version <span class="token number">1.105</span></span>
<span class="line">usage: C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>Git<span class="token punctuation">\\</span>mingw64<span class="token punctuation">\\</span>bin<span class="token punctuation">\\</span>connect.exe <span class="token punctuation">[</span>-dnhst45<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p local-port<span class="token punctuation">]</span></span>
<span class="line">          <span class="token punctuation">[</span>-H proxy-server<span class="token punctuation">[</span>:port<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-S <span class="token punctuation">[</span>user@<span class="token punctuation">]</span>socks-server<span class="token punctuation">[</span>:port<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">          <span class="token punctuation">[</span>-T proxy-server<span class="token punctuation">[</span>:port<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">          <span class="token punctuation">[</span>-c telnet-proxy-command<span class="token punctuation">]</span></span>
<span class="line">          <span class="token function">host</span> port</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据该程序的使用方法，可以使用 <code>-H</code> 参数下的 HTTP 代理和 <code>-S</code> 参数下的 SOCKS 代理 (其它代理反正我也没有不就深究含义)。我这边的 V2Ray 支持 HTTP 和 SOCKS 两种代理，只是端口号不一样，所以我就使用了 SOCKS 代理。在本地 SSH 的配置文件中添加如下规则：</p><div class="language-ssh line-numbers-mode" data-highlighter="prismjs" data-ext="ssh" data-title="ssh"><pre><code><span class="line">Host github.com</span>
<span class="line">    ProxyCommand &quot;C:\\Program Files\\Git\\mingw64\\bin\\connect.exe&quot; -S 127.0.0.1:10808 %h %p</span>
<span class="line">    IdentityFile &quot;~/.ssh/id_rsa&quot;</span>
<span class="line">    TCPKeepAlive yes</span>
<span class="line">    IdentitiesOnly yes</span>
<span class="line">    User git</span>
<span class="line">    Port 22</span>
<span class="line">    Hostname github.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加好规则之后，之后再通过 SSH 访问 GitHub 时，就会通过代理访问，速度大大加快：</p><p><img src="`+c+`" alt="git-proxy"></p><p>如果不使用 SOCKS 代理，使用 HTTP 代理也是可以的，把参数协议和 IP 地址、端口号换一下应该就可以了，就不折腾了。算是解决了因为网络带来的一些烦恼。</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h3><p>Linux 下主要是 <code>ProxyCommand</code> 的不同。如果正在使用 WSL，并且代理服务搭建在 Windows 上的话，<code>ProxyCommand</code> 中需要填写 <code>/etc/resolv.conf</code> 中的 <code>nameserver</code> IP 地址（也就是 Windows 的局域网地址）。</p><div class="language-ssh line-numbers-mode" data-highlighter="prismjs" data-ext="ssh" data-title="ssh"><pre><code><span class="line">Host github.com</span>
<span class="line">    ProxyCommand nc -v -x 127.0.0.1:10808 %h %p</span>
<span class="line">    IdentityFile &quot;~/.ssh/id_rsa&quot;</span>
<span class="line">    TCPKeepAlive yes</span>
<span class="line">    IdentitiesOnly yes</span>
<span class="line">    User git</span>
<span class="line">    Port 22</span>
<span class="line">    Hostname github.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://communary.net/2017/01/12/getting-git-to-work-through-a-proxy-server-in-windows/" target="_blank" rel="noopener noreferrer">Getting git to work through a proxy server (in Windows)</a></p><p><a href="https://gist.github.com/coin8086/7228b177221f6db913933021ac33bb92" target="_blank" rel="noopener noreferrer">Use Proxy for Git/GitHub</a></p>`,24))])}const h=t(u,[["render",m],["__file","Git Proxy.html.vue"]]),g=JSON.parse('{"path":"/notes/Git/Git%20Proxy.html","title":"Git - Proxy","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"HTTPS Proxy","slug":"https-proxy","link":"#https-proxy","children":[]},{"level":2,"title":"SSH Proxy","slug":"ssh-proxy","link":"#ssh-proxy","children":[{"level":3,"title":"Windows","slug":"windows","link":"#windows","children":[]},{"level":3,"title":"Linux","slug":"linux","link":"#linux","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Git/Git Proxy.md"}');export{h as comp,g as data};
