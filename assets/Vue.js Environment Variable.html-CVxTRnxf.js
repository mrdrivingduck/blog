import{_ as n,c as a,a as s,o as t}from"./app-7eKjwDat.js";const i={};function o(l,e){return t(),a("div",null,e[0]||(e[0]=[s(`<h1 id="vue-js-environment-variable" tabindex="-1"><a class="header-anchor" href="#vue-js-environment-variable"><span>Vue.js - Environment Variable</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 16 13:45</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="why-we-need-environment-variable" tabindex="-1"><a class="header-anchor" href="#why-we-need-environment-variable"><span>Why We Need Environment Variable?</span></a></h2><p>在开发应用时，一些 APP key 或 token 不能硬编码在源代码中 push 到仓库里。相应的解决方式是将这些 key 保存到环境变量中，在程序构建/运行时，环境变量中的值才会替代代码中的引用。这样只需要在本地存储 key，不需要将 key push 到仓库内。</p><h2 id="vue-js-environment-variable-1" tabindex="-1"><a class="header-anchor" href="#vue-js-environment-variable-1"><span>Vue.js Environment Variable</span></a></h2><p>在 <a href="https://cli.vuejs.org/" target="_blank" rel="noopener noreferrer">Vue CLI</a> 创建的 Vue.js 工程的 <strong>根目录</strong> 下，可以有好几种环境变量文件。其中，带 <code>.local</code> 后缀的文件会被 <code>.gitignore</code> 忽略而不被传入仓库。另外，环境变量支持三种 <strong>模式</strong>：</p><ul><li><code>development</code> - 开发环境模式，对应于 <code>serve</code> 命令</li><li><code>production</code> - 生产环境模式，对应于 <code>build</code> 命令</li><li><code>test</code> - 测试环境模式，对应于 <code>test</code> 命令</li></ul><p>由此，在工程根目录下可以有以下几类环境变量文件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">.env                # 在所有的环境中被载入</span>
<span class="line">.env.local          # 在所有的环境中被载入，但会被 git 忽略</span>
<span class="line">.env.[mode]         # 只在指定的模式中被载入</span>
<span class="line">.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，带有 <code>mode</code> 的环境变量文件比一般的环境变量文件 (比如 <code>.env</code>) 有更高的优先级。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">VUE_APP_SECRET=HHHHHHHH</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>只有以 <code>VUE_APP_</code> 开头的环境变量才会被嵌入到客户端中！</strong> 在代码中可以通过如下方式访问：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_SECRET</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另外，还有两个特殊的环境变量：</p><ul><li><code>NODE_ENV</code> - 应用运行的模式，也就是 <code>development</code> / <code>production</code> / <code>test</code> 中的一个</li><li><code>BASE_URL</code> - 与 <code>vue.config.js</code> 中的 <code>publicPath</code> 相符，也就是应用会部署到的基础路径</li></ul><h2 id="public-path" tabindex="-1"><a class="header-anchor" href="#public-path"><span>Public Path</span></a></h2><p>一个关于 <code>vue.config.js</code> 配置的小细节。如果打算将项目部署到 <code>https://&lt;USERNAME&gt;.github.io/</code>，那么 <code>publicPath</code> 需要被设置为默认的 <code>/</code>。如果部署到 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code>，那么 <code>publicPath</code> 就需要被设置为 <code>/&lt;REPO&gt;/</code>。因此，<code>vue.config.js</code> 中可以这样写：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;/my-project/&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就使用了上面提到的 <code>NODE_ENV</code> 环境变量来判断应用运行的模式是否为生产环境。</p><p>另外，如果仓库还集成了 Travis CI，那么还可以将环境变量添加到 Travis CI 的 setting 中。这样在 Travis CI 自动构建时，会将程序中的引用值替换为环境变量中的值。</p><blockquote><p>好吧我其实就是想在环境变量中放一个 GitHub Pernonal Access Token (PAT)，这样我的网页可以直接调用 GitHub API。但是无论是硬编码，还是环境变量，在构建完成后，token 的完整字符串都会出现在仓库中而被 GitHub 识别，GitHub 会自动删除这个 token。</p><p>如果想要避免这个问题，还得搞点小操作。</p></blockquote><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://medium.com/js-dojo/how-to-use-environment-variables-in-vue-js-273eba0102b0" target="_blank" rel="noopener noreferrer">How to Use Environment Variables in Vue.js</a></p><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">Vue CLI - 环境变量和模式</a></p><p><a href="https://cli.vuejs.org/zh/guide/deployment.html#github-pages" target="_blank" rel="noopener noreferrer">Vue CLI - 部署</a></p>`,29)]))}const c=n(i,[["render",o],["__file","Vue.js Environment Variable.html.vue"]]),p=JSON.parse('{"path":"/notes/Vue.js/Vue.js%20Environment%20Variable.html","title":"Vue.js - Environment Variable","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Why We Need Environment Variable?","slug":"why-we-need-environment-variable","link":"#why-we-need-environment-variable","children":[]},{"level":2,"title":"Vue.js Environment Variable","slug":"vue-js-environment-variable-1","link":"#vue-js-environment-variable-1","children":[]},{"level":2,"title":"Public Path","slug":"public-path","link":"#public-path","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Vue.js/Vue.js Environment Variable.md"}');export{c as comp,p as data};
