import{_ as s,c as n,a as i,o as a}from"./app-7eKjwDat.js";const l={};function t(d,e){return a(),n("div",null,e[0]||(e[0]=[i(`<h1 id="syzkaller-description-syntax" tabindex="-1"><a class="header-anchor" href="#syzkaller-description-syntax"><span>Syzkaller - Description Syntax</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 07 / 04 14:49</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="syscall-descriptions" tabindex="-1"><a class="header-anchor" href="#syscall-descriptions"><span>Syscall Descriptions</span></a></h2><p><code>syz-fuzzer</code> 进程产生测试 kernel 系统调用的程序，由 <code>syz-executor</code> 进行执行。对应的系统调用接口需要在指定目录下被声明，从而使 syzkaller 能够利用这些系统调用接口生成程序。</p><p>系统调用描述文件位于 syzkaller 目录的 <code>/sys/:OS/:*.txt</code> 中：比如，<code>sys/linux/dev_snd_midi.txt</code> 中包含了 Linux MIDI 接口的描述。</p><hr><h2 id="syscall-descriptions-syntax" tabindex="-1"><a class="header-anchor" href="#syscall-descriptions-syntax"><span>Syscall Descriptions Syntax</span></a></h2><h3 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">open(file filename, flags flags[open_flags], mode flags[open_mode]) fd</span>
<span class="line">read(fd fd, buf buffer[out], count len[buf]) len[buf]</span>
<span class="line">close(fd fd)</span>
<span class="line">open_mode = S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entry" tabindex="-1"><a class="header-anchor" href="#entry"><span>Entry</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">syscallname &quot;(&quot; [arg [&quot;,&quot; arg]*] &quot;)&quot; [type]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>即，系统调用名，之后带括号，括号内是参数，最后是系统调用的返回值类型，如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">open(...) fd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>系统调用名为 <code>open</code>，返回值类型为 <code>fd</code></li></ul><h3 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments"><span>Arguments</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">arg = argname type</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每个参数可以分为两部分：</p><ul><li>参数名</li><li>参数类型</li></ul><p>如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">open(file filename, ...) fd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>第一个参数名为 <code>file</code></li><li>参数类型为 <code>filename</code></li></ul><h3 id="argument-name" tabindex="-1"><a class="header-anchor" href="#argument-name"><span>Argument Name</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">argname = identifier</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>Type</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">type = typename [ &quot;[&quot; type-options &quot;]&quot; ]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>类型包含两部分：</p><ul><li><code>typename</code> - 类型名 <ul><li><code>const</code></li><li><code>intN</code></li><li><code>intptr</code></li><li><code>flags</code></li><li><code>array</code></li><li><code>ptr</code></li><li><code>string</code></li><li><code>strconst</code></li><li><code>filename</code></li><li><code>len</code></li><li><code>bytesize</code></li><li><code>bytesizeN</code></li><li><code>bitsize</code></li><li><code>vma</code></li><li><code>proc</code></li></ul></li><li><code>type-options</code> - 类型选项，在类型名后加 <code>[]</code> (可选)</li></ul><h3 id="ints" tabindex="-1"><a class="header-anchor" href="#ints"><span>Ints</span></a></h3><ul><li><code>int8</code></li><li><code>int16</code></li><li><code>int32</code></li><li><code>int64</code></li><li><code>intptr</code> - 代表一个指针尺寸的整数，比如 C 中的 <code>long</code></li></ul><p>加入 <code>be</code> 后缀表示大端 - <code>int16be</code></p><p>可以对整数指定范围：<code>int32[0:100]</code>，也可以指定位长度：<code>int64:N</code>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">example_struct {</span>
<span class="line">    f0  int8                  # random 1-byte integer</span>
<span class="line">    f1  const[0x42, int16be]  # const 2-byte integer with value 0x4200 (big-endian 0x42)</span>
<span class="line">    f2  int32[0:100]          # random 4-byte integer with values from 0 to 100 inclusive</span>
<span class="line">    f3  int64:20              # random 20-bit bitfield</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="structs" tabindex="-1"><a class="header-anchor" href="#structs"><span>Structs</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;structname&gt; {</span>
<span class="line">    fieldname type</span>
<span class="line">    ...</span>
<span class="line">} [ &lt;attribute&gt; ]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>&quot;packed&quot;</code></td><td>No paddings, default alignment 1</td></tr><tr><td><code>&quot;align_N&quot;</code></td><td>Alignment N</td></tr><tr><td><code>&quot;size&quot;</code></td><td>Padded up to the specified size</td></tr></tbody></table><h3 id="unions" tabindex="-1"><a class="header-anchor" href="#unions"><span>Unions</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;unionname&gt; {</span>
<span class="line">    fieldname type</span>
<span class="line">    ...</span>
<span class="line">} [ &lt;attribute&gt; ]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>&quot;varlen&quot;</code></td><td>union size is not maximum of all option but rather length of a particular chosen option</td></tr><tr><td><code>&quot;size&quot;</code></td><td>the union is padded up to the specified size</td></tr></tbody></table><h3 id="resources" tabindex="-1"><a class="header-anchor" href="#resources"><span>Resources</span></a></h3><p>代表需要从一个系统调用的输出中传递到另一个系统调用的输入的值：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">resource &lt;identifier&gt; [&lt;underlying_type&gt;] ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>比如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">resource fd[int32]: 0xffffffffffffffff, AT_FDCWD, 1000000</span>
<span class="line">resource sock[fd]</span>
<span class="line">resource sock_unix[sock]</span>
<span class="line"></span>
<span class="line">socket(...) sock</span>
<span class="line">accept(fd sock, ...) sock</span>
<span class="line">listen(fd sock, backlog int32)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&quot;resource&quot; 声明</li><li>resource 名称</li><li>resource 的类型 <ul><li><code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code> 、<code>intptr</code> 或另一个 resource (继承)</li></ul></li><li>冒号之后可以加其余选项 <ul><li>resource 可以使用一些特殊值</li></ul></li></ul><h3 id="type-aliases" tabindex="-1"><a class="header-anchor" href="#type-aliases"><span>Type Aliases</span></a></h3><p>可以使用低层类型构造新的类型</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">type identifier underlying_type</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>比如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">type signalno int32[0:65]</span>
<span class="line">type net_port proc[20000, 4, int16be]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>一些内置的构造类型：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">type bool8	int8[0:1]</span>
<span class="line">type bool16	int16[0:1]</span>
<span class="line">type bool32	int32[0:1]</span>
<span class="line">type bool64	int64[0:1]</span>
<span class="line">type boolptr	intptr[0:1]</span>
<span class="line"></span>
<span class="line">type filename string[filename]</span>
<span class="line"></span>
<span class="line">type buffer[DIR] ptr[DIR, array[int8]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="type-templates" tabindex="-1"><a class="header-anchor" href="#type-templates"><span>Type Templates</span></a></h3><h3 id="length" tabindex="-1"><a class="header-anchor" href="#length"><span>Length</span></a></h3><h3 id="proc" tabindex="-1"><a class="header-anchor" href="#proc"><span>Proc</span></a></h3><hr>`,58)]))}const c=s(l,[["render",t],["__file","Syzkaller Description Syntax.html.vue"]]),p=JSON.parse('{"path":"/notes/Operating%20System/Syzkaller%20Description%20Syntax.html","title":"Syzkaller - Description Syntax","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Syscall Descriptions","slug":"syscall-descriptions","link":"#syscall-descriptions","children":[]},{"level":2,"title":"Syscall Descriptions Syntax","slug":"syscall-descriptions-syntax","link":"#syscall-descriptions-syntax","children":[{"level":3,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":3,"title":"Entry","slug":"entry","link":"#entry","children":[]},{"level":3,"title":"Arguments","slug":"arguments","link":"#arguments","children":[]},{"level":3,"title":"Argument Name","slug":"argument-name","link":"#argument-name","children":[]},{"level":3,"title":"Type","slug":"type","link":"#type","children":[]},{"level":3,"title":"Ints","slug":"ints","link":"#ints","children":[]},{"level":3,"title":"Structs","slug":"structs","link":"#structs","children":[]},{"level":3,"title":"Unions","slug":"unions","link":"#unions","children":[]},{"level":3,"title":"Resources","slug":"resources","link":"#resources","children":[]},{"level":3,"title":"Type Aliases","slug":"type-aliases","link":"#type-aliases","children":[]},{"level":3,"title":"Type Templates","slug":"type-templates","link":"#type-templates","children":[]},{"level":3,"title":"Length","slug":"length","link":"#length","children":[]},{"level":3,"title":"Proc","slug":"proc","link":"#proc","children":[]}]}],"git":{},"filePathRelative":"notes/Operating System/Syzkaller Description Syntax.md"}');export{c as comp,p as data};
