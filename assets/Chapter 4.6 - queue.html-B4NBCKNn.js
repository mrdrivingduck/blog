import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-4-6-queue" tabindex="-1"><a class="header-anchor" href="#chapter-4-6-queue"><span>Chapter 4.6 - queue</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 04 14:50 🍀</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_4-6-1-queue-概述" tabindex="-1"><a class="header-anchor" href="#_4-6-1-queue-概述"><span>4.6.1 queue 概述</span></a></h2><p>queue 是一种 FIFO (First In First Out) 的数据结构。允许从尾端加入元素，从头部取出元素。此外没有方法可以访问 queue 中的元素。</p><h2 id="_4-6-2-queue-定义完整列表" tabindex="-1"><a class="header-anchor" href="#_4-6-2-queue-定义完整列表"><span>4.6.2 queue 定义完整列表</span></a></h2><p>deque 是双向开口结构，如果封闭其头部的入口，以及尾部的出口，那么就很容易形成一个 queue。SGI STL 默认以 deque 作为 queue 的底层结构。同样，queue 借用了底层结构的 API，并屏蔽了其中的一些 API，因此也是一个 container adapter。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Sequence</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>deque<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">queue</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Sequence</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">queue</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// requirements:</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Assignable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Sequence<span class="token punctuation">,</span> _FrontInsertionSequence<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Sequence<span class="token punctuation">,</span> _BackInsertionSequence<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type _Sequence_value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Sequence_value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__STL_MEMBER_TEMPLATES</span></span></span>
<span class="line">  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Seq1</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Seq1</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">,</span></span>
<span class="line">                         <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">/* __STL_MEMBER_TEMPLATES */</span></span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> __STD_QUALIFIER</span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">==</span> <span class="token function">__STL_NULL_TMPL_ARGS</span> <span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> __STD_QUALIFIER</span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">&lt;</span>  <span class="token function">__STL_NULL_TMPL_ARGS</span> <span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __STL_MEMBER_TEMPLATES */</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type      value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type       size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span>          _Sequence                  container_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference       reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Sequence c<span class="token punctuation">;</span> <span class="token comment">// 底层容器</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Sequence<span class="token operator">&amp;</span> __c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span>__c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 只能从尾部 push</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                          <span class="token comment">// 只能从头部 pop</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运算符重载也是借用底层容器的运算符：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Sequence</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span></span>
<span class="line"><span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Sequence<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Sequence<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">==</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Sequence</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span></span>
<span class="line"><span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Sequence<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Sequence<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-6-3-queue-没有迭代器" tabindex="-1"><a class="header-anchor" href="#_4-6-3-queue-没有迭代器"><span>4.6.3 queue 没有迭代器</span></a></h2><p>queue 不提供遍历功能，也不提供迭代器。</p><h2 id="_4-6-4-以-list-作为-queue-的底层容器" tabindex="-1"><a class="header-anchor" href="#_4-6-4-以-list-作为-queue-的底层容器"><span>4.6.4 以 list 作为 queue 的底层容器</span></a></h2><p>除了 deque，list 也是双向开口的数据结构，同样可以适配到 queue 上：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> list_queue<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,18)]))}const u=s(t,[["render",o],["__file","Chapter 4.6 - queue.html.vue"]]),i=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%204%20-%20%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%204.6%20-%20queue.html","title":"Chapter 4.6 - queue","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.6.1 queue 概述","slug":"_4-6-1-queue-概述","link":"#_4-6-1-queue-概述","children":[]},{"level":2,"title":"4.6.2 queue 定义完整列表","slug":"_4-6-2-queue-定义完整列表","link":"#_4-6-2-queue-定义完整列表","children":[]},{"level":2,"title":"4.6.3 queue 没有迭代器","slug":"_4-6-3-queue-没有迭代器","link":"#_4-6-3-queue-没有迭代器","children":[]},{"level":2,"title":"4.6.4 以 list 作为 queue 的底层容器","slug":"_4-6-4-以-list-作为-queue-的底层容器","link":"#_4-6-4-以-list-作为-queue-的底层容器","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 4 - 序列式容器/Chapter 4.6 - queue.md"}');export{u as comp,i as data};
