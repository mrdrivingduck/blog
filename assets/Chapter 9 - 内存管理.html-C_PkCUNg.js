import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="chapter-9-内存管理" tabindex="-1"><a class="header-anchor" href="#chapter-9-内存管理"><span>Chapter 9 - 内存管理</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 11 / 20 22:57</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_9-1-概述" tabindex="-1"><a class="header-anchor" href="#_9-1-概述"><span>9.1 概述</span></a></h2><p>为什么不直接使用 ANSI C 提供的 <code>malloc()</code> 和 <code>free()</code> 呢？</p><ul><li>反复调用这两个函数，会导致内存碎片</li><li>执行时间不确定，不适合实时 OS 使用</li></ul><p>μC/OS-II 的实现方式：将大块的连续内存（用户提供，可以是静态分配的数组或初始动态分配的内存）进行分区，将每个分区分成整数个大小相同的内存块，将这些内存块用链表串起来，由 μC/OS-II 的内存分配和释放函数来使用和释放。解决了内存碎片的问题。比如，将一块 320B 的内存组织成 10 个 32B 内存块的链表，这样每次从链表中可以分配 32B 的内存，还可以有多个不同内存块大小的分区。</p><p>内存管理函数可以在编译前被剪裁。</p><p>内存控制块 (Memory Control Blocks, MCB) 是用于实现内存管理的数据结构，每个 <strong>内存分区</strong> 都有其自己的 MCB。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">os_mem</span> <span class="token punctuation">{</span>                   <span class="token comment">/* MEMORY CONTROL BLOCK                                      */</span></span>
<span class="line">    <span class="token keyword">void</span>   <span class="token operator">*</span>OSMemAddr<span class="token punctuation">;</span>                    <span class="token comment">/* Pointer to beginning of memory partition                  */</span></span>
<span class="line">    <span class="token keyword">void</span>   <span class="token operator">*</span>OSMemFreeList<span class="token punctuation">;</span>                <span class="token comment">/* Pointer to list of free memory blocks                     */</span></span>
<span class="line">    INT32U  OSMemBlkSize<span class="token punctuation">;</span>                 <span class="token comment">/* Size (in bytes) of each block of memory                   */</span></span>
<span class="line">    INT32U  OSMemNBlks<span class="token punctuation">;</span>                   <span class="token comment">/* Total number of blocks in this partition                  */</span></span>
<span class="line">    INT32U  OSMemNFree<span class="token punctuation">;</span>                   <span class="token comment">/* Number of memory blocks remaining in this partition       */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_MEM_NAME_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    INT8U  <span class="token operator">*</span>OSMemName<span class="token punctuation">;</span>                    <span class="token comment">/* Memory partition name                                     */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">}</span> OS_MEM<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>OSMemAddr</code> 指向内存分区首地址</li><li><code>OSMemFreeList</code> 用于组织系统中所有的空闲 MCB</li><li><code>OSMemBlkSize</code> 表示内存分区中内存块的大小</li><li><code>OSMemNBlks</code> 表示内存分区中内存块的数量</li><li><code>OSMemNFree</code> 表示内存分区中空闲内存块数量</li></ul><p>可以在编译前定义 <code>OS_MAX_MEM_PART</code>，决定了系统中的最大分区数。系统初始化时会根据这个值，建立空闲 MCB 链表。</p><h2 id="_9-2-建立内存分区-osmemcreate-函数" tabindex="-1"><a class="header-anchor" href="#_9-2-建立内存分区-osmemcreate-函数"><span>9.2 建立内存分区 - OSMemCreate() 函数</span></a></h2><p>建立并初始化一块内存分区。需要给出的参数：</p><ul><li>内存分区的起始地址 - 内存分区可以用静态数组或初始化前使用 <code>malloc()</code> 建立</li><li>内存块的数量</li><li>每个内存块的大小</li><li>指向错误代码变量的指针</li></ul><p>原理：</p><ul><li>从空闲 MCB 中取一个 MCB</li><li>根据参数，将每个内存块串成一个空闲内存块单向链表</li><li>每个空闲内存块的开始处存一个指针，指向下一个空闲内存块</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                        CREATE A MEMORY PARTITION</span>
<span class="line">*</span>
<span class="line">* Description : Create a fixed-sized memory partition that will be managed by uC/OS-II.</span>
<span class="line">*</span>
<span class="line">* Arguments   : addr     is the starting address of the memory partition</span>
<span class="line">*</span>
<span class="line">*               nblks    is the number of memory blocks to create from the partition.</span>
<span class="line">*</span>
<span class="line">*               blksize  is the size (in bytes) of each block in the memory partition.</span>
<span class="line">*</span>
<span class="line">*               perr     is a pointer to a variable containing an error message which will be set by</span>
<span class="line">*                        this function to either:</span>
<span class="line">*</span>
<span class="line">*                        OS_ERR_NONE              if the memory partition has been created correctly.</span>
<span class="line">*                        OS_ERR_MEM_INVALID_ADDR  if you are specifying an invalid address for the memory</span>
<span class="line">*                                                 storage of the partition or, the block does not align</span>
<span class="line">*                                                 on a pointer boundary</span>
<span class="line">*                        OS_ERR_MEM_INVALID_PART  no free partitions available</span>
<span class="line">*                        OS_ERR_MEM_INVALID_BLKS  user specified an invalid number of blocks (must be &gt;= 2)</span>
<span class="line">*                        OS_ERR_MEM_INVALID_SIZE  user specified an invalid block size</span>
<span class="line">*                                                   - must be greater than the size of a pointer</span>
<span class="line">*                                                   - must be able to hold an integral number of pointers</span>
<span class="line">* Returns    : != (OS_MEM *)0  is the partition was created</span>
<span class="line">*              == (OS_MEM *)0  if the partition was not created because of invalid arguments or, no</span>
<span class="line">*                              free partition is available.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line">OS_MEM  <span class="token operator">*</span><span class="token function">OSMemCreate</span> <span class="token punctuation">(</span><span class="token keyword">void</span>   <span class="token operator">*</span>addr<span class="token punctuation">,</span></span>
<span class="line">                      INT32U  nblks<span class="token punctuation">,</span></span>
<span class="line">                      INT32U  blksize<span class="token punctuation">,</span></span>
<span class="line">                      INT8U  <span class="token operator">*</span>perr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    OS_MEM    <span class="token operator">*</span>pmem<span class="token punctuation">;</span></span>
<span class="line">    INT8U     <span class="token operator">*</span>pblk<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span>     <span class="token operator">*</span><span class="token operator">*</span>plink<span class="token punctuation">;</span></span>
<span class="line">    INT32U     loops<span class="token punctuation">;</span></span>
<span class="line">    INT32U     i<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                          </span><span class="token comment">/* Allocate storage for CPU status register      */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>perr <span class="token operator">==</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL_IEC61508</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSSafetyCriticalStartFlag <span class="token operator">==</span> OS_TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">/* Must pass a valid address for the memory part.*/</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_MEM_INVALID_ADDR<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>INT32U<span class="token punctuation">)</span>addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/* Must be pointer size aligned                */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_MEM_INVALID_ADDR<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nblks <span class="token operator">&lt;</span> <span class="token number">2u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                 <span class="token comment">/* Must have at least 2 blocks per partition     */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_MEM_INVALID_BLKS<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>blksize <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">/* Must contain space for at least a pointer     */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_MEM_INVALID_SIZE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pmem <span class="token operator">=</span> OSMemFreeList<span class="token punctuation">;</span>                             <span class="token comment">/* Get next free memory partition                */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSMemFreeList <span class="token operator">!=</span> <span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">/* See if pool of free partitions was empty      */</span></span>
<span class="line">        OSMemFreeList <span class="token operator">=</span> <span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span>OSMemFreeList<span class="token operator">-&gt;</span>OSMemFreeList<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem <span class="token operator">==</span> <span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">/* See if we have a memory partition             */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_MEM_INVALID_PART<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    plink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>                            <span class="token comment">/* Create linked list of free memory blocks      */</span></span>
<span class="line">    pblk  <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span></span>
<span class="line">    loops  <span class="token operator">=</span> nblks <span class="token operator">-</span> <span class="token number">1u</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        pblk <span class="token operator">+=</span>  blksize<span class="token punctuation">;</span>                             <span class="token comment">/* Point to the FOLLOWING block                  */</span></span>
<span class="line">       <span class="token operator">*</span>plink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span>  <span class="token operator">*</span><span class="token punctuation">)</span>pblk<span class="token punctuation">;</span>                        <span class="token comment">/* Save pointer to NEXT block in CURRENT block   */</span></span>
<span class="line">        plink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>pblk<span class="token punctuation">;</span>                        <span class="token comment">/* Position to  NEXT      block                  */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">*</span>plink              <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token comment">/* Last memory block points to NULL              */</span></span>
<span class="line">    pmem<span class="token operator">-&gt;</span>OSMemAddr     <span class="token operator">=</span> addr<span class="token punctuation">;</span>                       <span class="token comment">/* Store start address of memory partition       */</span></span>
<span class="line">    pmem<span class="token operator">-&gt;</span>OSMemFreeList <span class="token operator">=</span> addr<span class="token punctuation">;</span>                       <span class="token comment">/* Initialize pointer to pool of free blocks     */</span></span>
<span class="line">    pmem<span class="token operator">-&gt;</span>OSMemNFree    <span class="token operator">=</span> nblks<span class="token punctuation">;</span>                      <span class="token comment">/* Store number of free blocks in MCB            */</span></span>
<span class="line">    pmem<span class="token operator">-&gt;</span>OSMemNBlks    <span class="token operator">=</span> nblks<span class="token punctuation">;</span></span>
<span class="line">    pmem<span class="token operator">-&gt;</span>OSMemBlkSize  <span class="token operator">=</span> blksize<span class="token punctuation">;</span>                    <span class="token comment">/* Store block size of each memory blocks        */</span></span>
<span class="line">    <span class="token operator">*</span>perr               <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>pmem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-3-获取一个内存块-osmemget-函数" tabindex="-1"><a class="header-anchor" href="#_9-3-获取一个内存块-osmemget-函数"><span>9.3 获取一个内存块 - OSMemGet() 函数</span></a></h2><p>从已经建立的内存分区中申请获取一个内存块。</p><p>原理：</p><ul><li>从内存分区中抽取第一个空闲的内存块</li><li>调整 <code>OSMemFreeList</code> 指针，使其指向下一个空闲内存块</li><li>维护空闲内存块的数量</li></ul><p>用户必须知道内存分区中内存块的大小，如果暂时没有内存块可用，函数不会等待，而是立刻返回 <code>NULL</code>。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                          GET A MEMORY BLOCK</span>
<span class="line">*</span>
<span class="line">* Description : Get a memory block from a partition</span>
<span class="line">*</span>
<span class="line">* Arguments   : pmem    is a pointer to the memory partition control block</span>
<span class="line">*</span>
<span class="line">*               perr    is a pointer to a variable containing an error message which will be set by this</span>
<span class="line">*                       function to either:</span>
<span class="line">*</span>
<span class="line">*                       OS_ERR_NONE             if the memory partition has been created correctly.</span>
<span class="line">*                       OS_ERR_MEM_NO_FREE_BLKS if there are no more free memory blocks to allocate to caller</span>
<span class="line">*                       OS_ERR_MEM_INVALID_PMEM if you passed a NULL pointer for &#39;pmem&#39;</span>
<span class="line">*</span>
<span class="line">* Returns     : A pointer to a memory block if no error is detected</span>
<span class="line">*               A pointer to NULL if an error is detected</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span>  <span class="token operator">*</span><span class="token function">OSMemGet</span> <span class="token punctuation">(</span>OS_MEM  <span class="token operator">*</span>pmem<span class="token punctuation">,</span></span>
<span class="line">                 INT8U   <span class="token operator">*</span>perr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span>      <span class="token operator">*</span>pblk<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                          </span><span class="token comment">/* Allocate storage for CPU status register      */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>perr <span class="token operator">==</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem <span class="token operator">==</span> <span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">/* Must point to a valid memory partition        */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_MEM_INVALID_PMEM<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem<span class="token operator">-&gt;</span>OSMemNFree <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment">/* See if there are any free memory blocks       */</span></span>
<span class="line">        pblk                <span class="token operator">=</span> pmem<span class="token operator">-&gt;</span>OSMemFreeList<span class="token punctuation">;</span>    <span class="token comment">/* Yes, point to next free memory block          */</span></span>
<span class="line">        pmem<span class="token operator">-&gt;</span>OSMemFreeList <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>pblk<span class="token punctuation">;</span>         <span class="token comment">/*      Adjust pointer to new free list          */</span></span>
<span class="line">        pmem<span class="token operator">-&gt;</span>OSMemNFree<span class="token operator">--</span><span class="token punctuation">;</span>                           <span class="token comment">/*      One less memory block in this partition  */</span></span>
<span class="line">        <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span>                          <span class="token comment">/*      No error                                 */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>pblk<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">/*      Return memory block to caller            */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_MEM_NO_FREE_BLKS<span class="token punctuation">;</span>                  <span class="token comment">/* No,  Notify caller of empty memory partition  */</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">/*      Return NULL pointer to caller            */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-4-释放一个内存块-osmemput-函数" tabindex="-1"><a class="header-anchor" href="#_9-4-释放一个内存块-osmemput-函数"><span>9.4 释放一个内存块 - OSMemPut() 函数</span></a></h2><p>释放一个内存块。</p><p>原理：</p><ul><li>检查 MCB 查看内存分区是否已满，如果已满，说明分配和释放时出现了错误</li><li>如果未满，将内存块插入到空闲内存块链表的最前面</li></ul><p>释放内存块时，必须放回原先申请的内存分区中，不能错放。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                         RELEASE A MEMORY BLOCK</span>
<span class="line">*</span>
<span class="line">* Description : Returns a memory block to a partition</span>
<span class="line">*</span>
<span class="line">* Arguments   : pmem    is a pointer to the memory partition control block</span>
<span class="line">*</span>
<span class="line">*               pblk    is a pointer to the memory block being released.</span>
<span class="line">*</span>
<span class="line">* Returns     : OS_ERR_NONE              if the memory block was inserted into the partition</span>
<span class="line">*               OS_ERR_MEM_FULL          if you are returning a memory block to an already FULL memory</span>
<span class="line">*                                        partition (You freed more blocks than you allocated!)</span>
<span class="line">*               OS_ERR_MEM_INVALID_PMEM  if you passed a NULL pointer for &#39;pmem&#39;</span>
<span class="line">*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line">INT8U  <span class="token function">OSMemPut</span> <span class="token punctuation">(</span>OS_MEM  <span class="token operator">*</span>pmem<span class="token punctuation">,</span></span>
<span class="line">                 <span class="token keyword">void</span>    <span class="token operator">*</span>pblk<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                     </span><span class="token comment">/* Allocate storage for CPU status register           */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem <span class="token operator">==</span> <span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">/* Must point to a valid memory partition             */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_MEM_INVALID_PMEM<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pblk <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">/* Must release a valid block                         */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_MEM_INVALID_PBLK<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem<span class="token operator">-&gt;</span>OSMemNFree <span class="token operator">&gt;=</span> pmem<span class="token operator">-&gt;</span>OSMemNBlks<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* Make sure all blocks not already returned          */</span></span>
<span class="line">        <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_MEM_FULL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>pblk      <span class="token operator">=</span> pmem<span class="token operator">-&gt;</span>OSMemFreeList<span class="token punctuation">;</span>   <span class="token comment">/* Insert released block into free block list         */</span></span>
<span class="line">    pmem<span class="token operator">-&gt;</span>OSMemFreeList <span class="token operator">=</span> pblk<span class="token punctuation">;</span></span>
<span class="line">    pmem<span class="token operator">-&gt;</span>OSMemNFree<span class="token operator">++</span><span class="token punctuation">;</span>                          <span class="token comment">/* One more memory block in this partition            */</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">/* Notify caller that memory block was released       */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-5-查询内存分区的状态-osmemquery-函数" tabindex="-1"><a class="header-anchor" href="#_9-5-查询内存分区的状态-osmemquery-函数"><span>9.5 查询内存分区的状态 - OSMemQuery() 函数</span></a></h2><p>查询指定内存分区的有关信息，将信息复制到 <code>OS_MEM_DATA</code> 数据结构中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">os_mem_data</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span>   <span class="token operator">*</span>OSAddr<span class="token punctuation">;</span>                    <span class="token comment">/* Pointer to the beginning address of the memory partition     */</span></span>
<span class="line">    <span class="token keyword">void</span>   <span class="token operator">*</span>OSFreeList<span class="token punctuation">;</span>                <span class="token comment">/* Pointer to the beginning of the free list of memory blocks   */</span></span>
<span class="line">    INT32U  OSBlkSize<span class="token punctuation">;</span>                 <span class="token comment">/* Size (in bytes) of each memory block                         */</span></span>
<span class="line">    INT32U  OSNBlks<span class="token punctuation">;</span>                   <span class="token comment">/* Total number of blocks in the partition                      */</span></span>
<span class="line">    INT32U  OSNFree<span class="token punctuation">;</span>                   <span class="token comment">/* Number of memory blocks free                                 */</span></span>
<span class="line">    INT32U  OSNUsed<span class="token punctuation">;</span>                   <span class="token comment">/* Number of memory blocks used                                 */</span></span>
<span class="line"><span class="token punctuation">}</span> OS_MEM_DATA<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理：</p><ul><li>直接将 MCB 中的变量复制到 <code>OS_MEM_DATA</code> 中</li><li>最后一个变量的值 - 正在使用的内存块数量 <code>OSNUsed</code> - 直接通过计算得出</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                          QUERY MEMORY PARTITION</span>
<span class="line">*</span>
<span class="line">* Description : This function is used to determine the number of free memory blocks and the number of</span>
<span class="line">*               used memory blocks from a memory partition.</span>
<span class="line">*</span>
<span class="line">* Arguments   : pmem        is a pointer to the memory partition control block</span>
<span class="line">*</span>
<span class="line">*               p_mem_data  is a pointer to a structure that will contain information about the memory</span>
<span class="line">*                           partition.</span>
<span class="line">*</span>
<span class="line">* Returns     : OS_ERR_NONE               if no errors were found.</span>
<span class="line">*               OS_ERR_MEM_INVALID_PMEM   if you passed a NULL pointer for &#39;pmem&#39;</span>
<span class="line">*               OS_ERR_MEM_INVALID_PDATA  if you passed a NULL pointer to the data recipient.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_MEM_QUERY_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">INT8U  <span class="token function">OSMemQuery</span> <span class="token punctuation">(</span>OS_MEM       <span class="token operator">*</span>pmem<span class="token punctuation">,</span></span>
<span class="line">                   OS_MEM_DATA  <span class="token operator">*</span>p_mem_data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                     </span><span class="token comment">/* Allocate storage for CPU status register           */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem <span class="token operator">==</span> <span class="token punctuation">(</span>OS_MEM <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">/* Must point to a valid memory partition             */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_MEM_INVALID_PMEM<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p_mem_data <span class="token operator">==</span> <span class="token punctuation">(</span>OS_MEM_DATA <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* Must release a valid storage area for the data     */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_MEM_INVALID_PDATA<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    p_mem_data<span class="token operator">-&gt;</span>OSAddr     <span class="token operator">=</span> pmem<span class="token operator">-&gt;</span>OSMemAddr<span class="token punctuation">;</span></span>
<span class="line">    p_mem_data<span class="token operator">-&gt;</span>OSFreeList <span class="token operator">=</span> pmem<span class="token operator">-&gt;</span>OSMemFreeList<span class="token punctuation">;</span></span>
<span class="line">    p_mem_data<span class="token operator">-&gt;</span>OSBlkSize  <span class="token operator">=</span> pmem<span class="token operator">-&gt;</span>OSMemBlkSize<span class="token punctuation">;</span></span>
<span class="line">    p_mem_data<span class="token operator">-&gt;</span>OSNBlks    <span class="token operator">=</span> pmem<span class="token operator">-&gt;</span>OSMemNBlks<span class="token punctuation">;</span></span>
<span class="line">    p_mem_data<span class="token operator">-&gt;</span>OSNFree    <span class="token operator">=</span> pmem<span class="token operator">-&gt;</span>OSMemNFree<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    p_mem_data<span class="token operator">-&gt;</span>OSNUsed    <span class="token operator">=</span> p_mem_data<span class="token operator">-&gt;</span>OSNBlks <span class="token operator">-</span> p_mem_data<span class="token operator">-&gt;</span>OSNFree<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>                                           <span class="token comment">/* OS_MEM_QUERY_EN                                    */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const c=n(t,[["render",l],["__file","Chapter 9 - 内存管理.html.vue"]]),r=JSON.parse('{"path":"/uc-os-ii-code-notes/Chapter%209%20-%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","title":"Chapter 9 - 内存管理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"9.1 概述","slug":"_9-1-概述","link":"#_9-1-概述","children":[]},{"level":2,"title":"9.2 建立内存分区 - OSMemCreate() 函数","slug":"_9-2-建立内存分区-osmemcreate-函数","link":"#_9-2-建立内存分区-osmemcreate-函数","children":[]},{"level":2,"title":"9.3 获取一个内存块 - OSMemGet() 函数","slug":"_9-3-获取一个内存块-osmemget-函数","link":"#_9-3-获取一个内存块-osmemget-函数","children":[]},{"level":2,"title":"9.4 释放一个内存块 - OSMemPut() 函数","slug":"_9-4-释放一个内存块-osmemput-函数","link":"#_9-4-释放一个内存块-osmemput-函数","children":[]},{"level":2,"title":"9.5 查询内存分区的状态 - OSMemQuery() 函数","slug":"_9-5-查询内存分区的状态-osmemquery-函数","link":"#_9-5-查询内存分区的状态-osmemquery-函数","children":[]}],"git":{},"filePathRelative":"uc-os-ii-code-notes/Chapter 9 - 内存管理.md"}');export{c as comp,r as data};
