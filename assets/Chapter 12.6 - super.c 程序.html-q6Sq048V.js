import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(c,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-12-6-super-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-6-super-c-程序"><span>Chapter 12.6 - super.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 06 14:03</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-6-super-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-6-super-c-程序"><span>12.6 super.c 程序</span></a></h2><h3 id="_12-6-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-6-1-功能描述"><span>12.6.1 功能描述</span></a></h3><p>对文件系统中的超级块进行操作的函数。此外还有文件系统加载 (mount) / 卸载 (unmount) 的系统调用。</p><h3 id="_12-6-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-6-2-代码注释"><span>12.6.2 代码注释</span></a></h3><h4 id="super-block-的数据结构定义" tabindex="-1"><a class="header-anchor" href="#super-block-的数据结构定义"><span>Super block 的数据结构定义</span></a></h4><p>磁盘上的 super block：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_ninodes<span class="token punctuation">;</span> <span class="token comment">// inode 数量</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_nzones<span class="token punctuation">;</span> <span class="token comment">// 逻辑块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_imap_blocks<span class="token punctuation">;</span> <span class="token comment">// inode bitmap 所占的数据块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_zmap_blocks<span class="token punctuation">;</span> <span class="token comment">// 逻辑块 bitmap 所占的数据块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_firstdatazone<span class="token punctuation">;</span> <span class="token comment">// 第一个数据逻辑块</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_log_zone_size<span class="token punctuation">;</span> <span class="token comment">// 每个逻辑块包含的数据块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> s_max_size<span class="token punctuation">;</span> <span class="token comment">// 文件最大长度</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_magic<span class="token punctuation">;</span> <span class="token comment">// 文件系统 magic</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存中的 super block：(前面的部分和磁盘中的 super block 完全相同)</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_ninodes<span class="token punctuation">;</span> <span class="token comment">// inode 数量</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_nzones<span class="token punctuation">;</span> <span class="token comment">// 逻辑块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_imap_blocks<span class="token punctuation">;</span> <span class="token comment">// inode bitmap 所占的数据块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_zmap_blocks<span class="token punctuation">;</span> <span class="token comment">// 逻辑块 bitmap 所占的数据块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_firstdatazone<span class="token punctuation">;</span> <span class="token comment">// 第一个数据逻辑块</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_log_zone_size<span class="token punctuation">;</span> <span class="token comment">// 每个逻辑块包含的数据块数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> s_max_size<span class="token punctuation">;</span> <span class="token comment">// 文件最大长度</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_magic<span class="token punctuation">;</span> <span class="token comment">// 文件系统 magic</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> s_imap<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// inode bitmap 所在的缓冲块指针，8 块</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> s_zmap<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑块 bitmap 所在的缓冲块指针，8 块</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_dev<span class="token punctuation">;</span> <span class="token comment">// 超级块所在的设备号</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> s_isup<span class="token punctuation">;</span> <span class="token comment">// 被安装到的文件系统根目录的 inode</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> s_imount<span class="token punctuation">;</span> <span class="token comment">// 被安装到的 inode</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> s_time<span class="token punctuation">;</span> <span class="token comment">// 修改时间</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> s_wait<span class="token punctuation">;</span> <span class="token comment">// 等待该 super block 的进程</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s_lock<span class="token punctuation">;</span> <span class="token comment">// 被锁定标志</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s_rd_only<span class="token punctuation">;</span> <span class="token comment">// 只读标志</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s_dirt<span class="token punctuation">;</span> <span class="token comment">// 已修改标志</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">super_block</span> super_block<span class="token punctuation">[</span>NR_SUPER<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 8 项</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="测试指定位偏移处-bit-位的值" tabindex="-1"><a class="header-anchor" href="#测试指定位偏移处-bit-位的值"><span>测试指定位偏移处 bit 位的值</span></a></h4><ul><li>仅测试并返回 bit 的值</li><li>不对 bit 进行任何改动</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">set_bit</span><span class="token expression"><span class="token punctuation">(</span>bitnr<span class="token punctuation">,</span> addr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token keyword">register</span> <span class="token keyword">int</span> __res <span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;ax&quot;</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;bt %2,%3;setb %%al&quot;</span><span class="token expression"><span class="token operator">:</span></span><span class="token string">&quot;=a&quot;</span><span class="token expression"><span class="token punctuation">(</span>__res<span class="token punctuation">)</span><span class="token operator">:</span></span><span class="token string">&quot;a&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;r&quot;</span><span class="token expression"><span class="token punctuation">(</span>bitnr<span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;m&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression">__res<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lock-super-锁定超级块" tabindex="-1"><a class="header-anchor" href="#lock-super-锁定超级块"><span>lock_super() - 锁定超级块</span></a></h4><p>若超级块被锁定，则将当前任务置为不可中断的等待状态，直到超级块解锁，任务被明确唤醒。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lock_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sb<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="free-super-对指定超级块解锁" tabindex="-1"><a class="header-anchor" href="#free-super-对指定超级块解锁"><span>free_super() - 对指定超级块解锁</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">free_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sb<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="wait-on-super-睡眠等待超级块解锁" tabindex="-1"><a class="header-anchor" href="#wait-on-super-睡眠等待超级块解锁"><span>wait_on_super() - 睡眠等待超级块解锁</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">wait_on_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-super-取指定设备的超级块" tabindex="-1"><a class="header-anchor" href="#get-super-取指定设备的超级块"><span>get_super() - 取指定设备的超级块</span></a></h4><p>在内存的超级块表中搜索指定设备 dev 的超级块结构体：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> <span class="token function">get_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> s<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    s <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> super_block<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> super_block <span class="token operator">+</span> NR_SUPER<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">wait_on_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待超级块解锁</span></span>
<span class="line">            <span class="token comment">// 睡眠后需要重新判断</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">return</span> s<span class="token punctuation">;</span></span>
<span class="line">            s <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> super_block<span class="token punctuation">;</span> <span class="token comment">// 从头扫描</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">            s<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="put-super-放回指定设备的超级块" tabindex="-1"><a class="header-anchor" href="#put-super-放回指定设备的超级块"><span>put_super() - 放回指定设备的超级块</span></a></h4><ol><li>释放设备使用的超级块数组项 - <code>s_dev</code> 置为 0</li><li>释放设备的 inode bitmap 和逻辑块 bitmap 占用的高速缓冲。如果超级块对应的是根文件系统，或其某个 inode 上已经安装了其它文件系统，则不能释放。</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">put_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">==</span> ROOT_DEV<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 根文件系统设备</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;root diskette changed: prepare for armageddon\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Mounted disk changed - tssk, tssk\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 找到指定设备的超级块了</span></span>
<span class="line">    <span class="token function">lock_super</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁定该超级块</span></span>
<span class="line">    sb<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 释放超级块表项</span></span>
<span class="line">    <span class="token comment">// 释放 bitmap 缓冲区</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> I_MAP_SLOTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Z_MAP_SLOTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">free_super</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 超级块解锁</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read-super-读取指定设备的超级块" tabindex="-1"><a class="header-anchor" href="#read-super-读取指定设备的超级块"><span>read_super() - 读取指定设备的超级块</span></a></h4><ol><li>如果设备 dev 上的文件系统超级块已经在超级块表中，则直接返回超级块项的指针</li><li>否则从设备 dev 上读取超级块到缓冲区，再从缓冲区复制到超级块数组中：</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> <span class="token function">read_super</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> s<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> block<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">check_disk_change</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 超级块已在超级块表中</span></span>
<span class="line">        <span class="token keyword">return</span> s<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 否则在超级块表中寻找一个空闲项</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> super_block<span class="token punctuation">;</span> <span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;=</span> NR_SUPER <span class="token operator">+</span> super_block<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 没找到空闲项</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token operator">-&gt;</span>s_dev<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// s_dev == 0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 该超级块被用于设备 dev 上的文件系统</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> dev<span class="token punctuation">;</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_isup <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_imount <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_rd_only <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">lock_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁定超级块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 读取超级块到缓冲区中</span></span>
<span class="line">        <span class="token comment">// 失败，则释放</span></span>
<span class="line">        s<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 从缓冲区复制到内存中的超级块表中</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查超级块的有效性</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_magic <span class="token operator">!=</span> SUPER_MAGIC<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 不是正确的文件系统</span></span>
<span class="line">        s<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化内存超级块结构的 bitmap 空间</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> I_MAP_SLOTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Z_MAP_SLOTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// inode bitmap 保存在 2 号块开始的逻辑块中</span></span>
<span class="line">    block <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读取 inode bitmap 到缓冲区中</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token operator">-&gt;</span>s_imap_blocks<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            block<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读取逻辑块 bitmap 到缓冲区中</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token operator">-&gt;</span>s_zmap_blocks<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            block<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">+</span> s<span class="token operator">-&gt;</span>s_imap_blocks <span class="token operator">+</span> s<span class="token operator">-&gt;</span>s_zmap_blocks<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 读出的 bitmap 块数不等于位图该有的逻辑块数</span></span>
<span class="line">        <span class="token comment">// 释放所有缓冲块</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> I_MAP_SLOTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Z_MAP_SLOTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        s<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 释放数组项</span></span>
<span class="line">        <span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解锁</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 将 bitmap 的第 0 位置 1</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">free_super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> s<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-umount-系统调用-卸载文件系统" tabindex="-1"><a class="header-anchor" href="#sys-umount-系统调用-卸载文件系统"><span>sys_umount() - 系统调用 - 卸载文件系统</span></a></h4><ol><li>根据块设备文件名，找到对应的 inode，从而获得其设备号</li><li>复位文件系统超级块的相应字段，释放 bitmap 占用的缓冲块</li><li>最后执行高速缓冲与设备上的同步操作</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_umount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> dev_name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> dev<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 找设备对应的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>dev_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    dev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 设备号</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 不是块设备</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放回 inode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOTBLK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 已经取得设备号了，所以可以将 inode 放回</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 检查卸载条件</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">==</span> ROOT_DEV<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 根文件系统不能被卸载</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 超级块表中没有该超级块</span></span>
<span class="line">        <span class="token comment">// 文件系统没有被安装</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token operator">-&gt;</span>i_mount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 安装标志未置位</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Mounted inode has i_mount=0\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 扫描内存 inode 表</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>inode <span class="token operator">=</span> inode_table <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span> inode <span class="token operator">&lt;</span> inode_table <span class="token operator">+</span> NR_INODE<span class="token punctuation">;</span> inode<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">==</span> dev <span class="token operator">&amp;&amp;</span> inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 有进程正在使用该设备上的文件</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 卸载条件已满足</span></span>
<span class="line">    sb<span class="token operator">-&gt;</span>s_imount<span class="token operator">-&gt;</span>i_mount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 被安装的 inode 复位安装标志</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放被安装的 inode</span></span>
<span class="line">    sb<span class="token operator">-&gt;</span>i_imount <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_isup<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放 root inode</span></span>
<span class="line">    sb<span class="token operator">-&gt;</span>s_isup <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">put_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放设备上的超级块，以及 bitmap 占用的高速缓冲块</span></span>
<span class="line">    <span class="token function">sync_dev</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 高速缓冲同步到设备</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-mount-系统调用-挂载文件系统" tabindex="-1"><a class="header-anchor" href="#sys-mount-系统调用-挂载文件系统"><span>sys_mount() - 系统调用 - 挂载文件系统</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_mount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> dev_name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> dir_name<span class="token punctuation">,</span> <span class="token keyword">int</span> rw_flag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dev_i<span class="token punctuation">,</span> <span class="token operator">*</span> dir_i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> dev<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 根据设备名，找到设备 inode，取得设备号</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dev_i <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>dev_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    dev <span class="token operator">=</span> dev_i<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>dev_i<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dev_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 已经取得设备号了，设备 inode 可以被放回了</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>dev_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 找到挂载点目录的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir_i <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir_i<span class="token operator">-&gt;</span>i_count <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> dir_i<span class="token operator">-&gt;</span>i_num <span class="token operator">==</span> ROOT_INO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 引用计数不为 1 (应当仅在此处被引用)</span></span>
<span class="line">        <span class="token comment">// 根文件系统也安装在这个 inode 上</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>dir_i<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 挂载点不是一个目录 (应当是一个目录！)</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设备 inode、挂载点 inode 检查完毕</span></span>
<span class="line">    <span class="token comment">// 读取文件系统的超级块信息</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">read_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 读取超级块失败</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 文件系统已挂载到了其它地方</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir_i<span class="token operator">-&gt;</span>i_mount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将要安装到的 inode 已挂载了文件系统</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir_i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    sb<span class="token operator">-&gt;</span>s_imount <span class="token operator">=</span> dir_i<span class="token punctuation">;</span> <span class="token comment">// 文件系统挂载点指向指定目录的 inode</span></span>
<span class="line">    dir_i<span class="token operator">-&gt;</span>i_mount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 该目录已挂载文件系统</span></span>
<span class="line">    dir_i<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 挂载点目录 inode 已被修改</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mount-root-挂载根文件系统" tabindex="-1"><a class="header-anchor" href="#mount-root-挂载根文件系统"><span>mount_root() - 挂载根文件系统</span></a></h4><p>在系统初始化时被调用：</p><ol><li>初始化文件表 <code>file_table[]</code> 和超级块表</li><li>读取根文件系统的超级块，并取得 root inode</li><li>统计并显示根文件系统上的可用资源</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">mount_root</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> free<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> mi<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查磁盘 inode 结构体大小</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bad i-node size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 初始化文件表</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_FILE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        file_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 软盘......</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Insert root floppy and press ENTER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">wait_for_keypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 初始化超级块表</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>super_block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>super_block<span class="token punctuation">[</span>NR_SUPER<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>s_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>s_wait <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 挂载根文件系统</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">read_super</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 无法读取超级块</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to mount root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mi <span class="token operator">=</span> <span class="token function">iget</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span> ROOT_INO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 无法获取 root inode</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read root i-node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    mi<span class="token operator">-&gt;</span>i_count <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 被引用 4 次</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>s_isup <span class="token operator">=</span> p<span class="token operator">-&gt;</span>s_imount <span class="token operator">=</span> mi<span class="token punctuation">;</span> <span class="token comment">// 超级块指向 root inode</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>pwd <span class="token operator">=</span> mi<span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>root <span class="token operator">=</span> mi<span class="token punctuation">;</span> <span class="token comment">// 当前进程为 init 进程</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 根文件系统的资源统计</span></span>
<span class="line">    free <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 空闲逻辑块</span></span>
<span class="line">    i <span class="token operator">=</span> p<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">set_bit</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">8191</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// i 在 bitmap 中的位偏移</span></span>
<span class="line">            <span class="token comment">// i&gt;&gt;13 表示 i/8192，即位于哪一个 bitmap 块中</span></span>
<span class="line">            free<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d free blocks\\n\\r&quot;</span><span class="token punctuation">,</span> free<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    free <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 空闲 inode</span></span>
<span class="line">    i <span class="token operator">=</span> p<span class="token operator">-&gt;</span>s_ninodes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">set_bit</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">8191</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            free<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d free inodes\\n\\r&quot;</span><span class="token punctuation">,</span> free<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>s_ninodes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>关于文件系统的挂载：首先需要根据挂载的设备名，找到设备 inode，从而取得设备号 → 找到文件系统的超级块。然后根据挂载点的目录名，找到挂载点目录的 inode；挂载后，文件系统超级块将指向挂载点的 inode，而挂载点的 inode 中则被设定为已经挂载了文件系统。</p><p>挂载根文件系统时，根据根设备号得到根设备的超级块，并且在初始化过程中确定了 root inode。将超级块设定为指向 root inode，也就是根目录，从而完成挂载。</p>`,47)]))}const i=n(t,[["render",o],["__file","Chapter 12.6 - super.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.6%20-%20super.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.6 - super.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.6 super.c 程序","slug":"_12-6-super-c-程序","link":"#_12-6-super-c-程序","children":[{"level":3,"title":"12.6.1 功能描述","slug":"_12-6-1-功能描述","link":"#_12-6-1-功能描述","children":[]},{"level":3,"title":"12.6.2 代码注释","slug":"_12-6-2-代码注释","link":"#_12-6-2-代码注释","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.6 - super.c 程序.md"}');export{i as comp,u as data};
