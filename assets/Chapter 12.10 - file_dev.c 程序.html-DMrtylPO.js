import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-10-file-dev-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-10-file-dev-c-程序"><span>Chapter 12.10 - file_dev.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 10 13:03</p><p>Nanjing, Jiangsu, China</p><hr><p>接上节，用于操作常规文件的低级支持函数，供 <code>read()</code> 和 <code>write()</code> 系统调用使用，即系统调用 <code>sys_write()</code> 和 <code>sys_read()</code>，以及不同设备的低层支持函数：</p><ul><li>访问正规文件：<code>file_write()</code> / <code>file_read()</code></li><li>访问管道文件：<code>pipe_write()</code> / <code>pipe_read()</code></li><li>访问块设备文件：<code>block_write()</code> / <code>block_read()</code></li><li>访问字符设备文件：<code>rw_char()</code></li></ul><p>在系统调用中，根据参数提供的文件描述符的属性，判断出文件属于哪种类型。分别调用相应的处理函数，并进入对应的驱动程序中。</p><h2 id="_12-10-file-dev-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-10-file-dev-c-程序"><span>12.10 file_dev.c 程序</span></a></h2><h3 id="_12-10-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-10-1-功能描述"><span>12.10.1 功能描述</span></a></h3><p>同样也是访问文件数据，但是是通过指定 <strong>文件路径名</strong> 的方式进行操作。函数参数给出 <strong>inode</strong> 和 <strong>文件结构</strong> 的信息：</p><ul><li>inode 用于获取相应设备号</li><li>文件结构用于获得文件当前的读写指针信息</li></ul><p>而上一节 <code>block_dev.c</code> 中的函数则是直接指定了设备号和文件读写位置。</p><h3 id="_12-10-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-10-2-代码注释"><span>12.10.2 代码注释</span></a></h3><h4 id="file-read-读文件函数" tabindex="-1"><a class="header-anchor" href="#file-read-读文件函数"><span>file_read() - 读文件函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">file_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> left<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> nr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">=</span> count<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 要读取的字节小于等于 0</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 找到对应设备上文件数据块号对应的逻辑块号</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">=</span> <span class="token function">bmap</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> <span class="token punctuation">(</span>filp<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">)</span> <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 若逻辑块存在，则将该逻辑块读入缓冲区</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">            bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        nr <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>f_pos <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">;</span> <span class="token comment">// 块内偏移，块内读取的首地址</span></span>
<span class="line">        chars <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">-</span> nr<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在本块内，还需要读取的字节数</span></span>
<span class="line">        <span class="token comment">// 从块内某个位置开始，到块结束处</span></span>
<span class="line">        <span class="token comment">// 一整块</span></span>
<span class="line">        <span class="token comment">// 剩余字节从块头部开始，但不满一块</span></span>
<span class="line">        </span>
<span class="line">        filp<span class="token operator">-&gt;</span>f_pos <span class="token operator">+=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        left <span class="token operator">-=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 复制 chars 字节到用户缓冲区中</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_data <span class="token operator">+</span> nr<span class="token punctuation">;</span> <span class="token comment">// 指向读取首地址</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 复制数据至用户空间</span></span>
<span class="line">                <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 如果对应块不存在，则填充 0 值</span></span>
<span class="line">                <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span> <span class="token comment">// inode 访问时间</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>count <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>count <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span>ERROR<span class="token punctuation">;</span> <span class="token comment">// 返回读取的字节数</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="file-write-写文件函数" tabindex="-1"><a class="header-anchor" href="#file-write-写文件函数"><span>file_write() - 写文件函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">file_write</span><span class="token punctuation">(</span>sturct m_inode <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">off_t</span> pos<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> block<span class="token punctuation">,</span> c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>filp<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;</span> O_APPEND<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 追加模式</span></span>
<span class="line">        <span class="token comment">// 指针指向文件尾部</span></span>
<span class="line">        pos <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token comment">// 否则指针指向文件当前的读写位置</span></span>
<span class="line">        pos <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 已写入字节数 i</span></span>
<span class="line">    <span class="token comment">// 待写入字节数 count</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 寻找 pos 所在文件数据块对应的逻辑块号</span></span>
<span class="line">        <span class="token comment">// 如果不存在，则创建一块</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> <span class="token function">create_block</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> pos <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将对应逻辑块读入缓冲区</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        c <span class="token operator">=</span> pos <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">;</span> <span class="token comment">// 块内偏移</span></span>
<span class="line">        p <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_data <span class="token operator">+</span> c<span class="token punctuation">;</span> <span class="token comment">// 指向写入操作开始位置</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        c <span class="token operator">=</span> BLOCK_SIZE <span class="token operator">-</span> c<span class="token punctuation">;</span> <span class="token comment">// 本缓冲块的剩余可写字节</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> count <span class="token operator">-</span> i<span class="token punctuation">)</span></span>
<span class="line">            c <span class="token operator">=</span> count <span class="token operator">-</span> i<span class="token punctuation">;</span> <span class="token comment">// 待写数据已经写不满本块</span></span>
<span class="line">        </span>
<span class="line">        pos <span class="token operator">+=</span> c<span class="token punctuation">;</span> <span class="token comment">// 调整文件指针</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 文件指针超出文件当前长度</span></span>
<span class="line">            <span class="token comment">// 增加文件长度</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> pos<span class="token punctuation">;</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        i <span class="token operator">+=</span> c<span class="token punctuation">;</span> <span class="token comment">// 累加已写入字节数</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 从用户空间拷贝数据</span></span>
<span class="line">            <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放当前缓冲区</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 数据已全部写入文件</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span> <span class="token comment">// 文件修改时间</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>filp<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;</span> O_APPEND<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调整文件读写指针至写入数据位置结束的地方</span></span>
<span class="line">        filp<span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> pos<span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span> <span class="token comment">// inode 修改时间</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回已写字节数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const i=s(t,[["render",l],["__file","Chapter 12.10 - file_dev.c 程序.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.10%20-%20file_dev.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.10 - file_dev.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.10 file_dev.c 程序","slug":"_12-10-file-dev-c-程序","link":"#_12-10-file-dev-c-程序","children":[{"level":3,"title":"12.10.1 功能描述","slug":"_12-10-1-功能描述","link":"#_12-10-1-功能描述","children":[]},{"level":3,"title":"12.10.2 代码注释","slug":"_12-10-2-代码注释","link":"#_12-10-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.10 - file_dev.c 程序.md"}');export{i as comp,r as data};
