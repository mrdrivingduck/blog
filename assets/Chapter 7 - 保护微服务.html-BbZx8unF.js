import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function o(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="chapter-7-保护微服务" tabindex="-1"><a class="header-anchor" href="#chapter-7-保护微服务"><span>Chapter 7 - 保护微服务</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 08 / 19 23:15</p><p>@Nanjing, Jiangsu, China</p><hr><p>如何验证调用服务的用户具有权限执行他们请求的操作？</p><h2 id="_7-1-oauth-2-简介" tabindex="-1"><a class="header-anchor" href="#_7-1-oauth-2-简介"><span>7.1 OAuth 2 简介</span></a></h2><p>OAuth 2 是一个基于 token 的安全验证和授权框架，分为以下四部分：</p><ol><li>受保护资源 - 比如一个微服务，只有经过授权的微服务才能调用这个微服务</li><li>资源所有者 - 定义哪些应用可以调用受保护的微服务</li><li>应用程序 - 代表用户调用微服务</li><li>OAuth 2 验证服务器 - 向用户颁发 token；或帮助微服务验证 token</li></ol><p>OAuth 2 规范支持四种类型的授权：</p><ul><li>Password (密码)</li><li>Client credential (客户端凭据)</li><li>Authorization code (授权码)</li><li>Implicit (隐式)</li></ul><h2 id="_7-2-从小事做起-使用-spring-和-oauth-2-来保护单个端点" tabindex="-1"><a class="header-anchor" href="#_7-2-从小事做起-使用-spring-和-oauth-2-来保护单个端点"><span>7.2 从小事做起：使用 Spring 和 OAuth 2 来保护单个端点</span></a></h2><p>建立起一个 OAuth 2 的验证服务；另外建立一个已授权的应用程序。通过 OAuth 2 密码授权，这个应用程序的用户中只有验证通过的用户才能访问被保护的服务。</p><h3 id="_7-2-1-建立-oauth-2-验证服务" tabindex="-1"><a class="header-anchor" href="#_7-2-1-建立-oauth-2-验证服务"><span>7.2.1 建立 OAuth 2 验证服务</span></a></h3><p>OAuth 2 验证服务也是一个 Spring Boot 服务。这个服务将验证用户提交的凭据，并向用户颁发 token；当用户使用 token 调用被保护的服务时，验证服务将验证 token 是否有效。</p><p>对于验证服务，需要引入 Maven 依赖项，并在其引导类上添加注解 <code>@EnableAuthorizationServer</code>。</p><h3 id="_7-2-2-使用-oauth-2-服务注册应用程序" tabindex="-1"><a class="header-anchor" href="#_7-2-2-使用-oauth-2-服务注册应用程序"><span>7.2.2 使用 OAuth 2 服务注册应用程序</span></a></h3><p>需要定义哪些应用程序能够通过 OAuth 2 认证服务访问被保护的资源。首先，需要继承 <code>AuthorizationServerConfigurerAdapter</code> 类，并重写其中的 <code>configure()</code> 函数。这个函数中定义了哪些应用程序 (客户端) 能够访问被 OAuth 2 认证服务保护的服务。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    clients<span class="token punctuation">.</span><span class="token function">inmemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">&quot;eagleeye&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token string">&quot;thisissecret&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">&quot;refresh_token&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;client_credentials&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">&quot;webclient&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mobileclient&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应用程序的信息，这里支持内存存储和 JDBC 存储 - 代码中的 <code>inmemory()</code> 表示使用内存存储。<code>secret()</code> 中的密钥会在颁发 token 时被使用到。<code>authorizedGrantTypes()</code> 中定义了以逗号分隔的授权类型列表，<code>scopes()</code> 定义了获取 token 时允许的作用域。通过定义作用域，可以细化不同客户端访问服务时的规则。</p><h3 id="_7-2-3-配置-eagleeye-用户" tabindex="-1"><a class="header-anchor" href="#_7-2-3-配置-eagleeye-用户"><span>7.2.3 配置 EagleEye 用户</span></a></h3><p>需要定义个人用户的 <strong>凭据</strong> 和 <strong>角色</strong>。Spring 可以从内存、JDBC 关系数据库或 LDAP 服务器中存储和检索用户信息 (凭据 + 角色)。这里也使用内存存储。与上述类似，要继承 <code>WebSecurityConfigurer</code>，并重写 <code>configure()</code> 函数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">&quot;john.carnell&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;password1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">&quot;william.woodward&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;password2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ADMIN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就类似数据库了。里面存储了两个用户的用户名和密码，以及他们所属的角色。</p><h3 id="_7-2-4-验证用户" tabindex="-1"><a class="header-anchor" href="#_7-2-4-验证用户"><span>7.2.4 验证用户</span></a></h3><p>在 OAuth 2 服务被配置并运行后，就能够开始执行用户验证与 token 颁发流程。这里由于认证服务已经被配置了用户的密码，所以用户可以直接使用密码授权方式进行认证，获取 token。</p><p>用户可以请求 OAuth 2 验证服务的 <code>/auth/oauth/token</code> end point，同时给出：</p><ul><li><code>Authorization</code> 头部需要设置为应用程序的 ID 和密钥</li><li><code>grant_type</code> - OAuth 2 授权类型 (password 授权)</li><li><code>scope</code> - 应用程序的作用域</li><li><code>username</code> + <code>password</code></li></ul><p>除了 <code>Authorization</code> 头部，其余部分使用 HTTP 表单传递。在验证服务发回的响应中，将包含：</p><ul><li><code>access_token</code> - OAuth 2 token，随用户每次访问受保护资源时一起出示</li><li><code>token_type</code> - Token 类型</li><li><code>refresh_token</code> - 用于在 token 过期后重新颁发 token</li><li><code>expires_in</code> - Token 过期前的秒数</li><li><code>scope</code> - Token 的有效作用域</li></ul><p>有了有效的 token，用户可以直接请求验证服务的 <code>/auth/user</code>，并附带 token。认证服务将会确认 token，并检索用户信息。每个受保护的服务都是通过调用验证服务的 <code>/auth/user</code> 来确认 token 并检索用户信息。在向 <code>/auth/user</code> 发送请求时，需要创建 <code>Authorization</code> HTTP header，并设置值为 <code>Bearer &lt;token&gt;</code>。如果 token 有效，那么这个 end point 将会返回用户信息 (角色等)。</p><h2 id="_7-3-使用-oauth-2-保护组织服务" tabindex="-1"><a class="header-anchor" href="#_7-3-使用-oauth-2-保护组织服务"><span>7.3 使用 OAuth 2 保护组织服务</span></a></h2><p>目前，已经在验证服务中注册了应用程序，并创建了拥有角色的个人用户。在 Spring 中，定义哪个用户角色有权执行哪些操作是在 <strong>单个服务级别</strong> 上发生的。也就是说，要在单个服务中定义谁可以访问本服务。</p><h3 id="_7-3-1-将-spring-security-和-oauth-2-jar-添加到各个服务" tabindex="-1"><a class="header-anchor" href="#_7-3-1-将-spring-security-和-oauth-2-jar-添加到各个服务"><span>7.3.1 将 Spring Security 和 OAuth 2 jar 添加到各个服务</span></a></h3><p>向需要将自己保护起来的服务添加 Maven 依赖项。</p><h3 id="_7-3-2-配置服务以指向-oauth-2-验证服务" tabindex="-1"><a class="header-anchor" href="#_7-3-2-配置服务以指向-oauth-2-验证服务"><span>7.3.2 配置服务以指向 OAuth 2 验证服务</span></a></h3><p>当服务被创建为受保护资源，每次调用这个服务时，调用者必须将 OAuth 2 token 放置在 <code>Authorization</code> 头部中。在收到 token 后，受保护的服务必须调用 OAuth 2 验证服务来查看 token 是否有效。因此，需要在受保护服务的配置文件中，设置验证服务的 URL：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">security</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">oauth2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">resource</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">userInfoUri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8901/auth/user</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，还需要告诉服务自身是一个受保护资源。这是通过设置引导类注解 <code>@EnableResourceServer</code> 实现的。这个注解会强制执行一个过滤器，拦截对该服务的所有传入调用，检查其中是否包含 OAuth 2 token，然后调用 <code>userInfoUri</code> 来查看 token 是否有效。如果 token 有效，那么该注解将会进一步应用预定义的访问控制规则，以控制哪些人可以访问服务。</p><h3 id="_7-3-3-定义谁可以访问服务" tabindex="-1"><a class="header-anchor" href="#_7-3-3-定义谁可以访问服务"><span>7.3.3 定义谁可以访问服务</span></a></h3><p>定义访问规则的方式与之前类似：继承 <code>ResourceServerConfigurerAdapter</code>，并重写 <code>configure()</code> 函数。通过定义访问控制规则，可以使：</p><ul><li>只有已通过验证的用户才能访问服务</li><li>只有具有特定角色的用户才能访问服务</li></ul><h4 id="_7-3-3-1-通过验证用户保护服务" tabindex="-1"><a class="header-anchor" href="#_7-3-3-1-通过验证用户保护服务"><span>7.3.3.1 通过验证用户保护服务</span></a></h4><p>仅限已通过身份验证的用户访问服务。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-3-2-通过特定角色保护服务" tabindex="-1"><a class="header-anchor" href="#_7-3-3-2-通过特定角色保护服务"><span>7.3.3.2 通过特定角色保护服务</span></a></h4><p>可以锁定对服务调用的 HTTP method 和 URL，仅限具有特定 <strong>角色</strong> 的用户访问。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">,</span> <span class="token string">&quot;/v1/organizations/**&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">&quot;ADMIN&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-4-传播-oauth-2-token" tabindex="-1"><a class="header-anchor" href="#_7-3-4-传播-oauth-2-token"><span>7.3.4 传播 OAuth 2 Token</span></a></h3><p>在微服务环境中，会有多个服务调用来执行一个事务。需要保证 token 在服务调用之间被传播。假设一个用户已经获得了 token，所有服务运行在 Zuul 网关之后。那么接下来：</p><ol><li>应用程序在 <code>Authorization</code> HTTP header 中添加 token，访问服务</li><li>Zuul 查找服务 end point，并转发到其中的一个服务实例上 - 服务网关需要保证 <code>Authorization</code> header 也被转发</li><li>受保护的服务实例接收到请求后，调用验证服务确认 token；之后，该服务可能需要调用另一个服务，该服务要保证 token 也在请求时一并发送</li><li>另一个服务接收到请求后，再次向验证服务确认 token</li></ol><p>在默认情况下，Zuul 不会将敏感的 HTTP header 转发。黑名单包含以下三种头部：</p><ul><li><code>Cookie</code></li><li><code>Set-Cookie</code></li><li><code>Authorization</code></li></ul><p>那么只需要将 <code>Authorization</code> 从黑名单中移除即可：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">zuul.sensitiveHeaders</span><span class="token punctuation">:</span> Cookie<span class="token punctuation">,</span> Set<span class="token punctuation">-</span>Cookie</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另外，当一个受保护的服务要调用另一个受保护的服务时，也需要手动确保将 <code>Authorization</code> 注入对服务的调用请求中。</p><h2 id="_7-4-json-web-token-与-oauth-2" tabindex="-1"><a class="header-anchor" href="#_7-4-json-web-token-与-oauth-2"><span>7.4 JSON Web Token 与 OAuth 2</span></a></h2><p>OAuth 2 是一个基于 token 的验证框架，但是并没有给出如何定义 token 的任何标准。而 JSON Web Token (JWT, RFC-7519) 旨在为 OAuth 2 token 提供标准的结构。JWT 具有以下特点：</p><ul><li>小巧 - 由 Base64 编码，可以通过 URL、HTTP header 或 request body 轻松传递</li><li>密码签名 - JWT token 由颁发它的服务器签名，保证 token 不会被篡改</li><li>自包含 - 不需要调用验证服务来确认 token 的内容 (因为已经被签过名)</li><li>可扩展 - 可以在 token 被密封之前，在 token 中放置一些额外的信息</li></ul><blockquote><p>具体都是使用方法，不展开了。</p></blockquote><h2 id="_7-5-关于微服务安全的总结" tabindex="-1"><a class="header-anchor" href="#_7-5-关于微服务安全的总结"><span>7.5 关于微服务安全的总结</span></a></h2><ul><li>为所有业务通信使用 HTTPS / 安全套接字层 (SSL)</li><li>使用服务网关访问服务</li><li>将服务划分到公共 API 和私有 API (?)</li><li>封锁不需要的网络端口，限制微服务的攻击面</li></ul>`,62)]))}const c=s(p,[["render",o],["__file","Chapter 7 - 保护微服务.html.vue"]]),u=JSON.parse('{"path":"/spring-microservices-notes/Chapter%207%20-%20%E4%BF%9D%E6%8A%A4%E5%BE%AE%E6%9C%8D%E5%8A%A1.html","title":"Chapter 7 - 保护微服务","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"7.1 OAuth 2 简介","slug":"_7-1-oauth-2-简介","link":"#_7-1-oauth-2-简介","children":[]},{"level":2,"title":"7.2 从小事做起：使用 Spring 和 OAuth 2 来保护单个端点","slug":"_7-2-从小事做起-使用-spring-和-oauth-2-来保护单个端点","link":"#_7-2-从小事做起-使用-spring-和-oauth-2-来保护单个端点","children":[{"level":3,"title":"7.2.1 建立 OAuth 2 验证服务","slug":"_7-2-1-建立-oauth-2-验证服务","link":"#_7-2-1-建立-oauth-2-验证服务","children":[]},{"level":3,"title":"7.2.2 使用 OAuth 2 服务注册应用程序","slug":"_7-2-2-使用-oauth-2-服务注册应用程序","link":"#_7-2-2-使用-oauth-2-服务注册应用程序","children":[]},{"level":3,"title":"7.2.3 配置 EagleEye 用户","slug":"_7-2-3-配置-eagleeye-用户","link":"#_7-2-3-配置-eagleeye-用户","children":[]},{"level":3,"title":"7.2.4 验证用户","slug":"_7-2-4-验证用户","link":"#_7-2-4-验证用户","children":[]}]},{"level":2,"title":"7.3 使用 OAuth 2 保护组织服务","slug":"_7-3-使用-oauth-2-保护组织服务","link":"#_7-3-使用-oauth-2-保护组织服务","children":[{"level":3,"title":"7.3.1 将 Spring Security 和 OAuth 2 jar 添加到各个服务","slug":"_7-3-1-将-spring-security-和-oauth-2-jar-添加到各个服务","link":"#_7-3-1-将-spring-security-和-oauth-2-jar-添加到各个服务","children":[]},{"level":3,"title":"7.3.2 配置服务以指向 OAuth 2 验证服务","slug":"_7-3-2-配置服务以指向-oauth-2-验证服务","link":"#_7-3-2-配置服务以指向-oauth-2-验证服务","children":[]},{"level":3,"title":"7.3.3 定义谁可以访问服务","slug":"_7-3-3-定义谁可以访问服务","link":"#_7-3-3-定义谁可以访问服务","children":[]},{"level":3,"title":"7.3.4 传播 OAuth 2 Token","slug":"_7-3-4-传播-oauth-2-token","link":"#_7-3-4-传播-oauth-2-token","children":[]}]},{"level":2,"title":"7.4 JSON Web Token 与 OAuth 2","slug":"_7-4-json-web-token-与-oauth-2","link":"#_7-4-json-web-token-与-oauth-2","children":[]},{"level":2,"title":"7.5 关于微服务安全的总结","slug":"_7-5-关于微服务安全的总结","link":"#_7-5-关于微服务安全的总结","children":[]}],"git":{},"filePathRelative":"spring-microservices-notes/Chapter 7 - 保护微服务.md"}');export{c as comp,u as data};
