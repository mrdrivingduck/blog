import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_5-1-future" tabindex="-1"><a class="header-anchor" href="#_5-1-future"><span>5.1 - Future</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 02 / 22 0:56 🌙</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p><code>Future</code> 是异步计算中的核心概念，代表了异步计算的结果。该类提供成员函数来检查异步计算是否已经完成、获取异步计算结果、或取消异步计算的执行。</p><h2 id="jdk-future" tabindex="-1"><a class="header-anchor" href="#jdk-future"><span>JDK Future</span></a></h2><p><em>Netty</em> 中的 <code>Future</code> 继承了 JDK 中原生的 <code>Future</code> 接口，所以先看看 JDK 原生的 <code>Future</code> 接口。<code>FutureTask</code> 是 <code>Future</code> 接口的实现，同时还实现了 <code>Runnable</code> 接口，因此可以被执行器执行。</p><h3 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Future</span></span></span><span class="token punctuation">}</span> represents the result of an asynchronous</span>
<span class="line"> * computation.  Methods are provided to check if the computation is</span>
<span class="line"> * complete, to wait for its completion, and to retrieve the result of</span>
<span class="line"> * the computation.  The result can only be retrieved using method</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">get</span></span><span class="token punctuation">}</span> when the computation has completed, blocking if</span>
<span class="line"> * necessary until it is ready.  Cancellation is performed by the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">cancel</span></span><span class="token punctuation">}</span> method.  Additional methods are provided to</span>
<span class="line"> * determine if the task completed normally or was cancelled. Once a</span>
<span class="line"> * computation has completed, the computation cannot be cancelled.</span>
<span class="line"> * If you would like to use a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Future</span></span></span><span class="token punctuation">}</span> for the sake</span>
<span class="line"> * of cancellability but not provide a usable result, you can</span>
<span class="line"> * declare types of the form <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> and</span>
<span class="line"> * return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> as a result of the underlying task.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Sample Usage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> (Note that the following classes are all</span>
<span class="line"> * made-up.)</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token keyword">interface</span> <span class="token class-name">ArchiveSearcher</span> <span class="token punctuation">{</span> <span class="token class-name">String</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token class-name">ArchiveSearcher</span> searcher <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">void</span> <span class="token function">showSearch</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> target<span class="token punctuation">)</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future</span></span>
<span class="line"> *       <span class="token code language-java"><span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *         <span class="token code language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *             <span class="token code language-java"><span class="token keyword">return</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *         <span class="token code language-java"><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token function">displayOtherThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// do other things while searching</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token function">displayText</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// use future</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">FutureTask</span></span><span class="token punctuation">}</span> class is an implementation of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Future</span></span></span><span class="token punctuation">}</span> that</span>
<span class="line"> * implements <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Runnable</span></span></span><span class="token punctuation">}</span>, and so may be executed by an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Executor</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * For example, the above construction with <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">submit</span></span><span class="token punctuation">}</span> could be replaced by:</span>
<span class="line"> *  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token keyword">return</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> * <span class="token code language-java">executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Memory consistency effects: Actions taken by the asynchronous computation</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package-summary.html#MemoryVisibility<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>happen-before<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * actions following the corresponding <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> in another thread.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">FutureTask</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Executor</span></span></span>
<span class="line"> * <span class="token keyword">@since</span> 1.5</span>
<span class="line"> * <span class="token keyword">@author</span> Doug Lea</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> The result type returned by this Future&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">get</span></span><span class="token punctuation">}</span> method</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cancellation" tabindex="-1"><a class="header-anchor" href="#cancellation"><span>Cancellation</span></a></h3><p>试图取消一个异步任务的执行。如果任务已经完成，则取消失败。如果任务已经启动，则可以通过参数控制是否中断任务的执行。如果任务已经完成，则 <code>isDone()</code> 返回 <code>true</code>；如果任务已经被取消，则 <code>isCancelled()</code> 返回 <code>true</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Attempts to cancel execution of this task.  This attempt will</span>
<span class="line"> * fail if the task has already completed, has already been cancelled,</span>
<span class="line"> * or could not be cancelled for some other reason. If successful,</span>
<span class="line"> * and this task has not started when <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">cancel</span></span><span class="token punctuation">}</span> is called,</span>
<span class="line"> * this task should never run.  If the task has already started,</span>
<span class="line"> * then the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">mayInterruptIfRunning</span></span><span class="token punctuation">}</span> parameter determines</span>
<span class="line"> * whether the thread executing this task should be interrupted in</span>
<span class="line"> * an attempt to stop the task.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>After this method returns, subsequent calls to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">isDone</span></span><span class="token punctuation">}</span> will</span>
<span class="line"> * always return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.  Subsequent calls to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">isCancelled</span></span><span class="token punctuation">}</span></span>
<span class="line"> * will always return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this method returned <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">mayInterruptIfRunning</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the thread executing this</span>
<span class="line"> * task should be interrupted; otherwise, in-progress tasks are allowed</span>
<span class="line"> * to complete</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> if the task could not be cancelled,</span>
<span class="line"> * typically because it has already completed normally;</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> otherwise</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this task was cancelled before it completed</span>
<span class="line"> * normally.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this task was cancelled before it completed</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this task completed.</span>
<span class="line"> *</span>
<span class="line"> * Completion may be due to normal termination, an exception, or</span>
<span class="line"> * cancellation -- in all of these cases, this method will return</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this task completed</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span>Get</span></a></h3><p>等待 (可以指定超时时间) 并获取异步任务的执行结果。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits if necessary for the computation to complete, and then</span>
<span class="line"> * retrieves its result.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> the computed result</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">CancellationException</span></span> if the computation was cancelled</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ExecutionException</span></span> if the computation threw an</span>
<span class="line"> * exception</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if the current thread was interrupted</span>
<span class="line"> * while waiting</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits if necessary for at most the given time for the computation</span>
<span class="line"> * to complete, and then retrieves its result, if available.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">timeout</span> the maximum time to wait</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the timeout argument</span>
<span class="line"> * <span class="token keyword">@return</span> the computed result</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">CancellationException</span></span> if the computation was cancelled</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ExecutionException</span></span> if the computation threw an</span>
<span class="line"> * exception</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if the current thread was interrupted</span>
<span class="line"> * while waiting</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">TimeoutException</span></span> if the wait timed out</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="netty-future" tabindex="-1"><a class="header-anchor" href="#netty-future"><span><em>Netty</em> Future</span></a></h2><p><em>Netty</em> 继承自 <code>java.util.concurrent.Future</code>，扩展了 JDK 原生 <code>Future</code> 的功能。</p><h3 id="definition-1" tabindex="-1"><a class="header-anchor" href="#definition-1"><span>Definition</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * The result of an asynchronous operation.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;ClassNameSameAsAncestorName&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="status" tabindex="-1"><a class="header-anchor" href="#status"><span>Status</span></a></h3><p><em>Netty</em> 中的 <code>Future</code> 添加了对于异步任务执行状态的更详细的区分，对于已经 <strong>完成</strong> 的任务，<em>Netty</em> 中的 <code>Future</code> 将细分任务是否 <strong>成功完成</strong>。如果任务完成但失败，还可以获得代表失败原因的 <code>Throwable</code> 对象。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the I/O operation was completed</span>
<span class="line"> * successfully.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the operation can be cancelled via <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isCancellable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the cause of the failed I/O operation if the I/O operation has</span>
<span class="line"> * failed.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> the cause of the failure.</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if succeeded or this future is not</span>
<span class="line"> *         completed yet.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Throwable</span> <span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="listeners" tabindex="-1"><a class="header-anchor" href="#listeners"><span>Listeners</span></a></h3><p><em>Netty</em> 中的 <code>Future</code> 添加了对于 <strong>监听器</strong> 的支持。<code>Future</code> 上可以注册若干个监听器，当 <code>Future</code> 的 <code>isDone()</code> 返回 <code>true</code> (即任务完成) 时，已注册的监听器将会被通知，注册过的回调函数将会被回调。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Adds the specified listener to this future.  The</span>
<span class="line"> * specified listener is notified when this future is</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> done<span class="token punctuation">}</span>.  If this future is already</span>
<span class="line"> * completed, the specified listener is notified immediately.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Adds the specified listeners to this future.  The</span>
<span class="line"> * specified listeners are notified when this future is</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> done<span class="token punctuation">}</span>.  If this future is already</span>
<span class="line"> * completed, the specified listeners are notified immediately.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">addListeners</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Removes the first occurrence of the specified listener from this future.</span>
<span class="line"> * The specified listener is no longer notified when this</span>
<span class="line"> * future is <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> done<span class="token punctuation">}</span>.  If the specified</span>
<span class="line"> * listener is not associated with this future, this method</span>
<span class="line"> * does nothing and returns silently.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Removes the first occurrence for each of the listeners from this future.</span>
<span class="line"> * The specified listeners are no longer notified when this</span>
<span class="line"> * future is <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> done<span class="token punctuation">}</span>.  If the specified</span>
<span class="line"> * listeners are not associated with this future, this method</span>
<span class="line"> * does nothing and returns silently.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeListeners</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="synchronization" tabindex="-1"><a class="header-anchor" href="#synchronization"><span>Synchronization</span></a></h3><p>阻塞等待 <code>Future</code> 对应异步任务完成。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future until it is done, and rethrows the cause of the failure if this future</span>
<span class="line"> * failed.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future until it is done, and rethrows the cause of the failure if this future</span>
<span class="line"> * failed.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">syncUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future to be completed.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span></span>
<span class="line"> *         if the current thread was interrupted</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future to be completed without</span>
<span class="line"> * interruption.  This method catches an <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span><span class="token punctuation">}</span> and</span>
<span class="line"> * discards it silently.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">awaitUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future to be completed within the</span>
<span class="line"> * specified time limit.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the future was completed within</span>
<span class="line"> *         the specified time limit</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span></span>
<span class="line"> *         if the current thread was interrupted</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future to be completed within the</span>
<span class="line"> * specified time limit.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the future was completed within</span>
<span class="line"> *         the specified time limit</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span></span>
<span class="line"> *         if the current thread was interrupted</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future to be completed within the</span>
<span class="line"> * specified time limit without interruption.  This method catches an</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span><span class="token punctuation">}</span> and discards it silently.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the future was completed within</span>
<span class="line"> *         the specified time limit</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">awaitUninterruptibly</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Waits for this future to be completed within the</span>
<span class="line"> * specified time limit without interruption.  This method catches an</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span><span class="token punctuation">}</span> and discards it silently.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the future was completed within</span>
<span class="line"> *         the specified time limit</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">awaitUninterruptibly</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-now" tabindex="-1"><a class="header-anchor" href="#get-now"><span>Get Now</span></a></h3><p>以非阻塞的方式获取异步任务的执行结果。如果异步任务还没有完成，那么返回 <code>null</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return the result without blocking. If the future is not done yet this will return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * As it is possible that a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> value is used to mark the future as successful you also need to check</span>
<span class="line"> * if the future is really done with <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> and not rely on the returned <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> value.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">V</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="abstract-future" tabindex="-1"><a class="header-anchor" href="#abstract-future"><span>Abstract Future</span></a></h2><p>实现了 <code>Future</code> 接口的抽象类。</p><h3 id="definition-2" tabindex="-1"><a class="header-anchor" href="#definition-2"><span>Definition</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Abstract <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span></span><span class="token punctuation">}</span> implementation which does not allow for cancellation.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-1" tabindex="-1"><a class="header-anchor" href="#get-1"><span>Get</span></a></h3><p>实现了超时与非超时版本的 <code>get()</code>。首先阻塞等待任务结束，然后根据任务是否抛出了 <code>Throwable</code> 对象来判断任务是否成功完成。如果任务成功完成，那么调用非阻塞版本的 <code>getNow()</code> 获取任务的执行结果并返回。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> <span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">CancellationException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span><span class="token punctuation">)</span> cause<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">await</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> <span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">CancellationException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span><span class="token punctuation">)</span> cause<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40)]))}const o=s(t,[["render",l],["__file","5.1 - Future.html.vue"]]),u=JSON.parse('{"path":"/netty-in-action-notes/5.1%20-%20Future.html","title":"5.1 - Future","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"JDK Future","slug":"jdk-future","link":"#jdk-future","children":[{"level":3,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":3,"title":"Cancellation","slug":"cancellation","link":"#cancellation","children":[]},{"level":3,"title":"Get","slug":"get","link":"#get","children":[]}]},{"level":2,"title":"Netty Future","slug":"netty-future","link":"#netty-future","children":[{"level":3,"title":"Definition","slug":"definition-1","link":"#definition-1","children":[]},{"level":3,"title":"Status","slug":"status","link":"#status","children":[]},{"level":3,"title":"Listeners","slug":"listeners","link":"#listeners","children":[]},{"level":3,"title":"Synchronization","slug":"synchronization","link":"#synchronization","children":[]},{"level":3,"title":"Get Now","slug":"get-now","link":"#get-now","children":[]}]},{"level":2,"title":"Abstract Future","slug":"abstract-future","link":"#abstract-future","children":[{"level":3,"title":"Definition","slug":"definition-2","link":"#definition-2","children":[]},{"level":3,"title":"Get","slug":"get-1","link":"#get-1","children":[]}]}],"git":{},"filePathRelative":"netty-in-action-notes/5.1 - Future.md"}');export{o as comp,u as data};
