import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="chapter-3-7-sgi-stl-的私房菜-type-traits" tabindex="-1"><a class="header-anchor" href="#chapter-3-7-sgi-stl-的私房菜-type-traits"><span>Chapter 3.7 - SGI STL 的私房菜：__type_traits</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 03 / 31 20:40</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p>在 STL 迭代器的实现中，traits 机制展露了很大的作用。通过 traits 技术，提取出了包括内嵌类型在内的五个迭代器关联数据类型。SGI 把这种方法扩展到了迭代器之外。<code>iterator_traits</code> 负责萃取迭代器的特性，而 <code>__type_traits</code> 则负责萃取数据类型的特性。数据类型有哪些特性值得被关注呢？</p><ul><li>数据类型是否具有 non-trivial 的默认构造函数</li><li>数据类型是否具有 non-trivial 的拷贝构造函数</li><li>数据类型是否具有 non-trivial 的赋值运算符</li><li>数据类型是否具有 non-trivial 的析构函数</li><li>数据类型是否是 C++ 原生数据类型 (非对象类型)</li></ul><blockquote><p>Trivial 可被翻译为简单的，不复杂的。一个简单的判断准则：如果类内包含指针类型的成员变量，并需要在构造函数或拷贝构造函数中对指针进行动态内存分配，在析构函数中对动态分配的内存进行回收，那么该构造函数就可被认为是 <strong>non-trivial</strong> 的。</p></blockquote><p>萃取这些特性有什么用处？如果数据类型的构造函数是 trivial 的，那么在对该类型对象进行构造、析构、拷贝、赋值等操作时，可以采用 <strong>更有效率的操作</strong>，而不是构造函数。可以使用 <code>malloc()</code> / <code>memcpy()</code> 等内存操作获得最高效率。对于大规模且操作频繁的容器来说，可以显著提升效率。</p><p>__type_traits 提供了一种机制，允许针对不同的数据类型，在编译时期完成函数的分派 (静态分派)。比如，在对一个未定类型的数组执行 copy 操作时，可以在编译期得知元素类型是否有 trivial 的拷贝构造函数，从而决定是否可以使用性能较高的 <code>memcpy()</code> / <code>memmove()</code>。</p><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><p>由于编译器只会对对象形式的参数做参数推导，因此，定义两个结构体分别表示 <code>true</code> 和 <code>false</code>。结构体内是空的，因为这两个结构体仅用于标记真假 (是否有 non-trivial 的 XXX)。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">__true_type</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">__false_type</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，<code>__type_traits</code> 内定义了五种数据类型特性：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">__type_traits</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type     this_dummy_member_must_be_first<span class="token punctuation">;</span></span>
<span class="line">                   <span class="token comment">/* Do not remove this member. It informs a compiler which</span>
<span class="line">                      automatically specializes __type_traits that this</span>
<span class="line">                      __type_traits template is special. It just makes sure that</span>
<span class="line">                      things work if an implementation is using a template</span>
<span class="line">                      called __type_traits for something unrelated. */</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">/* The following restrictions should be observed for the sake of</span>
<span class="line">      compilers which automatically produce type specific specializations</span>
<span class="line">      of this class:</span>
<span class="line">          - You may reorder the members below if you wish</span>
<span class="line">          - You may remove any of the members below if you wish</span>
<span class="line">          - You must not rename members without making the corresponding</span>
<span class="line">            name change in the compiler</span>
<span class="line">          - Members you add will be treated like regular members unless</span>
<span class="line">            you add the appropriate support in the compiler. */</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，对于所有的数据类型，其默认的五个特性都是 <code>__false_type</code>，即：</p><ul><li>没有 trivial 的默认构造函数</li><li>没有 trivial 的拷贝构造函数</li><li>没有 trivial 的赋值运算符</li><li>没有 trivial 的析构函数</li><li>不是 C++ 原生的数据类型</li></ul><p>显然，对于这种对象，只能老老实实调用该类型定义的构造函数 / 拷贝构造函数 / 析构函数 / 赋值运算符进行操作，而无法取得性能上的提升。换句话说，上述默认定义是对所有数据类型的 <strong>保守值</strong>。</p><p>另外，对于 C++ 所有的原生数据类型，可以对上述结构体模板进行部分具体化，修改模板默认的行为。这些数据类型的相关特性将是 trivial 的，因此可以使用 <code>memcpy()</code> 等最快速的方式来进行拷贝或赋值。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __STL_NO_BOOL */</span></span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">signed</span> <span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__STL_HAS_WCHAR_T</span></span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">wchar_t</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __STL_HAS_WCHAR_T */</span></span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__STL_LONG_LONG</span></span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __STL_LONG_LONG */</span></span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，C++ 原生的指针类型也被定义为是一种标量：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application"><span>Application</span></a></h2><p>以 STL 中的 <code>copy()</code> 函数模板为例。该函数包含多个特化版本和多个强化版本，都是为了效率考虑。其基本函数的入口定义如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>T<span class="token operator">*</span> source<span class="token punctuation">,</span> T<span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> destination<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">has_trivial_copy_constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述函数中，调用了重载版本的 <code>copy()</code> 函数，其最后一个参数将根据类型 <code>T</code> 的 <code>has_trivial_copy_constructor</code> 类型临时对象是 <code>__true_type</code> 对象还是 <code>__false_type</code> 对象，决定将函数调用分派到哪个版本的 <code>copy()</code> 上去：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>T<span class="token operator">*</span> source<span class="token punctuation">,</span> T<span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> __false_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 拷贝构造函数为 non-trivial</span></span>
<span class="line">    <span class="token comment">// 依次调用拷贝构造函数 (保守策略)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>T<span class="token operator">*</span> source<span class="token punctuation">,</span> T<span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> __true_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 拷贝构造函数为 trivial</span></span>
<span class="line">    <span class="token comment">// 采用高效的方式实现拷贝</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 SGI 的编译器，<code>__type_traits</code> 将有能力根据用户自定义类型是否有 trivial 的构造函数萃取出相应特性。但对于大部分缺乏这种功能的编译器来说，除 <em>POD (Plain Old Data)</em> 本身以外的类型，<code>__type_traits</code> 只能萃取出 <code>__false_type</code>，从而使用保守策略。除非显式为自定义类型设计一个具体化的 <code>__type_traits</code> 版本，显式告诉编译器，该类型具有 trivial 的构造函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span>Shape<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">typedef</span> __true_type     has_trivial_default_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    has_trivial_copy_constructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    has_trivial_assignment_operator<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    has_trivial_destructor<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">typedef</span> __false_type    is_POD_type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上，即使无法全面对自定义类型进行类型特性萃取，至少编译器还能够对原生 C++ (POD) 类型使用最高效的内存操作方式。因为它们全部都有具体化的 <code>__type_traits</code> 定义，且所有的 <code>typedef</code> 都是 <code>__true_type</code>。</p>`,31)]))}const o=n(t,[["render",l],["__file","Chapter 3.7 - SGI STL 的私房菜：__type_traits.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%203%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A6%82%E5%BF%B5%E4%B8%8E%20traits%20%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95/Chapter%203.7%20-%20SGI%20STL%20%E7%9A%84%E7%A7%81%E6%88%BF%E8%8F%9C%EF%BC%9A__type_traits.html","title":"Chapter 3.7 - SGI STL 的私房菜：__type_traits","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Application","slug":"application","link":"#application","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 3 - 迭代器概念与 traits 编程方法/Chapter 3.7 - SGI STL 的私房菜：__type_traits.md"}');export{o as comp,r as data};
