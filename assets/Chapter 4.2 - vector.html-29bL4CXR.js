import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-4-2-vector" tabindex="-1"><a class="header-anchor" href="#chapter-4-2-vector"><span>Chapter 4.2 - vector</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 03 20:55</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_4-2-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-2-1-概述"><span>4.2.1 概述</span></a></h2><p>C/C++ 原生的数组是静态空间，一旦配置了就不能改变。vector 使用动态空间，随着元素的加入，由内部机制自行扩充空间以容纳元素。因此对内存的合理利用与灵活性有很大帮助，<strong>吃多少用多少</strong>。其实现技术的关键在于：</p><ol><li>内存大小控制</li><li>内存重新分配时数据移动的效率</li></ol><h2 id="_4-2-3-vector-的迭代器" tabindex="-1"><a class="header-anchor" href="#_4-2-3-vector-的迭代器"><span>4.2.3 vector 的迭代器</span></a></h2><p>vector 维护的是 <strong>连续线性空间</strong>，因此普通指针可以满足作为 vector 迭代器的所有条件。vector 支持 <strong>随机存取</strong>，因此提供 Random Access Iterator。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">vector</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_Vector_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> value_type<span class="token operator">*</span> iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-4-vector-的数据结构" tabindex="-1"><a class="header-anchor" href="#_4-2-4-vector-的数据结构"><span>4.2.4 vector 的数据结构</span></a></h2><p>由于 vector 使用连续的线性空间，因此使用了 <code>start</code> 和 <code>finish</code> 两个迭代器指示分配到的空间中正在使用的区间，<code>end_of_storage</code> 迭代器指示整块连续空间 (包含备用空间) 的尾端。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Allocator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">_Vector_alloc_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Allocator<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Tp<span class="token operator">*</span> _M_start<span class="token punctuation">;</span></span>
<span class="line">  _Tp<span class="token operator">*</span> _M_finish<span class="token punctuation">;</span></span>
<span class="line">  _Tp<span class="token operator">*</span> _M_end_of_storage<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为降低重新分配内存时的时间成本，vector 实际分配的内存大小会比用户需求量更大一些，以备将来可能的扩充。实际分配的内存量被称为 <strong>容量 (capacity)</strong>。根据上述三个迭代器，有许多成员函数已经可以被实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">vector</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_Vector_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_finish<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_finish<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">size_type</span><span class="token punctuation">(</span>_M_end_of_storage <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-5-vector-的构造与内存管理-constructor-push-back" tabindex="-1"><a class="header-anchor" href="#_4-2-5-vector-的构造与内存管理-constructor-push-back"><span>4.2.5 vector 的构造与内存管理：constructor，push_back</span></a></h2><p>vector 使用空间分配器分配内存，并在类内定义了一个分配器，用于 <strong>以元素大小为单位</strong> 分配内存。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">_Vector_base</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _M_data_allocator<span class="token punctuation">;</span></span>
<span class="line">  _Tp<span class="token operator">*</span> <span class="token function">_M_allocate</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_data_allocator<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_data_allocator<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vector 提供多个构造函数，允许用户指定空间大小以及初值。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">_Vector_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Alloc<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_finish</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_end_of_storage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">_Vector_base</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Alloc<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_finish</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_end_of_storage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _M_start <span class="token operator">=</span> <span class="token function">_M_allocate</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        _M_finish <span class="token operator">=</span> _M_start<span class="token punctuation">;</span></span>
<span class="line">        _M_end_of_storage <span class="token operator">=</span> _M_start <span class="token operator">+</span> __n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">explicit</span> <span class="token function">vector</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">vector</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_finish <span class="token operator">=</span> <span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">explicit</span> <span class="token function">vector</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_finish <span class="token operator">=</span> <span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">vector</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_finish <span class="token operator">=</span> <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _M_start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>uninitialized_fill_n()</code> 和 <code>uninitialized_copy()</code> 会根据元素的数据类型自行选择效率较高的赋值或拷贝方式。</p><p>调用 <code>push_back()</code> 将新元素插入到 vector 尾端时，首先需要检查备用空间：</p><ul><li>如果有备用空间，那么直接构造元素并调整 <code>finish</code> 迭代器</li><li>如果没有备用空间，那么需要扩容 (重新分配内存，移动数据，释放原内存)</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_finish <span class="token operator">!=</span> _M_end_of_storage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">construct</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">++</span>_M_finish<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">_M_insert_aux</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存重新分配的原则：</p><ul><li>如果原大小为 0，那么分配 1 个元素的空间</li><li>如果原大小不为 0，那么分配原大小两倍的空间</li></ul><p>使用 <code>uninitialized_copy()</code> 将原 vector 的内容拷贝到新 vector，并在结尾构造新元素。析构释放原 vector 的空间，并将三个迭代器指向新空间的正确位置。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_finish <span class="token operator">!=</span> _M_end_of_storage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">construct</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_M_finish <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>_M_finish<span class="token punctuation">;</span></span>
<span class="line">    _Tp __x_copy <span class="token operator">=</span> __x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">copy_backward</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> _M_finish <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> _M_finish <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>__position <span class="token operator">=</span> __x_copy<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> size_type __old_size <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> size_type __len <span class="token operator">=</span> __old_size <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">*</span> __old_size <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    iterator __new_start <span class="token operator">=</span> <span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    iterator __new_finish <span class="token operator">=</span> __new_start<span class="token punctuation">;</span></span>
<span class="line">    __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">      __new_finish <span class="token operator">=</span> <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> __position<span class="token punctuation">,</span> __new_start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">construct</span><span class="token punctuation">(</span>__new_finish<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__new_finish<span class="token punctuation">;</span></span>
<span class="line">      __new_finish <span class="token operator">=</span> <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> _M_finish<span class="token punctuation">,</span> __new_finish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span>__new_finish<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                  <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> _M_end_of_storage <span class="token operator">-</span> _M_start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span></span>
<span class="line">    _M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span></span>
<span class="line">    _M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于动态扩容并不是 <strong>在原空间后接续新空间</strong>，而是 <strong>另外分配一块较大空间</strong>，因此对 vector 的任何操作如果引起空间重新分配，那么指向原 vector 的迭代器都会 <strong>失效</strong>。</p></blockquote><h2 id="_4-2-6-vector-的元素操作-pop-back-erase-clear-insert" tabindex="-1"><a class="header-anchor" href="#_4-2-6-vector-的元素操作-pop-back-erase-clear-insert"><span>4.2.6 vector 的元素操作：pop_back，erase，clear，insert</span></a></h2><p><code>pop_back()</code> 的实现很简单。调整 <code>finish</code> 迭代器后，销毁最后一个元素即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">--</span>_M_finish<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>erase()</code> 删除某个区间上的所有元素。通过调用全局的 <code>copy()</code> 函数，将被删除区间之后的所有元素复制到删除位置开始的位置，并把之后多余的元素给析构，最终重新设置 <code>finish</code> 迭代器。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">copy</span><span class="token punctuation">(</span>__position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> _M_finish<span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>_M_finish<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __position<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    iterator __i <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>__last<span class="token punctuation">,</span> _M_finish<span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> _M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _M_finish <span class="token operator">=</span> _M_finish <span class="token operator">-</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>clear()</code> 相当于对 <code>start</code> 和 <code>finish</code> 迭代器之间的区间做 <code>erase()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>insert()</code> 函数分为两种情况：</p><ul><li>备用空间大于等于新增元素个数，不需要触发扩容</li><li>备用空间长度小于新增元素个数，需要扩容并搬运</li></ul><p>对于备用空间大于等于新增元素个数的场景，需要根据新增元素的个数是否多于插入位置之后的元素个数，合理调用 <code>uninitialized_copy()</code> / <code>copy()</code> (需要初始化 / 不需要初始化)，以追求性能。</p><p>对于备用空间不够的场景，既然新分配了内存，则按区间调用 <code>uninitialized_copy()</code> (复制 + 初始化) 即可。新区间的长度为原区间的两倍或原区间长度 + 新增元素个数的较大者。最终需要销毁并释放原空间，并调整迭代器指向新空间。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span></span>
<span class="line">                            const_iterator __first<span class="token punctuation">,</span></span>
<span class="line">                            const_iterator __last<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    size_type __n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 待插入的元素个数 n</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span>_M_end_of_storage <span class="token operator">-</span> _M_finish<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> __n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 备用空间够用</span></span>
<span class="line">      <span class="token keyword">const</span> size_type __elems_after <span class="token operator">=</span> _M_finish <span class="token operator">-</span> __position<span class="token punctuation">;</span> <span class="token comment">// 插入位置之后的元素个数</span></span>
<span class="line">      iterator __old_finish <span class="token operator">=</span> _M_finish<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>__elems_after <span class="token operator">&gt;</span> __n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 插入位置后的元素个数 &gt; 待插入的元素个数</span></span>
<span class="line">        <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>_M_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span> _M_finish<span class="token punctuation">,</span> _M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// finish 迭代器之后 n 个元素初始化</span></span>
<span class="line">        _M_finish <span class="token operator">+=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 将 finish 迭代器后移 n 个</span></span>
<span class="line">        <span class="token function">copy_backward</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __old_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span> __old_finish<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将剩余元素后移 (不用初始化)</span></span>
<span class="line">        <span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入元素</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 插入位置后的元素个数 &lt; 待插入的元素个数</span></span>
<span class="line">        <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __elems_after<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> _M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制并初始化待插入元素的后区间</span></span>
<span class="line">        _M_finish <span class="token operator">+=</span> __n <span class="token operator">-</span> __elems_after<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span> _M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制并初始化插入位置后的元素</span></span>
<span class="line">        _M_finish <span class="token operator">+=</span> __elems_after<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __first <span class="token operator">+</span> __elems_after<span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制待插入元素的前区间 (不用初始化)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 备用空间不足</span></span>
<span class="line">      <span class="token keyword">const</span> size_type __old_size <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> size_type __len <span class="token operator">=</span> __old_size <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>__old_size<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新空间大小</span></span>
<span class="line">      iterator __new_start <span class="token operator">=</span> <span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 扩容</span></span>
<span class="line">      iterator __new_finish <span class="token operator">=</span> __new_start<span class="token punctuation">;</span></span>
<span class="line">      __STL_TRY <span class="token punctuation">{</span> <span class="token comment">// 按区间复制元素</span></span>
<span class="line">        __new_finish <span class="token operator">=</span> <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> __position<span class="token punctuation">,</span> __new_start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        __new_finish <span class="token operator">=</span> <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __new_finish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        __new_finish</span>
<span class="line">          <span class="token operator">=</span> <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> _M_finish<span class="token punctuation">,</span> __new_finish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span>__new_finish<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败回滚</span></span>
<span class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> _M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 销毁原区间</span></span>
<span class="line">      <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> _M_end_of_storage <span class="token operator">-</span> _M_start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放原空间</span></span>
<span class="line">      _M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span> <span class="token comment">// 调整迭代器</span></span>
<span class="line">      _M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span></span>
<span class="line">      _M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43)]))}const i=s(e,[["render",o],["__file","Chapter 4.2 - vector.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%204%20-%20%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%204.2%20-%20vector.html","title":"Chapter 4.2 - vector","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.2.1 概述","slug":"_4-2-1-概述","link":"#_4-2-1-概述","children":[]},{"level":2,"title":"4.2.3 vector 的迭代器","slug":"_4-2-3-vector-的迭代器","link":"#_4-2-3-vector-的迭代器","children":[]},{"level":2,"title":"4.2.4 vector 的数据结构","slug":"_4-2-4-vector-的数据结构","link":"#_4-2-4-vector-的数据结构","children":[]},{"level":2,"title":"4.2.5 vector 的构造与内存管理：constructor，push_back","slug":"_4-2-5-vector-的构造与内存管理-constructor-push-back","link":"#_4-2-5-vector-的构造与内存管理-constructor-push-back","children":[]},{"level":2,"title":"4.2.6 vector 的元素操作：pop_back，erase，clear，insert","slug":"_4-2-6-vector-的元素操作-pop-back-erase-clear-insert","link":"#_4-2-6-vector-的元素操作-pop-back-erase-clear-insert","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 4 - 序列式容器/Chapter 4.2 - vector.md"}');export{i as comp,u as data};
