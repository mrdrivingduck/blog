import{_ as n,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function l(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="c-file-i-o" tabindex="-1"><a class="header-anchor" href="#c-file-i-o"><span>C++ File I/O</span></a></h1><p>Created by : Mr Dk.</p><p>2018 / 09 / 10 16:05</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_1-输入-输出流" tabindex="-1"><a class="header-anchor" href="#_1-输入-输出流"><span>1. 输入/输出流</span></a></h2><h3 id="ifstream-输入流" tabindex="-1"><a class="header-anchor" href="#ifstream-输入流"><span><code>ifstream</code> - 输入流</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">charT</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">traits</span> <span class="token operator">=</span> char_traits<span class="token operator">&lt;</span>charT<span class="token operator">&gt;</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">basic_ifstream</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ofstream-输出流" tabindex="-1"><a class="header-anchor" href="#ofstream-输出流"><span><code>ofstream</code> - 输出流</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">charT</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">traits</span> <span class="token operator">=</span> char_traits<span class="token operator">&lt;</span>charT<span class="token operator">&gt;</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">basic_ofstream</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fstream-输入-输出流" tabindex="-1"><a class="header-anchor" href="#fstream-输入-输出流"><span><code>fstream</code> - 输入/输出流</span></a></h3><h2 id="_2-文件打开方式" tabindex="-1"><a class="header-anchor" href="#_2-文件打开方式"><span>2. 文件打开方式</span></a></h2><ul><li><code>ios::in</code> - 读取文件</li><li><code>ios::out</code> - 写入文件</li><li><code>ios::binary</code> - 二进制模式 (若不使用，则默认为字符模式)</li><li><code>ios::app</code> - 追加模式 (一般与输出流配合)</li><li><code>ios::ate</code> - 转到文件尾部 (一般与输入流配合)</li><li><code>ios::trunc</code> - 如果文件存在，则清除文件内容</li><li><code>ios::nocreate</code> - 若文件不存在，则不创建文件</li><li><code>ios::noreplace</code> - 若文件存在，则打开失败</li></ul><h2 id="_3-文件打开-关闭" tabindex="-1"><a class="header-anchor" href="#_3-文件打开-关闭"><span>3. 文件打开/关闭</span></a></h2><h3 id="打开" tabindex="-1"><a class="header-anchor" href="#打开"><span>打开</span></a></h3><ul><li><code>ifstream</code> 默认打开方式 - <code>ios::in</code></li><li><code>ofstream</code> 默认打开方式 - <code>ios::out</code></li><li><code>fstream</code> 默认打开方式 - <code>ios::in | ios::out</code></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Two step</span></span>
<span class="line">ifstream fin<span class="token punctuation">;</span></span>
<span class="line">fin<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;read.txt&quot;</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// One step</span></span>
<span class="line">ofstream <span class="token function">fout</span><span class="token punctuation">(</span><span class="token string">&quot;write.txt&quot;</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fin<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>fout<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭" tabindex="-1"><a class="header-anchor" href="#关闭"><span>关闭</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">fin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-字符流文件读写" tabindex="-1"><a class="header-anchor" href="#_4-字符流文件读写"><span>4. 字符流文件读写</span></a></h2><p>除非指定以 <strong>二进制方式 (字节流)</strong> 打开文件，否则默认以 <strong>文本方式 (字符流)</strong> 打开文件。使用 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 来读写</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token comment">// File opend</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Input</span></span>
<span class="line"><span class="token keyword">int</span> temp<span class="token punctuation">;</span></span>
<span class="line">fin <span class="token operator">&gt;&gt;</span> temp<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Output</span></span>
<span class="line">fout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token comment">// File closed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-格式化输出" tabindex="-1"><a class="header-anchor" href="#_5-格式化输出"><span>5. 格式化输出</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span>	<span class="token comment">// NECESSARY !!!</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置实数精度</span></span>
<span class="line">fout<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">fout <span class="token operator">&lt;&lt;</span> <span class="token number">3.1415926535</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>	<span class="token comment">// 仅一次有效</span></span>
<span class="line"><span class="token comment">// OR</span></span>
<span class="line"><span class="token comment">// fout &lt;&lt; setprecision(4) &lt;&lt; 3.1415926535 &lt;&lt; endl;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置字段宽度和填充字符</span></span>
<span class="line">fout<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">fout<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">fout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>	<span class="token comment">// 仅一次有效</span></span>
<span class="line"><span class="token comment">// OR</span></span>
<span class="line"><span class="token comment">// fout &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; setw(10) &lt;&lt; &quot;hello&quot; &lt;&lt; endl;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 进制转换</span></span>
<span class="line">fout <span class="token operator">&lt;&lt;</span> <span class="token function">setbase</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">fout <span class="token operator">&lt;&lt;</span> <span class="token function">setbase</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置/终止设置输出格式</span></span>
<span class="line">fout<span class="token punctuation">.</span><span class="token function">setf</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">fout <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">fout<span class="token punctuation">.</span><span class="token function">unsetf</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// OR : fout &lt;&lt; setiosflags(ios::left) &lt;&lt; 5 &lt;&lt; endl;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>格式</th><th>作用</th></tr></thead><tbody><tr><td><code>ios::left</code></td><td>域宽范围内左对齐</td></tr><tr><td><code>ios::right</code></td><td>域宽范围内右对齐</td></tr><tr><td><code>ios::internal</code></td><td>符号位在域宽内左对齐 数值右对齐 中间由填充字符填充</td></tr><tr><td><code>ios::dec</code></td><td>设置基数为 10</td></tr><tr><td><code>ios::oct</code></td><td>设置基数为 8</td></tr><tr><td><code>ios::hex</code></td><td>设置基数为 16</td></tr><tr><td><code>ios::showbase</code></td><td>强制输出整数的基数</td></tr><tr><td><code>ios::showpoint</code></td><td>强制输出浮点数的小数点和尾数 0</td></tr><tr><td><code>ios::uppercase</code></td><td>十六进制字母大写</td></tr><tr><td><code>ios::showpos</code></td><td>显示正数的 <strong>+</strong> 号</td></tr><tr><td><code>ios::scientific</code></td><td>以科学计数法格式输出</td></tr><tr><td><code>ios::fixed</code></td><td>以定点小数格式输出</td></tr><tr><td><code>ios::unitbuf</code></td><td>每次输出后刷新所有的流</td></tr><tr><td><code>ios::stdio</code></td><td>每次输出后清除 <em>stdout</em> <em>stderr</em></td></tr></tbody></table><h2 id="_6-二进制文件读写" tabindex="-1"><a class="header-anchor" href="#_6-二进制文件读写"><span>6. 二进制文件读写</span></a></h2><ul><li>文件打开方式必须包含 <code>ios::binary</code></li><li>使用 <code>read</code> 和 <code>write</code> 函数进行读写 <ul><li><code>ostream&amp; write (const char* s, streamsize n);</code></li><li><code>istream&amp; read (char* s, streamsize n);</code></li><li><code>s</code> 为起始地址，<code>n</code> 为字节数</li></ul></li><li>读写结构体</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Buffer</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Buffer buffer<span class="token punctuation">;</span></span>
<span class="line">fout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">fin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const o=n(p,[["render",l],["__file","C__ File I_O.html.vue"]]),d=JSON.parse('{"path":"/notes/C__/C__%20File%20I_O.html","title":"C++ File I/O","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 输入/输出流","slug":"_1-输入-输出流","link":"#_1-输入-输出流","children":[{"level":3,"title":"ifstream - 输入流","slug":"ifstream-输入流","link":"#ifstream-输入流","children":[]},{"level":3,"title":"ofstream - 输出流","slug":"ofstream-输出流","link":"#ofstream-输出流","children":[]},{"level":3,"title":"fstream - 输入/输出流","slug":"fstream-输入-输出流","link":"#fstream-输入-输出流","children":[]}]},{"level":2,"title":"2. 文件打开方式","slug":"_2-文件打开方式","link":"#_2-文件打开方式","children":[]},{"level":2,"title":"3. 文件打开/关闭","slug":"_3-文件打开-关闭","link":"#_3-文件打开-关闭","children":[{"level":3,"title":"打开","slug":"打开","link":"#打开","children":[]},{"level":3,"title":"关闭","slug":"关闭","link":"#关闭","children":[]}]},{"level":2,"title":"4. 字符流文件读写","slug":"_4-字符流文件读写","link":"#_4-字符流文件读写","children":[]},{"level":2,"title":"5. 格式化输出","slug":"_5-格式化输出","link":"#_5-格式化输出","children":[]},{"level":2,"title":"6. 二进制文件读写","slug":"_6-二进制文件读写","link":"#_6-二进制文件读写","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ File I&O.md"}');export{o as comp,d as data};
