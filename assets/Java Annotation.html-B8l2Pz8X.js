import{_ as s,c as a,a as t,o as e}from"./app-7eKjwDat.js";const p={};function l(o,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="java-annotation-注解" tabindex="-1"><a class="header-anchor" href="#java-annotation-注解"><span>Java - Annotation 注解</span></a></h1><p>Created by : Mr Dk.</p><p>2018 / 10 / 13 14:43</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p><strong>Annotation (注解)</strong> 是 Java 提供的为程序中的元素关联 <em>元数据 (metadata)</em> 的一种方法，在 JDK 5.0 及以后被支持。程序可利用 <strong>反射机制</strong> 来访问注解，并根据不同的注解，完成不同的功能。注解可以标记在 <strong>包、类、成员变量、成员方法、方法参数以及局部变量</strong> 上。注解能够使代码更加精简、灵活。</p><p>元数据是 <strong>“描述数据的数据“</strong>，以标签的形式存在于 Java 代码中，不影响代码的编译和执行。作用大致包括：</p><ul><li>编写文档 - 通过代码中的标签生成 <em>Javadoc</em></li><li>代码分析</li><li>编译检查</li></ul><hr><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>Type</span></a></h2><ul><li>Java 内置注解 <ul><li><code>@Override</code> - 添加在重写父类的方法上，可用于检测重写的函数名是否与父类一致</li><li><code>@Deprecated </code> - 修饰已过时不再推荐使用的方法</li><li><code>@SuppressWarnings</code> - 关闭编译器警告</li></ul></li><li>元注解 <ul><li><code>@Target</code> - 表示注解修饰的元素类型，可选参数如下： <ul><li><code>ElementType.CONSTRUCTOR</code> - 用于 Constructor 的声明</li><li><code>ElementType.PACKAGE</code> - 用于包声明</li><li><code>ElementType.TYPE</code> - 用于类或接口的声明</li><li><code>ElementType.FIELD</code> - 用于域声明</li><li><code>ElementType.METHOD</code> - 用于方法声明</li><li><code>ElementType.PARAMETER</code> - 用于参数声明</li><li><code>ElementType.LOCAL_VARIABLE</code> - 用于局部变量声明</li></ul></li><li><code>@Retention</code> - 表示保存该注解信息的级别，可选参数如下： <ul><li><code>RetentionPolicy.SOURCE</code> - 保存在源码中，编译时被编译器丢弃</li><li><code>RetentionPolicy.CLASS</code> - 保存在字节码文件中，但被 JVM 丢弃</li><li><code>RetentionPolicy.RUNTIME</code> - 保留在 JVM 运行期间 (因此可通过 Reflection 读取注解信息)</li></ul></li><li><code>@Document</code> - 注解包含在 <em>Javadoc</em> 中</li><li><code>@Inherited</code> - 允许子类继承父类的注解</li></ul></li><li>自定义注解 <ul><li>一种可能的设计模式：注解 + 注解解释器 <ul><li><strong>注解</strong> - 使被标记元素之间的差异性独立于代码层之上。必要时，只需修改注解而不需修改代码</li><li><strong>注解解释器</strong> - 利用反射机制拿到注解信息，并根据不同的注解，完成对应的功能</li></ul></li></ul></li></ul><hr><h2 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration"><span>Declaration</span></a></h2><p>Attention : Annotation can be declared <strong>public</strong> only in its own file.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@interface</span> <span class="token class-name">MethodAnnotation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;METHOD&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@interface</span> <span class="token class-name">TypeAnnotation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;TYPE&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"></span>
<span class="line">public @interface SomeAnnotation {</span>
<span class="line">    // Some value...</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@TypeAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;ClassAnnotation&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> text<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MethodAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;TextAnnotation&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-annotation-in-code" tabindex="-1"><a class="header-anchor" href="#using-annotation-in-code"><span>Using Annotation In Code</span></a></h2><ul><li>The <code>RetentionPolicy</code> of annotation must be declared as <code>RUNTIME</code></li><li>Consider an <strong>annotation</strong> just as a class</li><li>Using annotation with <strong>Reflection Mechanism</strong></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Annotation of class</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">TypeAnnotation</span> typeAnnotation <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TypeAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>typeAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Annotation of method</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">MethodAnnotation</span> methodAnnotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MethodAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Some method may not have annotation</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,21)]))}const c=s(p,[["render",l],["__file","Java Annotation.html.vue"]]),u=JSON.parse('{"path":"/notes/Java/Java%20Annotation.html","title":"Java - Annotation 注解","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"Type","slug":"type","link":"#type","children":[]},{"level":2,"title":"Declaration","slug":"declaration","link":"#declaration","children":[]},{"level":2,"title":"Using Annotation In Code","slug":"using-annotation-in-code","link":"#using-annotation-in-code","children":[]}],"git":{},"filePathRelative":"notes/Java/Java Annotation.md"}');export{c as comp,u as data};
