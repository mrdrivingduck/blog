import{_ as i,c as e,a,o as n}from"./app-7eKjwDat.js";const r="/blog/assets/single-body-arch-BgLVDCJs.png",s="/blog/assets/micro-service-arch-6WYwtDF9.png",t={};function h(p,l){return n(),e("div",null,l[0]||(l[0]=[a('<h1 id="chapter-1-欢迎迈入云世界-spring" tabindex="-1"><a class="header-anchor" href="#chapter-1-欢迎迈入云世界-spring"><span>Chapter 1 - 欢迎迈入云世界，Spring</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 08 / 11 21:27</p><p>@Nanjing, Jiangsu, China</p><hr><h2 id="_1-1-什么是微服务" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是微服务"><span>1.1 什么是微服务</span></a></h2><p>在 <strong>微服务</strong> 的概念形成之前，绝大部分基于 Web 的应用都是使用 <strong>单体架构</strong> 的风格构建的。在单体架构中，应用程序作为单个可部署的软件制品交付，所有的 UI、业务、数据库访问逻辑呗打包在一个制品中，部署在一个应用程序服务器上。如果应用中包含多个业务团队，当各个团队需要修改代码时，整个应用程序都要重新构建、重新测试、重新部署：</p><img src="'+r+'" alt="single-body-arch" style="zoom:50%;"><p>而微服务是一个 <strong>小的、松耦合的分布式服务</strong>，允许将一个大型应用分解为具有严格职责定义的便于管理的组件。分解和分离应用程序的功能，使它们完全彼此独立。这样，每个功能团队都能完全拥有自己的服务代码和服务基础设施，独立地构建、部署、测试：</p><img src="'+s+'" alt="micro-service-arch" style="zoom:50%;"><p>微服务架构的特征：</p><ul><li>应用程序逻辑分解为明确定义了职责范围的细粒度组件</li><li>每个组件负责独立的职责领域、独立部署</li><li>微服务之间通过轻量级协议 (如 JSON) 进行数据交换</li><li>服务底层的技术实现可以是任意的 (因为应用程序使用中立的协议进行通信)</li><li>分布式，每个团队只负责独立的服务</li></ul><p>以下力量正在影响构建应用的方式：</p><ul><li>应用复杂性上升 (多个数据中心、多个数据库、外部服务)</li><li>客户期待快速交付 (希望功能能被拆分，可以在短时间内快速发布新功能)</li><li>性能和可伸缩性 (应用需要跨多个服务器进行扩大，在事务高峰过去后进行收缩)</li><li>客户希望应用程序可用 (应用程序中的某部分故障不应该导致整个程序的崩溃)</li></ul><p>而微服务具有以下特性：</p><ul><li>灵活性 - 可将解耦的服务进行组合和重新安排</li><li>有弹性 - 故障可以限制在应用程序的一小部分中 (降级)</li><li>可伸缩性 - 解耦的服务可以轻松地跨多个服务器进行水平分布</li></ul><h2 id="_1-8-云与微服务" tabindex="-1"><a class="header-anchor" href="#_1-8-云与微服务"><span>1.8 云与微服务？</span></a></h2><p>微服务的服务实例应该迅速启动，服务的每一个实例都是相同的。基于云的微服务的优势是以 <strong>弹性</strong> 的概念为中心。云服务提供商允许开发人员在几分钟之内快速启动新的虚拟机和容器，启动新的服务实例；在服务容量需求下降时，可以关闭虚拟服务器。这样意味着应用程序可以更加弹性。</p><h2 id="_1-9-微服务不只是编写代码" tabindex="-1"><a class="header-anchor" href="#_1-9-微服务不只是编写代码"><span>1.9 微服务不只是编写代码</span></a></h2><p>编写健壮的服务需要考虑的问题：</p><ul><li>正确划分微服务的大小，避免微服务承担太多职责</li><li>多个服务实例可以快速启动和关闭时，如何管理服务调用的物理细节</li><li>如何快速绕过失败的服务</li><li>如何确保每个服务实例之间具有相同的配置和代码库</li><li>如何最小化服务之间的直接依赖关系，并优雅扩展</li></ul><h3 id="_1-9-1-核心微服务开发模式" tabindex="-1"><a class="header-anchor" href="#_1-9-1-核心微服务开发模式"><span>1.9.1 核心微服务开发模式</span></a></h3><ul><li>服务粒度 - 粒度过粗会使服务越来越难以维护，粒度过细会使程序复杂性增加</li><li>通信协议 - XML / JSON</li><li>接口设计 - 如何设计实际的服务接口，以进行服务调用</li><li>服务的配置管理 - 以便在不同云环境之间移动时，不必更改核心代码</li><li>使用事件解耦微服务</li></ul><h3 id="_1-9-2-微服务路由模式" tabindex="-1"><a class="header-anchor" href="#_1-9-2-微服务路由模式"><span>1.9.2 微服务路由模式</span></a></h3><p>抽象服务的物理 IP 地址，为服务调用提供单个入口点</p><ul><li>服务发现 - 客户端在不需要将服务位置硬编码到应用程序的情况下找到它们</li><li>服务路由 - 为所有的服务提供单个入口点，将统一的安全策略应用到多个服务实例上</li></ul><h3 id="_1-9-3-微服务客户端弹性模式" tabindex="-1"><a class="header-anchor" href="#_1-9-3-微服务客户端弹性模式"><span>1.9.3 微服务客户端弹性模式</span></a></h3><ul><li>客户端负载均衡 - 将所有请求路由到微服务的健康实例上</li><li>断路器模式 - 出现故障的微服务调用能够快速失败，以免占用大量系统资源</li><li>后备模式 - 服务调用失败时，允许客户端尝试通过调用微服务之外的其它方法执行工作</li><li>舱壁模式 - 使用多个分布式资源来执行工作</li></ul><h3 id="_1-9-4-微服务安全模式" tabindex="-1"><a class="header-anchor" href="#_1-9-4-微服务安全模式"><span>1.9.4 微服务安全模式</span></a></h3><ul><li>验证</li><li>授权</li><li>凭据管理和传播</li></ul><h3 id="_1-9-5-微服务日志记录和跟踪模式" tabindex="-1"><a class="header-anchor" href="#_1-9-5-微服务日志记录和跟踪模式"><span>1.9.5 微服务日志记录和跟踪模式</span></a></h3><p>微服务架构的缺点在于，调试和跟踪应用程序和服务中发生的事情十分困难。</p><ul><li>日志关联 - 一个用户事务会调用多个服务，如何将这些服务的日志关联到一起</li><li>日志聚合 - 将微服务生成的所有日志合并到一个可查询的数据库中</li><li>微服务跟踪 - 可视化客户端事务</li></ul><h3 id="_1-9-6-微服务构建和部署模式" tabindex="-1"><a class="header-anchor" href="#_1-9-6-微服务构建和部署模式"><span>1.9.6 微服务构建和部署模式</span></a></h3><p>微服务的每个实例都应该与其它所有实例相同，<strong>配置漂移</strong> 是不允许出现的。</p><ul><li>构建和部署管道</li><li>基础设施即代码</li><li>不可变服务器 (部署之后镜像永远不更改)</li><li>凤凰服务器 (运行微服务的服务器被定期拆卸，重新创建一个不可变的镜像)</li></ul>',36)]))}const c=i(t,[["render",h],["__file","Chapter 1 - 欢迎迈入云世界，Spring.html.vue"]]),o=JSON.parse('{"path":"/spring-microservices-notes/Chapter%201%20-%20%E6%AC%A2%E8%BF%8E%E8%BF%88%E5%85%A5%E4%BA%91%E4%B8%96%E7%95%8C%EF%BC%8CSpring.html","title":"Chapter 1 - 欢迎迈入云世界，Spring","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1.1 什么是微服务","slug":"_1-1-什么是微服务","link":"#_1-1-什么是微服务","children":[]},{"level":2,"title":"1.8 云与微服务？","slug":"_1-8-云与微服务","link":"#_1-8-云与微服务","children":[]},{"level":2,"title":"1.9 微服务不只是编写代码","slug":"_1-9-微服务不只是编写代码","link":"#_1-9-微服务不只是编写代码","children":[{"level":3,"title":"1.9.1 核心微服务开发模式","slug":"_1-9-1-核心微服务开发模式","link":"#_1-9-1-核心微服务开发模式","children":[]},{"level":3,"title":"1.9.2 微服务路由模式","slug":"_1-9-2-微服务路由模式","link":"#_1-9-2-微服务路由模式","children":[]},{"level":3,"title":"1.9.3 微服务客户端弹性模式","slug":"_1-9-3-微服务客户端弹性模式","link":"#_1-9-3-微服务客户端弹性模式","children":[]},{"level":3,"title":"1.9.4 微服务安全模式","slug":"_1-9-4-微服务安全模式","link":"#_1-9-4-微服务安全模式","children":[]},{"level":3,"title":"1.9.5 微服务日志记录和跟踪模式","slug":"_1-9-5-微服务日志记录和跟踪模式","link":"#_1-9-5-微服务日志记录和跟踪模式","children":[]},{"level":3,"title":"1.9.6 微服务构建和部署模式","slug":"_1-9-6-微服务构建和部署模式","link":"#_1-9-6-微服务构建和部署模式","children":[]}]}],"git":{},"filePathRelative":"spring-microservices-notes/Chapter 1 - 欢迎迈入云世界，Spring.md"}');export{c as comp,o as data};
