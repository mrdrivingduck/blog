import{_ as n,c as s,a,o as l}from"./app-7eKjwDat.js";const i={};function r(o,e){return l(),s("div",null,e[0]||(e[0]=[a(`<h1 id="linux-kernel-compilation" tabindex="-1"><a class="header-anchor" href="#linux-kernel-compilation"><span>Linux - Kernel Compilation</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 05 / 08 11:16</p><p>Nanjing, Jiangsu, China</p><hr><p>对如何编译 Linux 内核进行总结。内核的编译基于 Makefile，因此编译命令基本上围绕 <code>make</code> 进行。</p><h2 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code"><span>Source Code</span></a></h2><p>Linux 官方提供一个稳定版的内核 git 地址：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另外，在 GitHub 上也有相应的镜像。<a href="https://github.com/torvalds/linux" target="_blank" rel="noopener noreferrer">Linus Torvalds</a> 的镜像只有 <code>x.xx</code> 版本的 tag，另外还有维护了<a href="https://github.com/gregkh/linux" target="_blank" rel="noopener noreferrer">稳定版</a> tag <code>x.xx.xx</code> 的镜像。</p><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span>Dependencies</span></a></h2><p>这些依赖与内核源代码无关，主要是编译一些脚本、工具。比如用于内核模块签名的工具 <code>scripts/sign-file.c</code>。</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ sudo apt install libelf-dev libssl-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>在下载完源代码并解压后，第一件事是进行编译前的配置。需要进行配置的原因是，内核可以运行在不同的硬件平台上，并且不同机器的硬件环境也不一样，因此有些设备驱动需要被编译，有些不需要。</p><p>另外，一些较为核心的功能可以选择编译到内核核心的二进制文件中；一些不太核心的功能，可以选择编译为内核模块，当需要使用时才被动态加载。这样，可以保证内核核心二进制文件尽可能小。</p><p>以下命令会根据当前机器的体系结构，生成一个新的默认配置文件 <code>.config</code>：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make defconfig # New config with default from ARCH supplied defconfig</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另外还有几个自动的配置：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make allnoconfig # New config where all options are answered with no&#39;</span>
<span class="line">$ make allyesconfig	# New config where all options are accepted with yes&#39;</span>
<span class="line">$ make allmodconfig	# New config selecting modules when possible&#39;</span>
<span class="line">$ make alldefconfig # New config with all symbols set to default&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想根据系统启动以来已经加载的模块进行编译，使得内核仅支持当前已经加载的模块，从而简化配置流程：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make localmodconfig</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果想通过一个 GUI 进行手动配置，则可以使用如下几个命令。(使用这几个命令需要安装用于支持相关 GUI 的软件包，比如 GTK、QT 等)：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make menuconfig # Update current config utilising a menu based program&#39;</span>
<span class="line">$ make xconfig # Update current config utilising a Qt based front-end</span>
<span class="line">$ make gconfig # Update current config utilising a GTK+ based front-end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我进行的一些开发是在 QEMU 虚拟机中运行的。因此在 <code>make defconfig</code> 后，直接运行如下命令自动配置一些设备驱动相关的选项，并开启一些新的选项：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make kvmconfig # Enable additional options for kvm guest kernel support</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以直接编辑 <code>.config</code> 进行配置。在配置完毕后，需要通过如下命令将配置更新：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make oldconfig # Update current config utilising a provided .config as base&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另外还有一些相关的选项，可以在 <code>scripts/kconfig/Makefile</code> 中找到。</p><h2 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler"><span>Compiler</span></a></h2><p>对于特定版本的 kernel，最好使用合适版本的 GCC 编译器进行编译。比如，2018 年 release 的 kernel，对应 Ubuntu 18.04 上自带的 GCC 版本 (GCC 7.5.0) 可以成功编译，而 Ubuntu 20.04 上自带的 GCC 9.3.0 就不行。所以最好是在与 kernel 版本相当的 OS 上编译。</p><p>如果机器环境的问题没法解决，那么就需要安装不同版本的编译器。推荐使用 <code>build-essential</code> 对不同版本的编译器进行管理。有两种方式：</p><ol><li>通过 <code>build-essential</code> 将系统的 <code>gcc</code> 命令指向合适版本 (如 <code>gcc-7</code>)</li><li>在执行 Makefile 脚本时，指定 <code>CC</code> 和 <code>HOSTCC</code> 使用特定版本 (如 <code>CC=/usr/bin/gcc-7</code>)</li></ol><p>最后开始编译核心与模块：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make vmlinux # 未经压缩的核心</span>
<span class="line">$ make modules # 模块</span>
<span class="line">$ make bzImage # 经过压缩的核心</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接编译全部 (多任务加速)：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make -j8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译完毕后的 <code>bzImage</code> 可以直接被 QEMU 使用。如果想要将内核主映像和模块安装到真机：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ sudo make modules_install</span>
<span class="line">$ sudo make install</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启电脑后进入 GRUB 后，选择高级启动选项，然后选择编译好的内核启动。</p><p>如果想要将内核编译为 debian 包 (或其它压缩形式)，然后通过 <code>dpkg</code> 来安装，相关的支持命令位于 <code>scripts/package/Makefile</code> 中：</p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile" data-title="makefile"><pre><code><span class="line"><span class="token comment"># Help text displayed when executing &#39;make help&#39;</span></span>
<span class="line"><span class="token comment"># ---------------------------------------------------------------------------</span></span>
<span class="line"><span class="token target symbol">help</span><span class="token punctuation">:</span> FORCE</span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  rpm-pkg             - Build both source and binary RPM kernel packages&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  binrpm-pkg          - Build only the binary kernel RPM package&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  deb-pkg             - Build both source and binary deb kernel packages&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  bindeb-pkg          - Build only the binary kernel deb package&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  tar-pkg             - Build the kernel as an uncompressed tarball&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  targz-pkg           - Build the kernel as a gzip compressed tarball&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  tarbz2-pkg          - Build the kernel as a bzip2 compressed tarball&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  tarxz-pkg           - Build the kernel as a xz compressed tarball&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  perf-tar-src-pkg    - Build $(perf-tar).tar source tarball&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  perf-targz-src-pkg  - Build $(perf-tar).tar.gz source tarball&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  perf-tarbz2-src-pkg - Build $(perf-tar).tar.bz2 source tarball&#39;</span></span>
<span class="line">	<span class="token operator">@</span>echo <span class="token string">&#39;  perf-tarxz-src-pkg  - Build $(perf-tar).tar.xz source tarball&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://www.jianshu.com/p/5542b4015f37" target="_blank" rel="noopener noreferrer">一文学会如何下载编译 Linux Kernel</a></p><p><a href="https://www.linode.com/docs/tools-reference/custom-kernels-distros/custom-compiled-kernel-debian-ubuntu/" target="_blank" rel="noopener noreferrer">Custom Compiled Kernel on Debian &amp; Ubuntu</a></p><p><a href="https://www.cyberciti.biz/tips/compiling-linux-kernel-26.html" target="_blank" rel="noopener noreferrer">How to compile and install Linux Kernel 5.6.9 from source code</a></p><p><a href="https://www.linux.com/topic/desktop/how-compile-linux-kernel-0/" target="_blank" rel="noopener noreferrer">How to Compile a Linux Kernel</a></p><hr>`,48)]))}const c=n(i,[["render",r],["__file","Linux Kernel Compilation.html.vue"]]),p=JSON.parse('{"path":"/notes/Operating%20System/Linux%20Kernel%20Compilation.html","title":"Linux - Kernel Compilation","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Source Code","slug":"source-code","link":"#source-code","children":[]},{"level":2,"title":"Dependencies","slug":"dependencies","link":"#dependencies","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Compiler","slug":"compiler","link":"#compiler","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Operating System/Linux Kernel Compilation.md"}');export{c as comp,p as data};
