import{_ as s,c as n,a,o as l}from"./app-7eKjwDat.js";const i={};function t(o,e){return l(),n("div",null,e[0]||(e[0]=[a(`<h1 id="syzkaller-usage" tabindex="-1"><a class="header-anchor" href="#syzkaller-usage"><span>Syzkaller - Usage</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 07 / 06 10:46</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>根据 syzkaller 的架构，用户需要在 host （也就是自己的电脑）上启动 <code>syz-manager</code>。<code>syz-manager</code> 会自动在 host 上创建 VM，并进行 fuzzing。</p><p>因此，准备工作主要分为以下几步：</p><ol><li>准备特定版本的编译器 (GCC ✔️)</li><li>准备特定版本的 Linux 内核源码</li><li>进行一些编译配置后，用编译器编译 Linux 内核</li><li>得到内核的二进制文件和内核启动映像</li><li>使用脚本创建 Linux 发布版的外围映像</li><li>安装 QEMU，并测试编译得到的 Linux 内核和映像，以及 <code>ssh</code></li><li>编辑 syzkaller 的配置文件</li><li>启动 <code>syzkaller-manager</code>，在浏览器上访问指定端口，查看 fuzzing 情况</li></ol><p>接下来是我的配置和运行过程：</p><ul><li>host - Ubuntu 18.04</li><li>GCC - gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)</li><li>kernel - Linux-5.1.16</li><li>Image - Debian-stretch</li><li>QEMU - QEMU emulator version 2.11.1(Debian 1:2.11+dfsg-1ubuntu7.15)</li></ul><p>基本参考 syzkaller 官方文档中的配置过程： <a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md" target="_blank" rel="noopener noreferrer">Setup: Ubuntu host, QEMU vm, x86-64 kernel</a></p><hr><h2 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc"><span>GCC</span></a></h2><p>直接使用了 <code>apt</code> 下载的 GCC，版本是 <code>7.4.0</code>，这个版本用于编译最新的 Linux 内核没什么问题。</p><p>值得一提的是，如果编译稍早版本的内核，需要使用更低版本的 GCC，不然就 <strong>报错报错报错</strong>。在编译配置中将 <code>CC</code> 配置为 <code>$GCC/bin/gcc</code> 即可使用该版本的编译器。</p><hr><h2 id="kernel" tabindex="-1"><a class="header-anchor" href="#kernel"><span>Kernel</span></a></h2><p>在 https://www.kernel.org/ 下载了 <code>2019-07-03</code> 更新的稳定版本 - <code>5.1.16</code>，100 多 M 直接用 Git 下得我有点痛苦啊。后来用了自己的服务器下载，再用 scp 拉回来。。。国内的网络环境我真是 😫</p><p>进入内核源码目录 <code>$KERNEL</code>，生成默认的编译配置：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ cd $KERNEL</span>
<span class="line">$ make defconfig</span>
<span class="line">$ make kvmconfig</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生成的 <code>.config</code> 中开启一些编译选项。这些开启的选项记录的一些内核信息会被 syzkaller 使用到：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">CONFIG_KCOV=y</span>
<span class="line">CONFIG_DEBUG_INFO=y</span>
<span class="line">CONFIG_KASAN=y</span>
<span class="line">CONFIG_KASAN_INLINE=y</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在 vim 中使用 <code>/</code> 来查找。一般来说，可以找到对应字段的注释，如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># CONFIG_DEBUG_INFO is not set</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于较新版本的 Linux 内核，以下两个选项也要开启 (老版本内核没有这两个选项)：</p><blockquote><p>这两个选项很重要！否则虚拟机会进入 rescue mode</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">CONFIG_CONFIGFS_FS=y</span>
<span class="line">CONFIG_SECURITYFS=y</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>开启这些选项后，会导致更多的子选项可用，所以需要重新生成 config：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make oldconfig</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>完成后，开始编译内核：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ make CC=&quot;$GCC/bin/gcc&quot; -j64</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在编译中如果出现错误，可能的原因如下：</p><ul><li>编译器版本不适合 (太高)</li><li>少了一些库 <ul><li>上网搜一下对应错误是因为缺了哪个库导致的</li><li>然后 <code>apt</code> 补一下对应的库</li></ul></li></ul><p>在编译结束后 (不知道用了多久...中途出去吃了个渝合重庆老火锅 😅，回来已经编完了)，在内核源码目录下，生成了内核二进制文件和启动映像：</p><ul><li><code>$KERNEL/vmlinux</code> - kernel binary</li><li><code>$KERNEL/arch/x86/boot/bzImage</code> - packed kernel image</li></ul><hr><h2 id="image" tabindex="-1"><a class="header-anchor" href="#image"><span>Image</span></a></h2><p>为了能够运行一个 OS，还需要有用户空间的硬盘映像 (不可能直接使用一个内核)。另外，由于这个虚拟机会被 host 上的 syzkaller 守护进程通过 SSH 远程连接，因此也需要将一些密钥之类的提前保存在虚拟机中。</p><p>首先在 host 中安装 <em>debootstrap</em>，用于制作虚拟机使用的硬盘映像：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ sudo apt install debootstrap</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><a href="https://wiki.debian.org/Debootstrap" target="_blank" rel="noopener noreferrer">Debian Wiki</a> -</p><blockquote><p>debootstrap is a tool which will install a Debian base system into a subdirectory of another, already installed system. It doesn&#39;t require an installation CD, just access to a Debian repository. It can also be installed and run from another operating system, so, for instance, you can use debootstrap to install Debian onto an unused partition from a running Gentoo system. It can also be used to create a rootfs for a machine of a different architecture, which is known as &quot;cross-debootstrapping&quot;. There is also a largely equivalent version written in C: cdebootstrap, which is smaller.</p></blockquote><p><em>Debootstrap</em> 只需要通过网络，就能在一个已经运行的系统 (host) 中安装 (给虚拟机使用的) <em>Debian</em> 系统。</p><p>Syzkaller 官方给出了一个自动创建一个映像工作目录的脚本。首先创建一个目录 <code>$IMAGE</code> 用于存放映像，然后下载脚本并执行，生成 Linux 发布版的映像：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ cd $IMAGE/</span>
<span class="line">$ wget https://raw.githubusercontent.com/google/syzkaller/master/tools/create-image.sh -O create-image.sh</span>
<span class="line">$ chmod +x create-image.sh</span>
<span class="line">$ ./create-image.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>脚本默认创建了一个最小化的 Debian-stretch 的 Linux image (stretch 是 Debian 9 的代号)。也可以在运行脚本时，指定其它发布版，比如 Debian 10：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ ./create-image.sh --distribution buster</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当然也可以装非最小化版本，比如带上了 <code>git</code>、<code>vim</code> 等工具。但是 syzkaller 的运行不需要用到它们：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ ./create-image.sh --feature full</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中的坑：</p><ul><li>很显然，这个 <code>.sh</code> 脚本中的某一行会使用到 debootstrap</li><li>debootstrap 需要通过网络下载 Debian 的相关文件</li><li>根据 Debian Wiki，debootstrap 默认从中央仓库下载 - http://deb.debian.org/debian/</li><li>好了 🙂，这又 tm 慢得要死了，然后等了 20 min 之后来了句网络错误，曰</li></ul><p>查阅 debootstrap 文档，发现命令之后可以带参数指定镜像：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ debootstrap</span>
<span class="line">I: usage: [OPTION]... &lt;suite&gt; &lt;target&gt; [&lt;mirror&gt; [&lt;script&gt;]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>诶握草，这就好办：查一查 Debian 的 <a href="https://www.debian.org/mirror/list" target="_blank" rel="noopener noreferrer">镜像网站</a>。最后选了一下，感觉从 NUAA 连 USTC 的镜像是最快的，不知道是不是都属于教育系统的原因。。。</p><p>Fine...编辑一下 <code>create-image.sh</code> 这个脚本，在 <code>debootstrap</code> 这一行 (Line <code>79</code>) 的最后加入镜像：http://mirrors.ustc.edu.cn/debian/</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">debootstrap</span> <span class="token parameter variable">--include</span><span class="token operator">=</span><span class="token variable">$PREINSTALL_PKGS</span> <span class="token variable">$RELEASE</span> <span class="token variable">$DIR</span> http://mirrors.ustc.edu.cn/debian/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样真的快好多。</p><p>另外，脚本还默认在虚拟机硬盘中预置一些文件。比如 SSH 密钥、配置等。最终，在 <code>$IMAGE</code> 下得到：<code>$IMAGE/stretch.img</code>。</p><hr><h2 id="qemu" tabindex="-1"><a class="header-anchor" href="#qemu"><span>QEMU</span></a></h2><p>直接使用 <code>apt</code> 安装 QEMU。另外，<code>net-tools</code> 也需要被安装，因为我发现不安装可能会导致虚拟机网卡失效。</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ sudo apt install qemu-system-x86 net-tools</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试刚才的 kernel 和 image 是否能在 QEMU 中运行：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ qemu-system-x86_64 \\</span>
<span class="line">  -kernel $KERNEL/arch/x86/boot/bzImage \\</span>
<span class="line">  -append &quot;console=ttyS0 root=/dev/sda debug earlyprintk=serial slub_debug=QUZ&quot;\\</span>
<span class="line">  -hda $IMAGE/stretch.img \\</span>
<span class="line">  -net user,hostfwd=tcp::10021-:22 -net nic \\</span>
<span class="line">  -enable-kvm \\</span>
<span class="line">  -nographic \\</span>
<span class="line">  -m 2G \\</span>
<span class="line">  -smp 2 \\</span>
<span class="line">  -pidfile vm.pid \\</span>
<span class="line">  2&gt;&amp;1 | tee vm.log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后它就会启动虚拟机。启动完成后，用户名为 <code>root</code> 应该不用密码直接就进去了。</p><p>由于 <code>syz-manager</code> 需要通过 <code>ssh</code> 控制 VM，还要测试一下 <code>ssh</code> 的可用性：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ ssh -i $IMAGE/stretch.id_rsa -p 10021 -o &quot;StrictHostKeyChecking no&quot; root@localhost</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我试了 ok 的，然后就 <code>poweroff</code> 关机了，这样又回到了 host 的命令行。</p><hr><h2 id="syzkaller" tabindex="-1"><a class="header-anchor" href="#syzkaller"><span>Syzkaller</span></a></h2><p>下载 syzkaller 理论上的方法：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ go get -u -d github.com/google/syzkaller/...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>最烦的是下载 syzkaller 的过程，GitHub 又是慢啊，<code>go get</code> 也没有。最后通过把 syzkaller 的仓库导入到 Gitee 然后从 Gitee 上 clone 才解决。</p></blockquote><p>反正不管怎么整，最后的效果就是要保证：在 <code>$GOPATH/src/github.com/google/</code> 目录下有一个 <code>syzkaller/</code> 的文件夹，里面是 <code>syzkaller</code> 的源码 (GitHub 仓库对应的文件夹)。</p><p>接下来，编译 syzkaller。在 <code>$GOPATH/bin</code> 中会生成 <code>syz-fuzzer</code> 和 <code>syz-manager</code>。</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ cd $GOPATH/src/github.com/google/syzkaller</span>
<span class="line">$ make</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 syzkaller 的源码目录下，创建配置文件 <code>my.cfg</code>：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;linux/amd64&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;http&quot;</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1:56741&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;workdir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$GOPATH/src/github.com/google/syzkaller/workdir&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;kernel_obj&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$KERNEL&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;image&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$IMAGE/stretch.img&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;sshkey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$IMAGE/stretch.id_rsa&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;syzkaller&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$GOPATH/src/github.com/google/syzkaller&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;procs&quot;</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;qemu&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;vm&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;kernel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$KERNEL/arch/x86/boot/bzImage&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;cpu&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;mem&quot;</span><span class="token operator">:</span> <span class="token number">2048</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>http</code> 指的是 syzkaller 运行时，可以通过浏览器从该地址查看 fuzzing 状态</li><li><code>workdir</code> - 工作目录，需要创建</li><li>其它显然是一些虚拟机配置</li><li><code>$GOPATH</code>、<code>$KERNEL</code>、<code>$IMAGE</code> 需要被替换为实际上相应的路径</li></ul><p>在 syzkaller 的源码目录下，创建工作目录，并使用该配置文件启动 <code>syz-manager</code>：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ mkdir workdir</span>
<span class="line">$ sudo ./bin/syz-manager -config=my.cfg</span>
<span class="line">2019/07/06 10:54:37 loading corpus...</span>
<span class="line">2019/07/06 10:54:37 serving http on http://127.0.0.1:56741</span>
<span class="line">2019/07/06 10:54:37 serving rpc on tcp://[::]:36699</span>
<span class="line">2019/07/06 10:54:37 booting test machines...</span>
<span class="line">2019/07/06 10:54:37 wait for the connection from test machine...</span>
<span class="line">2019/07/06 10:54:51 machine check:</span>
<span class="line">2019/07/06 10:54:51 syscalls                : 1390/2733</span>
<span class="line">2019/07/06 10:54:51 code coverage           : enabled</span>
<span class="line">2019/07/06 10:54:51 comparison tracing      : CONFIG_KCOV_ENABLE_COMPARISONS is not enabled</span>
<span class="line">2019/07/06 10:54:51 extra coverage          : extra coverage is not supported by the kernel</span>
<span class="line">2019/07/06 10:54:51 setuid sandbox          : enabled</span>
<span class="line">2019/07/06 10:54:51 namespace sandbox       : /proc/self/ns/user does not exist</span>
<span class="line">2019/07/06 10:54:51 Android sandbox         : enabled</span>
<span class="line">2019/07/06 10:54:51 fault injection         : CONFIG_FAULT_INJECTION is not enabled</span>
<span class="line">2019/07/06 10:54:51 leak checking           : CONFIG_DEBUG_KMEMLEAK is not enabled</span>
<span class="line">2019/07/06 10:54:51 net packet injection    : /dev/net/tun does not exist</span>
<span class="line">2019/07/06 10:54:51 net device setup        : enabled</span>
<span class="line">2019/07/06 10:54:51 corpus                  : 513 (0 deleted)</span>
<span class="line">2019/07/06 10:54:57 VMs 4, executed 1139, cover 19545, crashes 0, repro 0</span>
<span class="line">2019/07/06 10:55:07 VMs 4, executed 3134, cover 24729, crashes 0, repro 0</span>
<span class="line">2019/07/06 10:55:17 VMs 4, executed 6689, cover 25739, crashes 0, repro 0</span>
<span class="line">2019/07/06 10:55:27 VMs 4, executed 12912, cover 26182, crashes 0, repro 0</span>
<span class="line">2019/07/06 10:55:37 VMs 4, executed 22786, cover 26258, crashes 0, repro 0</span>
<span class="line">2019/07/06 10:55:47 VMs 4, executed 30311, cover 26298, crashes 0, repro 0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fuzzing 开始了，访问上述 HTTP 地址可以实时查看 fuzzing 状态。</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>可能我下载的内核代码是最新版本的缘故，Fuzzing 了三个小时，一次 crash 也没有，佛了 😑。</p><hr>`,87)]))}const c=s(i,[["render",t],["__file","Syzkaller Usage.html.vue"]]),p=JSON.parse('{"path":"/notes/Operating%20System/Syzkaller%20Usage.html","title":"Syzkaller - Usage","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"GCC","slug":"gcc","link":"#gcc","children":[]},{"level":2,"title":"Kernel","slug":"kernel","link":"#kernel","children":[]},{"level":2,"title":"Image","slug":"image","link":"#image","children":[]},{"level":2,"title":"QEMU","slug":"qemu","link":"#qemu","children":[]},{"level":2,"title":"Syzkaller","slug":"syzkaller","link":"#syzkaller","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"notes/Operating System/Syzkaller Usage.md"}');export{c as comp,p as data};
