import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="interface-java-util-concurrent-locks-lock" tabindex="-1"><a class="header-anchor" href="#interface-java-util-concurrent-locks-lock"><span>Interface - java.util.concurrent.locks.Lock</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 12 / 23 21:22</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><p><strong>锁</strong> 是用于控制多个线程访问共享资源的工具。<code>synchroinzed</code> 关键字提供对每个对象的 <code>monitor</code> 的隐式访问。所有的锁应当按照获得的顺序被释放 (防止死锁)。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该接口的实现类能够提供更灵活的锁获取和锁释放机制。锁的使用应当遵循：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Lock</span> l <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span>
<span class="line">l<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// access the resource protected by this lock</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    l<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保证获得锁的代码被 <code>try-catch</code> 块保护，以便锁被释放。此外，本接口还提供：</p><ul><li>非阻塞尝试获得锁的 <code>tryLock()</code> 函数</li><li>可以被中断的尝试获得锁函数 <code>lockInterruptibly()</code></li><li>可以超时的尝试获得锁函数</li></ul><p>由于 <code>Lock</code> 本身也是对象，因此也可以通过 <code>synchronized</code> 获得 monitor 锁。但为防止混淆，最好不要这样做。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementations provide more extensive locking</span>
<span class="line"> * operations than can be obtained using <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">synchronized</span></span></span><span class="token punctuation">}</span> methods</span>
<span class="line"> * and statements.  They allow more flexible structuring, may have</span>
<span class="line"> * quite different properties, and may support multiple associated</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Condition</span></span><span class="token punctuation">}</span> objects.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A lock is a tool for controlling access to a shared resource by</span>
<span class="line"> * multiple threads. Commonly, a lock provides exclusive access to a</span>
<span class="line"> * shared resource: only one thread at a time can acquire the lock and</span>
<span class="line"> * all access to the shared resource requires that the lock be</span>
<span class="line"> * acquired first. However, some locks may allow concurrent access to</span>
<span class="line"> * a shared resource, such as the read lock of a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReadWriteLock</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The use of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">synchronized</span></span></span><span class="token punctuation">}</span> methods or statements provides</span>
<span class="line"> * access to the implicit monitor lock associated with every object, but</span>
<span class="line"> * forces all lock acquisition and release to occur in a block-structured way:</span>
<span class="line"> * when multiple locks are acquired they must be released in the opposite</span>
<span class="line"> * order, and all locks must be released in the same lexical scope in which</span>
<span class="line"> * they were acquired.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>While the scoping mechanism for <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">synchronized</span></span></span><span class="token punctuation">}</span> methods</span>
<span class="line"> * and statements makes it much easier to program with monitor locks,</span>
<span class="line"> * and helps avoid many common programming errors involving locks,</span>
<span class="line"> * there are occasions where you need to work with locks in a more</span>
<span class="line"> * flexible way. For example, some algorithms for traversing</span>
<span class="line"> * concurrently accessed data structures require the use of</span>
<span class="line"> * <span class="token entity named-entity" title="&quot;">&amp;quot;</span>hand-over-hand<span class="token entity named-entity" title="&quot;">&amp;quot;</span> or <span class="token entity named-entity" title="&quot;">&amp;quot;</span>chain locking<span class="token entity named-entity" title="&quot;">&amp;quot;</span>: you</span>
<span class="line"> * acquire the lock of node A, then node B, then release A and acquire</span>
<span class="line"> * C, then release B and acquire D and so on.  Implementations of the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> interface enable the use of such techniques by</span>
<span class="line"> * allowing a lock to be acquired and released in different scopes,</span>
<span class="line"> * and allowing multiple locks to be acquired and released in any</span>
<span class="line"> * order.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>With this increased flexibility comes additional</span>
<span class="line"> * responsibility. The absence of block-structured locking removes the</span>
<span class="line"> * automatic release of locks that occurs with <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">synchronized</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * methods and statements. In most cases, the following idiom</span>
<span class="line"> * should be used:</span>
<span class="line"> *</span>
<span class="line"> *  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token class-name">Lock</span> l <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span></span>
<span class="line"> * <span class="token code language-java">l<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token comment">// access the resource protected by this lock</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java">l<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * When locking and unlocking occur in different scopes, care must be</span>
<span class="line"> * taken to ensure that all code that is executed while the lock is</span>
<span class="line"> * held is protected by try-finally or try-catch to ensure that the</span>
<span class="line"> * lock is released when necessary.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementations provide additional functionality</span>
<span class="line"> * over the use of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">synchronized</span></span></span><span class="token punctuation">}</span> methods and statements by</span>
<span class="line"> * providing a non-blocking attempt to acquire a lock (<span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> * <span class="token reference"><span class="token punctuation">#</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>), an attempt to acquire the lock that can be</span>
<span class="line"> * interrupted (<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">lockInterruptibly</span></span><span class="token punctuation">}</span>, and an attempt to acquire</span>
<span class="line"> * the lock that can timeout (<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>).</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> class can also provide behavior and semantics</span>
<span class="line"> * that is quite different from that of the implicit monitor lock,</span>
<span class="line"> * such as guaranteed ordering, non-reentrant usage, or deadlock</span>
<span class="line"> * detection. If an implementation provides such specialized semantics</span>
<span class="line"> * then the implementation must document those semantics.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Note that <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> instances are just normal objects and can</span>
<span class="line"> * themselves be used as the target in a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">synchronized</span></span></span><span class="token punctuation">}</span> statement.</span>
<span class="line"> * Acquiring the</span>
<span class="line"> * monitor lock of a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> instance has no specified relationship</span>
<span class="line"> * with invoking any of the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">lock</span></span><span class="token punctuation">}</span> methods of that instance.</span>
<span class="line"> * It is recommended that to avoid confusion you never use <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * instances in this way, except within their own implementation.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Except where noted, passing a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> value for any</span>
<span class="line"> * parameter will result in a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span><span class="token punctuation">}</span> being</span>
<span class="line"> * thrown.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Memory Synchronization<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>All <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementations <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>must<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> enforce the same</span>
<span class="line"> * memory synchronization semantics as provided by the built-in monitor</span>
<span class="line"> * lock, as described in</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * The Java Language Specification (17.4 Memory Model)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>A successful <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">lock</span></span><span class="token punctuation">}</span> operation has the same memory</span>
<span class="line"> * synchronization effects as a successful <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Lock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> action.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>A successful <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">unlock</span></span><span class="token punctuation">}</span> operation has the same</span>
<span class="line"> * memory synchronization effects as a successful <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Unlock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> action.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * Unsuccessful locking and unlocking operations, and reentrant</span>
<span class="line"> * locking/unlocking operations, do not require any memory</span>
<span class="line"> * synchronization effects.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Implementation Considerations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The three forms of lock acquisition (interruptible,</span>
<span class="line"> * non-interruptible, and timed) may differ in their performance</span>
<span class="line"> * characteristics, ordering guarantees, or other implementation</span>
<span class="line"> * qualities.  Further, the ability to interrupt the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>ongoing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * acquisition of a lock may not be available in a given <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * class.  Consequently, an implementation is not required to define</span>
<span class="line"> * exactly the same guarantees or semantics for all three forms of</span>
<span class="line"> * lock acquisition, nor is it required to support interruption of an</span>
<span class="line"> * ongoing lock acquisition.  An implementation is required to clearly</span>
<span class="line"> * document the semantics and guarantees provided by each of the</span>
<span class="line"> * locking methods. It must also obey the interruption semantics as</span>
<span class="line"> * defined in this interface, to the extent that interruption of lock</span>
<span class="line"> * acquisition is supported: which is either totally, or only on</span>
<span class="line"> * method entry.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>As interruption generally implies cancellation, and checks for</span>
<span class="line"> * interruption are often infrequent, an implementation can favor responding</span>
<span class="line"> * to an interrupt over normal method return. This is true even if it can be</span>
<span class="line"> * shown that the interrupt occurred after another action may have unblocked</span>
<span class="line"> * the thread. An implementation should document this behavior.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ReentrantLock</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Condition</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ReadWriteLock</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@since</span> 1.5</span>
<span class="line"> * <span class="token keyword">@author</span> Doug Lea</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="interfaces" tabindex="-1"><a class="header-anchor" href="#interfaces"><span>Interfaces</span></a></h2><h3 id="lock" tabindex="-1"><a class="header-anchor" href="#lock"><span>Lock</span></a></h3><p>获得锁。如果当前的锁不可获得，那么该进程进入 <code>BLOCKED</code> 状态并被重新调度，直到锁可被获得。在实现中，应当具有检测错误获得锁的能力 (死锁等)。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Acquires the lock.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the lock is not available then the current thread becomes</span>
<span class="line"> * disabled for thread scheduling purposes and lies dormant until the</span>
<span class="line"> * lock has been acquired.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Implementation Considerations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation may be able to detect erroneous use</span>
<span class="line"> * of the lock, such as an invocation that would cause deadlock, and</span>
<span class="line"> * may throw an (unchecked) exception in such circumstances.  The</span>
<span class="line"> * circumstances and the exception type must be documented by that</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interruptible-lock" tabindex="-1"><a class="header-anchor" href="#interruptible-lock"><span>Interruptible Lock</span></a></h3><p>获得锁，除非当前线程被中断。<code>lock()</code> 是不可中断等待锁，<code>lockInterruptibly()</code> 是可中断等待锁。如果锁可用，则立刻返回；如果锁不可用，那么当前线程进行重新竞争，直到以下两种事件发生:</p><ol><li>锁可以被获得</li><li>其它线程中断了当前线程 - 如果当前线程在等待锁时被中断，则抛出 <code>InterruptedException</code> 异常</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Acquires the lock unless the current thread is</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token field">interrupt</span></span> interrupted<span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Acquires the lock if it is available and returns immediately.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the lock is not available then the current thread becomes</span>
<span class="line"> * disabled for thread scheduling purposes and lies dormant until</span>
<span class="line"> * one of two things happens:</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The lock is acquired by the current thread; or</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Some other thread <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token field">interrupt</span></span> interrupts<span class="token punctuation">}</span> the</span>
<span class="line"> * current thread, and interruption of lock acquisition is supported.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the current thread:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>has its interrupted status set on entry to this method; or</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>is <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token field">interrupt</span></span> interrupted<span class="token punctuation">}</span> while acquiring the</span>
<span class="line"> * lock, and interruption of lock acquisition is supported,</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * then <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span><span class="token punctuation">}</span> is thrown and the current thread&#39;s</span>
<span class="line"> * interrupted status is cleared.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Implementation Considerations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The ability to interrupt a lock acquisition in some</span>
<span class="line"> * implementations may not be possible, and if possible may be an</span>
<span class="line"> * expensive operation.  The programmer should be aware that this</span>
<span class="line"> * may be the case. An implementation should document when this is</span>
<span class="line"> * the case.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>An implementation can favor responding to an interrupt over</span>
<span class="line"> * normal method return.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation may be able to detect</span>
<span class="line"> * erroneous use of the lock, such as an invocation that would</span>
<span class="line"> * cause deadlock, and may throw an (unchecked) exception in such</span>
<span class="line"> * circumstances.  The circumstances and the exception type must</span>
<span class="line"> * be documented by that <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if the current thread is</span>
<span class="line"> *         interrupted while acquiring the lock (and interruption</span>
<span class="line"> *         of lock acquisition is supported)</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="try-lock" tabindex="-1"><a class="header-anchor" href="#try-lock"><span>Try Lock</span></a></h3><p>如果锁可用，就获得锁并返回 <code>true</code>，如果锁不可用，则立刻返回 <code>false</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Acquires the lock only if it is free at the time of invocation.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Acquires the lock if it is available and returns immediately</span>
<span class="line"> * with the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * If the lock is not available then this method will return</span>
<span class="line"> * immediately with the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A typical usage idiom for this method would be:</span>
<span class="line"> *  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token comment">// manipulate protected state</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java">lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token comment">// perform alternative actions</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * This usage ensures that the lock is unlocked if it was acquired, and</span>
<span class="line"> * doesn&#39;t try to unlock if the lock was not acquired.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the lock was acquired and</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> otherwise</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例用法:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// manipulate protected state</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// perform alternative actions</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="try-lock-timeout" tabindex="-1"><a class="header-anchor" href="#try-lock-timeout"><span>Try Lock Timeout</span></a></h3><p>在给定的时间内获得锁。如果锁可以被获得，那么立刻获得锁，并返回 <code>true</code>；如果锁暂时不可获得，那么线程进入休眠，直到以下事件之一发生:</p><ol><li>锁被当前线程获得</li><li>其它线程中断当前线程 - <code>InterruptedException</code> 抛出</li><li>给定的等待时间超时 - 返回 <code>false</code></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Acquires the lock if it is free within the given waiting time and the</span>
<span class="line"> * current thread has not been <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token field">interrupt</span></span> interrupted<span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the lock is available this method returns immediately</span>
<span class="line"> * with the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * If the lock is not available then</span>
<span class="line"> * the current thread becomes disabled for thread scheduling</span>
<span class="line"> * purposes and lies dormant until one of three things happens:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The lock is acquired by the current thread; or</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Some other thread <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token field">interrupt</span></span> interrupts<span class="token punctuation">}</span> the</span>
<span class="line"> * current thread, and interruption of lock acquisition is supported; or</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The specified waiting time elapses</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the lock is acquired then the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> is returned.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the current thread:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>has its interrupted status set on entry to this method; or</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>is <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token field">interrupt</span></span> interrupted<span class="token punctuation">}</span> while acquiring</span>
<span class="line"> * the lock, and interruption of lock acquisition is supported,</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * then <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span><span class="token punctuation">}</span> is thrown and the current thread&#39;s</span>
<span class="line"> * interrupted status is cleared.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the specified waiting time elapses then the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * is returned.</span>
<span class="line"> * If the time is</span>
<span class="line"> * less than or equal to zero, the method will not wait at all.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Implementation Considerations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The ability to interrupt a lock acquisition in some implementations</span>
<span class="line"> * may not be possible, and if possible may</span>
<span class="line"> * be an expensive operation.</span>
<span class="line"> * The programmer should be aware that this may be the case. An</span>
<span class="line"> * implementation should document when this is the case.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>An implementation can favor responding to an interrupt over normal</span>
<span class="line"> * method return, or reporting a timeout.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation may be able to detect</span>
<span class="line"> * erroneous use of the lock, such as an invocation that would cause</span>
<span class="line"> * deadlock, and may throw an (unchecked) exception in such circumstances.</span>
<span class="line"> * The circumstances and the exception type must be documented by that</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">time</span> the maximum time to wait for the lock</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">time</span></span><span class="token punctuation">}</span> argument</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the lock was acquired and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> *         if the waiting time elapsed before the lock was acquired</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if the current thread is interrupted</span>
<span class="line"> *         while acquiring the lock (and interruption of lock</span>
<span class="line"> *         acquisition is supported)</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="release" tabindex="-1"><a class="header-anchor" href="#release"><span>Release</span></a></h3><p>释放锁。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Releases the lock.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Implementation Considerations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation will usually impose</span>
<span class="line"> * restrictions on which thread can release a lock (typically only the</span>
<span class="line"> * holder of the lock can release it) and may throw</span>
<span class="line"> * an (unchecked) exception if the restriction is violated.</span>
<span class="line"> * Any restrictions and the exception</span>
<span class="line"> * type must be documented by that <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="condition" tabindex="-1"><a class="header-anchor" href="#condition"><span>Condition</span></a></h3><p>创建一个 condition 条件变量，用于实现 <code>await()</code> / <code>notify()</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a new <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Condition</span></span><span class="token punctuation">}</span> instance that is bound to this</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> instance.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Before waiting on the condition the lock must be held by the</span>
<span class="line"> * current thread.</span>
<span class="line"> * A call to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Condition</span><span class="token punctuation">#</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> will atomically release the lock</span>
<span class="line"> * before waiting and re-acquire the lock before the wait returns.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Implementation Considerations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The exact operation of the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Condition</span></span><span class="token punctuation">}</span> instance depends on</span>
<span class="line"> * the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> implementation and must be documented by that</span>
<span class="line"> * implementation.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> A new <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Condition</span></span><span class="token punctuation">}</span> instance for this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span> instance</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">UnsupportedOperationException</span></span> if this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Lock</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> *         implementation does not support conditions</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,39)]))}const o=s(p,[["render",l],["__file","Interface - java.util.concurrent.locks.Lock.html.vue"]]),u=JSON.parse('{"path":"/jdk-source-code-analysis/java.util.concurrent/Interface%20-%20java.util.concurrent.locks.Lock.html","title":"Interface - java.util.concurrent.locks.Lock","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Interfaces","slug":"interfaces","link":"#interfaces","children":[{"level":3,"title":"Lock","slug":"lock","link":"#lock","children":[]},{"level":3,"title":"Interruptible Lock","slug":"interruptible-lock","link":"#interruptible-lock","children":[]},{"level":3,"title":"Try Lock","slug":"try-lock","link":"#try-lock","children":[]},{"level":3,"title":"Try Lock Timeout","slug":"try-lock-timeout","link":"#try-lock-timeout","children":[]},{"level":3,"title":"Release","slug":"release","link":"#release","children":[]},{"level":3,"title":"Condition","slug":"condition","link":"#condition","children":[]}]}],"git":{},"filePathRelative":"jdk-source-code-analysis/java.util.concurrent/Interface - java.util.concurrent.locks.Lock.md"}');export{o as comp,u as data};
