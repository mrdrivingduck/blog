import{_ as n,c as l,a as i,o as s}from"./app-7eKjwDat.js";const c={};function t(o,e){return s(),l("div",null,e[0]||(e[0]=[i(`<h1 id="network-tcp-connection-management" tabindex="-1"><a class="header-anchor" href="#network-tcp-connection-management"><span>Network - TCP Connection Management</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 03 / 09 11:11</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="basic" tabindex="-1"><a class="header-anchor" href="#basic"><span>Basic</span></a></h2><p>TCP 提供了一种 <strong>面向连接的 (connection-oriented)、可靠的字节流</strong> 服务。字节流中并不存在 TCP 自动插入的消息边界，由每个端点独立选择自己的读写大小。TCP 会把应用程序字节流转换为一组 IP 层可以携带的分组，每个分组都有唯一的序列号，用于标识顺序，以保证字节流有序。</p><p>TCP 的关键技术：</p><ul><li>连接管理 (<em>三次握手</em>、<em>四次挥手</em>)</li><li>超时重传</li><li>流量控制 (发送方与接收方的速率同步问题)</li><li>拥塞控制 (发送方与接收方之间的网络速率问题)</li><li>保活 (Keep Alive)</li></ul><hr><h2 id="tcp-connection" tabindex="-1"><a class="header-anchor" href="#tcp-connection"><span>TCP Connection</span></a></h2><p>TCP 连接由一个 <strong>四元组</strong> 组成：</p><ul><li>源 IP 地址</li><li>源端口号</li><li>目的 IP 地址</li><li>目的端口号</li></ul><p>TCP 连接的三个阶段：</p><ul><li>启动 (连接启动)</li><li>数据传输</li><li>退出 (连接关闭)</li></ul><h2 id="establishment-of-tcp-connection" tabindex="-1"><a class="header-anchor" href="#establishment-of-tcp-connection"><span>Establishment of TCP Connection</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  (CLIENT)                                                                      (SERVER)</span>
<span class="line">              |                                                             |</span>
<span class="line">              |                                                             |    LISTEN</span>
<span class="line">              |  --------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    SYN, Seq = ISN(c)    --------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  |</span>
<span class="line">  SYN_SENT    |                                                             |   SYN_RCVD</span>
<span class="line">              |  &lt;&lt;&lt;---  SYN + ACK, Seq = ISN(s), ACK = ISN(c) + 1  &lt;&lt;&lt;---  |</span>
<span class="line"> ESTABLISHED  |                                                             |</span>
<span class="line">              |  ---&gt;&gt;&gt;   ACK, Seq = ISN(c) + 1, ACK = ISN(s) + 1   ---&gt;&gt;&gt;  |</span>
<span class="line">              |                                                             |  ESTABLISHED</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SYN</code> 和 <code>ACK</code> 都是 TCP 头部中的标志位，<code>Seq</code> (序列号) 和 <code>ACK</code> 带有的确认号都是 TCP 头部中的组成部分。</p><p>序列号表示当前传送的 TCP 分组编号，实际上是当前分组数据的第一个字节在整个字节流中的偏移位置，是一个 32-bit 无符号数，溢出后重新归零。在连接建立时，并不是使用 0 或 1 来作为第一个分组的编号，而是通过一些较为复杂的算法，随机生成一个初始序列号 <code>ISN</code>。理论上只有 <strong>IP 地址、端口号、序列号、校验和</strong> 四个要素都正确的分组才会被接收方接收。随机产生初始序列号有助于处理一个 TCP 连接关闭后又以相同的四元组被重新打开时，序列号之间发生重合的问题 (防止两次独立的连接传输的数据互串)。</p><p><code>ACK</code> 报文中带有的确认号表示接收方期待接收的下一个序列号，也就是最后一个被成功接收的字节的序列号 + 1。每发送一个新的 <code>SYN</code>，就期待收到一个序列号 + 1 的 <code>ACK</code> 确认，因为 <code>SYN</code> 的数据占一个字节。由于 <code>SYN</code> 占用了一个序列号，因此将会被 <strong>重传机制</strong> 保证可靠交付，如果丢失则重传，重传时以 <em>指数回退</em> 的方式逐渐降低发送频率。</p><p>TCP 连接建立的步骤：</p><ol><li>客户端发送一个 <code>SYN</code> 报文，指明客户端生成的初始序列号 <code>ISN(c)</code></li><li>服务器也发送一个 <code>SYN</code> 报文，指明服务端生成的初始序列号 <code>ISN(s)</code>；同时，还要对客户端的 <code>SYN</code> 进行确认，发送带有 <code>ISN(c) + 1</code> 的 <code>ACK</code> 报文</li><li>客户端对服务器的 <code>SYN</code> 报文进行确认，发送带有 <code>ISN(s) + 1</code> 的 <code>ACK</code> 报文</li></ol><h3 id="最大段大小-mss-选项" tabindex="-1"><a class="header-anchor" href="#最大段大小-mss-选项"><span>最大段大小 (MSS) 选项</span></a></h3><p><code>MSS</code> 指的是 TCP 协议允许从对方接收到的最大报文段，也是对方在发送数据时能够使用的最大报文段。在 TCP 连接建立时，通信双方需要在 <code>SYN</code> 报文中的 <code>MSS</code> 选项里说明自己允许接收的最大报文段大小。</p><h3 id="用户超时选项" tabindex="-1"><a class="header-anchor" href="#用户超时选项"><span>用户超时选项</span></a></h3><p>TCP 发送者在收到对方确认接收数据前，愿意等待 <code>ACK</code> 确认的时间。</p><h2 id="termination-of-tcp-connection" tabindex="-1"><a class="header-anchor" href="#termination-of-tcp-connection"><span>Termination of TCP Connection</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  (CLIENT)                                                                        (SERVER)</span>
<span class="line">              |                                                               |</span>
<span class="line"> ESTABLISHED  |                                                               |  ESTABLISHED</span>
<span class="line">              |  ------&gt;&gt;&gt;&gt;&gt;&gt;    FIN + ACK, Seq = K, ACK = L    ------&gt;&gt;&gt;&gt;&gt;&gt;  |</span>
<span class="line"> FIN_WAIT_1   |                                                               |</span>
<span class="line">              |  &lt;&lt;&lt;&lt;&lt;&lt;------     ACK, Seq = L, ACK = K + 1     &lt;&lt;&lt;&lt;&lt;&lt;------  |</span>
<span class="line"> FIN_WAIT_2   |                                                               |  CLOSE_WAIT</span>
<span class="line">              |  &lt;&lt;&lt;&lt;&lt;&lt;------  FIN + ACK, Seq = L, ACK = K + 1  &lt;&lt;&lt;&lt;&lt;&lt;------  |</span>
<span class="line">  TIME_WAIT   |                                                               |   LAST_ACK</span>
<span class="line">              |  ------&gt;&gt;&gt;&gt;&gt;&gt;       ACK, Seq = K, ACK = L       ------&gt;&gt;&gt;&gt;&gt;&gt;  |</span>
<span class="line">   (2 MSL)    |                                                               |    CLOSED</span>
<span class="line">              |                                                               |</span>
<span class="line">   CLOSED     |                                                               |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接的任何一方都可以发起关闭操作：</p><ol><li>主动关闭方发送 <code>FIN</code>，指明自己当前的序列号 K，以及确认最近接收到的数据，希望下一个接收到的报文序列号为 L</li><li>被动关闭方发送 <code>ACK</code> 来确认 <code>FIN</code>，序列号为 L (如主动方所愿)，确认接收到的报文为 K + 1 号</li><li>被动关闭方将自身转变为主动关闭方，发送 <code>FIN</code>，指明自身序列号为 L (因为刚才的 <code>ACK</code> 不占序列号)，确认接收到的报文为 K + 1 (之前另一方没有发送报文)</li><li>主动关闭方发送 <code>ACK</code> 回应被动关闭方的 <code>FIN</code> (但是序列号为什么还是 K 😧)</li></ol><p>被动关闭方收到 <code>ACK</code> 后立刻进入关闭状态；主动关闭方在 <code>TIME_WAIT</code> 状态下等待两个 MSL (最大段生存期，Maximum Segment Lifetime) 后进入关闭状态。MSL 代表任何报文段在被丢弃前在网络中被允许存在的最长时间。等待这个时间，是要确保能够接收到对方主动重传的 <code>FIN</code>：如果自己发出的最后一个 <code>ACK</code> 丢失，那么对方将重新发送 <code>FIN</code>，那么在 2 MSL 的时间内将能等到这个 <code>FIN</code>，然后向对方重新发送 <code>ACK</code>。这样使得 TCP 避免丢失最终的 ACK。</p><p>等待 2 MSL 的另一个原因是，防止以相同四元组建立的新连接中，收到了上一次连接中延迟到达的数据。说白了就是，在 2 MSL 超时之前，当前四元组不可重新使用。等到确认该四元组中的数据交换已经结束后，该四元组才能重新被使用。当连接处于 2 MSL 等待状态时，任何延迟到达的报文段都会被丢弃。<strong>2 MSL 状态能够防止新的连接将前一个连接的延迟报文解释成自身数据的情况。</strong></p><p>通常，服务器执行被动关闭操作，不会进入 <code>TIME_WAIT</code> 状态。</p><blockquote><p>有时，重启服务器后出现的 <strong>端口已被占用</strong> 无法绑定，就是因为服务器执行了主动关闭后，四元组还处于 2 MSL 等待状态。</p></blockquote><p>同时也可以看出，通信双方关闭连接的过程中，两个方向可以被独立拆分。因此 TCP 支持 <strong>半关闭</strong>：仅关闭一个方向上的数据传输：</p><ul><li><code>shutdown()</code> 关闭一个方向上的传输</li><li><code>close()</code> 同时关闭两个方向上的传输</li></ul><h2 id="重置报文" tabindex="-1"><a class="header-anchor" href="#重置报文"><span>重置报文</span></a></h2><p>当接收方收到一条对于相关连接而言是不正确的报文，就会返回一个 <strong>重置报文段</strong> <code>RST</code>，使 TCP 连接快速拆卸：</p><ol><li>对不存在端口的连接请求</li><li>关闭连接，终止释放 (不同于 <code>FIN</code> 的 <strong>有序释放</strong>)</li><li>半开连接 (在未告知通信另一端的情况下关闭或终止连接，然后重新连接)，由于重新启动的服务对于当前 TCP 连接没有记忆，则会回复一个 <code>RST</code></li><li>时间等待错误 (在 2 MSL 期间收到了延时到达的数据，发送 <code>ACK</code> 后得到 <code>RST</code>，使得客户端过早转移到 <code>CLOSED</code> 状态)</li></ol><h2 id="tcp-server-options" tabindex="-1"><a class="header-anchor" href="#tcp-server-options"><span>TCP Server Options</span></a></h2><p>TCP 服务器默认监听的本地 IP 地址是一个通配符：<code>:::22</code>，表示将接受到所有本地 IP 地址的连接。当然，可以指定监听某个本地 IP 地址，那么只有访问该 IP 地址的连接会被接受。TCP 依靠四元组的多路分解获得报文段。拒绝连接的操作由 OS 的 TCP 协议栈根据请求 <code>SYN</code> 报文中的目的地址判断。</p><p>另外，OS 还可以对连接的外部 IP 和端口进行过滤。</p><p>操作系统内会有两种队列维护新被建立的连接：</p><ul><li>已经收到 <code>SYN</code>，但连接还没有完成 (未收到 <code>ACK</code>，处于 <code>SYN_RCVD</code> 状态)</li><li>三次握手已经完成，但还未被应用程序接受 (应用程序中 <code>accept()</code> 还未返回)</li></ul><p>OS 可以对这两个队列的长度进行配置。如果队列已满，那么再进入的连接将会被拒绝。如果三次握手已经完成而连接还未被应用程序接受，但此时客户端的数据已经到达，那么 OS 会将到来的数据缓存。如果队列中已经没有足够的空间分配给新连接，OS 可以试着 <strong>延迟</strong> 对 <code>SYN</code> 作出响应，从而给应用程序一个跟上节奏的机会。Linux 坚持在能力允许的范围内不忽略进入的连接。</p><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p>TCP/IP 详解 - 卷 1：协议</p><hr>`,49)]))}const d=n(c,[["render",t],["__file","Network TCP Connection Management.html.vue"]]),r=JSON.parse('{"path":"/notes/Network/Network%20TCP%20Connection%20Management.html","title":"Network - TCP Connection Management","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Basic","slug":"basic","link":"#basic","children":[]},{"level":2,"title":"TCP Connection","slug":"tcp-connection","link":"#tcp-connection","children":[]},{"level":2,"title":"Establishment of TCP Connection","slug":"establishment-of-tcp-connection","link":"#establishment-of-tcp-connection","children":[{"level":3,"title":"最大段大小 (MSS) 选项","slug":"最大段大小-mss-选项","link":"#最大段大小-mss-选项","children":[]},{"level":3,"title":"用户超时选项","slug":"用户超时选项","link":"#用户超时选项","children":[]}]},{"level":2,"title":"Termination of TCP Connection","slug":"termination-of-tcp-connection","link":"#termination-of-tcp-connection","children":[]},{"level":2,"title":"重置报文","slug":"重置报文","link":"#重置报文","children":[]},{"level":2,"title":"TCP Server Options","slug":"tcp-server-options","link":"#tcp-server-options","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Network/Network TCP Connection Management.md"}');export{d as comp,r as data};
