import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-2-1-sgi-空间分配器" tabindex="-1"><a class="header-anchor" href="#chapter-2-1-sgi-空间分配器"><span>Chapter 2.1 - SGI 空间分配器</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 03 / 31 22:35</p><p>Nanjing, Jiangsu, China</p><hr><p>空间分配器隐藏在 STL 的一切组件中，默默工作。为什么不把 allocator 称为 <strong>内存分配器</strong> 而是 <strong>空间分配器</strong> 呢？因为空间不一定是内存，也可以是磁盘或其它的存储介质。完全可以自行实现一个向磁盘索取空间的 allocator。但是在 SGI STL 中，空间的分配对象是 <strong>内存</strong>。</p><h2 id="_2-1-空间分配器的标准接口" tabindex="-1"><a class="header-anchor" href="#_2-1-空间分配器的标准接口"><span>2.1 空间分配器的标准接口</span></a></h2><ul><li><code>rebind()</code>：？</li><li><code>allocator()</code> / <code>allocator(const allocator&amp;)</code>：构造函数 / 拷贝构造函数</li><li><code>template &lt;class U&gt; allocator::allocator(const allocator&lt;U&gt;&amp;)</code>：泛化的拷贝构造函数</li><li><code>~allocator()</code>：析构函数</li><li><code>address(reference x)</code> / <code>address(const_reference x)</code>：返回对象地址</li><li><code>allocate(size_type n, const void* = 0)</code>：分配存储 <code>n</code> 个对象的空间</li><li><code>deallocate(pointer p, size_type n)</code>：归还先前分配的空间</li><li><code>max_size()</code>：返回可成功分配的最大量</li><li><code>construct(pointer p, const T&amp; x)</code>：构造对象</li><li><code>destroy(pointer p)</code>：析构对象</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">allocator</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> alloc _Alloc<span class="token punctuation">;</span>          <span class="token comment">// The underlying allocator.</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> size_t     size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t  difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>       pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>       reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp        value_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">rebind</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">typedef</span> allocator<span class="token operator">&lt;</span>_Tp1<span class="token operator">&gt;</span> other<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> __STL_NOTHROW <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">allocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator<span class="token operator">&amp;</span><span class="token punctuation">)</span> __STL_NOTHROW <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token operator">&gt;</span> <span class="token function">allocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator<span class="token operator">&lt;</span>_Tp1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">)</span> __STL_NOTHROW <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">~</span><span class="token function">allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> __STL_NOTHROW <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  pointer <span class="token function">address</span><span class="token punctuation">(</span>reference __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>__x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_pointer <span class="token function">address</span><span class="token punctuation">(</span>const_reference __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>__x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// __n is permitted to be 0.  The C++ standard says nothing about what</span></span>
<span class="line">  <span class="token comment">// the return value is when __n == 0.</span></span>
<span class="line">  _Tp<span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> __n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_Alloc<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// __p is not permitted to be a null pointer.</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> size_type __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _Alloc<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> __STL_NOTHROW</span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">size_t</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span> <span class="token function">_Tp</span><span class="token punctuation">(</span>__val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">)</span> <span class="token punctuation">{</span> __p<span class="token operator">-&gt;</span><span class="token operator">~</span><span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SGI STL 在空间分配器上脱离了 STL 的标准规格，自行实现了一个专属的、拥有层次分配能力的、效率优越的特殊分配器。但是实际上 SGI STL 仍然提供了一个标准的分配器接口 <code>simple_alloc</code>，对 SGI STL 自行实现的内存分配器做了一层隐藏：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">simple_alloc</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">static</span> _Tp<span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">==</span> __n <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>_Tp<span class="token operator">*</span><span class="token punctuation">)</span> _Alloc<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">static</span> _Tp<span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>_Tp<span class="token operator">*</span><span class="token punctuation">)</span> _Alloc<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> __n<span class="token punctuation">)</span> _Alloc<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span> _Alloc<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的 SGI STL 容器全部使用这个 <code>simple_alloc</code> 接口。</p><p>SGI STL 使用了自行实现的空间分配器 <code>alloc</code>，与标准规范中的 <code>allocator</code> 不同。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 标准写法</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> vec<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// SGI STL in GCC</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>alloc<span class="token operator">&gt;</span> vec<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过 SGI STL 在实现所有容器时，已经将默认的空间分配器设置为 SGI 自行实现的 <code>alloc</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> alloc<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">vector</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以对于代码移植应该也没有什么问题，使用默认的缺省空间分配器即可。</p><h2 id="_2-2-sgi-标准的空间分配器-std-allocator" tabindex="-1"><a class="header-anchor" href="#_2-2-sgi-标准的空间分配器-std-allocator"><span>2.2 SGI 标准的空间分配器 <code>std::allocator</code></span></a></h2><p>SGI 中定义了一个符合标准且名为 <code>allocator</code> 的分配器，但是 SGI 自己不使用它，也不建议开发者使用，因为 <strong>效率不佳</strong>。其本质只是对 C++ 原生的 <code>operator new</code> 和 <code>operator delete</code> 做了一层封装，并没有考虑到效率上的强化。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> T<span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>ptrdiff_t size<span class="token punctuation">,</span> T<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">set_new_handler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    T<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;out of memory&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>T<span class="token operator">*</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">allocator</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">typedef</span> T value_type<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">typedef</span> T<span class="token operator">*</span> pointer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">typedef</span> <span class="token keyword">const</span> T<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">typedef</span> T<span class="token operator">&amp;</span> reference<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">typedef</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">typedef</span> size_t size_type<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">typedef</span> ptrdiff_t difference_type<span class="token punctuation">;</span></span>
<span class="line">    pointer <span class="token function">allocate</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>difference_type<span class="token punctuation">)</span>n<span class="token punctuation">,</span> <span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>pointer p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    pointer <span class="token function">address</span><span class="token punctuation">(</span>reference x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token operator">&amp;</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    const_pointer <span class="token function">const_address</span><span class="token punctuation">(</span>const_reference x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token punctuation">(</span>const_pointer<span class="token punctuation">)</span><span class="token operator">&amp;</span>x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    size_type <span class="token function">init_page_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_type</span><span class="token punctuation">(</span>UINT_MAX<span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20)]))}const i=s(e,[["render",o],["__file","Chapter 2.1 - SGI 空间分配器.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%202%20-%20%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8%20allocator/Chapter%202.1%20-%20SGI%20%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8.html","title":"Chapter 2.1 - SGI 空间分配器","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"2.1 空间分配器的标准接口","slug":"_2-1-空间分配器的标准接口","link":"#_2-1-空间分配器的标准接口","children":[]},{"level":2,"title":"2.2 SGI 标准的空间分配器 std::allocator","slug":"_2-2-sgi-标准的空间分配器-std-allocator","link":"#_2-2-sgi-标准的空间分配器-std-allocator","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 2 - 空间分配器 allocator/Chapter 2.1 - SGI 空间分配器.md"}');export{i as comp,u as data};
