import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-6-7-2-lower-bound" tabindex="-1"><a class="header-anchor" href="#chapter-6-7-2-lower-bound"><span>Chapter 6.7.2 - lower_bound</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 14 22:39</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="lower-bound" tabindex="-1"><a class="header-anchor" href="#lower-bound"><span>lower_bound</span></a></h2><p>二分查找的一种特殊版本，返回一个迭代器，指向第一个 <strong>不小于指定值的元素</strong>。换句话说，返回值是 <strong>不破坏排序状态的原则下，可插入 value 的第一个位置</strong>。算法默认使用 <code>operator&lt;</code> 进行元素比较，用户也可以自定义二元仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">__lower_bound</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span> _Distance<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Distance __len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 标识区间长度</span></span>
<span class="line">  <span class="token function">distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _Distance __half<span class="token punctuation">;</span>       <span class="token comment">// 标识区间长度的一半</span></span>
<span class="line">  _ForwardIter __middle<span class="token punctuation">;</span>  <span class="token comment">// 标识区间中点</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    __half <span class="token operator">=</span> __len <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    __middle <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">advance</span><span class="token punctuation">(</span>__middle<span class="token punctuation">,</span> __half<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// middle 指向区间中点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__middle <span class="token operator">&lt;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 区间中点 &lt; 指定值，那么需要在区间中点之后的区间中寻找目标位置</span></span>
<span class="line">      __first <span class="token operator">=</span> __middle<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first<span class="token punctuation">;</span>                   <span class="token comment">// 区间起点设置为当前中点的下一个位置</span></span>
<span class="line">      __len <span class="token operator">=</span> __len <span class="token operator">-</span> __half <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 区间长度减半再减一</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span>                           <span class="token comment">// 否则指定值 &lt;= 区间中点，需要在区间中点之前的区间中寻找目标位置</span></span>
<span class="line">      __len <span class="token operator">=</span> __half<span class="token punctuation">;</span>              <span class="token comment">// 区间起点不变，区间长度减半</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter <span class="token function">lower_bound</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">				<span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__lower_bound</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __val<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">__lower_bound</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">,</span> _Distance<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter <span class="token function">lower_bound</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                                <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="binary-search" tabindex="-1"><a class="header-anchor" href="#binary-search"><span>binary_search</span></a></h2><p>找到有序区间中是否存在等于特定值的元素，如果有，则返回 <code>true</code>。这里借用了 <code>lower_bound()</code> 的实现，判断 <code>lower_bound()</code> 返回的迭代器指向的元素值是否等于特定值：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                   <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _ForwardIter __i <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// lower_bound 返回 val &lt;= *__i 的元素</span></span>
<span class="line">  <span class="token keyword">return</span> __i <span class="token operator">!=</span> __last <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>__val <span class="token operator">&lt;</span> <span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 排除 val &lt; *i 的元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)]))}const i=s(t,[["render",o],["__file","Chapter 6.7.2 - lower_bound.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.7.2%20-%20lower_bound.html","title":"Chapter 6.7.2 - lower_bound","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"lower_bound","slug":"lower-bound","link":"#lower-bound","children":[]},{"level":2,"title":"binary_search","slug":"binary-search","link":"#binary-search","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.7.2 - lower_bound.md"}');export{i as comp,r as data};
