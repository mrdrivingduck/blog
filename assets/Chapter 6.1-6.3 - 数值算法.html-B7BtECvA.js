import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-6-1-6-3-数值算法" tabindex="-1"><a class="header-anchor" href="#chapter-6-1-6-3-数值算法"><span>Chapter 6.1-6.3 - 数值算法</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 10 14:58</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="算法的泛化" tabindex="-1"><a class="header-anchor" href="#算法的泛化"><span>算法的泛化</span></a></h2><p>算法的分类：</p><ul><li>质变算法：会改变操作对象的内容，如排序、删除、替换等 <ul><li>就地进行 (in-place)：就地改变操作对象</li><li>拷贝进行：将操作内容复制为一份副本，对副本进行修改并返回副本</li></ul></li><li>非质变算法：不改变操作对象的内容，如查找、计数、遍历等</li></ul><p>所有泛型算法的前两个参数都是一对迭代器，指示了算法的操作区间 (左闭右开)。对 <code>[first, last)</code> 区间进行操作的必要条件是，必须能够由 <code>operator++</code> 使迭代器能够从 <code>first</code> 前进到 <code>last</code>。根据迭代器的前进特性，STL 的每一个算法声明都要表现出 <strong>所需最低程度的迭代器类型</strong>。</p><p>许多 STL 算法支持多个版本，其中原始版本使用缺省运算行为，另一个版本支持用户传入 <strong>仿函数</strong>。</p><h2 id="_6-3-2-accumulate" tabindex="-1"><a class="header-anchor" href="#_6-3-2-accumulate"><span>6.3.2 accumulate</span></a></h2><p>用于将一个区间的值累加到某个初始值身上，并返回累加值。除了加法，可以泛化为其它二元操作：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_Tp <span class="token function">accumulate</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span> _Tp __init<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    __init <span class="token operator">=</span> __init <span class="token operator">+</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 累加到初始值</span></span>
<span class="line">  <span class="token keyword">return</span> __init<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_Tp <span class="token function">accumulate</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span> _Tp __init<span class="token punctuation">,</span></span>
<span class="line">               _BinaryOperation __binary_op<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    __init <span class="token operator">=</span> <span class="token function">__binary_op</span><span class="token punctuation">(</span>__init<span class="token punctuation">,</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 二元操作累加到初始值</span></span>
<span class="line">  <span class="token keyword">return</span> __init<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-3-3-adjacent-difference" tabindex="-1"><a class="header-anchor" href="#_6-3-3-adjacent-difference"><span>6.3.3 adjacent_difference</span></a></h2><p>给定一个区间，计算每对相邻元素之间的差，并返回该区间。计算差值的过程也可以泛化为二元操作。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">__adjacent_difference</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">                      _OutputIterator __result<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Tp __value <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// value 特指前一个元素</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Tp __tmp <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// tmp 特指后一个元素</span></span>
<span class="line">    <span class="token operator">*</span><span class="token operator">++</span>__result <span class="token operator">=</span> __tmp <span class="token operator">-</span> __value<span class="token punctuation">;</span>  <span class="token comment">// 计算差值</span></span>
<span class="line">    __value <span class="token operator">=</span> __tmp<span class="token punctuation">;</span>       <span class="token comment">// 后一个元素成为前一个元素</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">++</span>__result<span class="token punctuation">;</span>  <span class="token comment">// 返回输出区间的尾迭代器</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">adjacent_difference</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span></span>
<span class="line">                    _InputIterator __last<span class="token punctuation">,</span> _OutputIterator __result<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIterator<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 第一个元素之前没有元素，差值就是它本身</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__adjacent_difference</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span></span>
<span class="line">                               <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 取迭代器的数据类型</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">__adjacent_difference</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">                      _OutputIterator __result<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">,</span></span>
<span class="line">                      _BinaryOperation __binary_op<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  _Tp __value <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// value 特指前一个元素</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Tp __tmp <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// tmp 特指后一个元素</span></span>
<span class="line">    <span class="token operator">*</span><span class="token operator">++</span>__result <span class="token operator">=</span> <span class="token function">__binary_op</span><span class="token punctuation">(</span>__tmp<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 泛化计算差值</span></span>
<span class="line">    __value <span class="token operator">=</span> __tmp<span class="token punctuation">;</span>       <span class="token comment">// 后一个元素成为前一个元素</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">++</span>__result<span class="token punctuation">;</span>  <span class="token comment">// 返回输出区间的尾迭代器</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">adjacent_difference</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">                    _OutputIterator __result<span class="token punctuation">,</span> _BinaryOperation __binary_op<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIterator<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 第一个元素之前没有元素，差值就是它本身</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__adjacent_difference</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span></span>
<span class="line">                               <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                               __binary_op<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果参数 <code>result</code> 与 <code>first</code> 相同，那么就是一个 <strong>就地操作</strong>。</p><h2 id="_6-3-4-inner-product" tabindex="-1"><a class="header-anchor" href="#_6-3-4-inner-product"><span>6.3.4 inner_product</span></a></h2><p>计算两个序列的内积。内积的定义是两个序列的对应元素相乘，然后累加到一个值上。泛化版本可以提供两个二元操作，分别泛化相乘和累加两个过程。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIterator2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_Tp <span class="token function">inner_product</span><span class="token punctuation">(</span>_InputIterator1 __first1<span class="token punctuation">,</span> _InputIterator1 __last1<span class="token punctuation">,</span></span>
<span class="line">                  _InputIterator2 __first2<span class="token punctuation">,</span> _Tp __init<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first1 <span class="token operator">!=</span> __last1<span class="token punctuation">;</span> <span class="token operator">++</span>__first1<span class="token punctuation">,</span> <span class="token operator">++</span>__first2<span class="token punctuation">)</span></span>
<span class="line">    __init <span class="token operator">=</span> __init <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first1 <span class="token operator">*</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 相乘并累加</span></span>
<span class="line">  <span class="token keyword">return</span> __init<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIterator2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation2</span><span class="token operator">&gt;</span></span>
<span class="line">_Tp <span class="token function">inner_product</span><span class="token punctuation">(</span>_InputIterator1 __first1<span class="token punctuation">,</span> _InputIterator1 __last1<span class="token punctuation">,</span></span>
<span class="line">                  _InputIterator2 __first2<span class="token punctuation">,</span> _Tp __init<span class="token punctuation">,</span></span>
<span class="line">                  _BinaryOperation1 __binary_op1<span class="token punctuation">,</span></span>
<span class="line">                  _BinaryOperation2 __binary_op2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first1 <span class="token operator">!=</span> __last1<span class="token punctuation">;</span> <span class="token operator">++</span>__first1<span class="token punctuation">,</span> <span class="token operator">++</span>__first2<span class="token punctuation">)</span></span>
<span class="line">    __init <span class="token operator">=</span> <span class="token function">__binary_op1</span><span class="token punctuation">(</span>__init<span class="token punctuation">,</span> <span class="token function">__binary_op2</span><span class="token punctuation">(</span><span class="token operator">*</span>__first1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// op2 泛化相乘，op1 泛化累加</span></span>
<span class="line">  <span class="token keyword">return</span> __init<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-3-5-partial-sum" tabindex="-1"><a class="header-anchor" href="#_6-3-5-partial-sum"><span>6.3.5 partial_sum</span></a></h2><p>部分和 (也可以称为是 <strong>前缀和</strong>)。给定一个区间，计算每个位置之前的所有元素之和。同样，求和操作可以泛化为二元操作。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">__partial_sum</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">              _OutputIterator __result<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Tp __value <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 累加值</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    __value <span class="token operator">=</span> __value <span class="token operator">+</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 累加</span></span>
<span class="line">    <span class="token operator">*</span><span class="token operator">++</span>__result <span class="token operator">=</span> __value<span class="token punctuation">;</span>         <span class="token comment">// 赋值到目标位置</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">++</span>__result<span class="token punctuation">;</span>       <span class="token comment">// 返回目标位置的尾迭代器</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">partial_sum</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">            _OutputIterator __result<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIterator<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__partial_sum</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">__partial_sum</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">              _OutputIterator __result<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">,</span> _BinaryOperation __binary_op<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Tp __value <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    __value <span class="token operator">=</span> <span class="token function">__binary_op</span><span class="token punctuation">(</span>__value<span class="token punctuation">,</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 泛化累加为二元操作</span></span>
<span class="line">    <span class="token operator">*</span><span class="token operator">++</span>__result <span class="token operator">=</span> __value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIterator</span>
<span class="line"><span class="token function">partial_sum</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">            _OutputIterator __result<span class="token punctuation">,</span> _BinaryOperation __binary_op<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIterator<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__partial_sum</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                       __binary_op<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-3-6-power" tabindex="-1"><a class="header-anchor" href="#_6-3-6-power"><span>6.3.6 power</span></a></h2><p>该算法由 SGI 专属，不在 STL 标准中。用于计算某个数的 <code>n</code> 次幂，默认使用乘法计算乘幂。当然，也可以用泛化版的算法，用其它二元操作替换乘法，但二元操作 <strong>必须满足结合律</strong>。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Integer</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_MonoidOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_Tp <span class="token function">__power</span><span class="token punctuation">(</span>_Tp __x<span class="token punctuation">,</span> _Integer __n<span class="token punctuation">,</span> _MonoidOperation __opr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">identity_element</span><span class="token punctuation">(</span>__opr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      __n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      __x <span class="token operator">=</span> <span class="token function">__opr</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    _Tp __result <span class="token operator">=</span> __x<span class="token punctuation">;</span></span>
<span class="line">    __n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      __x <span class="token operator">=</span> <span class="token function">__opr</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 快速幂？</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        __result <span class="token operator">=</span> <span class="token function">__opr</span><span class="token punctuation">(</span>__result<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      __n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Integer</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _Tp <span class="token function">__power</span><span class="token punctuation">(</span>_Tp __x<span class="token punctuation">,</span> _Integer __n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__power</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">multiplies</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 默认使用乘法</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Alias for the internal name __power.  Note that power is an extension,</span></span>
<span class="line"><span class="token comment">// not part of the C++ standard.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Integer</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_MonoidOperation</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _Tp <span class="token function">power</span><span class="token punctuation">(</span>_Tp __x<span class="token punctuation">,</span> _Integer __n<span class="token punctuation">,</span> _MonoidOperation __opr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__power</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __opr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Integer</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _Tp <span class="token function">power</span><span class="token punctuation">(</span>_Tp __x<span class="token punctuation">,</span> _Integer __n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__power</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-3-7-iota" tabindex="-1"><a class="header-anchor" href="#_6-3-7-iota"><span>6.3.7 iota</span></a></h2><p>SGI 专属，不在 STL 标准中。设置某个区间的内容，使得区间内元素从一个指定的 <code>value</code> 开始递增。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// iota is not part of the C++ standard.  It is an extension.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">iota</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CONVERTIBLE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__first<span class="token operator">++</span> <span class="token operator">=</span> __value<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 从第一个元素开始，从 value 开始递增</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)]))}const i=s(e,[["render",l],["__file","Chapter 6.1-6.3 - 数值算法.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.1-6.3%20-%20%E6%95%B0%E5%80%BC%E7%AE%97%E6%B3%95.html","title":"Chapter 6.1-6.3 - 数值算法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"算法的泛化","slug":"算法的泛化","link":"#算法的泛化","children":[]},{"level":2,"title":"6.3.2 accumulate","slug":"_6-3-2-accumulate","link":"#_6-3-2-accumulate","children":[]},{"level":2,"title":"6.3.3 adjacent_difference","slug":"_6-3-3-adjacent-difference","link":"#_6-3-3-adjacent-difference","children":[]},{"level":2,"title":"6.3.4 inner_product","slug":"_6-3-4-inner-product","link":"#_6-3-4-inner-product","children":[]},{"level":2,"title":"6.3.5 partial_sum","slug":"_6-3-5-partial-sum","link":"#_6-3-5-partial-sum","children":[]},{"level":2,"title":"6.3.6 power","slug":"_6-3-6-power","link":"#_6-3-6-power","children":[]},{"level":2,"title":"6.3.7 iota","slug":"_6-3-7-iota","link":"#_6-3-7-iota","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.1-6.3 - 数值算法.md"}');export{i as comp,u as data};
