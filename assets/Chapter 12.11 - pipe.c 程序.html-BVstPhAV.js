import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/12-28-CIKQeCat.png",o={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-12-11-pipe-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-11-pipe-c-程序"><span>Chapter 12.11 - pipe.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 15 09:09</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-11-pipe-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-11-pipe-c-程序"><span>12.11 pipe.c 程序</span></a></h2><h3 id="_12-11-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-11-1-功能描述"><span>12.11.1 功能描述</span></a></h3><p>管道操作是进程间通信的最基本方式。本程序中实现了：</p><ul><li>管道系统调用：<code>sys_pipe()</code></li><li>管道读操作：<code>read_pipe()</code></li><li>管道写操作：<code>write_pipe()</code></li></ul><p>每个管道对应一个 inode，并有一页内存作为缓冲区、缓冲区的地址、管道头指针、管道尾指针存放在 inode 中。</p><p><img src="'+t+`" alt="12-28"></p><ul><li>读操作从管道的尾指针取数据，尾指针前进</li><li>写操作从管道的头指针开始放入数据，头指针前进</li></ul><p>对于读操作来说，如果管道中为空，就唤醒写管道进程，自己进入睡眠状态；对于写操作来说，如果管道已满，就唤醒读管道进程，自己进入睡眠。管道的内存位于内核空间，读取或写入时，需要和用户空间互相拷贝。</p><h3 id="_12-11-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-11-2-代码注释"><span>12.11.2 代码注释</span></a></h3><h4 id="read-pipe-管道读操作函数" tabindex="-1"><a class="header-anchor" href="#read-pipe-管道读操作函数"><span>read_pipe() - 管道读操作函数</span></a></h4><p>将 inode 指向的管道中的指定数量字节复制到用户空间 buf 中，返回读取的字节数。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">read_pipe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> chars<span class="token punctuation">,</span> size<span class="token punctuation">,</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 需要读取的字节数大于 0</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token function">PIPE_SIZE</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 管道中没有数据</span></span>
<span class="line">            <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PIPE_WRITE_WAIT</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 已经没有写管道者</span></span>
<span class="line">                <span class="token keyword">return</span> read<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 重启系统调用 ?</span></span>
<span class="line">                <span class="token keyword">return</span> read <span class="token operator">?</span> read <span class="token operator">:</span> <span class="token operator">-</span>ERESTARTSYS<span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PIPE_READ_WAIT</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 管道中已有数据</span></span>
<span class="line">        </span>
<span class="line">        chars <span class="token operator">=</span> PAGE_SIZE <span class="token operator">-</span> <span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 管道尾指针到缓冲区末端的字节数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span></span>
<span class="line">            chars <span class="token operator">=</span> count<span class="token punctuation">;</span> <span class="token comment">// 已大于要读取的字节数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> size<span class="token punctuation">)</span></span>
<span class="line">            chars <span class="token operator">=</span> size<span class="token punctuation">;</span> <span class="token comment">// 已大于管道中剩余的数据量</span></span>
<span class="line">        </span>
<span class="line">        count <span class="token operator">-=</span> chars<span class="token punctuation">;</span> <span class="token comment">// 递减要读取的字节数</span></span>
<span class="line">        read <span class="token operator">+=</span> chars<span class="token punctuation">;</span> <span class="token comment">// 累加已读取的字节数</span></span>
<span class="line">        size <span class="token operator">=</span> <span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// size 指向管道尾部</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 调整尾指针</span></span>
<span class="line">        <span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">+=</span> chars<span class="token punctuation">;</span> <span class="token comment">// 尾指针前移</span></span>
<span class="line">        <span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>PAGE_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 超出缓冲区尾部，循环绕回</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 拷贝管道数据到用户空间</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span><span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PIPE_WRITE_WAIT</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒等待写管道的进程</span></span>
<span class="line">    <span class="token keyword">return</span> read<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最外面的 while 循环每次迭代只处理从尾指针开始，到缓冲区尾部的管道数据。如果说缓冲区头部还有管道中的数据，那么在读取数据修正尾指针时，尾指针会重新绕到缓冲区头部，然后还要再迭代一次。</p></blockquote><h4 id="write-pipe-管道写操作函数" tabindex="-1"><a class="header-anchor" href="#write-pipe-管道写操作函数"><span>write_pipe() - 管道写操作函数</span></a></h4><p>将用户空间 buf 中，count 个字节的数据写入管道，返回写入的字节数。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">write_pipe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> chars<span class="token punctuation">,</span> size<span class="token punctuation">,</span> written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 还有数据要写入管道</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token punctuation">(</span>PAGE_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">PIPE_SIZE</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 管道空闲空间为 0</span></span>
<span class="line">            <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PIPE_READ_WAIT</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒读管道的进程</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 没有读管道的进程了，返回</span></span>
<span class="line">                current<span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGPIPE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> written <span class="token operator">?</span> written <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PIPE_WRITE_WAIT</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自身进入睡眠</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        chars <span class="token operator">=</span> PAGE_SIZE <span class="token operator">-</span> <span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 头指针到缓冲区尾的字节数</span></span>
<span class="line">        <span class="token comment">// 调整本次实际写入的长度</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span> <span class="token comment">// 大于需要写入的长度</span></span>
<span class="line">            chars <span class="token operator">=</span> count<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> size<span class="token punctuation">)</span> <span class="token comment">// 大于管道剩余长度</span></span>
<span class="line">            chars <span class="token operator">=</span> size<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        count <span class="token operator">-=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        written <span class="token operator">+=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        size <span class="token operator">=</span> <span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// size 指向管道目前的头部</span></span>
<span class="line">        </span>
<span class="line">        <span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">+=</span> chars<span class="token punctuation">;</span> <span class="token comment">// 管道头部前移</span></span>
<span class="line">        <span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>PAGE_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果超出缓冲区，循环至头部</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span><span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 写入管道操作结束</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PIPE_READ_WAIT</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒等待读取管道的进程</span></span>
<span class="line">    <span class="token keyword">return</span> written<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-pipe-创建管道系统调用" tabindex="-1"><a class="header-anchor" href="#sys-pipe-创建管道系统调用"><span>sys_pipe() - 创建管道系统调用</span></a></h4><p>参数中传入一个数组，在该数组中创建一对文件句柄 (文件描述符)。这对文件句柄指向一个管道 inode，一个用于读管道，一个用于写管道：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_pipe</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> fildes<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 从系统文件表中取两个空闲项</span></span>
<span class="line">    <span class="token comment">// 依次寻找，如果只能找到一个，则失败，找到的那一个也需要被放回</span></span>
<span class="line">    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> NR_FILE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f_count<span class="token punctuation">)</span> <span class="token comment">// 存在空闲项</span></span>
<span class="line">            <span class="token comment">// 占用系统文件表中的这一项，并让 file * f 指向文件表中的项</span></span>
<span class="line">            <span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> file_table <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>f_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 只找到了一个空闲项</span></span>
<span class="line">        <span class="token comment">// 归还占用的 1 项</span></span>
<span class="line">        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在进程 PCB 的文件结构中寻找两个空闲文件句柄，分别指向这两个文件结构</span></span>
<span class="line">    <span class="token comment">// 如果只能找到一个空闲句柄，则释放这一个句柄</span></span>
<span class="line">    <span class="token comment">// 如果没有找到两个空闲句柄，还要释放上面已经获取到的文件结构项</span></span>
<span class="line">    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> NR_OPEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            j<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 申请管道 inode，并分配管道的缓冲区</span></span>
<span class="line">    <span class="token comment">// 如果不成功，则释放上述两部占用的项</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">get_pipe_inode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 对文件结构进行初始化操作</span></span>
<span class="line">    <span class="token comment">// 指向管道 inode，并把读写指针置 0</span></span>
<span class="line">    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode <span class="token operator">=</span> inode<span class="token punctuation">;</span></span>
<span class="line">    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_mode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 文件模式 - 读</span></span>
<span class="line">    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_mode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 文件模式 - 写</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fildes <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制文件描述符到用户空间</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>fs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fildes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pipe-ioctl-管道-i-o-控制函数" tabindex="-1"><a class="header-anchor" href="#pipe-ioctl-管道-i-o-控制函数"><span>pipe_ioctl() - 管道 I/O 控制函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">pipe_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> pino<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 管道当前可读数据长度</span></span>
<span class="line">        <span class="token keyword">case</span> FIONREAD<span class="token operator">:</span></span>
<span class="line">            <span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token function">PIPE_SIZE</span><span class="token punctuation">(</span><span class="token operator">*</span>pino<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>关于这个文件结构 <code>file</code>，咋只见过定义，没见过具体的操作函数呢？？？是我漏看了，还是暂时没看到哦？</p>`,29)]))}const u=s(o,[["render",c],["__file","Chapter 12.11 - pipe.c 程序.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.11%20-%20pipe.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.11 - pipe.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.11 pipe.c 程序","slug":"_12-11-pipe-c-程序","link":"#_12-11-pipe-c-程序","children":[{"level":3,"title":"12.11.1 功能描述","slug":"_12-11-1-功能描述","link":"#_12-11-1-功能描述","children":[]},{"level":3,"title":"12.11.2 代码注释","slug":"_12-11-2-代码注释","link":"#_12-11-2-代码注释","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.11 - pipe.c 程序.md"}');export{u as comp,r as data};
