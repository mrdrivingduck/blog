import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-8-4-function-adapters" tabindex="-1"><a class="header-anchor" href="#chapter-8-4-function-adapters"><span>Chapter 8.4 - Function Adapters</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 08 18:05</p><p>Nanjing, Jiangsu, China</p><hr><p>Function adapters 对仿函数进行适配。因此，每个 function adapters 类内都维护着一个被适配的仿函数对象成员。对该仿函数对象进行一些操作后，适配为功能略有不同的仿函数。</p><h2 id="_8-4-1-对返回值进行逻辑否定" tabindex="-1"><a class="header-anchor" href="#_8-4-1-对返回值进行逻辑否定"><span>8.4.1 对返回值进行逻辑否定</span></a></h2><p>对 (一元 / 二元) 仿函数的返回值进行逻辑非。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span> <span class="token comment">// 模板参数为仿函数类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">unary_negate</span>  <span class="token comment">// 一元仿函数的非运算还是一元仿函数，参数为仿函数的参数类型，返回值为 bool 类型</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token keyword">public</span> unary_function<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Predicate</span><span class="token double-colon punctuation">::</span>argument_type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Predicate _M_pred<span class="token punctuation">;</span>       <span class="token comment">// 类内维护一个一元仿函数对象</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">unary_negate</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Predicate<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_pred</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Predicate</span><span class="token double-colon punctuation">::</span>argument_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">_M_pred</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 重载 operator()，将一元仿函数对象的运算结果取反并返回</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> unary_negate<span class="token operator">&lt;</span>_Predicate<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">not1</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Predicate<span class="token operator">&amp;</span> __pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">unary_negate</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Predicate<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__pred<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回一个被封装的一元仿函数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">binary_negate</span>  <span class="token comment">// 二元仿函数的非运算还是二元仿函数，参数为二元仿函数的两个参数类型，返回值为 bool 类型</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token keyword">public</span> binary_function<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Predicate</span><span class="token double-colon punctuation">::</span>first_argument_type<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">typename</span> <span class="token class-name">_Predicate</span><span class="token double-colon punctuation">::</span>second_argument_type<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Predicate _M_pred<span class="token punctuation">;</span>      <span class="token comment">// 类内维护一个二元仿函数对象</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">binary_negate</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Predicate<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_pred</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Predicate</span><span class="token double-colon punctuation">::</span>first_argument_type<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">                  <span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Predicate</span><span class="token double-colon punctuation">::</span>second_argument_type<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">_M_pred</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 重载 operator()，将二元仿函数对象的运算结果取反并返回</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> binary_negate<span class="token operator">&lt;</span>_Predicate<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">not2</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Predicate<span class="token operator">&amp;</span> __pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">binary_negate</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Predicate<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__pred<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回一个被封装的二元仿函数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-4-2-对参数进行绑定" tabindex="-1"><a class="header-anchor" href="#_8-4-2-对参数进行绑定"><span>8.4.2 对参数进行绑定</span></a></h2><p>在构造仿函数适配器时，传入二元仿函数对象和仿函数的其中一个参数。将该参数绑定为二元仿函数的第一个参数或第二个参数。</p><blockquote><p>有啥用？假如想实现对任意一个数加 2 的仿函数，那么可以这样写：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">plus</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/* 二元仿函数对象 */</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* 绑定为仿函数的第二参数 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation</span><span class="token operator">&gt;</span>  <span class="token comment">// 二元仿函数</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">binder1st</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Operation<span class="token double-colon punctuation">::</span><span class="token class-name">second_argument_type</span><span class="token punctuation">,</span>  <span class="token comment">// 仿函数的第二参数类型</span></span>
<span class="line">                          <span class="token keyword">typename</span> _Operation<span class="token double-colon punctuation">::</span><span class="token class-name">result_type</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>         <span class="token comment">// 仿函数的返回值类型</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Operation op<span class="token punctuation">;</span>  <span class="token comment">// 仿函数对象</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>first_argument_type value<span class="token punctuation">;</span>  <span class="token comment">// 已绑定的仿函数第一参数的值</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">binder1st</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>first_argument_type<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token function">op</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">value</span><span class="token punctuation">(</span>__y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 构造函数需要指定仿函数对象和要绑定的第一参数的值</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>result_type</span>
<span class="line">  <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>second_argument_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">op</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 以构造函数绑定的第一参数，以及参数指定的第二参数，调用仿函数</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> binder1st<span class="token operator">&lt;</span>_Operation<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">bind1st</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation<span class="token operator">&amp;</span> __fn<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>first_argument_type _Arg1_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">binder1st</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Operation<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__fn <span class="token comment">/* 仿函数对象 */</span><span class="token punctuation">,</span> <span class="token function">_Arg1_type</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token comment">/* 第一参数绑定值 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation</span><span class="token operator">&gt;</span>  <span class="token comment">// 二元仿函数</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">binder2nd</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Operation<span class="token double-colon punctuation">::</span><span class="token class-name">first_argument_type</span><span class="token punctuation">,</span>  <span class="token comment">// 仿函数的第一参数类型</span></span>
<span class="line">                          <span class="token keyword">typename</span> _Operation<span class="token double-colon punctuation">::</span><span class="token class-name">result_type</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token comment">// 仿函数的返回值类型</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Operation op<span class="token punctuation">;</span>  <span class="token comment">// 仿函数对象</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>second_argument_type value<span class="token punctuation">;</span>  <span class="token comment">// 已绑定的仿函数第二参数的值</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">binder2nd</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>second_argument_type<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token function">op</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">value</span><span class="token punctuation">(</span>__y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 构造函数指定仿函数对象和要绑定的第二参数的值</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>result_type</span>
<span class="line">  <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>first_argument_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">op</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 以参数指定的第一参数，以及构造函数绑定的第二参数，调用仿函数</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> binder2nd<span class="token operator">&lt;</span>_Operation<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation<span class="token operator">&amp;</span> __fn<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation</span><span class="token double-colon punctuation">::</span>second_argument_type _Arg2_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">binder2nd</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Operation<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__fn <span class="token comment">/* 仿函数对象 */</span><span class="token punctuation">,</span> <span class="token function">_Arg2_type</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token comment">/* 第二参数绑定值 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-4-3-用于函数合成" tabindex="-1"><a class="header-anchor" href="#_8-4-3-用于函数合成"><span>8.4.3 用于函数合成</span></a></h2><p>这里提到的两个适配器未纳入 STL 标准，是 SGI STL 的产物。</p><p>一元合成：<code>f1(f2(args))</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Operation2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">unary_compose</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Operation2<span class="token double-colon punctuation">::</span><span class="token class-name">argument_type</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token keyword">typename</span> _Operation1<span class="token double-colon punctuation">::</span><span class="token class-name">result_type</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Operation1 _M_fn1<span class="token punctuation">;</span>  <span class="token comment">// 仿函数 1</span></span>
<span class="line">  _Operation2 _M_fn2<span class="token punctuation">;</span>  <span class="token comment">// 仿函数 2</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">unary_compose</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation1<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Operation2<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_fn1</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_fn2</span><span class="token punctuation">(</span>__y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 构造函数</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">_Operation1</span><span class="token double-colon punctuation">::</span>result_type</span>
<span class="line">  <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation2</span><span class="token double-colon punctuation">::</span>argument_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_M_fn1</span><span class="token punctuation">(</span><span class="token function">_M_fn2</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用参数调用仿函数 2，并将结果作为仿函数 1 的参数，调用仿函数 1</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Operation2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> unary_compose<span class="token operator">&lt;</span>_Operation1<span class="token punctuation">,</span>_Operation2<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">compose1</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation1<span class="token operator">&amp;</span> __fn1<span class="token punctuation">,</span> <span class="token keyword">const</span> _Operation2<span class="token operator">&amp;</span> __fn2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">unary_compose</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Operation1<span class="token punctuation">,</span>_Operation2<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__fn1 <span class="token comment">/* 仿函数 1 */</span><span class="token punctuation">,</span> __fn2 <span class="token comment">/* 仿函数 2 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二元合成：<code>f1(f2(args), f3(args))</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Operation2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Operation3</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">binary_compose</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Operation2<span class="token double-colon punctuation">::</span><span class="token class-name">argument_type</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token keyword">typename</span> _Operation1<span class="token double-colon punctuation">::</span><span class="token class-name">result_type</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Operation1 _M_fn1<span class="token punctuation">;</span>  <span class="token comment">// 仿函数 1</span></span>
<span class="line">  _Operation2 _M_fn2<span class="token punctuation">;</span>  <span class="token comment">// 仿函数 2</span></span>
<span class="line">  _Operation3 _M_fn3<span class="token punctuation">;</span>  <span class="token comment">// 仿函数 3</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">binary_compose</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation1<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Operation2<span class="token operator">&amp;</span> __y<span class="token punctuation">,</span></span>
<span class="line">                 <span class="token keyword">const</span> _Operation3<span class="token operator">&amp;</span> __z<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_fn1</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_fn2</span><span class="token punctuation">(</span>__y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_fn3</span><span class="token punctuation">(</span>__z<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">_Operation1</span><span class="token double-colon punctuation">::</span>result_type</span>
<span class="line">  <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Operation2</span><span class="token double-colon punctuation">::</span>argument_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_M_fn1</span><span class="token punctuation">(</span><span class="token function">_M_fn2</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_fn3</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 以参数分别调用仿函数 2、仿函数 3，并将结果作为仿函数 1 的两个参数，调用仿函数 1</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Operation1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Operation2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Operation3</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> binary_compose<span class="token operator">&lt;</span>_Operation1<span class="token punctuation">,</span> _Operation2<span class="token punctuation">,</span> _Operation3<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">compose2</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Operation1<span class="token operator">&amp;</span> __fn1<span class="token punctuation">,</span> <span class="token keyword">const</span> _Operation2<span class="token operator">&amp;</span> __fn2<span class="token punctuation">,</span></span>
<span class="line">         <span class="token keyword">const</span> _Operation3<span class="token operator">&amp;</span> __fn3<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">binary_compose</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Operation1<span class="token punctuation">,</span>_Operation2<span class="token punctuation">,</span>_Operation3<span class="token operator">&gt;</span></span></span></span>
<span class="line">    <span class="token punctuation">(</span>__fn1 <span class="token comment">/* 仿函数 1 */</span><span class="token punctuation">,</span> __fn2 <span class="token comment">/* 仿函数 2 */</span><span class="token punctuation">,</span> __fn3 <span class="token comment">/* 仿函数 3 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-4-4-用于函数指针" tabindex="-1"><a class="header-anchor" href="#_8-4-4-用于函数指针"><span>8.4.4 用于函数指针</span></a></h2><p>这类适配器使得开发者有能力将一般函数 (函数指针) 当成仿函数使用，使函数指针拥有适配能力。适配方法是将函数指针维护在类内，并重载类的 <code>operator()</code> 使其成为一个仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Result</span><span class="token operator">&gt;</span>  <span class="token comment">// 函数指针的参数类型 (1 个) 和返回类型</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">pointer_to_unary_function</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Arg</span><span class="token punctuation">,</span> <span class="token class-name">_Result</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Result</span> <span class="token punctuation">(</span><span class="token operator">*</span>_M_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 一元函数的函数指针</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">pointer_to_unary_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">pointer_to_unary_function</span><span class="token punctuation">(</span><span class="token function">_Result</span> <span class="token punctuation">(</span><span class="token operator">*</span>__x<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_ptr</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Result <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">_M_ptr</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 以参数调用函数指针</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Result</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> pointer_to_unary_function<span class="token operator">&lt;</span>_Arg<span class="token punctuation">,</span> _Result<span class="token operator">&gt;</span> <span class="token function">ptr_fun</span><span class="token punctuation">(</span><span class="token function">_Result</span> <span class="token punctuation">(</span><span class="token operator">*</span>__x<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pointer_to_unary_function</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Arg<span class="token punctuation">,</span> _Result<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__x <span class="token comment">/* 一元函数指针 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Result</span><span class="token operator">&gt;</span>  <span class="token comment">// 函数指针的参数类型 (2 个) 和返回类型</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">pointer_to_binary_function</span> <span class="token operator">:</span></span>
<span class="line">  <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Arg1</span><span class="token punctuation">,</span><span class="token class-name">_Arg2</span><span class="token punctuation">,</span><span class="token class-name">_Result</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">_Result</span> <span class="token punctuation">(</span><span class="token operator">*</span>_M_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg1<span class="token punctuation">,</span> _Arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 二元函数的函数指针</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">pointer_to_binary_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">explicit</span> <span class="token function">pointer_to_binary_function</span><span class="token punctuation">(</span><span class="token function">_Result</span> <span class="token punctuation">(</span><span class="token operator">*</span>__x<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg1<span class="token punctuation">,</span> _Arg2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token function">_M_ptr</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    _Result <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg1 __x<span class="token punctuation">,</span> _Arg2 __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">_M_ptr</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用函数指针</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Result</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> pointer_to_binary_function<span class="token operator">&lt;</span>_Arg1<span class="token punctuation">,</span>_Arg2<span class="token punctuation">,</span>_Result<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">ptr_fun</span><span class="token punctuation">(</span><span class="token function">_Result</span> <span class="token punctuation">(</span><span class="token operator">*</span>__x<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg1<span class="token punctuation">,</span> _Arg2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pointer_to_binary_function</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Arg1<span class="token punctuation">,</span>_Arg2<span class="token punctuation">,</span>_Result<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__x <span class="token comment">/* 二元函数指针 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-4-5-用于成员函数指针" tabindex="-1"><a class="header-anchor" href="#_8-4-5-用于成员函数指针"><span>8.4.5 用于成员函数指针</span></a></h2><p>这种适配器使得开发者能够将类的成员函数作为仿函数来使用。如果以虚函数作为仿函数，那么还可以直接完成多态调用。将成员函数进行封装后，该适配器可以直接作为参数使用到 STL 算法中。</p><p>无参成员函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>  <span class="token comment">// 返回类型，以及对象的数据类型</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">mem_fun_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">mem_fun_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__p<span class="token operator">-&gt;</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 重载 operator()，用参数中的对象指针直接调用成员函数</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 函数指针，指向成员函数</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">const_mem_fun_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token class-name">_Tp</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">const_mem_fun_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__p<span class="token operator">-&gt;</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">mem_fun_ref_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">mem_fun_ref_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_Tp<span class="token operator">&amp;</span> __r<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__r<span class="token punctuation">.</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">const_mem_fun_ref_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">const_mem_fun_ref_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __r<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__r<span class="token punctuation">.</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带参成员函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span>  <span class="token comment">// 返回类型，对象类型，成员函数参数类型</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">mem_fun1_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token class-name">_Arg</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">mem_fun1_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Arg __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__p<span class="token operator">-&gt;</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 重载 operator()，直接用对象指针调用成员函数，并传入参数</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 函数指针，指向成员函数</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">const_mem_fun1_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token class-name">_Tp</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token class-name">_Arg</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">const_mem_fun1_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Arg __x<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__p<span class="token operator">-&gt;</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">mem_fun1_ref_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Arg</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">mem_fun1_ref_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_Tp<span class="token operator">&amp;</span> __r<span class="token punctuation">,</span> _Arg __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__r<span class="token punctuation">.</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">const_mem_fun1_ref_t</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Arg</span><span class="token punctuation">,</span><span class="token class-name">_Ret</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">const_mem_fun1_ref_t</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__pf<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_f</span><span class="token punctuation">(</span>__pf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  _Ret <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __r<span class="token punctuation">,</span> _Arg __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>__r<span class="token punctuation">.</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装后的辅助函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Mem_fun adaptor helper functions.  There are only two:</span></span>
<span class="line"><span class="token comment">//  mem_fun and mem_fun_ref.  (mem_fun1 and mem_fun1_ref</span></span>
<span class="line"><span class="token comment">//  are provided for backward compatibility, but they are no longer</span></span>
<span class="line"><span class="token comment">//  part of the C++ standard.)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>  <span class="token comment">// 返回值类型、对象类型作为泛型参数</span></span>
<span class="line"><span class="token keyword">inline</span> mem_fun_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span> <span class="token function">mem_fun</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 成员函数指针作为函数参数</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">mem_fun_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> const_mem_fun_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span> <span class="token function">mem_fun</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">const_mem_fun_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> mem_fun_ref_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span> <span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">mem_fun_ref_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> const_mem_fun_ref_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span> <span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">const_mem_fun_ref_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> mem_fun1_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span> <span class="token function">mem_fun</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">mem_fun1_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> const_mem_fun1_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span> <span class="token function">mem_fun</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">const_mem_fun1_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> mem_fun1_ref_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span> <span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">mem_fun1_ref_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> const_mem_fun1_ref_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">const_mem_fun1_ref_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> mem_fun1_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span> <span class="token function">mem_fun1</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">mem_fun1_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> const_mem_fun1_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span> <span class="token function">mem_fun1</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">const_mem_fun1_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> mem_fun1_ref_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span> <span class="token function">mem_fun1_ref</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">mem_fun1_ref_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> const_mem_fun1_ref_t<span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">mem_fun1_ref</span><span class="token punctuation">(</span><span class="token function">_Ret</span> <span class="token punctuation">(</span>_Tp<span class="token double-colon punctuation">::</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span>_Arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">const_mem_fun1_ref_t</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Ret<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Arg<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33)]))}const i=s(e,[["render",o],["__file","Chapter 8.4 - Function Adapters.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%208%20-%20%E9%80%82%E9%85%8D%E5%99%A8/Chapter%208.4%20-%20Function%20Adapters.html","title":"Chapter 8.4 - Function Adapters","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.4.1 对返回值进行逻辑否定","slug":"_8-4-1-对返回值进行逻辑否定","link":"#_8-4-1-对返回值进行逻辑否定","children":[]},{"level":2,"title":"8.4.2 对参数进行绑定","slug":"_8-4-2-对参数进行绑定","link":"#_8-4-2-对参数进行绑定","children":[]},{"level":2,"title":"8.4.3 用于函数合成","slug":"_8-4-3-用于函数合成","link":"#_8-4-3-用于函数合成","children":[]},{"level":2,"title":"8.4.4 用于函数指针","slug":"_8-4-4-用于函数指针","link":"#_8-4-4-用于函数指针","children":[]},{"level":2,"title":"8.4.5 用于成员函数指针","slug":"_8-4-5-用于成员函数指针","link":"#_8-4-5-用于成员函数指针","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 8 - 适配器/Chapter 8.4 - Function Adapters.md"}');export{i as comp,u as data};
