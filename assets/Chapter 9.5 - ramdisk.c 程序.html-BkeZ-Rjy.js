import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/9-6-DJXnZMKz.png",c="/blog/assets/9-8-BEYtgxcP.png",l={};function o(i,n){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-9-5-ramdisk-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-9-5-ramdisk-c-程序"><span>Chapter 9.5 - ramdisk.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 23 21:32</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_9-5-ramdisk-c-程序" tabindex="-1"><a class="header-anchor" href="#_9-5-ramdisk-c-程序"><span>9.5 ramdisk.c 程序</span></a></h2><h3 id="_9-5-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_9-5-1-功能描述"><span>9.5.1 功能描述</span></a></h3><p>虚拟盘：利用物理内存来模拟实际磁盘存储数据；目的：提高对磁盘数据的读写速度；缺点：系统关闭或崩溃时，虚拟盘中的数据将会丢失。因此虚拟盘中通常存放一些系统命令等常用工具程序或临时数据。编译时，如果开启了 RAMDISK 选项，那么虚拟盘的位置会在内核初始化时确定，位于内核高速缓冲区和主内存区之间：</p><p><img src="'+t+'" alt="9-6"></p><p>对于虚拟盘的读写访问操作原则上与普通磁盘的操作相同，也按照块设备的访问方式进行操作。但由于在实现上不牵扯到与外部控制器的同步操作，因此不需要硬盘中的中断机制，只需要实现内存数据的拷贝即可。</p><p><code>rd_init()</code> 函数在内核初始化时被调用，用于确定虚拟盘在物理内存中的具体位置和大小。</p><p><code>do_rd_request()</code> 是虚拟盘设备的请求处理函数。</p><p><code>rd_load()</code> 是虚拟盘根文件系统的加载函数，在内核初始化阶段，尝试从引导盘上把根文件系统加载到虚拟盘中。起始磁盘块：第 256 块。</p><p>在使用普通方法从别的磁盘设备上加载根文件系统之前，系统首先执行 <code>rd_load()</code> 函数，尝试从第 257 块中读取根文件系统的 <strong>超级块</strong>：</p><ul><li>如果成功，就把根文件映像文件读到内存虚拟盘中，并设置根文件系统设备为虚拟盘设备</li><li>否则退出该函数，从别的设备上加载根文件系统</li></ul><p>系统尝试检测从第 256 次磁盘块开始，是否存在一个根文件系统，判断第 257 磁盘块中是否是一个根文件系统的有效超级块：</p><p><img src="'+c+`" alt="9-8"></p><h3 id="_9-5-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_9-5-2-代码注释"><span>9.5.2 代码注释</span></a></h3><h4 id="虚拟盘在内存中的起始位置" tabindex="-1"><a class="header-anchor" href="#虚拟盘在内存中的起始位置"><span>虚拟盘在内存中的起始位置</span></a></h4><p>会在初始化函数 <code>rd_init()</code> 中确定。该函数会在内核初始化时被调用。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">char</span> <span class="token operator">*</span>rd_start<span class="token punctuation">;</span> <span class="token comment">// 虚拟盘在内存中的开始地址</span></span>
<span class="line"><span class="token keyword">int</span> rd_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 虚拟盘所占内存大小 (字节)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="虚拟盘的请求处理函数-do-rd-request" tabindex="-1"><a class="header-anchor" href="#虚拟盘的请求处理函数-do-rd-request"><span>虚拟盘的请求处理函数 do_rd_request()</span></a></h4><p>在请求项加入虚拟盘设备的请求链表之后，调用该函数对请求项进行处理。首先计算：</p><ul><li>指定的 <strong>起始扇区</strong> 对应 <strong>虚拟盘所处内存的起始位置</strong></li><li>要求的 <strong>扇区数</strong> 对应 <strong>字节长度值</strong></li></ul><p>然后根据读/写命令进行操作：<strong>请求项所指向的缓冲区</strong> 和 <strong>虚拟盘设备对应的内存区</strong> 之间的数据复制。复制完成之后，直接调用 <code>end_request()</code> 销毁本次请求，然后跳转到函数开始处，处理下一个请求项 (因为不需要通过中断机制与设备控制器进行同步)。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_rd_request</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检测请求项合法性</span></span>
<span class="line">    <span class="token comment">// repeat:</span></span>
<span class="line">    INIT_REQUEST<span class="token punctuation">;</span> <span class="token comment">// 当前请求项为空，直接退出</span></span>
<span class="line">    <span class="token comment">// 计算当前处理扇区的内存地址，和处理扇区的字节长度</span></span>
<span class="line">    addr <span class="token operator">=</span> rd_start <span class="token operator">+</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>sector <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sector * 512B</span></span>
<span class="line">    len <span class="token operator">=</span> CURRENT<span class="token operator">-&gt;</span>nr_sectors <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// sector * 512B</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">MINOR</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>addr<span class="token operator">+</span>len <span class="token operator">&gt;</span> rd_start<span class="token operator">+</span>rd_length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 子设备号不为 1 || 对应内存位置大于虚拟盘末尾</span></span>
<span class="line">        <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接结束请求</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span> <span class="token comment">// 处理下一个请求项</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 进行实际的读写操作</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区 -&gt; 虚拟盘</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> READ<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虚拟盘 -&gt; 缓冲区</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unknown ramdisk-command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 请求项处理成功</span></span>
<span class="line">    <span class="token comment">// 后处理</span></span>
<span class="line">    <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放请求项，指向下一个请求项</span></span>
<span class="line">    <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span> <span class="token comment">// 处理下一个请求</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="虚拟盘初始化函数-rd-init" tabindex="-1"><a class="header-anchor" href="#虚拟盘初始化函数-rd-init"><span>虚拟盘初始化函数 rd_init()</span></a></h4><p>设置虚拟盘的请求项处理函数，确定虚拟盘在物理内存中的起始地址和长度，将整个虚拟盘区清零，最终返回盘区长度。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">long</span> <span class="token function">rd_init</span><span class="token punctuation">(</span><span class="token keyword">long</span> mem_start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn <span class="token operator">=</span> DEVICE_REQUEST<span class="token punctuation">;</span> <span class="token comment">// do_rd_request()</span></span>
<span class="line">    </span>
<span class="line">    rd_start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> mem_start<span class="token punctuation">;</span></span>
<span class="line">    rd_length <span class="token operator">=</span> length<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cp <span class="token operator">=</span> rd_start<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加载根文件系统到虚拟盘中-rd-load" tabindex="-1"><a class="header-anchor" href="#加载根文件系统到虚拟盘中-rd-load"><span>加载根文件系统到虚拟盘中 rd_load()</span></a></h4><p><strong>根文件系统映像</strong> 位于第 256 磁盘块开始处。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">rd_load</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span>bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> s<span class="token punctuation">;</span> <span class="token comment">// 文件系统 super block</span></span>
<span class="line">    <span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">// 根文件系统映像磁盘块号</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> nblocks<span class="token punctuation">;</span> <span class="token comment">// 文件系统盘块数</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查虚拟盘的有效性和完整性</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rd_length<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 虚拟盘长度为 0</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Ram disk: %d bytes, starting at 0x%x\\n&quot;</span><span class="token punctuation">,</span> rd_length<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> rd_start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 根文件设备不是软盘</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 读取根文件系统的基本参数</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span> block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> block<span class="token punctuation">,</span> block<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读入缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 读取失败</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Disk error while looking for ramdisk!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_super_block</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从缓冲区中拷贝文件系统超级块</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>s_magic <span class="token operator">!=</span> SUPER_MAGIC<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 磁盘中没有根文件系统映像文件</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 尝试将整个根文件系统读入内存虚拟盘中</span></span>
<span class="line">    <span class="token comment">// 超级块结构体中的 s_nzones 字段保存了文件系统的总逻辑块数</span></span>
<span class="line">    <span class="token comment">// 一个逻辑块中含有的数据块数由 s_log_zone_size 指定</span></span>
<span class="line">    <span class="token comment">// 文件系统中的数据块总数 = s_nzones * 2^s_log_zone_size</span></span>
<span class="line">    nblocks <span class="token operator">=</span> s<span class="token punctuation">.</span>s_nzones <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>s_log_zone_size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nblocks <span class="token operator">&gt;</span> <span class="token punctuation">(</span>rd_length <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 虚拟盘无法容纳文件系统数据块总数</span></span>
<span class="line">        <span class="token comment">// 不能执行加载操作</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Ram disk image too big! (%d blocks, %d avail)\\n&quot;</span><span class="token punctuation">,</span> nblocks<span class="token punctuation">,</span> rd_length <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Loading %d bytes into ram disk... 0000k&quot;</span><span class="token punctuation">,</span> nblocks <span class="token operator">&lt;&lt;</span> BLOCK_SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    cp <span class="token operator">=</span> rd_start<span class="token punctuation">;</span> <span class="token comment">// 指向虚拟盘开始处</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>nblocks<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将一个块读取到缓冲区中</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>nblocks <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">            bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span> block<span class="token punctuation">,</span> block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> block<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>ROOT_DEV<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;I/O error on block %d, aborting load\\n&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区 -&gt; 虚拟盘</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">        </span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\010\\010\\010\\010\\010%4dk&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cp <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">;</span> <span class="token comment">// 虚拟盘当前的空白位置</span></span>
<span class="line">        block<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 读取的磁盘块号</span></span>
<span class="line">        nblocks<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 剩余要读取的磁盘块数</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 当前复制的块数</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 根文件系统加载完毕</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\010\\010\\010\\010\\010done \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ROOT_DEV <span class="token operator">=</span> <span class="token number">0x0101</span><span class="token punctuation">;</span> <span class="token comment">// 根文件系统设备号修改为虚拟盘设备号</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const r=s(l,[["render",o],["__file","Chapter 9.5 - ramdisk.c 程序.html.vue"]]),k=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%209%20-%20%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/Chapter%209.5%20-%20ramdisk.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 9.5 - ramdisk.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"9.5 ramdisk.c 程序","slug":"_9-5-ramdisk-c-程序","link":"#_9-5-ramdisk-c-程序","children":[{"level":3,"title":"9.5.1 功能描述","slug":"_9-5-1-功能描述","link":"#_9-5-1-功能描述","children":[]},{"level":3,"title":"9.5.2 代码注释","slug":"_9-5-2-代码注释","link":"#_9-5-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 9 - 块设备驱动程序/Chapter 9.5 - ramdisk.c 程序.md"}');export{r as comp,k as data};
