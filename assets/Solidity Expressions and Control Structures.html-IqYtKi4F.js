import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="solidity-expressions-and-control-structures" tabindex="-1"><a class="header-anchor" href="#solidity-expressions-and-control-structures"><span>Solidity - Expressions and Control Structures</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 02 / 26 11:57</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="input-parameters-and-output-parameters" tabindex="-1"><a class="header-anchor" href="#input-parameters-and-output-parameters"><span>Input Parameters and Output Parameters</span></a></h2><p>输入参数如果不被使用，可以忽略变量名</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">taker</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _a<span class="token punctuation">,</span> <span class="token builtin">uint</span> _b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// do something with _a and _b.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出参数在 <code>returns</code> 关键字后被声明。参数的数据类型是必须声明的，而参数名可以忽略。如果显式指定了参数名，那么这些参数将被初始化为 0；如果不指定参数名，则在函数的最后通过 <code>return</code> 关键字返回被作为输出值的变量。</p><p><code>return</code> 支持同时返回多个值 - <code>return (v0, v1, .., vn);</code></p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">arithmetics</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _a<span class="token punctuation">,</span> <span class="token builtin">uint</span> _b<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> o_sum<span class="token punctuation">,</span> <span class="token builtin">uint</span> o_product<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        o_sum <span class="token operator">=</span> _a <span class="token operator">+</span> _b<span class="token punctuation">;</span></span>
<span class="line">        o_product <span class="token operator">=</span> _a <span class="token operator">*</span> _b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="function-calls" tabindex="-1"><a class="header-anchor" href="#function-calls"><span>Function Calls</span></a></h2><h3 id="internal-function-calls" tabindex="-1"><a class="header-anchor" href="#internal-function-calls"><span>Internal Function Calls</span></a></h3><p>通过简单的跳转实现。</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="external-function-calls" tabindex="-1"><a class="header-anchor" href="#external-function-calls"><span>External Function Calls</span></a></h3><p>通过 <code>this.g(8);</code> 和 <code>c.g(2);</code> (<code>c</code> 是一个实例对象) 进行的调用称为外部调用。实现方式是通过一个 message call，而不是通过跳转。<code>this</code> 不能在构造函数中使用，因为 contract 还没有被创建完成。</p><p>其它 contract 中的函数只能通过外部调用完成。当调用其它 contract 的函数时，需要指定带有的 <code>value()</code> 和 <code>gas()</code>：</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">InfoFeed</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span></span>
<span class="line">    InfoFeed feed<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">setFeed</span><span class="token punctuation">(</span><span class="token builtin">address</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span> feed <span class="token operator">=</span> <span class="token function">InfoFeed</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">callFeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> feed<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gas</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>{ }</code> 以任意顺序传递参数：</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">uint</span> key<span class="token punctuation">,</span> <span class="token builtin">uint</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// named arguments</span></span>
<span class="line">        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="creating-contracts-via-new" tabindex="-1"><a class="header-anchor" href="#creating-contracts-via-new"><span>Creating Contracts via <code>new</code></span></a></h2><p>通过构造函数实例化 contract：</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">D</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">uint</span> x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span></span>
<span class="line">        x <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">    D d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will be executed as part of C&#39;s constructor</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">createD</span><span class="token punctuation">(</span><span class="token builtin">uint</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        D newD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">createAndEndowD</span><span class="token punctuation">(</span><span class="token builtin">uint</span> arg<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Send ether along with the creation</span></span>
<span class="line">        D newD <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h2><p>Solidity 使用状态回退来处理异常。异常将会导致当前调用及其子调用中的所有状态变化回滚，并给调用者一个错误标志。</p><p>使用 <code>assert</code> 和 <code>require</code> 来对条件进行检验，并抛出相应的异常。<code>assert</code> 用于测试内部错误，检查一些常量；<code>require</code> 用于检验输入或者 contract 的状态变量。</p><p>如果在一个子调用中发生了异常，则遵循 <em>bubble up</em> 原则 - 即自动向上抛出。例外情况就是 <code>send</code> 和低层调用函数 <code>call</code> <code>delegatecall</code> 和 <code>callnode</code> - 这些函数在发生异常时会返回 <code>false</code>。</p><hr>`,32)]))}const o=s(p,[["render",l],["__file","Solidity Expressions and Control Structures.html.vue"]]),u=JSON.parse('{"path":"/notes/Solidity/Solidity%20Expressions%20and%20Control%20Structures.html","title":"Solidity - Expressions and Control Structures","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Input Parameters and Output Parameters","slug":"input-parameters-and-output-parameters","link":"#input-parameters-and-output-parameters","children":[]},{"level":2,"title":"Function Calls","slug":"function-calls","link":"#function-calls","children":[{"level":3,"title":"Internal Function Calls","slug":"internal-function-calls","link":"#internal-function-calls","children":[]},{"level":3,"title":"External Function Calls","slug":"external-function-calls","link":"#external-function-calls","children":[]}]},{"level":2,"title":"Creating Contracts via new","slug":"creating-contracts-via-new","link":"#creating-contracts-via-new","children":[]},{"level":2,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[]}],"git":{},"filePathRelative":"notes/Solidity/Solidity Expressions and Control Structures.md"}');export{o as comp,u as data};
