import{_ as a,c as i,a as o,o as n}from"./app-7eKjwDat.js";const l={};function c(t,e){return n(),i("div",null,e[0]||(e[0]=[o(`<h1 id="chapter-16-introduction-to-compiling-software-from-c-source-code" tabindex="-1"><a class="header-anchor" href="#chapter-16-introduction-to-compiling-software-from-c-source-code"><span>Chapter 16 - Introduction to Compiling Software From C Source Code</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 07 / 12 13:40</p><p>@NUAA, Nanjing, Jiangsu, China</p><hr><p>大部分 Unix 第三方软件都是由源代码编译、安装的：</p><ul><li>Unix 面向太多的体系结构，很难为所有的体系结构提供 binary 软件包</li><li>发布源代码能够鼓励更多的开发者进行贡献</li></ul><h2 id="_16-1-software-build-systems" tabindex="-1"><a class="header-anchor" href="#_16-1-software-build-systems"><span>16.1 Software Build Systems</span></a></h2><p>对于 C 的编译和安装系统：从 GNU autotools suite 生成配置脚本。基于 <code>make</code> 工具。通常的步骤：</p><ol><li>解压缩源码归档</li><li>对软件包进行配置</li><li>执行 <code>make</code> 编译程序</li><li>执行 <code>make install</code> 安装软件包</li></ol><h2 id="_16-2-unpacking-c-source-packages" tabindex="-1"><a class="header-anchor" href="#_16-2-unpacking-c-source-packages"><span>16.2 Unpacking C Source Packages</span></a></h2><p>一个软件包的源码归档通常是压缩文件：<code>.tar.gz</code> / <code>.tar.bz2</code> / <code>.tar.xz</code>。先将源码解压缩到一个目录中。</p><h3 id="_16-2-1-where-to-start" tabindex="-1"><a class="header-anchor" href="#_16-2-1-where-to-start"><span>16.2.1 Where to Start</span></a></h3><p>首先阅读 <code>README</code> 或 <code>INSTALL</code> 文件。</p><h2 id="_16-3-gnu-autoconf" tabindex="-1"><a class="header-anchor" href="#_16-3-gnu-autoconf"><span>16.3 GNU Autoconf</span></a></h2><p>由于 Unix 面向很多不同平台，很难只使用一个 makefile 编译整个软件。早期的解决方式：为每个平台提供一个 makefile；现在：自动分析系统信息，并生成对应的 makefile。GNU autoconf 是一个用于自动生成 makefile 的系统：</p><ul><li><code>configure</code></li><li><code>Makefile.in</code></li><li><code>config.h.in</code></li></ul><p><code>.in</code> 文件是模板。运行 <code>configure</code> 脚本，检测本机系统的特征，并在模板中进行填充、替换，从而生成最终的 makefile：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">./configure</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果一切顺利，将会得到一个或多个 <code>Makefile</code> 文件和 <code>config.h</code> 文件。也会得到一个缓存文件 <code>config.cache</code>。</p><h3 id="_16-3-1-an-autoconf-example" tabindex="-1"><a class="header-anchor" href="#_16-3-1-an-autoconf-example"><span>16.3.1 An Autoconf Example</span></a></h3><h3 id="_16-3-2-installing-using-a-packaging-tool" tabindex="-1"><a class="header-anchor" href="#_16-3-2-installing-using-a-packaging-tool"><span>16.3.2 Installing Using a Packaging Tool</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">checkinstall <span class="token function">make</span> <span class="token function">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_16-3-3-configure-script-options" tabindex="-1"><a class="header-anchor" href="#_16-3-3-configure-script-options"><span>16.3.3 configure Script Options</span></a></h3><ul><li><code>--prefix=&lt;/usr/local&gt;</code>：指定安装目录，默认情况下：<code>/usr/local</code>，即： <ul><li>二进制程序：<code>/usr/local/bin</code></li><li>库：<code>/usr/local/lib</code></li></ul></li><li><code>--bindir=&lt;dir&gt;</code>：安装可执行文件的路径</li><li><code>--sbindir=&lt;dir&gt;</code>：安装系统可执行文件的路径</li><li><code>--libdir=&lt;dir&gt;</code>：安装库的路径</li><li><code>--disable-shared</code>：禁止软件编译共享库</li><li><code>--with-package=&lt;dir&gt;</code>：告诉 <code>configure</code> 某个不在默认位置的库的位置</li></ul><h4 id="using-separate-build-directories" tabindex="-1"><a class="header-anchor" href="#using-separate-build-directories"><span>Using Separate Build Directories</span></a></h4><p>在另一个地方创建一个新目录用于编译。从新目录中执行 <code>configure</code> 脚本，<code>configure</code> 会从目录中创建符号链接，指向源目录的代码树。这样，原目录代码树不会改变。</p><h3 id="_16-3-4-environment-variables" tabindex="-1"><a class="header-anchor" href="#_16-3-4-environment-variables"><span>16.3.4 Environment Variables</span></a></h3><p>可以在配置时加入一些编译选项：</p><ul><li><code>CPPFLAGS</code></li><li><code>CFLAGS</code></li><li><code>LDFLAGS</code></li></ul><h3 id="_16-3-5-autoconf-targets" tabindex="-1"><a class="header-anchor" href="#_16-3-5-autoconf-targets"><span>16.3.5 Autoconf Targets</span></a></h3><ul><li><code>make clean</code>：删除所有的目标文件、可执行文件和库文件</li><li><code>make distclean</code>：删除所有自动生成的文件，包括 makefile 等，使目录回到解归档的状态</li><li><code>make check</code>：测试编译后的程序是否正常</li><li><code>make install-strip</code>：将可执行文件和库文件中的符号表等调试信息移除，这样的二进制文件占用的空间更少</li></ul>`,32)]))}const r=a(l,[["render",c],["__file","Chapter 16 - Introduction to Compiling Software From C Source Code.html.vue"]]),d=JSON.parse('{"path":"/how-linux-works-notes/Chapter%2016%20-%20Introduction%20to%20Compiling%20Software%20From%20C%20Source%20Code.html","title":"Chapter 16 - Introduction to Compiling Software From C Source Code","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"16.1 Software Build Systems","slug":"_16-1-software-build-systems","link":"#_16-1-software-build-systems","children":[]},{"level":2,"title":"16.2 Unpacking C Source Packages","slug":"_16-2-unpacking-c-source-packages","link":"#_16-2-unpacking-c-source-packages","children":[{"level":3,"title":"16.2.1 Where to Start","slug":"_16-2-1-where-to-start","link":"#_16-2-1-where-to-start","children":[]}]},{"level":2,"title":"16.3 GNU Autoconf","slug":"_16-3-gnu-autoconf","link":"#_16-3-gnu-autoconf","children":[{"level":3,"title":"16.3.1 An Autoconf Example","slug":"_16-3-1-an-autoconf-example","link":"#_16-3-1-an-autoconf-example","children":[]},{"level":3,"title":"16.3.2 Installing Using a Packaging Tool","slug":"_16-3-2-installing-using-a-packaging-tool","link":"#_16-3-2-installing-using-a-packaging-tool","children":[]},{"level":3,"title":"16.3.3 configure Script Options","slug":"_16-3-3-configure-script-options","link":"#_16-3-3-configure-script-options","children":[]},{"level":3,"title":"16.3.4 Environment Variables","slug":"_16-3-4-environment-variables","link":"#_16-3-4-environment-variables","children":[]},{"level":3,"title":"16.3.5 Autoconf Targets","slug":"_16-3-5-autoconf-targets","link":"#_16-3-5-autoconf-targets","children":[]}]}],"git":{},"filePathRelative":"how-linux-works-notes/Chapter 16 - Introduction to Compiling Software From C Source Code.md"}');export{r as comp,d as data};
