import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="postgresql-copy-to" tabindex="-1"><a class="header-anchor" href="#postgresql-copy-to"><span>PostgreSQL - COPY TO</span></a></h1><p>Created by : Mr Dk.</p><p>2023 / 08 / 20 13:20</p><p>Hangzhou, Zhejiang, China</p><hr><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>Background</span></a></h2><p>在 PostgreSQL 中，<code>COPY TO</code> 语法被用于将表数据导出到文件中。导出到 <em>文件</em> 是 PG 官方文档的说法，我个人认为实际上是导出到各式各样的 <strong>流</strong> 中。因为导出的目标端可以是文件，也可以是标准输出，还可以是另一个进程（这意味着使用了管道）。在这个过程中，需要处理查询优化与执行、输出格式序列化、编码等很多复杂的问题。本文基于当前 PostgreSQL 主干开发分支源码（PostgreSQL 17 under devel）对这个过程进行分析：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">commit a2a6249cf1a4210caac534e8454a1614d0dd081a</span>
<span class="line">Author: Andres Freund &lt;andres@anarazel.de&gt;</span>
<span class="line">Date:   Sat Aug 19 12:40:45 2023 -0700</span>
<span class="line"></span>
<span class="line">    ci: macos: use cached macports install</span>
<span class="line"></span>
<span class="line">    A significant chunk of the time on the macos CI task is spent installing</span>
<span class="line">    packages using homebrew. The downloads of the packages are cached, but the</span>
<span class="line">    installation needs to happen every time. We can&#39;t cache the whole homebrew</span>
<span class="line">    installation, because it is too large due to pre-installed packages.</span>
<span class="line"></span>
<span class="line">    Speed this up by installing packages using macports and caching the</span>
<span class="line">    installation as .dmg. That&#39;s a lot faster than unpacking a tarball.</span>
<span class="line"></span>
<span class="line">    In addition, don&#39;t install llvm - it wasn&#39;t enabled when building, so it&#39;s</span>
<span class="line">    just a waste of time/space.</span>
<span class="line"></span>
<span class="line">    This substantially speeds up the mac CI time, both in the cold cache and in</span>
<span class="line">    the warm cache case (the latter from ~1m20s to ~5s).</span>
<span class="line"></span>
<span class="line">    It doesn&#39;t seem great to have diverging sources of packages for CI between</span>
<span class="line">    branches, so backpatch to 15 (where CI was added).</span>
<span class="line"></span>
<span class="line">    Discussion: https://postgr.es/m/20230805202539.r3umyamsnctysdc7@awork3.anarazel.de</span>
<span class="line">    Backpatch: 15-, where CI was added</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="copy-statement" tabindex="-1"><a class="header-anchor" href="#copy-statement"><span>COPY Statement</span></a></h2><p>从定义上来说，<code>COPY</code> 语法算是一种 DDL。所以是由执行器的 <code>standard_ProcessUtility</code> 函数进行处理的：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">standard_ProcessUtility</span><span class="token punctuation">(</span>PlannedStmt <span class="token operator">*</span>pstmt<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>queryString<span class="token punctuation">,</span></span>
<span class="line">                        bool readOnlyTree<span class="token punctuation">,</span></span>
<span class="line">                        ProcessUtilityContext context<span class="token punctuation">,</span></span>
<span class="line">                        ParamListInfo params<span class="token punctuation">,</span></span>
<span class="line">                        QueryEnvironment <span class="token operator">*</span>queryEnv<span class="token punctuation">,</span></span>
<span class="line">                        DestReceiver <span class="token operator">*</span>dest<span class="token punctuation">,</span></span>
<span class="line">                        QueryCompletion <span class="token operator">*</span>qc<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* ... */</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">nodeTag</span><span class="token punctuation">(</span>parsetree<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* ... */</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">case</span> T_CopyStmt<span class="token operator">:</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                uint64      processed<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">DoCopy</span><span class="token punctuation">(</span>pstate<span class="token punctuation">,</span> <span class="token punctuation">(</span>CopyStmt <span class="token operator">*</span><span class="token punctuation">)</span> parsetree<span class="token punctuation">,</span></span>
<span class="line">                       pstmt<span class="token operator">-&gt;</span>stmt_location<span class="token punctuation">,</span> pstmt<span class="token operator">-&gt;</span>stmt_len<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token operator">&amp;</span>processed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>qc<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">SetQueryCompletion</span><span class="token punctuation">(</span>qc<span class="token punctuation">,</span> CMDTAG_COPY<span class="token punctuation">,</span> processed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* ... */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行器开始处理之前，语法解析器已经把与 <code>COPY</code> 相关的参数设置在 <code>CopyStmt</code> 结构中了。其中：</p><ul><li><code>relation</code>：将要被导出的表</li><li><code>query</code>：导出数据所用的查询（<code>COPY</code> 也支持通过查询导出数据）</li><li><code>attlist</code>：将要导出的列名列表</li><li><code>is_from</code>：当前执行的是 <code>COPY TO</code> 还是 <code>COPY FROM</code></li><li><code>is_program</code>：导出的目标端是否是一个进程（管道）</li><li><code>filename</code>：导出目标端的文件名/程序名（为 <code>NULL</code> 意味着导出至 <code>STDOUT</code>）</li><li><code>options</code>：保存导出过程中的选项</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/* ----------------------</span>
<span class="line"> *      Copy Statement</span>
<span class="line"> *</span>
<span class="line"> * We support &quot;COPY relation FROM file&quot;, &quot;COPY relation TO file&quot;, and</span>
<span class="line"> * &quot;COPY (query) TO file&quot;.  In any given CopyStmt, exactly one of &quot;relation&quot;</span>
<span class="line"> * and &quot;query&quot; must be non-NULL.</span>
<span class="line"> * ----------------------</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">CopyStmt</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    NodeTag     type<span class="token punctuation">;</span></span>
<span class="line">    RangeVar   <span class="token operator">*</span>relation<span class="token punctuation">;</span>       <span class="token comment">/* the relation to copy */</span></span>
<span class="line">    Node       <span class="token operator">*</span>query<span class="token punctuation">;</span>          <span class="token comment">/* the query (SELECT or DML statement with</span>
<span class="line">                                 * RETURNING) to copy, as a raw parse tree */</span></span>
<span class="line">    List       <span class="token operator">*</span>attlist<span class="token punctuation">;</span>        <span class="token comment">/* List of column names (as Strings), or NIL</span>
<span class="line">                                 * for all columns */</span></span>
<span class="line">    bool        is_from<span class="token punctuation">;</span>        <span class="token comment">/* TO or FROM */</span></span>
<span class="line">    bool        is_program<span class="token punctuation">;</span>     <span class="token comment">/* is &#39;filename&#39; a program to popen? */</span></span>
<span class="line">    <span class="token keyword">char</span>       <span class="token operator">*</span>filename<span class="token punctuation">;</span>       <span class="token comment">/* filename, or NULL for STDIN/STDOUT */</span></span>
<span class="line">    List       <span class="token operator">*</span>options<span class="token punctuation">;</span>        <span class="token comment">/* List of DefElem nodes */</span></span>
<span class="line">    Node       <span class="token operator">*</span>whereClause<span class="token punctuation">;</span>    <span class="token comment">/* WHERE condition (or NULL) */</span></span>
<span class="line"><span class="token punctuation">}</span> CopyStmt<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="权限检查" tabindex="-1"><a class="header-anchor" href="#权限检查"><span>权限检查</span></a></h2><p>进入到 <code>DoCopy</code> 函数后，需要进行初步的权限检查。首先需要做判断的是导出到文件/进程的情况。如果是导出到文件，那么当前用户需要有写文件的权限；如果是导出到程序，那么当前用户需要有执行程序的权限：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">bool        pipe <span class="token operator">=</span> <span class="token punctuation">(</span>stmt<span class="token operator">-&gt;</span>filename <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Disallow COPY to/from file or program except to users with the</span>
<span class="line"> * appropriate role.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pipe<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt<span class="token operator">-&gt;</span>is_program<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">has_privs_of_role</span><span class="token punctuation">(</span><span class="token function">GetUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ROLE_PG_EXECUTE_SERVER_PROGRAM<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_INSUFFICIENT_PRIVILEGE<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;permission denied to COPY to or from an external program&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errdetail</span><span class="token punctuation">(</span><span class="token string">&quot;Only roles with privileges of the \\&quot;%s\\&quot; role may COPY to or from an external program.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                               <span class="token string">&quot;pg_execute_server_program&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errhint</span><span class="token punctuation">(</span><span class="token string">&quot;Anyone can COPY to stdout or from stdin. &quot;</span></span>
<span class="line">                             <span class="token string">&quot;psql&#39;s \\\\copy command also works for anyone.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>is_from <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">has_privs_of_role</span><span class="token punctuation">(</span><span class="token function">GetUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ROLE_PG_READ_SERVER_FILES<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_INSUFFICIENT_PRIVILEGE<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;permission denied to COPY from a file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errdetail</span><span class="token punctuation">(</span><span class="token string">&quot;Only roles with privileges of the \\&quot;%s\\&quot; role may COPY from a file.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                               <span class="token string">&quot;pg_read_server_files&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errhint</span><span class="token punctuation">(</span><span class="token string">&quot;Anyone can COPY to stdout or from stdin. &quot;</span></span>
<span class="line">                             <span class="token string">&quot;psql&#39;s \\\\copy command also works for anyone.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_from <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">has_privs_of_role</span><span class="token punctuation">(</span><span class="token function">GetUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ROLE_PG_WRITE_SERVER_FILES<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_INSUFFICIENT_PRIVILEGE<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;permission denied to COPY to a file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errdetail</span><span class="token punctuation">(</span><span class="token string">&quot;Only roles with privileges of the \\&quot;%s\\&quot; role may COPY to a file.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                               <span class="token string">&quot;pg_write_server_files&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errhint</span><span class="token punctuation">(</span><span class="token string">&quot;Anyone can COPY to stdout or from stdin. &quot;</span></span>
<span class="line">                             <span class="token string">&quot;psql&#39;s \\\\copy command also works for anyone.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步是对将要导出的数据来源进行准备：</p><ol><li>如果数据的来源是表，那么需要对表上锁；对于 <code>COPY TO</code> 来说，<code>AccessShareLock</code> 已经足够；接着检查列权限和行安全策略权限</li><li>如果数据的来源是查询，那么将查询构造为语法树节点以备后续使用</li></ol><p>上述所有逻辑是 <code>COPY TO</code> 和 <code>COPY FROM</code> 两种语法共用的。接下来，执行器逻辑开始对这两种语法做区分处理了。对于 <code>COPY TO</code> 来说，<code>BeginCopyTo</code> / <code>DoCopyTo</code> / <code>EndCopyTo</code> 三个函数分别对应了三个执行阶段：</p><ol><li>准备</li><li>执行</li><li>结束</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>is_from<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* COPY FROM */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    CopyToState cstate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cstate <span class="token operator">=</span> <span class="token function">BeginCopyTo</span><span class="token punctuation">(</span>pstate<span class="token punctuation">,</span> rel<span class="token punctuation">,</span> query<span class="token punctuation">,</span> relid<span class="token punctuation">,</span></span>
<span class="line">                         stmt<span class="token operator">-&gt;</span>filename<span class="token punctuation">,</span> stmt<span class="token operator">-&gt;</span>is_program<span class="token punctuation">,</span></span>
<span class="line">                         <span class="token constant">NULL</span><span class="token punctuation">,</span> stmt<span class="token operator">-&gt;</span>attlist<span class="token punctuation">,</span> stmt<span class="token operator">-&gt;</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>processed <span class="token operator">=</span> <span class="token function">DoCopyTo</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* copy from database to file */</span></span>
<span class="line">    <span class="token function">EndCopyTo</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="copy-to-准备阶段" tabindex="-1"><a class="header-anchor" href="#copy-to-准备阶段"><span>COPY TO 准备阶段</span></a></h2><p>整个 <code>BeginCopyTo</code> 函数实际上都是在初始化一个 <code>CopyToState</code> 结构。该结构保存了后续 <code>COPY TO</code> 执行阶段所需要用到的所有东西：</p><ul><li>用于导出数据的文件描述符</li><li>每行数据的序列化缓冲区</li><li>编码相关信息</li><li>每个列的序列化函数</li><li>内存上下文</li><li>统计信息</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * This struct contains all the state variables used throughout a COPY TO</span>
<span class="line"> * operation.</span>
<span class="line"> *</span>
<span class="line"> * Multi-byte encodings: all supported client-side encodings encode multi-byte</span>
<span class="line"> * characters by having the first byte&#39;s high bit set. Subsequent bytes of the</span>
<span class="line"> * character can have the high bit not set. When scanning data in such an</span>
<span class="line"> * encoding to look for a match to a single-byte (ie ASCII) character, we must</span>
<span class="line"> * use the full pg_encoding_mblen() machinery to skip over multibyte</span>
<span class="line"> * characters, else we might find a false match to a trailing byte. In</span>
<span class="line"> * supported server encodings, there is no possibility of a false match, and</span>
<span class="line"> * it&#39;s faster to make useless comparisons to trailing bytes than it is to</span>
<span class="line"> * invoke pg_encoding_mblen() to skip over them. encoding_embeds_ascii is true</span>
<span class="line"> * when we have to do it the hard way.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">CopyToStateData</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* low-level state data */</span></span>
<span class="line">    CopyDest    copy_dest<span class="token punctuation">;</span>      <span class="token comment">/* type of copy source/destination */</span></span>
<span class="line">    FILE       <span class="token operator">*</span>copy_file<span class="token punctuation">;</span>      <span class="token comment">/* used if copy_dest == COPY_FILE */</span></span>
<span class="line">    StringInfo  fe_msgbuf<span class="token punctuation">;</span>      <span class="token comment">/* used for all dests during COPY TO */</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span>         file_encoding<span class="token punctuation">;</span>  <span class="token comment">/* file or remote side&#39;s character encoding */</span></span>
<span class="line">    bool        need_transcoding<span class="token punctuation">;</span>   <span class="token comment">/* file encoding diff from server? */</span></span>
<span class="line">    bool        encoding_embeds_ascii<span class="token punctuation">;</span>  <span class="token comment">/* ASCII can be non-first byte? */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* parameters from the COPY command */</span></span>
<span class="line">    Relation    rel<span class="token punctuation">;</span>            <span class="token comment">/* relation to copy to */</span></span>
<span class="line">    QueryDesc  <span class="token operator">*</span>queryDesc<span class="token punctuation">;</span>      <span class="token comment">/* executable query to copy from */</span></span>
<span class="line">    List       <span class="token operator">*</span>attnumlist<span class="token punctuation">;</span>     <span class="token comment">/* integer list of attnums to copy */</span></span>
<span class="line">    <span class="token keyword">char</span>       <span class="token operator">*</span>filename<span class="token punctuation">;</span>       <span class="token comment">/* filename, or NULL for STDOUT */</span></span>
<span class="line">    bool        is_program<span class="token punctuation">;</span>     <span class="token comment">/* is &#39;filename&#39; a program to popen? */</span></span>
<span class="line">    copy_data_dest_cb data_dest_cb<span class="token punctuation">;</span> <span class="token comment">/* function for writing data */</span></span>
<span class="line"></span>
<span class="line">    CopyFormatOptions opts<span class="token punctuation">;</span></span>
<span class="line">    Node       <span class="token operator">*</span>whereClause<span class="token punctuation">;</span>    <span class="token comment">/* WHERE condition (or NULL) */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Working state</span>
<span class="line">     */</span></span>
<span class="line">    MemoryContext copycontext<span class="token punctuation">;</span>  <span class="token comment">/* per-copy execution context */</span></span>
<span class="line"></span>
<span class="line">    FmgrInfo   <span class="token operator">*</span>out_functions<span class="token punctuation">;</span>  <span class="token comment">/* lookup info for output functions */</span></span>
<span class="line">    MemoryContext rowcontext<span class="token punctuation">;</span>   <span class="token comment">/* per-row evaluation context */</span></span>
<span class="line">    uint64      bytes_processed<span class="token punctuation">;</span>    <span class="token comment">/* number of bytes processed so far */</span></span>
<span class="line"><span class="token punctuation">}</span> CopyToStateData<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">CopyToStateData</span> <span class="token operator">*</span>CopyToState<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，拒绝掉除普通表以外的所有对象类型的 <strong>直接导出</strong>。诸如分区表、视图等其它类型的对象只能通过查询进行导出：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>rel <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> rel<span class="token operator">-&gt;</span>rd_rel<span class="token operator">-&gt;</span>relkind <span class="token operator">!=</span> RELKIND_RELATION<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rel<span class="token operator">-&gt;</span>rd_rel<span class="token operator">-&gt;</span>relkind <span class="token operator">==</span> RELKIND_VIEW<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_WRONG_OBJECT_TYPE<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                 <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;cannot copy from view \\&quot;%s\\&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">RelationGetRelationName</span><span class="token punctuation">(</span>rel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                 <span class="token function">errhint</span><span class="token punctuation">(</span><span class="token string">&quot;Try the COPY (SELECT ...) TO variant.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后分配好 <code>CopyToState</code> 的内存及其相关的内存上下文，开始初始化。通过 <code>ProcessCopyOptions</code> 函数解析所有的导出选项：</p><ul><li>导出格式：<code>text</code> / <code>csv</code> / <code>binary</code></li><li>是否允许 <code>NULL</code> 值、转义字符、默认值、分隔符</li><li>编码</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/* Allocate workspace and zero all fields */</span></span>
<span class="line">cstate <span class="token operator">=</span> <span class="token punctuation">(</span>CopyToStateData <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">palloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CopyToStateData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * We allocate everything used by a cstate in a new memory context. This</span>
<span class="line"> * avoids memory leaks during repeated use of COPY in a query.</span>
<span class="line"> */</span></span>
<span class="line">cstate<span class="token operator">-&gt;</span>copycontext <span class="token operator">=</span> <span class="token function">AllocSetContextCreate</span><span class="token punctuation">(</span>CurrentMemoryContext<span class="token punctuation">,</span></span>
<span class="line">                                            <span class="token string">&quot;COPY&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                            ALLOCSET_DEFAULT_SIZES<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">oldcontext <span class="token operator">=</span> <span class="token function">MemoryContextSwitchTo</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>copycontext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Extract options from the statement node tree */</span></span>
<span class="line"><span class="token function">ProcessCopyOptions</span><span class="token punctuation">(</span>pstate<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">,</span> false <span class="token comment">/* is_from */</span> <span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果导出的数据来源不是表而是查询，那么需要解析并重写这条查询，然后把这条查询输入优化器得到执行计划，把执行计划输入执行器，完成执行器初始化。查询只允许 <code>SELECT</code> 语句，或带有 <code>RETURNING</code> 子句的 DML。（不然你还导出个啥？）</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/* Process the source/target relation or query */</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>rel<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token operator">!</span>raw_query<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cstate<span class="token operator">-&gt;</span>rel <span class="token operator">=</span> rel<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    tupDesc <span class="token operator">=</span> <span class="token function">RelationGetDescr</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>rel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* ... */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Run parse analysis and rewrite.  Note this also acquires sufficient</span>
<span class="line">     * locks on the source table(s).</span>
<span class="line">     */</span></span>
<span class="line">    rewritten <span class="token operator">=</span> <span class="token function">pg_analyze_and_rewrite_fixedparams</span><span class="token punctuation">(</span>raw_query<span class="token punctuation">,</span></span>
<span class="line">                                                   pstate<span class="token operator">-&gt;</span>p_sourcetext<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                                                   <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* check that we got back something we can work with */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rewritten <span class="token operator">==</span> NIL<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_FEATURE_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                 <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;DO INSTEAD NOTHING rules are not supported for COPY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_length</span><span class="token punctuation">(</span>rewritten<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        ListCell   <span class="token operator">*</span>lc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* examine queries to determine which error message to issue */</span></span>
<span class="line">        <span class="token function">foreach</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> rewritten<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Query      <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">lfirst_node</span><span class="token punctuation">(</span>Query<span class="token punctuation">,</span> lc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>querySource <span class="token operator">==</span> QSRC_QUAL_INSTEAD_RULE<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_FEATURE_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                         <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;conditional DO INSTEAD rules are not supported for COPY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>querySource <span class="token operator">==</span> QSRC_NON_INSTEAD_RULE<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_FEATURE_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                         <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;DO ALSO rules are not supported for the COPY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_FEATURE_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                 <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;multi-statement DO INSTEAD rules are not supported for COPY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    query <span class="token operator">=</span> <span class="token function">linitial_node</span><span class="token punctuation">(</span>Query<span class="token punctuation">,</span> rewritten<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* The grammar allows SELECT INTO, but we don&#39;t support that */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token operator">-&gt;</span>utilityStmt <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token function">IsA</span><span class="token punctuation">(</span>query<span class="token operator">-&gt;</span>utilityStmt<span class="token punctuation">,</span> CreateTableAsStmt<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_FEATURE_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                 <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;COPY (SELECT INTO) is not supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">Assert</span><span class="token punctuation">(</span>query<span class="token operator">-&gt;</span>utilityStmt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Similarly the grammar doesn&#39;t enforce the presence of a RETURNING</span>
<span class="line">     * clause, but this is required here.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token operator">-&gt;</span>commandType <span class="token operator">!=</span> CMD_SELECT <span class="token operator">&amp;&amp;</span></span>
<span class="line">        query<span class="token operator">-&gt;</span>returningList <span class="token operator">==</span> NIL<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Assert</span><span class="token punctuation">(</span>query<span class="token operator">-&gt;</span>commandType <span class="token operator">==</span> CMD_INSERT <span class="token operator">||</span></span>
<span class="line">               query<span class="token operator">-&gt;</span>commandType <span class="token operator">==</span> CMD_UPDATE <span class="token operator">||</span></span>
<span class="line">               query<span class="token operator">-&gt;</span>commandType <span class="token operator">==</span> CMD_DELETE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_FEATURE_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                 <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;COPY query must have a RETURNING clause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* plan the query */</span></span>
<span class="line">    plan <span class="token operator">=</span> <span class="token function">pg_plan_query</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> pstate<span class="token operator">-&gt;</span>p_sourcetext<span class="token punctuation">,</span></span>
<span class="line">                         CURSOR_OPT_PARALLEL_OK<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* ... */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Use a snapshot with an updated command ID to ensure this query sees</span>
<span class="line">     * results of any previously executed queries.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token function">PushCopiedSnapshot</span><span class="token punctuation">(</span><span class="token function">GetActiveSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">UpdateActiveSnapshotCommandId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Create dest receiver for COPY OUT */</span></span>
<span class="line">    dest <span class="token operator">=</span> <span class="token function">CreateDestReceiver</span><span class="token punctuation">(</span>DestCopyOut<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">(</span>DR_copy <span class="token operator">*</span><span class="token punctuation">)</span> dest<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cstate <span class="token operator">=</span> cstate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Create a QueryDesc requesting no output */</span></span>
<span class="line">    cstate<span class="token operator">-&gt;</span>queryDesc <span class="token operator">=</span> <span class="token function">CreateQueryDesc</span><span class="token punctuation">(</span>plan<span class="token punctuation">,</span> pstate<span class="token operator">-&gt;</span>p_sourcetext<span class="token punctuation">,</span></span>
<span class="line">                                        <span class="token function">GetActiveSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                        InvalidSnapshot<span class="token punctuation">,</span></span>
<span class="line">                                        dest<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Call ExecutorStart to prepare the plan for execution.</span>
<span class="line">     *</span>
<span class="line">     * ExecutorStart computes a result tupdesc for us</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token function">ExecutorStart</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>queryDesc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    tupDesc <span class="token operator">=</span> cstate<span class="token operator">-&gt;</span>queryDesc<span class="token operator">-&gt;</span>tupDesc<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用优化器的入口函数时，传入了 <code>CURSOR_OPT_PARALLEL_OK</code> 参数。这意味着在条件允许的情况下，优化器可以生成并行执行计划加速扫描。</p><p>另外，上述代码通过 <code>CreateDestReceiver</code> 调用 <code>CreateCopyDestReceiver</code> 注册好 <code>COPY TO</code> 专用的执行器回调函数。这会被后续的执行阶段使用到：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * CreateCopyDestReceiver -- create a suitable DestReceiver object</span>
<span class="line"> */</span></span>
<span class="line">DestReceiver <span class="token operator">*</span></span>
<span class="line"><span class="token function">CreateCopyDestReceiver</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    DR_copy    <span class="token operator">*</span>self <span class="token operator">=</span> <span class="token punctuation">(</span>DR_copy <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">palloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DR_copy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    self<span class="token operator">-&gt;</span>pub<span class="token punctuation">.</span>receiveSlot <span class="token operator">=</span> copy_dest_receive<span class="token punctuation">;</span></span>
<span class="line">    self<span class="token operator">-&gt;</span>pub<span class="token punctuation">.</span>rStartup <span class="token operator">=</span> copy_dest_startup<span class="token punctuation">;</span></span>
<span class="line">    self<span class="token operator">-&gt;</span>pub<span class="token punctuation">.</span>rShutdown <span class="token operator">=</span> copy_dest_shutdown<span class="token punctuation">;</span></span>
<span class="line">    self<span class="token operator">-&gt;</span>pub<span class="token punctuation">.</span>rDestroy <span class="token operator">=</span> copy_dest_destroy<span class="token punctuation">;</span></span>
<span class="line">    self<span class="token operator">-&gt;</span>pub<span class="token punctuation">.</span>mydest <span class="token operator">=</span> DestCopyOut<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    self<span class="token operator">-&gt;</span>cstate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">/* will be set later */</span></span>
<span class="line">    self<span class="token operator">-&gt;</span>processed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>DestReceiver <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，根据要导出的列，处理每一个列的转义、编码等信息。最后，根据要导出的目标端做相应的准备：</p><ul><li>如果导出到一个回调函数，那么准备好这个回调函数</li><li>如果导出到 <code>STDOUT</code>，那么就设置好相应的文件描述符</li><li>如果导出到一个程序，那么通过 <code>popen</code> 启动相应的程序，并创建好 I/O 管道</li><li>如果导出到一个文件，那么通过 <code>fopen</code> 打开文件，并通过 <code>fstat</code> 确认文件的合法性</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>data_dest_cb<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    progress_vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PROGRESS_COPY_TYPE_CALLBACK<span class="token punctuation">;</span></span>
<span class="line">    cstate<span class="token operator">-&gt;</span>copy_dest <span class="token operator">=</span> COPY_CALLBACK<span class="token punctuation">;</span></span>
<span class="line">    cstate<span class="token operator">-&gt;</span>data_dest_cb <span class="token operator">=</span> data_dest_cb<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pipe<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    progress_vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PROGRESS_COPY_TYPE_PIPE<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token operator">!</span>is_program<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* the grammar does not allow this */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>whereToSendOutput <span class="token operator">!=</span> DestRemote<span class="token punctuation">)</span></span>
<span class="line">        cstate<span class="token operator">-&gt;</span>copy_file <span class="token operator">=</span> <span class="token constant">stdout</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    cstate<span class="token operator">-&gt;</span>filename <span class="token operator">=</span> <span class="token function">pstrdup</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    cstate<span class="token operator">-&gt;</span>is_program <span class="token operator">=</span> is_program<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_program<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        progress_vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PROGRESS_COPY_TYPE_PROGRAM<span class="token punctuation">;</span></span>
<span class="line">        cstate<span class="token operator">-&gt;</span>copy_file <span class="token operator">=</span> <span class="token function">OpenPipeStream</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>filename<span class="token punctuation">,</span> PG_BINARY_W<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>copy_file <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode_for_file_access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;could not execute command \\&quot;%s\\&quot;: %m&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                            cstate<span class="token operator">-&gt;</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">mode_t</span>      oumask<span class="token punctuation">;</span> <span class="token comment">/* Pre-existing umask value */</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">stat</span> st<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        progress_vals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PROGRESS_COPY_TYPE_FILE<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">         * Prevent write to relative path ... too easy to shoot oneself in</span>
<span class="line">         * the foot by overwriting a database file ...</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_absolute_path</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_INVALID_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;relative path not allowed for COPY to file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        oumask <span class="token operator">=</span> <span class="token function">umask</span><span class="token punctuation">(</span>S_IWGRP <span class="token operator">|</span> S_IWOTH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">PG_TRY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            cstate<span class="token operator">-&gt;</span>copy_file <span class="token operator">=</span> <span class="token function">AllocateFile</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>filename<span class="token punctuation">,</span> PG_BINARY_W<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">PG_FINALLY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">umask</span><span class="token punctuation">(</span>oumask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">PG_END_TRY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>copy_file <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/* copy errno because ereport subfunctions might change it */</span></span>
<span class="line">            <span class="token keyword">int</span>         save_errno <span class="token operator">=</span> errno<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode_for_file_access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;could not open file \\&quot;%s\\&quot; for writing: %m&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                            cstate<span class="token operator">-&gt;</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token punctuation">(</span>save_errno <span class="token operator">==</span> ENOENT <span class="token operator">||</span> save_errno <span class="token operator">==</span> EACCES<span class="token punctuation">)</span> <span class="token operator">?</span></span>
<span class="line">                     <span class="token function">errhint</span><span class="token punctuation">(</span><span class="token string">&quot;COPY TO instructs the PostgreSQL server process to write a file. &quot;</span></span>
<span class="line">                             <span class="token string">&quot;You may want a client-side facility such as psql&#39;s \\\\copy.&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fstat</span><span class="token punctuation">(</span><span class="token function">fileno</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>copy_file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode_for_file_access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;could not stat file \\&quot;%s\\&quot;: %m&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                            cstate<span class="token operator">-&gt;</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode</span><span class="token punctuation">(</span>ERRCODE_WRONG_OBJECT_TYPE<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;%s\\&quot; is a directory&quot;</span><span class="token punctuation">,</span> cstate<span class="token operator">-&gt;</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="copy-to-执行阶段" tabindex="-1"><a class="header-anchor" href="#copy-to-执行阶段"><span>COPY TO 执行阶段</span></a></h2><p><code>DoCopyTo</code> 函数不断从数据源取出数据，并写出到已经初始化完毕的目标端中。</p><p>首先，对于导出到 <code>STDOUT</code> 的情况，PostgreSQL 会直接认为接收端是一个实现了 <a href="https://www.postgresql.org/docs/current/protocol.html" target="_blank" rel="noopener noreferrer">pq 协议</a> 的前端。根据协议，首先需要发送 <code>COPY</code> 开始的消息：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">bool        pipe <span class="token operator">=</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>filename <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> cstate<span class="token operator">-&gt;</span>data_dest_cb <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bool        fe_copy <span class="token operator">=</span> <span class="token punctuation">(</span>pipe <span class="token operator">&amp;&amp;</span> whereToSendOutput <span class="token operator">==</span> DestRemote<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>fe_copy<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">SendCopyBegin</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，获取要导出的每一个列，初始化每一个列的序列化函数。根据要导出的格式，选择使用二进制序列化函数还是字符串序列化函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>rel<span class="token punctuation">)</span></span>
<span class="line">    tupDesc <span class="token operator">=</span> <span class="token function">RelationGetDescr</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>rel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    tupDesc <span class="token operator">=</span> cstate<span class="token operator">-&gt;</span>queryDesc<span class="token operator">-&gt;</span>tupDesc<span class="token punctuation">;</span></span>
<span class="line">num_phys_attrs <span class="token operator">=</span> tupDesc<span class="token operator">-&gt;</span>natts<span class="token punctuation">;</span></span>
<span class="line">cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>null_print_client <span class="token operator">=</span> cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>null_print<span class="token punctuation">;</span>   <span class="token comment">/* default */</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* We use fe_msgbuf as a per-row buffer regardless of copy_dest */</span></span>
<span class="line">cstate<span class="token operator">-&gt;</span>fe_msgbuf <span class="token operator">=</span> <span class="token function">makeStringInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Get info about the columns we need to process. */</span></span>
<span class="line">cstate<span class="token operator">-&gt;</span>out_functions <span class="token operator">=</span> <span class="token punctuation">(</span>FmgrInfo <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">palloc</span><span class="token punctuation">(</span>num_phys_attrs <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FmgrInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">foreach</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> cstate<span class="token operator">-&gt;</span>attnumlist<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span>         attnum <span class="token operator">=</span> <span class="token function">lfirst_int</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Oid         out_func_oid<span class="token punctuation">;</span></span>
<span class="line">    bool        isvarlena<span class="token punctuation">;</span></span>
<span class="line">    Form_pg_attribute attr <span class="token operator">=</span> <span class="token function">TupleDescAttr</span><span class="token punctuation">(</span>tupDesc<span class="token punctuation">,</span> attnum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>binary<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">getTypeBinaryOutputInfo</span><span class="token punctuation">(</span>attr<span class="token operator">-&gt;</span>atttypid<span class="token punctuation">,</span></span>
<span class="line">                                <span class="token operator">&amp;</span>out_func_oid<span class="token punctuation">,</span></span>
<span class="line">                                <span class="token operator">&amp;</span>isvarlena<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">getTypeOutputInfo</span><span class="token punctuation">(</span>attr<span class="token operator">-&gt;</span>atttypid<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token operator">&amp;</span>out_func_oid<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token operator">&amp;</span>isvarlena<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">fmgr_info</span><span class="token punctuation">(</span>out_func_oid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cstate<span class="token operator">-&gt;</span>out_functions<span class="token punctuation">[</span>attnum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果导出格式为二进制，那么需要向输出流中写入签名、标志位等信息；如果导出格式为字符串，那么根据导出的是 <code>text</code> 格式还是 <code>csv</code> 格式，可选地向输出流中写入 header 等信息：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>binary<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* Generate header for a binary copy */</span></span>
<span class="line">    int32       tmp<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Signature */</span></span>
<span class="line">    <span class="token function">CopySendData</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> BinarySignature<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* Flags field */</span></span>
<span class="line">    tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">CopySendInt32</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* No header extension */</span></span>
<span class="line">    tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">CopySendInt32</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * For non-binary copy, we need to convert null_print to file</span>
<span class="line">     * encoding, because it will be sent directly with CopySendString.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>need_transcoding<span class="token punctuation">)</span></span>
<span class="line">        cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>null_print_client <span class="token operator">=</span> <span class="token function">pg_server_to_any</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>null_print<span class="token punctuation">,</span></span>
<span class="line">                                                          cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>null_print_len<span class="token punctuation">,</span></span>
<span class="line">                                                          cstate<span class="token operator">-&gt;</span>file_encoding<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* if a header has been requested send the line */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>header_line<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        bool        hdr_delim <span class="token operator">=</span> false<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">foreach</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> cstate<span class="token operator">-&gt;</span>attnumlist<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span>         attnum <span class="token operator">=</span> <span class="token function">lfirst_int</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">char</span>       <span class="token operator">*</span>colname<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>hdr_delim<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">CopySendChar</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>delim<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            hdr_delim <span class="token operator">=</span> true<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            colname <span class="token operator">=</span> <span class="token function">NameStr</span><span class="token punctuation">(</span><span class="token function">TupleDescAttr</span><span class="token punctuation">(</span>tupDesc<span class="token punctuation">,</span> attnum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>attname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>csv_mode<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">CopyAttributeOutCSV</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> colname<span class="token punctuation">,</span> false<span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token function">list_length</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>attnumlist<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                <span class="token function">CopyAttributeOutText</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> colname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">CopySendEndOfRow</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果导出的来源是裸表，那么调用表的 Access Method 接口不断从表中取出一行数据，序列化并发送；如果导出的来源是查询，那么直接让执行器进入执行阶段。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>rel<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    TupleTableSlot <span class="token operator">*</span>slot<span class="token punctuation">;</span></span>
<span class="line">    TableScanDesc scandesc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    scandesc <span class="token operator">=</span> <span class="token function">table_beginscan</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>rel<span class="token punctuation">,</span> <span class="token function">GetActiveSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    slot <span class="token operator">=</span> <span class="token function">table_slot_create</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>rel<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    processed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">table_scan_getnextslot</span><span class="token punctuation">(</span>scandesc<span class="token punctuation">,</span> ForwardScanDirection<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">CHECK_FOR_INTERRUPTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* Deconstruct the tuple ... */</span></span>
<span class="line">        <span class="token function">slot_getallattrs</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* Format and send the data */</span></span>
<span class="line">        <span class="token function">CopyOneRowTo</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">         * Increment the number of processed tuples, and report the</span>
<span class="line">         * progress.</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token function">pgstat_progress_update_param</span><span class="token punctuation">(</span>PROGRESS_COPY_TUPLES_PROCESSED<span class="token punctuation">,</span></span>
<span class="line">                                        <span class="token operator">++</span>processed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ExecDropSingleTupleTableSlot</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">table_endscan</span><span class="token punctuation">(</span>scandesc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* run the plan --- the dest receiver will send tuples */</span></span>
<span class="line">    <span class="token function">ExecutorRun</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>queryDesc<span class="token punctuation">,</span> ForwardScanDirection<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    processed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DR_copy <span class="token operator">*</span><span class="token punctuation">)</span> cstate<span class="token operator">-&gt;</span>queryDesc<span class="token operator">-&gt;</span>dest<span class="token punctuation">)</span><span class="token operator">-&gt;</span>processed<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行器在执行阶段会通过回调 <code>copy_dest_receive</code> 函数完成每一行数据的序列化和发送：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * copy_dest_receive --- receive one tuple</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">static</span> bool</span>
<span class="line"><span class="token function">copy_dest_receive</span><span class="token punctuation">(</span>TupleTableSlot <span class="token operator">*</span>slot<span class="token punctuation">,</span> DestReceiver <span class="token operator">*</span>self<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    DR_copy    <span class="token operator">*</span>myState <span class="token operator">=</span> <span class="token punctuation">(</span>DR_copy <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span></span>
<span class="line">    CopyToState cstate <span class="token operator">=</span> myState<span class="token operator">-&gt;</span>cstate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Send the data */</span></span>
<span class="line">    <span class="token function">CopyOneRowTo</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Increment the number of processed tuples, and report the progress */</span></span>
<span class="line">    <span class="token function">pgstat_progress_update_param</span><span class="token punctuation">(</span>PROGRESS_COPY_TUPLES_PROCESSED<span class="token punctuation">,</span></span>
<span class="line">                                 <span class="token operator">++</span>myState<span class="token operator">-&gt;</span>processed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> true<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有数据行都写出后，如果导出格式为二进制，那么还需要额外写入尾部消息：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>opts<span class="token punctuation">.</span>binary<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* Generate trailer for a binary copy */</span></span>
<span class="line">    <span class="token function">CopySendInt16</span><span class="token punctuation">(</span>cstate<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* Need to flush out the trailer */</span></span>
<span class="line">    <span class="token function">CopySendEndOfRow</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果导出的目标端是 <code>STDOUT</code>，那么根据 pq 协议还需要写入结束消息：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>fe_copy<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">SendCopyEnd</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，<code>COPY</code> 执行阶段结束，返回导出的数据行数。</p><h3 id="copy-to-结束阶段" tabindex="-1"><a class="header-anchor" href="#copy-to-结束阶段"><span>COPY TO 结束阶段</span></a></h3><p>结束阶段相对来说简单直接一些。如果使用了执行器，那就让执行器进入清理和结束阶段；如果导出到程序，则关闭管道；如果导出到文件，则关闭文件：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * Clean up storage and release resources for COPY TO.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">EndCopyTo</span><span class="token punctuation">(</span>CopyToState cstate<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>queryDesc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* Close down the query and free resources. */</span></span>
<span class="line">        <span class="token function">ExecutorFinish</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>queryDesc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ExecutorEnd</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>queryDesc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">FreeQueryDesc</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>queryDesc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">PopActiveSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Clean up storage */</span></span>
<span class="line">    <span class="token function">EndCopy</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Release resources allocated in a cstate for COPY TO/FROM.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">EndCopy</span><span class="token punctuation">(</span>CopyToState cstate<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>is_program<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ClosePipeToProgram</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>filename <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">FreeFile</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>copy_file<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ereport</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token function">errcode_for_file_access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">errmsg</span><span class="token punctuation">(</span><span class="token string">&quot;could not close file \\&quot;%s\\&quot;: %m&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                            cstate<span class="token operator">-&gt;</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">pgstat_progress_end_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">MemoryContextDelete</span><span class="token punctuation">(</span>cstate<span class="token operator">-&gt;</span>copycontext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">pfree</span><span class="token punctuation">(</span>cstate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://www.postgresql.org/docs/current/sql-copy.html" target="_blank" rel="noopener noreferrer">PostgreSQL Documentation: COPY</a></p>`,61)]))}const i=s(t,[["render",c],["__file","PostgreSQL COPY TO.html.vue"]]),u=JSON.parse('{"path":"/notes/PostgreSQL/PostgreSQL%20COPY%20TO.html","title":"PostgreSQL - COPY TO","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Background","slug":"background","link":"#background","children":[]},{"level":2,"title":"COPY Statement","slug":"copy-statement","link":"#copy-statement","children":[]},{"level":2,"title":"权限检查","slug":"权限检查","link":"#权限检查","children":[]},{"level":2,"title":"COPY TO 准备阶段","slug":"copy-to-准备阶段","link":"#copy-to-准备阶段","children":[]},{"level":2,"title":"COPY TO 执行阶段","slug":"copy-to-执行阶段","link":"#copy-to-执行阶段","children":[{"level":3,"title":"COPY TO 结束阶段","slug":"copy-to-结束阶段","link":"#copy-to-结束阶段","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/PostgreSQL/PostgreSQL COPY TO.md"}');export{i as comp,u as data};
