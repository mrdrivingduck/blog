import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="c-const" tabindex="-1"><a class="header-anchor" href="#c-const"><span>C++ - Const</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 03 / 05 23:22</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p><code>const</code> 是一个 C++ 限定符，用于指出 <strong>常量</strong> 的符号内容。创建常量的通用格式如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">const</span> type name <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>应当尽量在声明时直接对常量进行初始化。</p><p>与 <code>#define</code> 的区别：</p><ul><li><code>const</code> 能够明确指明常量数据类型</li><li>C++ 的作用域规则能将 <code>const</code> 的定义限制在特定的函数或文件中</li><li>可以用于数组或结构体等复杂类型</li></ul><h2 id="const-with-pointers" tabindex="-1"><a class="header-anchor" href="#const-with-pointers"><span>Const with Pointers</span></a></h2><p><code>const</code> 关键字能够与指针组合出两种用法：</p><ul><li>指向常量的指针：指针认为指向的值是常量，因此不允许用指针修改值</li><li>常量指针：指针自身是一个常量，指针的值无法被修改</li></ul><h3 id="指向常量的指针" tabindex="-1"><a class="header-anchor" href="#指向常量的指针"><span>指向常量的指针</span></a></h3><p>对于一个 <em>指向常量的指针</em>，其真正指向的数据不一定是一个常量，只是指针这么认为。所以想通过这个指针去修改数据是不行的，但是可以绕开指针去修改数据。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token operator">&amp;</span>age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// ojbk</span></span>
<span class="line"><span class="token comment">// (*pt)++; NO!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>const</code> 与 <code>int</code> 结合为 <code>const int</code>，表示了指针的类型。指针认为它指向了一个不能被修改的常量。由于 <strong>指向的对象是否能被修改</strong> 的认知方在指针，就有了如下很有意思的性质：</p><ul><li>一个 <code>const</code> 指针可以被非 <code>const</code> 指针赋值 (自然也可以被 <code>const</code> 指针赋值)</li><li>一个非 <code>const</code> 指针不能被 <code>const</code> 指针赋值</li></ul><blockquote><p>通俗地说，<code>const</code> 指针有点像一个 <em>暖男</em>：</p><ul><li>毫不在意过去：无论是 <code>const</code> 指针还是非 <code>const</code> 指针，都可以赋值给它</li><li>固执的保护欲：只要它认定了指向的数据是 <code>const</code>，那么它是不会把它交 (赋值) 给非 <code>const</code> 指针的</li></ul></blockquote><p>基于这个性质，对于下面的函数声明，参数传递将会失败。因为一个 <code>const</code> 指针不能赋值给非 <code>const</code> 的形参：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> months<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int sum(const int arr[], int n);</span></span>
<span class="line"></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>months<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NOT ALLOWED</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常将指针作为函数参数传递时，使用 <code>const</code> 指针来保护参数数据不被修改。在函数声明中，应当尽量使用 <code>const</code>：</p><ul><li>避免无意间修改数据导致程序错误</li><li><code>const</code> 使得函数可以接收 <code>const</code> 和非 <code>const</code> 实参，否则只能接受非 <code>const</code></li></ul><h3 id="指针常量" tabindex="-1"><a class="header-anchor" href="#指针常量"><span>指针常量</span></a></h3><ul><li>数据类型为 <code>int *</code> 表示该指针指向的对象可以被修改 (非 <code>const</code>)</li><li><code>const</code> 与指针变量名结合，表示该变量的值不可修改</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> sloth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> finger <span class="token operator">=</span> <span class="token operator">&amp;</span>sloth<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述声明使得该指针只能指向 <code>sloth</code> 所在地址。</p><h2 id="const-member-function" tabindex="-1"><a class="header-anchor" href="#const-member-function"><span>Const Member Function</span></a></h2><p>保证声明的函数 <strong>不会修改</strong> 调用它的对象。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">const</span> Stock s<span class="token punctuation">;</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NOT ALLOWED if not const</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const i=s(p,[["render",o],["__file","C__ Const.html.vue"]]),d=JSON.parse('{"path":"/notes/C__/C__%20Const.html","title":"C++ - Const","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"Const with Pointers","slug":"const-with-pointers","link":"#const-with-pointers","children":[{"level":3,"title":"指向常量的指针","slug":"指向常量的指针","link":"#指向常量的指针","children":[]},{"level":3,"title":"指针常量","slug":"指针常量","link":"#指针常量","children":[]}]},{"level":2,"title":"Const Member Function","slug":"const-member-function","link":"#const-member-function","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ Const.md"}');export{i as comp,d as data};
