import{_ as n,c as a,a as t,o as p}from"./app-7eKjwDat.js";const e={};function o(c,s){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="c-stl-string" tabindex="-1"><a class="header-anchor" href="#c-stl-string"><span>C++ STL string</span></a></h1><p>Created by : Mr Dk.</p><p>2018 / 09 / 17 20:38</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="template" tabindex="-1"><a class="header-anchor" href="#template"><span>Template</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">typedef</span> basic_string<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> string<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment">// using std::string;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                 <span class="token comment">// Empty constructor (default)</span></span>
<span class="line"><span class="token function">string</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// Copy constructor</span></span>
<span class="line"><span class="token function">string</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t len <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Substring contructor</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>pos</code> : Beginning of character position</li><li><code>len</code> : Length that wants to be copied</li><li>(string is too short) | ( <code>len</code> == <code>string::npos</code> ) -&gt; copy until the end of string</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">string</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// From C-String</span></span>
<span class="line"><span class="token function">string</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// From C-String, copy first n characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">string</span> <span class="token punctuation">(</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Fill the string with n copies of character c</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Range constructor</span></span>
<span class="line"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span> <span class="token function">string</span><span class="token punctuation">(</span>InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="member-constants" tabindex="-1"><a class="header-anchor" href="#member-constants"><span>Member Constants</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">const</span> size_t npos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>The greatest possible value for an element of type <code>size_t</code></li><li>When used as the value for a <em>length</em> parameter: means <strong>&quot;Until the end of the string&quot;</strong></li><li>When used as a return value: indicating <strong>no matches</strong></li></ul><h2 id="iterators" tabindex="-1"><a class="header-anchor" href="#iterators"><span>Iterators</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string<span class="token double-colon punctuation">::</span>iterator begin_iter <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 指向字符串开头的迭代器</span></span>
<span class="line">string<span class="token double-colon punctuation">::</span>iterator end_iter <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 指向字符串结尾的下一个位置的迭代器</span></span>
<span class="line">string<span class="token double-colon punctuation">::</span>reverse_iterator r_begin_iter <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回指向字符串结尾的反向迭代器</span></span>
<span class="line">string<span class="token double-colon punctuation">::</span>reverse_iterator r_end_iter <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回指向字符串开头的前一个位置的反向迭代器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="operators-overload" tabindex="-1"><a class="header-anchor" href="#operators-overload"><span>Operators Overload</span></a></h2><p>Operator <code>=</code>: return a COPY of object.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// str = str1;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// str = &quot;Hello world&quot;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// str = &#39;.&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Operator <code>+</code>: return a newly constructed object after concatenation.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// str = str1 + str2;</span></span>
<span class="line">string <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// str = str1 + &quot;Hello&quot;;</span></span>
<span class="line">string <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// str = &quot;Hello&quot; + str2;</span></span>
<span class="line">string <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">char</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// str = str1 + &#39;.&#39;;</span></span>
<span class="line">string <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// str = &#39;.&#39; + str2;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Operator <code>+=</code>: return the same object after appending value.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// str += str1;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// str += &quot;Hello world&quot;;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// str += &#39;.&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Operator <code>[]</code>: return a reference to the character at position in the string. (<code>string::at()</code>)</p><ul><li>if (position == string length): <code>\\0</code></li><li><em>C++11</em><ul><li><code>front()</code>: access the first character</li><li><code>back()</code>: access the last character</li><li>If the string is empty: <em>undefined behavior</em></li></ul></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token function">at</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token function">at</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Operator <code>&gt;&gt;</code>: for input.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Operator <code>&lt;&lt;</code>: for output</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="capacity" tabindex="-1"><a class="header-anchor" href="#capacity"><span>Capacity</span></a></h2><p>Return the length of the string:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line">size_t <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Return the maximum length of the string can reach:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">size_t <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Return size of allocated storage:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">size_t <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Resizes the string to a length of n characters</p><ul><li>If <code>c</code> is specified, the new elements are initialized as copies of <code>c</code>; Otherwise, they are value-initialized characters (null characters)</li><li>If <code>n</code> is smaller than current string; the current value is shortened to its first <code>n</code> character</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Request a change in capacity：</p><ul><li>If <code>n</code> is greater than the current string capacity, the function causes the container to increase its capacity to <code>n</code> characters (or greater)</li><li>Exception <ul><li><strong>GUARANTEE</strong>: If an exception is thrown, there are <strong>NO</strong> changes in the string</li><li>If <code>n</code> &gt; <code>max_size</code>: <code>length_error</code> exception</li><li>If the function needs to allocate storage and fails: <code>bad_alloc</code> exception</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span>size_t n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Erases the contents of the string: empty string.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns whether the string is empty:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="modifications" tabindex="-1"><a class="header-anchor" href="#modifications"><span>Modifications</span></a></h2><p>Assigns a new value to the string, replacing its current contents. Exception:</p><ul><li><code>s</code> is not long enough | <code>range</code> is not valid: undefined behavior</li><li><code>subpos</code> &gt; string length: <code>out_of_range</code> exception</li><li>Resulting string length &gt; <code>max_size</code>: <code>length_error</code> exception</li><li>The function needs to allocate storage and fails: <code>bad_alloc</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t subpos<span class="token punctuation">,</span> size_t sublen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Substring</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">// C-String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// Buffer</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// Fill</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span> string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span>InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Range</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Appending additional characters at the end of its current value. Exception:</p><ul><li><code>s</code> is not long enough | <code>range</code> is not valid: undefined behavior</li><li><code>subpos</code> &gt; string length: <code>out_of_range</code> exception</li><li>Resulting string length &gt; <code>max_size</code>: <code>length_error</code> exception</li><li>The function needs to allocate storage and fails: <code>bad_alloc</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t subpos<span class="token punctuation">,</span> size_t sublen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Substring</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">// C-String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// Buffer</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// Fill</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span> string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span>InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Range</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Insert into the string right <strong>before</strong> the character indicated by <code>pos</code> or <code>p</code>. Exception:</p><ul><li><code>s</code> is not long enough | <code>range</code> is not valid: undefined behavior</li><li><code>subpos</code> &gt; str&#39;s length: <code>out_of_range</code> exception</li><li>Resulting string length &gt; <code>max_size</code>: <code>length_error</code> exception</li><li>The function needs to allocate storage and fails: <code>bad_alloc</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment">// String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t subpos<span class="token punctuation">,</span> size_t sublen <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Substring</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment">// C-String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// Buffer</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">// Fill</span></span>
<span class="line">iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator p<span class="token punctuation">,</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// Fill</span></span>
<span class="line">iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator p<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment">// Single Character</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span> iterator <span class="token function">insert</span><span class="token punctuation">(</span>iterator p<span class="token punctuation">,</span> InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Range</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Erase characters from string. Exception:</p><ul><li>If <code>pos</code> &gt; string length: <code>out_of_range</code> exception</li><li>If range is invalid: undefined behavior</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string<span class="token operator">&amp;</span> <span class="token function">erase</span><span class="token punctuation">(</span>size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size_t len <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Sequence</span></span>
<span class="line">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator p<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// Character</span></span>
<span class="line">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator first<span class="token punctuation">,</span> iterator last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Range</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Replace portion of string, specify a range in old string by:</p><ul><li><code>pos</code> &amp; <code>len</code></li><li>A pair of <em>iterators</em></li></ul><p>Or specify a new string to replace into the specific range.</p><p>Exception:</p><ul><li>If <code>s</code> is not long enough | range is not valid: undefined behavior</li><li><code>pos</code> or <code>subpos</code> is greater than string&#39;s length: <code>out_of_range</code> exception</li><li>If the resulting string length &gt; <code>max_size</code>: <code>length_error</code> exception</li><li>If the function needs to allocate storage and fails: <code>bad_alloc</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>const_iterator i1<span class="token punctuation">,</span> const_iterator i2<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Substring</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t subpos<span class="token punctuation">,</span> size_t sublen <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// C-String</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>const_iterator i1<span class="token punctuation">,</span> const_iterator i2<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Buffer</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>const_iterator i1<span class="token punctuation">,</span> const_iterator i2<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Fill</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>const_iterator i1<span class="token punctuation">,</span> const_iterator i2<span class="token punctuation">,</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Range</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span> string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>const_iterator i1<span class="token punctuation">,</span> const_iterator i2<span class="token punctuation">,</span> InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swap string values:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Member function -&gt; str1.swap(str2);</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Not a member function -&gt; swap(str1, str2);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Append character to the end of the string, increasing its length by <strong>one</strong>. Exception:</p><ul><li>Resulting string length &gt; <code>max_size</code>: <code>length_error</code> exception</li><li>The function needs to allocate storage and fails: <code>bad_alloc</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Delete the last character of the string, reducing its length by <strong>one</strong>. Exception:</p><ul><li>If the string is empty: undefined behavior</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="string-operations" tabindex="-1"><a class="header-anchor" href="#string-operations"><span>String Operations</span></a></h2><ul><li>Get <em>C</em> String with <code>\\0</code> in the end</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Copy sequence of characters <strong>from</strong> string (string -&gt; char[]), returning the number of characters copied to the array. Exception:</p><ul><li>If <code>s</code> is not long enough: undefined behavior</li><li>If <code>pos</code> &gt; string&#39;s length: <code>out_of_range</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">size_t <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Compare strings - <em>Compared string</em> &amp; <em>Comparing string</em>.</p><table><thead><tr><th>Value</th><th>Reason</th></tr></thead><tbody><tr><td>0</td><td>Compare equal.</td></tr><tr><td>&lt;0</td><td>Either the value of the first character that does not match is lower in the <em>compared string</em>, or all characters match but <em>compared string</em> is shorter.</td></tr><tr><td>&gt;0</td><td>Either the value of the first character that does not match is greater in the <em>compared string</em>, or all characters match but <em>compared string</em> is longer.</td></tr></tbody></table><p>Exception:</p><ul><li>If <code>s</code> is not long enough: undefined behavior</li><li>If <code>pos</code> or <code>subpos</code> &gt; string&#39;s length: <code>out_of_range</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// String</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Substrings</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t subpos<span class="token punctuation">,</span> size_t sublen<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// C-String</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Buffer</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Generating substring. Exception</p><ul><li>If <code>pos</code> &gt; string&#39;s length: <code>out_of_range</code> exception</li><li>If the function needs to allocate storage and fails: <code>bad_alloc</code> exception</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">string <span class="token function">substr</span><span class="token punctuation">(</span>size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size_t len <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Find content in string - <strong>matching the entire string</strong>. Exception:</p><ul><li>If <code>s</code> is not long enough: undefined behavior</li><li><code>pos</code> is used to specify the first character to start searching</li><li><code>n</code> is used to specify the length of <code>s</code></li><li>If there is no match, return <code>string::npos</code></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Find the first occurrence</span></span>
<span class="line">size_t <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>     <span class="token comment">// String</span></span>
<span class="line">size_t <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>                  <span class="token comment">// C-String</span></span>
<span class="line">size_t <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_type n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>         <span class="token comment">// Buffer</span></span>
<span class="line">size_t <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>                <span class="token comment">// Character</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find the last occurrence</span></span>
<span class="line">size_t <span class="token function">rfind</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span> <span class="token comment">// String</span></span>
<span class="line">size_t <span class="token function">rfind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>              <span class="token comment">// C-String</span></span>
<span class="line">size_t <span class="token function">rfind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>           <span class="token comment">// Buffer</span></span>
<span class="line">size_t <span class="token function">rfind</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>            <span class="token comment">// Character</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Find character in string - <strong>matching any of the characters specified in arguments</strong>. Exception:</p><ul><li>If <code>s</code> is not long enough: undefined behavior</li><li><code>pos</code> is used to specify the first character to start searching</li><li><code>n</code> is used to specify the length of <code>s</code></li><li>If there is no match, return <code>string::npos</code></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// The first character matched</span></span>
<span class="line">size_t <span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>  <span class="token comment">// String</span></span>
<span class="line">size_t <span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>               <span class="token comment">// C-String</span></span>
<span class="line">size_t <span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>         <span class="token comment">// Buffer</span></span>
<span class="line">size_t <span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>             <span class="token comment">// Character</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The first character absent</span></span>
<span class="line">size_t <span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span> <span class="token comment">// String</span></span>
<span class="line">size_t <span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>              <span class="token comment">// C-String</span></span>
<span class="line">size_t <span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>        <span class="token comment">// Buffer</span></span>
<span class="line">size_t <span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>            <span class="token comment">// Character</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The last character matched</span></span>
<span class="line">size_t <span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span> <span class="token comment">// String</span></span>
<span class="line">size_t <span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>              <span class="token comment">// C-String</span></span>
<span class="line">size_t <span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>           <span class="token comment">// Buffer</span></span>
<span class="line">size_t <span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>            <span class="token comment">// Character</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The last character absent</span></span>
<span class="line">size_t <span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span> <span class="token comment">// String</span></span>
<span class="line">size_t <span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>              <span class="token comment">// C-String</span></span>
<span class="line">size_t <span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>           <span class="token comment">// Buffer</span></span>
<span class="line">size_t <span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>            <span class="token comment">// Character</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>Input</span></a></h2><p>作为基本数据类型，可以直接使用 <code>cin</code> &amp; <code>&gt;&gt;</code>。另外，还可以使用 <code>getline()</code>：</p><ul><li>default delimitation character: <code>\\n</code></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">istream<span class="token operator">&amp;</span> <span class="token function">getline</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span>  is<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">istream<span class="token operator">&amp;</span> <span class="token function">getline</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;&amp;</span> is<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">istream<span class="token operator">&amp;</span> <span class="token function">getline</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span>  is<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">istream<span class="token operator">&amp;</span> <span class="token function">getline</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;&amp;</span> is<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conversion" tabindex="-1"><a class="header-anchor" href="#conversion"><span>Conversion</span></a></h2><p>将数据类型转换为字符串：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>to_string</span>
<span class="line"></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">float</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">string <span class="token function">to_string</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将字符串转换为数据类型：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stoi<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stol<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stoul<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stoll<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stoull<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stof<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stod<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stold<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">stoi</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">stoi</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token function">stol</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token function">stol</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">stoul</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">stoul</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">stoll</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">stoll</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">stoull</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">stoull</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> <span class="token function">stof</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> <span class="token function">stof</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> <span class="token function">stod</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> <span class="token function">stod</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">stold</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span>  str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">stold</span> <span class="token punctuation">(</span><span class="token keyword">const</span> wstring<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t<span class="token operator">*</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Useful &amp; important.</p>`,109)]))}const i=n(e,[["render",o],["__file","C__ STL string.html.vue"]]),r=JSON.parse('{"path":"/notes/C__/C__%20STL%20string.html","title":"C++ STL string","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Template","slug":"template","link":"#template","children":[]},{"level":2,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]},{"level":2,"title":"Member Constants","slug":"member-constants","link":"#member-constants","children":[]},{"level":2,"title":"Iterators","slug":"iterators","link":"#iterators","children":[]},{"level":2,"title":"Operators Overload","slug":"operators-overload","link":"#operators-overload","children":[]},{"level":2,"title":"Capacity","slug":"capacity","link":"#capacity","children":[]},{"level":2,"title":"Modifications","slug":"modifications","link":"#modifications","children":[]},{"level":2,"title":"String Operations","slug":"string-operations","link":"#string-operations","children":[]},{"level":2,"title":"Input","slug":"input","link":"#input","children":[]},{"level":2,"title":"Conversion","slug":"conversion","link":"#conversion","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ STL string.md"}');export{i as comp,r as data};
