import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-1-12-4-upstream-与上游服务器通信" tabindex="-1"><a class="header-anchor" href="#chapter-12-1-12-4-upstream-与上游服务器通信"><span>Chapter 12.1-12.4 - Upstream 与上游服务器通信</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 07 / 31 23:45</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-1-upstream-机制概述" tabindex="-1"><a class="header-anchor" href="#_12-1-upstream-机制概述"><span>12.1 Upstream 机制概述</span></a></h2><p>在 Nginx 中，Nginx 与客户端之间被称为 <em>下游</em>，Nginx 与其它服务器之间被称为 <em>上游</em>。Nginx 要为下游提供功能，很多时候需要从上游服务器获取素材。所谓的 upstream 机制就是使 HTTP 模块在处理客户端请求时可以访问上游的其它服务器。</p><p>Upstream 机制由 <code>ngx_http_upstream_module</code> 模块实现，它是一个 HTTP 模块。也就是说，如果使用 upstream 机制，客户端的请求必须基于 HTTP。由不同的模块支持 Nginx 访问不同的上游服务器。</p><p>对于每个 <code>ngx_http_request_t</code> 请求来说，只能访问一个上有服务器。但是一个客户端请求可以派生出很多子请求，每个子请求都能单独访问一个上游服务器。Upstream 机制不只提供了直接处理上游服务器响应的功能，还具有将上游服务器的响应 <strong>即时转发</strong> 给下游客户端的功能 - 因此每个 <code>ngx_http_request_t</code> 只能用来访问一个上游服务器。</p><p>在转发响应时，要解决两个问题：</p><ol><li>下游协议是 HTTP，上游可以是基于 TCP 的任何协议，需要做协议适配</li><li>上下游的网速差别较大时，针对不同场景的具体实现不同</li></ol><h3 id="_12-1-2-ngx-http-upstream-t-数据结构的意义" tabindex="-1"><a class="header-anchor" href="#_12-1-2-ngx-http-upstream-t-数据结构的意义"><span>12.1.2 <code>ngx_http_upstream_t</code> 数据结构的意义</span></a></h3><p>使用 upstream 机制，那么一个请求就必须维护一个从 Nginx 到上游服务器的连接。该连接由以下结构体维护。所以要为一个请求构造这个结构体。一个请求默认是不使用 upstream 机制的，那么这个结构体就不会被构造。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_http_upstream_s</span>    <span class="token class-name">ngx_http_upstream_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_http_upstream_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 读写事件的回调函数，每个阶段的读写回调都不同</span></span>
<span class="line">    ngx_http_upstream_handler_pt     read_event_handler<span class="token punctuation">;</span></span>
<span class="line">    ngx_http_upstream_handler_pt     write_event_handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 向上游服务器发起的连接</span></span>
<span class="line">    <span class="token class-name">ngx_peer_connection_t</span>            peer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 上游网速快时，使用 pipe 转发响应</span></span>
<span class="line">    <span class="token class-name">ngx_event_pipe_t</span>                <span class="token operator">*</span>pipe<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_chain_t</span>                     <span class="token operator">*</span>request_bufs<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_output_chain_ctx_t</span>           output<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_chain_writer_ctx_t</span>           writer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用 upstream 时的各种配置</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_conf_t</span>        <span class="token operator">*</span>conf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_srv_conf_t</span>    <span class="token operator">*</span>upstream<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>caches<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Upstream 直接转发响应时，保存解析好的响应头部</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_headers_in_t</span>   headers_in<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析主机域名</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_resolved_t</span>    <span class="token operator">*</span>resolved<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_buf_t</span>                        from_client<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 接收上游服务器响应头的缓冲区，以及长度</span></span>
<span class="line">    <span class="token class-name">ngx_buf_t</span>                        buffer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">off_t</span>                            length<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_chain_t</span>                     <span class="token operator">*</span>out_bufs<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_chain_t</span>                     <span class="token operator">*</span>busy_bufs<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_chain_t</span>                     <span class="token operator">*</span>free_bufs<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 处理 body 前的初始化函数</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>input_filter_init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 处理 body 的函数</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>input_filter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">ssize_t</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 前两个函数的参数</span></span>
<span class="line">    <span class="token keyword">void</span>                            <span class="token operator">*</span>input_filter_ctx<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>create_key<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token comment">// 构造 upstream 请求</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>create_request<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 如果通信失败，再次建立连接</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>reinit_request<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 解析上游服务器的响应 header</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>process_header<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span>                           <span class="token punctuation">(</span><span class="token operator">*</span>abort_request<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 结束请求</span></span>
<span class="line">    <span class="token keyword">void</span>                           <span class="token punctuation">(</span><span class="token operator">*</span>finalize_request<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span></span>
<span class="line">                                         <span class="token class-name">ngx_int_t</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 上游响应出现 location/refresh 头部表示重定向时被调用</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>rewrite_redirect<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span></span>
<span class="line">                                         <span class="token class-name">ngx_table_elt_t</span> <span class="token operator">*</span>h<span class="token punctuation">,</span> <span class="token class-name">size_t</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                      <span class="token punctuation">(</span><span class="token operator">*</span>rewrite_cookie<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span></span>
<span class="line">                                         <span class="token class-name">ngx_table_elt_t</span> <span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>                       start_time<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 上游响应的信息</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_state_t</span>       <span class="token operator">*</span>state<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 记录日志时会用到</span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>                        method<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>                        schema<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>                        uri<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_SSL <span class="token operator">||</span> NGX_COMPAT<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>                        ssl_name<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    ngx_http_cleanup_pt             <span class="token operator">*</span>cleanup<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">unsigned</span>                         store<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         cacheable<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         accel<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         ssl<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         cache_status<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">unsigned</span>                         buffering<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         keepalive<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         upgrade<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         error<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">unsigned</span>                         request_sent<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         request_body_sent<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         request_body_blocked<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         header_sent<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-1-3-ngx-http-upstream-conf-t-配置结构体" tabindex="-1"><a class="header-anchor" href="#_12-1-3-ngx-http-upstream-conf-t-配置结构体"><span>12.1.3 <code>ngx_http_upstream_conf_t</code> 配置结构体</span></a></h3><p>这个结构体制定了 upstream 的运行方式，必须在启动 upstream 机制前设置。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义上游服务器的配置，在 ngx_http_upstream_t 结构体没有实现 resolved 时生效</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_srv_conf_t</span>    <span class="token operator">*</span>upstream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 各种超时时间</span></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>                       connect_timeout<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>                       send_timeout<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>                       read_timeout<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>                       next_upstream_timeout<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">size_t</span>                           send_lowat<span class="token punctuation">;</span> <span class="token comment">// 发送缓冲区下限</span></span>
<span class="line">    <span class="token class-name">size_t</span>                           buffer_size<span class="token punctuation">;</span> <span class="token comment">// 接收响应头的缓冲区大小</span></span>
<span class="line">    <span class="token class-name">size_t</span>                           limit_rate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">size_t</span>                           busy_buffers_size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">size_t</span>                           max_temp_file_size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">size_t</span>                           temp_file_write_size<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">size_t</span>                           busy_buffers_size_conf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">size_t</span>                           max_temp_file_size_conf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">size_t</span>                           temp_file_write_size_conf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 以缓存响应的方式转发上游服务器 body 时所使用的内存大小</span></span>
<span class="line">    <span class="token class-name">ngx_bufs_t</span>                       bufs<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                       ignore_headers<span class="token punctuation">;</span> <span class="token comment">// Upstream 在转发时跳过对某些 header 的处理</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                       next_upstream<span class="token punctuation">;</span> <span class="token comment">// 错误码？</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                       store_access<span class="token punctuation">;</span> <span class="token comment">// 保存响应的临时文件的文件目录与权限</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                       next_upstream_tries<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       buffering<span class="token punctuation">;</span> <span class="token comment">// 决定转发响应方式的标志位</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       request_buffering<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       pass_request_headers<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       pass_request_body<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       ignore_client_abort<span class="token punctuation">;</span> <span class="token comment">// 不检查 Nginx 与下游的连接是否断开</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       intercept_errors<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       cyclic_temp_file<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       force_ranges<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_path_t</span>                      <span class="token operator">*</span>temp_path<span class="token punctuation">;</span> <span class="token comment">// 转发响应时存放临时文件的路径</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_hash_t</span>                       hide_headers_hash<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>hide_headers<span class="token punctuation">;</span> <span class="token comment">// 不希望转发给下游的 header</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>pass_headers<span class="token punctuation">;</span> <span class="token comment">// 希望转发给下游的 header (针对默认不会被转发给下游的 header)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_local_t</span>       <span class="token operator">*</span>local<span class="token punctuation">;</span> <span class="token comment">// 连接上游服务器时的本机地址</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       socket_keepalive<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_shm_zone_t</span>                  <span class="token operator">*</span>cache_zone<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_complex_value_t</span>        <span class="token operator">*</span>cache_value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                       cache_min_uses<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                       cache_use_stale<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                       cache_methods<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">off_t</span>                            cache_max_range_offset<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       cache_lock<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>                       cache_lock_timeout<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>                       cache_lock_age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       cache_revalidate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       cache_convert_head<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       cache_background_update<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>cache_valid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>cache_bypass<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>cache_purge<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>no_cache<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>store_lengths<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                     <span class="token operator">*</span>store_values<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token keyword">signed</span>                           cache<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">signed</span>                           store<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         intercept_404<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         change_buffering<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         pass_trailers<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span>                         preserve_output<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_SSL <span class="token operator">||</span> NGX_COMPAT<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_ssl_t</span>                       <span class="token operator">*</span>ssl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       ssl_session_reuse<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_http_complex_value_t</span>        <span class="token operator">*</span>ssl_name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       ssl_server_name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>                       ssl_verify<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>                        module<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">NGX_COMPAT_BEGIN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    NGX_COMPAT_END</span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_upstream_conf_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-2-启动-upstream" tabindex="-1"><a class="header-anchor" href="#_12-2-启动-upstream"><span>12.2 启动 upstream</span></a></h2><p>创建 <code>ngx_http_request_t</code> 结构体中的 <code>upstream</code> 结构体，并正确设置 <code>upstream-&gt;conf</code> 配置结构体。最后调用 <code>ngx_http_upstream_init()</code> 就可以启动 upstream 机制。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_http_upstream_init</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>     <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Nginx 与客户端的连接 (下游连接)</span></span>
<span class="line">    c <span class="token operator">=</span> r<span class="token operator">-&gt;</span>connection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;http init upstream, client timer: %d&quot;</span><span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>read<span class="token operator">-&gt;</span>timer_set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_V2<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_init_request</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将下游连接从定时器中移除</span></span>
<span class="line">    <span class="token comment">// 一旦启动 upstream，就不应该对客户端读操作带有超时处理</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>read<span class="token operator">-&gt;</span>timer_set<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_del_timer</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ngx_event_flags <span class="token operator">&amp;</span> NGX_USE_CLEAR_EVENT<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将连接的可写事件加入事件驱动模块</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_add_event</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">,</span> NGX_WRITE_EVENT<span class="token punctuation">,</span> NGX_CLEAR_EVENT<span class="token punctuation">)</span></span>
<span class="line">                <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_http_upstream_init_request</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化 upstream 请求</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来初始化 upstream 请求。主要是填充 <code>ngx_http_upstream_t</code> 结构体：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_http_upstream_init_request</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>                      <span class="token operator">*</span>host<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                      i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_resolver_ctx_t</span>             <span class="token operator">*</span>ctx<span class="token punctuation">,</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_cleanup_t</span>             <span class="token operator">*</span>cln<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_t</span>            <span class="token operator">*</span>u<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_core_loc_conf_t</span>       <span class="token operator">*</span>clcf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_srv_conf_t</span>   <span class="token operator">*</span>uscf<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>uscfp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_main_conf_t</span>  <span class="token operator">*</span>umcf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>aio<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    u <span class="token operator">=</span> r<span class="token operator">-&gt;</span>upstream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ngx_int_t</span>  rc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        rc <span class="token operator">=</span> <span class="token function">ngx_http_upstream_cache</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_BUSY<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            r<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_upstream_init_request<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        r<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_request_empty_handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            rc <span class="token operator">=</span> <span class="token function">ngx_http_upstream_cache_send</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_DONE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_HTTP_UPSTREAM_INVALID_HEADER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                rc <span class="token operator">=</span> NGX_DECLINED<span class="token punctuation">;</span></span>
<span class="line">                r<span class="token operator">-&gt;</span>cached <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">                u<span class="token operator">-&gt;</span>cache_status <span class="token operator">=</span> NGX_HTTP_CACHE_MISS<span class="token punctuation">;</span></span>
<span class="line">                u<span class="token operator">-&gt;</span>request_sent <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">!=</span> NGX_DECLINED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>store <span class="token operator">=</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>store<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token operator">-&gt;</span>store <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>r<span class="token operator">-&gt;</span>post_action <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>ignore_client_abort<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>read_event_handler <span class="token operator">=</span> ngx_http_upstream_rd_check_broken_connection<span class="token punctuation">;</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_upstream_wr_check_broken_connection<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>request_body<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>request_bufs <span class="token operator">=</span> r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>bufs<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化向上游服务器的请求</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span><span class="token function">create_request</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_upstream_set_local</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>local<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>socket_keepalive<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>so_keepalive <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    clcf <span class="token operator">=</span> <span class="token function">ngx_http_get_module_loc_conf</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ngx_http_core_module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>alignment <span class="token operator">=</span> clcf<span class="token operator">-&gt;</span>directio_alignment<span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>pool <span class="token operator">=</span> r<span class="token operator">-&gt;</span>pool<span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>bufs<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>bufs<span class="token punctuation">.</span>size <span class="token operator">=</span> clcf<span class="token operator">-&gt;</span>client_body_buffer_size<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>output_filter <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>output_filter <span class="token operator">=</span> ngx_chain_writer<span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>filter_ctx <span class="token operator">=</span> <span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>writer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>writer<span class="token punctuation">.</span>pool <span class="token operator">=</span> r<span class="token operator">-&gt;</span>pool<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>upstream_states <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        r<span class="token operator">-&gt;</span>upstream_states <span class="token operator">=</span> <span class="token function">ngx_array_create</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>pool<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                                            <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_upstream_state_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>upstream_states <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token function">ngx_array_push</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>upstream_states<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>state <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_memzero</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>state<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_upstream_state_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 向 request 指向的 cleanup 链表中添加成员</span></span>
<span class="line">    cln <span class="token operator">=</span> <span class="token function">ngx_http_cleanup_add</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cln <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置清理回调函数</span></span>
<span class="line">    cln<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> ngx_http_upstream_cleanup<span class="token punctuation">;</span></span>
<span class="line">    cln<span class="token operator">-&gt;</span>data <span class="token operator">=</span> r<span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>cleanup <span class="token operator">=</span> <span class="token operator">&amp;</span>cln<span class="token operator">-&gt;</span>handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>resolved <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        uscf <span class="token operator">=</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>upstream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_SSL<span class="token punctuation">)</span></span></span></span>
<span class="line">        u<span class="token operator">-&gt;</span>ssl_name <span class="token operator">=</span> u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">        host <span class="token operator">=</span> <span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        umcf <span class="token operator">=</span> <span class="token function">ngx_http_get_module_main_conf</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ngx_http_upstream_module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        uscfp <span class="token operator">=</span> umcf<span class="token operator">-&gt;</span>upstreams<span class="token punctuation">.</span>elts<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> umcf<span class="token operator">-&gt;</span>upstreams<span class="token punctuation">.</span>nelts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            uscf <span class="token operator">=</span> uscfp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>uscf<span class="token operator">-&gt;</span>host<span class="token punctuation">.</span>len <span class="token operator">==</span> host<span class="token operator">-&gt;</span>len</span>
<span class="line">                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uscf<span class="token operator">-&gt;</span>port <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>no_port<span class="token punctuation">)</span></span>
<span class="line">                     <span class="token operator">||</span> uscf<span class="token operator">-&gt;</span>port <span class="token operator">==</span> u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>port<span class="token punctuation">)</span></span>
<span class="line">                <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_strncasecmp</span><span class="token punctuation">(</span>uscf<span class="token operator">-&gt;</span>host<span class="token punctuation">.</span>data<span class="token punctuation">,</span> host<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> host<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">goto</span> found<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>sockaddr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>port <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line">                <span class="token operator">&amp;&amp;</span> u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>sockaddr<span class="token operator">-&gt;</span>sa_family <span class="token operator">!=</span> AF_UNIX<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                              <span class="token string">&quot;no port in upstream \\&quot;%V\\&quot;&quot;</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_upstream_create_round_robin_peer</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>resolved<span class="token punctuation">)</span></span>
<span class="line">                <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ngx_http_upstream_connect</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>port <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;no port in upstream \\&quot;%V\\&quot;&quot;</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        temp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token operator">*</span>host<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ctx <span class="token operator">=</span> <span class="token function">ngx_resolve_start</span><span class="token punctuation">(</span>clcf<span class="token operator">-&gt;</span>resolver<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> NGX_NO_RESOLVER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;no resolver defined to resolve %V&quot;</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_BAD_GATEWAY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ctx<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token operator">*</span>host<span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> ngx_http_upstream_resolve_handler<span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token operator">-&gt;</span>data <span class="token operator">=</span> r<span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> clcf<span class="token operator">-&gt;</span>resolver_timeout<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>ctx <span class="token operator">=</span> ctx<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_resolve_name</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            u<span class="token operator">-&gt;</span>resolved<span class="token operator">-&gt;</span>ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">found<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>uscf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;no upstream configuration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>upstream <span class="token operator">=</span> uscf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_SSL<span class="token punctuation">)</span></span></span></span>
<span class="line">    u<span class="token operator">-&gt;</span>ssl_name <span class="token operator">=</span> uscf<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>uscf<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> uscf<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>start_time <span class="token operator">=</span> ngx_current_msec<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>next_upstream_tries</span>
<span class="line">        <span class="token operator">&amp;&amp;</span> u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>tries <span class="token operator">&gt;</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>next_upstream_tries<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>tries <span class="token operator">=</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>next_upstream_tries<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 向上游服务器发起连接</span></span>
<span class="line">    <span class="token function">ngx_http_upstream_connect</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-3-与上游服务器建立连接" tabindex="-1"><a class="header-anchor" href="#_12-3-与上游服务器建立连接"><span>12.3 与上游服务器建立连接</span></a></h2><p>建立 TCP 需要三次握手，而三次握手的时间是不可控的。为保证 TCP 连接不阻塞进程，Nginx 使用非阻塞 socket 连接上游服务器。因此，在建立连接发起后，如果没有立刻返回成功，需要在事件驱动模块中监控这个 socket，直到出现 <strong>可写</strong> 事件时，才说明连接已经建立成功。所以需要设置一个写事件回调函数。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_http_upstream_connect</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token class-name">ngx_http_upstream_t</span> <span class="token operator">*</span>u<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>          rc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>  <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token operator">-&gt;</span>action <span class="token operator">=</span> <span class="token string">&quot;connecting to upstream&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>state <span class="token operator">&amp;&amp;</span> u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>response_time <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">ngx_msec_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>response_time <span class="token operator">=</span> ngx_current_msec <span class="token operator">-</span> u<span class="token operator">-&gt;</span>start_time<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token function">ngx_array_push</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>upstream_states<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>state <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_memzero</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>state<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_upstream_state_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>start_time <span class="token operator">=</span> ngx_current_msec<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>response_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_msec_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>connect_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_msec_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>header_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_msec_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 发起 TCP 连接</span></span>
<span class="line">    rc <span class="token operator">=</span> <span class="token function">ngx_event_connect_peer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;http upstream connect: %i&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>peer <span class="token operator">=</span> u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 连接暂未建立成功</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_BUSY<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;no live upstreams&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_NOLIVE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_DECLINED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* rc == NGX_OK || rc == NGX_AGAIN || rc == NGX_DONE */</span></span>
<span class="line"></span>
<span class="line">    c <span class="token operator">=</span> u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>connection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    c<span class="token operator">-&gt;</span>requests<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    c<span class="token operator">-&gt;</span>data <span class="token operator">=</span> r<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置连接的读写回调函数</span></span>
<span class="line">    c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> ngx_http_upstream_handler<span class="token punctuation">;</span></span>
<span class="line">    c<span class="token operator">-&gt;</span>read<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> ngx_http_upstream_handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 向上游服务器发送请求的回调函数</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_upstream_send_request_handler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 接收上游服务器响应的回调函数</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>read_event_handler <span class="token operator">=</span> ngx_http_upstream_process_header<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    c<span class="token operator">-&gt;</span>sendfile <span class="token operator">&amp;=</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>sendfile<span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>sendfile <span class="token operator">=</span> c<span class="token operator">-&gt;</span>sendfile<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>tcp_nopush <span class="token operator">==</span> NGX_TCP_NOPUSH_DISABLED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        c<span class="token operator">-&gt;</span>tcp_nopush <span class="token operator">=</span> NGX_TCP_NOPUSH_DISABLED<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>pool <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* we need separate pool here to be able to cache SSL connections */</span></span>
<span class="line"></span>
<span class="line">        c<span class="token operator">-&gt;</span>pool <span class="token operator">=</span> <span class="token function">ngx_create_pool</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>pool <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    c<span class="token operator">-&gt;</span>log <span class="token operator">=</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">;</span></span>
<span class="line">    c<span class="token operator">-&gt;</span>pool<span class="token operator">-&gt;</span>log <span class="token operator">=</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">;</span></span>
<span class="line">    c<span class="token operator">-&gt;</span>read<span class="token operator">-&gt;</span>log <span class="token operator">=</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">;</span></span>
<span class="line">    c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>log <span class="token operator">=</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* init or reinit the ngx_output_chain() and ngx_chain_writer() contexts */</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>writer<span class="token punctuation">.</span>out <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>writer<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>writer<span class="token punctuation">.</span>out<span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>writer<span class="token punctuation">.</span>connection <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>writer<span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>request_sent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_upstream_reinit</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>request_body</span>
<span class="line">        <span class="token operator">&amp;&amp;</span> r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>buf</span>
<span class="line">        <span class="token operator">&amp;&amp;</span> r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>temp_file</span>
<span class="line">        <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> r<span class="token operator">-&gt;</span>main<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">         * the r-&gt;request_body-&gt;buf can be reused for one request only,</span>
<span class="line">         * the subrequests should allocate their own temporary bufs</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>free <span class="token operator">=</span> <span class="token function">ngx_alloc_chain_link</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>free <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>free<span class="token operator">-&gt;</span>buf <span class="token operator">=</span> r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>buf<span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>free<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>allocated <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>pos <span class="token operator">=</span> r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>start<span class="token punctuation">;</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>last <span class="token operator">=</span> r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>start<span class="token punctuation">;</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>request_body<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>tag <span class="token operator">=</span> u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>tag<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>request_sent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>request_body_sent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>request_body_blocked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果连接还未建立，那么把连接的写事件添加到定时器中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_AGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_add_timer</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>connect_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_SSL<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>ssl <span class="token operator">&amp;&amp;</span> c<span class="token operator">-&gt;</span>ssl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_ssl_init_connection</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 连接建立成功，向上游服务器发送请求</span></span>
<span class="line">    <span class="token function">ngx_http_upstream_send_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>ngx_connection_t</code> 的读写回调函数 <code>ngx_http_upstream_handler()</code> 主要工作是调用 <code>ngx_http_upstream_t</code> 中的读写回调函数。与 HTTP 框架中的读写回调函数类似，优先调用写回调函数，再调用读回调函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_http_upstream_handler</span><span class="token punctuation">(</span><span class="token class-name">ngx_event_t</span> <span class="token operator">*</span>ev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>     <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_request_t</span>   <span class="token operator">*</span>r<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_t</span>  <span class="token operator">*</span>u<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    c <span class="token operator">=</span> ev<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span></span>
<span class="line">    r <span class="token operator">=</span> c<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    u <span class="token operator">=</span> r<span class="token operator">-&gt;</span>upstream<span class="token punctuation">;</span></span>
<span class="line">    c <span class="token operator">=</span> r<span class="token operator">-&gt;</span>connection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_http_set_log_request</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;http upstream request: \\&quot;%V?%V\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token operator">-&gt;</span>uri<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token operator">-&gt;</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token operator">-&gt;</span>delayed <span class="token operator">&amp;&amp;</span> ev<span class="token operator">-&gt;</span>timedout<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ev<span class="token operator">-&gt;</span>delayed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        ev<span class="token operator">-&gt;</span>timedout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Nginx 与上游服务器之间的 TCP 连接可写事件被触发，调用写回调函数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token operator">-&gt;</span>write<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span><span class="token function">write_event_handler</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 可读事件被触发，调用回调函数</span></span>
<span class="line">        u<span class="token operator">-&gt;</span><span class="token function">read_event_handler</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 处理 POST 请求</span></span>
<span class="line">    <span class="token function">ngx_http_run_posted_requests</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-4-发送请求到上游服务器" tabindex="-1"><a class="header-anchor" href="#_12-4-发送请求到上游服务器"><span>12.4 发送请求到上游服务器</span></a></h2><p><code>ngx_http_upstream_t</code> 的读写回调是怎么实现的呢？根据上面的代码，写事件回调是 <code>ngx_http_upstream_send_request_handler()</code>，负责向上游服务器发送请求。由于请求大小未知，这个回调函数可能会被事件驱动模块多次触发多次调用。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_http_upstream_send_request_handler</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_t</span> <span class="token operator">*</span>u<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>  <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取 Nginx 与上游服务器的连接结构体</span></span>
<span class="line">    c <span class="token operator">=</span> u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>connection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;http upstream send request handler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 连接超时，由错误处理策略决定如何处理</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>timedout<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_SSL<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>ssl <span class="token operator">&amp;&amp;</span> c<span class="token operator">-&gt;</span>ssl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_ssl_init_connection</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 此时说明上游服务器的响应需要直接转发给客户端</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>header_sent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>preserve_output<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 此时，上游响应 header 已经解析完毕，不应该继续向上游发送请求</span></span>
<span class="line">        <span class="token comment">// 将写事件回调设置为不做任何工作</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_upstream_dummy_handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将写事件添加到事件驱动模块中</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_handle_write_event</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 向上游服务器发送请求 (真正的发送请求)</span></span>
<span class="line">    <span class="token function">ngx_http_upstream_send_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数大多是在检测请求状态，真正发送请求的功能由 <code>ngx_http_upstream_send_request()</code> 完成：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_http_upstream_send_request</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token class-name">ngx_http_upstream_t</span> <span class="token operator">*</span>u<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span> do_write<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>          rc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>  <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    c <span class="token operator">=</span> u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>connection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;http upstream send request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 统计连接时间</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>connect_time <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">ngx_msec_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>connect_time <span class="token operator">=</span> ngx_current_msec <span class="token operator">-</span> u<span class="token operator">-&gt;</span>start_time<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 测试连接</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token operator">-&gt;</span>request_sent <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_http_upstream_test_connect</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    c<span class="token operator">-&gt;</span>log<span class="token operator">-&gt;</span>action <span class="token operator">=</span> <span class="token string">&quot;sending request to upstream&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 向上游服务器发送请求</span></span>
<span class="line">    rc <span class="token operator">=</span> <span class="token function">ngx_http_upstream_send_request_body</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> do_write<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 错误</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 特殊响应 (&gt;= 400 ?)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">&gt;=</span> NGX_HTTP_SPECIAL_RESPONSE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 还有请求尚未被发送</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_AGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将写事件添加到定时器中，防止超时</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>ready <span class="token operator">||</span> u<span class="token operator">-&gt;</span>request_body_blocked<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_add_timer</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>send_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>timer_set<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ?</span></span>
<span class="line">            <span class="token function">ngx_del_timer</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将写事件添加到事件驱动模块中</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_handle_write_event</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>send_lowat<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>ready <span class="token operator">&amp;&amp;</span> c<span class="token operator">-&gt;</span>tcp_nopush <span class="token operator">==</span> NGX_TCP_NOPUSH_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_tcp_push</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_CRIT<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_socket_errno<span class="token punctuation">,</span></span>
<span class="line">                              ngx_tcp_push_n <span class="token string">&quot; failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            c<span class="token operator">-&gt;</span>tcp_nopush <span class="token operator">=</span> NGX_TCP_NOPUSH_UNSET<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* rc == NGX_OK */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 请求发送完成，将写事件从定时器中移除</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token operator">-&gt;</span>timer_set<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_del_timer</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>tcp_nopush <span class="token operator">==</span> NGX_TCP_NOPUSH_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_tcp_push</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_CRIT<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_socket_errno<span class="token punctuation">,</span></span>
<span class="line">                          ngx_tcp_push_n <span class="token string">&quot; failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        c<span class="token operator">-&gt;</span>tcp_nopush <span class="token operator">=</span> NGX_TCP_NOPUSH_UNSET<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 防止写事件被再次触发，因此将写事件的回调函数修改为不做任何事</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>preserve_output<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_upstream_dummy_handler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 重新将写事件添加到事件驱动模块中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_handle_write_event</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>write<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 准备开始处理上游服务器的响应</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token operator">-&gt;</span>request_body_sent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>request_body_sent <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>header_sent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将读事件添加到定时器中，防止超时</span></span>
<span class="line">        <span class="token function">ngx_add_timer</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>read<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>read_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 如果已有响应可以读取，那么开始接收服务器的响应</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>read<span class="token operator">-&gt;</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_process_header</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 疑问：为什么没有把读事件添加到事件驱动模块中呢？</span></span>
<span class="line">        <span class="token comment">// 显然读事件的就绪是异步的，可能不会立刻完成</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>ngx_http_upstream_t</code> 的读事件回调函数 <code>ngx_http_upstream_process_header()</code> 负责接收上游服务器的响应。下一节重点讨论。</p>`,33)]))}const i=s(t,[["render",l],["__file","Chapter 12.1-12.4 - Upstream 与上游服务器通信.html.vue"]]),u=JSON.parse('{"path":"/understanding-nginx-notes/Part%203%20-%20%E6%B7%B1%E5%85%A5%20Nginx/Chapter%2012.1-12.4%20-%20Upstream%20%E4%B8%8E%E4%B8%8A%E6%B8%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E4%BF%A1.html","title":"Chapter 12.1-12.4 - Upstream 与上游服务器通信","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.1 Upstream 机制概述","slug":"_12-1-upstream-机制概述","link":"#_12-1-upstream-机制概述","children":[{"level":3,"title":"12.1.2 ngx_http_upstream_t 数据结构的意义","slug":"_12-1-2-ngx-http-upstream-t-数据结构的意义","link":"#_12-1-2-ngx-http-upstream-t-数据结构的意义","children":[]},{"level":3,"title":"12.1.3 ngx_http_upstream_conf_t 配置结构体","slug":"_12-1-3-ngx-http-upstream-conf-t-配置结构体","link":"#_12-1-3-ngx-http-upstream-conf-t-配置结构体","children":[]}]},{"level":2,"title":"12.2 启动 upstream","slug":"_12-2-启动-upstream","link":"#_12-2-启动-upstream","children":[]},{"level":2,"title":"12.3 与上游服务器建立连接","slug":"_12-3-与上游服务器建立连接","link":"#_12-3-与上游服务器建立连接","children":[]},{"level":2,"title":"12.4 发送请求到上游服务器","slug":"_12-4-发送请求到上游服务器","link":"#_12-4-发送请求到上游服务器","children":[]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 3 - 深入 Nginx/Chapter 12.1-12.4 - Upstream 与上游服务器通信.md"}');export{i as comp,u as data};
