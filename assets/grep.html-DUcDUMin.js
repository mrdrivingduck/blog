import{_ as n,c as a,a as e,o as l}from"./app-7eKjwDat.js";const i={};function p(t,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="grep" tabindex="-1"><a class="header-anchor" href="#grep"><span>grep</span></a></h1><p>Created by : Mr Dk.</p><p>2022 / 11 / 27 14:17</p><p>Hangzhou, Zhejiang, China</p><hr><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>Background</span></a></h2><p><code>grep</code> 用于打印文件中与给定条件匹配的行。</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">--help</span></span>
<span class="line">Usage: <span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. PATTERNS <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.</span>
<span class="line">Search <span class="token keyword">for</span> <span class="token for-or-select variable">PATTERNS</span> <span class="token keyword">in</span> each FILE.</span>
<span class="line">Example: <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;hello world&#39;</span> menu.h main.c</span>
<span class="line">PATTERNS can contain multiple patterns separated by newlines.</span>
<span class="line"></span>
<span class="line">Pattern selection and interpretation:</span>
<span class="line">  -E, --extended-regexp     PATTERNS are extended regular expressions</span>
<span class="line">  -F, --fixed-strings       PATTERNS are strings</span>
<span class="line">  -G, --basic-regexp        PATTERNS are basic regular expressions</span>
<span class="line">  -P, --perl-regexp         PATTERNS are Perl regular expressions</span>
<span class="line">  -e, <span class="token parameter variable">--regexp</span><span class="token operator">=</span>PATTERNS     use PATTERNS <span class="token keyword">for</span> matching</span>
<span class="line">  -f, <span class="token parameter variable">--file</span><span class="token operator">=</span>FILE           take PATTERNS from FILE</span>
<span class="line">  -i, --ignore-case         ignore <span class="token keyword">case</span> distinctions <span class="token keyword">in</span> patterns and data</span>
<span class="line">      --no-ignore-case      <span class="token keyword">do</span> not ignore <span class="token keyword">case</span> distinctions <span class="token punctuation">(</span>default<span class="token punctuation">)</span></span>
<span class="line">  -w, --word-regexp         match only whole words</span>
<span class="line">  -x, --line-regexp         match only whole lines</span>
<span class="line">  -z, --null-data           a data line ends <span class="token keyword">in</span> <span class="token number">0</span> byte, not newline</span>
<span class="line"></span>
<span class="line">Miscellaneous:</span>
<span class="line">  -s, --no-messages         suppress error messages</span>
<span class="line">  -v, --invert-match        <span class="token keyword">select</span> non-matching lines</span>
<span class="line">  -V, <span class="token parameter variable">--version</span>             display version information and <span class="token builtin class-name">exit</span></span>
<span class="line">      <span class="token parameter variable">--help</span>                display this <span class="token builtin class-name">help</span> text and <span class="token builtin class-name">exit</span></span>
<span class="line"></span>
<span class="line">Output control:</span>
<span class="line">  -m, --max-count<span class="token operator">=</span>NUM       stop after NUM selected lines</span>
<span class="line">  -b, --byte-offset         print the byte offset with output lines</span>
<span class="line">  -n, --line-number         print line number with output lines</span>
<span class="line">      --line-buffered       flush output on every line</span>
<span class="line">  -H, --with-filename       print <span class="token function">file</span> name with output lines</span>
<span class="line">  -h, --no-filename         suppress the <span class="token function">file</span> name prefix on output</span>
<span class="line">      <span class="token parameter variable">--label</span><span class="token operator">=</span>LABEL         use LABEL as the standard input <span class="token function">file</span> name prefix</span>
<span class="line">  -o, --only-matching       show only nonempty parts of lines that match</span>
<span class="line">  -q, --quiet, <span class="token parameter variable">--silent</span>     suppress all normal output</span>
<span class="line">      --binary-files<span class="token operator">=</span>TYPE   assume that binary files are TYPE<span class="token punctuation">;</span></span>
<span class="line">                            TYPE is <span class="token string">&#39;binary&#39;</span>, <span class="token string">&#39;text&#39;</span>, or <span class="token string">&#39;without-match&#39;</span></span>
<span class="line">  -a, <span class="token parameter variable">--text</span>                equivalent to --binary-files<span class="token operator">=</span>text</span>
<span class="line">  <span class="token parameter variable">-I</span>                        equivalent to --binary-files<span class="token operator">=</span>without-match</span>
<span class="line">  -d, <span class="token parameter variable">--directories</span><span class="token operator">=</span>ACTION  how to handle directories<span class="token punctuation">;</span></span>
<span class="line">                            ACTION is <span class="token string">&#39;read&#39;</span>, <span class="token string">&#39;recurse&#39;</span>, or <span class="token string">&#39;skip&#39;</span></span>
<span class="line">  -D, <span class="token parameter variable">--devices</span><span class="token operator">=</span>ACTION      how to handle devices, FIFOs and sockets<span class="token punctuation">;</span></span>
<span class="line">                            ACTION is <span class="token string">&#39;read&#39;</span> or <span class="token string">&#39;skip&#39;</span></span>
<span class="line">  -r, <span class="token parameter variable">--recursive</span>           like <span class="token parameter variable">--directories</span><span class="token operator">=</span>recurse</span>
<span class="line">  -R, --dereference-recursive  likewise, but follow all symlinks</span>
<span class="line">      <span class="token parameter variable">--include</span><span class="token operator">=</span>GLOB        search only files that match GLOB <span class="token punctuation">(</span>a <span class="token function">file</span> pattern<span class="token punctuation">)</span></span>
<span class="line">      <span class="token parameter variable">--exclude</span><span class="token operator">=</span>GLOB        skip files that match GLOB</span>
<span class="line">      --exclude-from<span class="token operator">=</span>FILE   skip files that match any <span class="token function">file</span> pattern from FILE</span>
<span class="line">      --exclude-dir<span class="token operator">=</span>GLOB    skip directories that match GLOB</span>
<span class="line">  -L, --files-without-match  print only names of FILEs with no selected lines</span>
<span class="line">  -l, --files-with-matches  print only names of FILEs with selected lines</span>
<span class="line">  -c, <span class="token parameter variable">--count</span>               print only a count of selected lines per FILE</span>
<span class="line">  -T, --initial-tab         <span class="token function">make</span> tabs line up <span class="token punctuation">(</span>if needed<span class="token punctuation">)</span></span>
<span class="line">  -Z, <span class="token parameter variable">--null</span>                print <span class="token number">0</span> byte after FILE name</span>
<span class="line"></span>
<span class="line">Context control:</span>
<span class="line">  -B, --before-context<span class="token operator">=</span>NUM  print NUM lines of leading context</span>
<span class="line">  -A, --after-context<span class="token operator">=</span>NUM   print NUM lines of trailing context</span>
<span class="line">  -C, <span class="token parameter variable">--context</span><span class="token operator">=</span>NUM         print NUM lines of output context</span>
<span class="line">  <span class="token parameter variable">-NUM</span>                      same as <span class="token parameter variable">--context</span><span class="token operator">=</span>NUM</span>
<span class="line">      --color<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>,</span>
<span class="line">      --colour<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>       use markers to highlight the matching strings<span class="token punctuation">;</span></span>
<span class="line">                            WHEN is <span class="token string">&#39;always&#39;</span>, <span class="token string">&#39;never&#39;</span>, or <span class="token string">&#39;auto&#39;</span></span>
<span class="line">  -U, <span class="token parameter variable">--binary</span>              <span class="token keyword">do</span> not strip CR characters at EOL <span class="token punctuation">(</span>MSDOS/Windows<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">When FILE is <span class="token string">&#39;-&#39;</span>, <span class="token builtin class-name">read</span> standard input.  With no FILE, <span class="token builtin class-name">read</span> <span class="token string">&#39;.&#39;</span> <span class="token keyword">if</span></span>
<span class="line">recursive, <span class="token string">&#39;-&#39;</span> otherwise.  With fewer than two FILEs, assume -h.</span>
<span class="line">Exit status is <span class="token number">0</span> <span class="token keyword">if</span> any line <span class="token punctuation">(</span>or <span class="token function">file</span> <span class="token keyword">if</span> -L<span class="token punctuation">)</span> is selected, <span class="token number">1</span> otherwise<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> any error occurs and <span class="token parameter variable">-q</span> is not given, the <span class="token builtin class-name">exit</span> status is <span class="token number">2</span>.</span>
<span class="line"></span>
<span class="line">Report bugs to: bug-grep@gnu.org</span>
<span class="line">GNU <span class="token function">grep</span> home page: <span class="token operator">&lt;</span>http://www.gnu.org/software/grep/<span class="token operator">&gt;</span></span>
<span class="line">General <span class="token builtin class-name">help</span> using GNU software: <span class="token operator">&lt;</span>https://www.gnu.org/gethelp/<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">cat</span> example.txt</span>
<span class="line">aaa bb cccc</span>
<span class="line"><span class="token function">dd</span> e fffff</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output"><span>Output</span></a></h3><p>以下选项影响输出内容。</p><p><code>-v</code> 打印 <strong>不匹配</strong> 的内容。</p><p><code>-c</code> 参数打印匹配的行数，而不是匹配的行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-c</span> bb example.txt</span>
<span class="line"><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-l</code> / <code>-L</code> 打印匹配或不匹配条件的文件名：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-l</span> bb example.txt</span>
<span class="line">example.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-o</code> 只打印匹配的模式串，而不是一整行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-o</span> bb example.txt</span>
<span class="line">bb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-n</code> 额外打印匹配上的文件行号：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-n</span> bb example.txt</span>
<span class="line"><span class="token number">1</span>:aaa bb cccc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-A</code> / <code>-B</code> / <code>-C</code> 打印匹配位置的前 / 后 / 前后 N 行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-A1</span> bb example.txt</span>
<span class="line">aaa bb cccc</span>
<span class="line"><span class="token function">dd</span> e fffff</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="matching" tabindex="-1"><a class="header-anchor" href="#matching"><span>Matching</span></a></h3><p><code>-R</code> 参数递归匹配目录下的所有文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-R</span> <span class="token parameter variable">-l</span> bb ./</span>
<span class="line">./.oh-my-zsh/tools/upgrade.sh</span>
<span class="line">./.oh-my-zsh/tools/changelog.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-i</code> 参数在匹配时忽视大小写：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-i</span> BB example.txt</span>
<span class="line">aaa bb cccc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-w</code> / <code>-x</code> 只匹配整个词或整行，而不是匹配子串：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-w</span> b example.txt</span>
<span class="line"></span>
<span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-w</span> bb example.txt</span>
<span class="line">aaa bb cccc</span>
<span class="line"></span>
<span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-x</span> <span class="token string">&#39;bb&#39;</span> example.txt</span>
<span class="line"></span>
<span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-x</span> <span class="token string">&#39;aaa bb cccc&#39;</span> example.txt</span>
<span class="line">aaa bb cccc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>grep</code> 实际上可以使用正则表达式进行匹配：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token string">&#39;^aaa&#39;</span> example.txt</span>
<span class="line">aaa bb cccc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-e</code> 参数指定多个正则表达式：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;^aaa&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;f$&#39;</span>  example.txt</span>
<span class="line">aaa bb cccc</span>
<span class="line"><span class="token function">dd</span> e fffff</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接把正则表达式写到一个文件里，然后通过 <code>-f</code> 参数引用：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">grep</span> <span class="token parameter variable">-f</span> pattern.txt  example.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://www.geeksforgeeks.org/grep-command-in-unixlinux/" target="_blank" rel="noopener noreferrer">grep command in Unix/Linux</a></p><p><a href="https://man7.org/linux/man-pages/man1/grep.1.html" target="_blank" rel="noopener noreferrer">grep(1) — Linux manual page</a></p>`,40)]))}const r=n(i,[["render",p],["__file","grep.html.vue"]]),o=JSON.parse('{"path":"/notes/Linux/grep.html","title":"grep","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Background","slug":"background","link":"#background","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]},{"level":3,"title":"Output","slug":"output","link":"#output","children":[]},{"level":3,"title":"Matching","slug":"matching","link":"#matching","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Linux/grep.md"}');export{r as comp,o as data};
