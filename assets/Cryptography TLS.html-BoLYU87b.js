import{_ as l,c as i,a as r,o as n}from"./app-7eKjwDat.js";const o={};function t(s,e){return n(),i("div",null,e[0]||(e[0]=[r('<h1 id="cryptography-tls" tabindex="-1"><a class="header-anchor" href="#cryptography-tls"><span>Cryptography - TLS</span></a></h1><p>Created by : Mr Dk.</p><p>2018 / 11 / 05 13:08</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="precondition" tabindex="-1"><a class="header-anchor" href="#precondition"><span>Precondition</span></a></h2><ul><li>Asymmetric / Symmetric encryption algorithm</li><li>Digital signature</li><li>Digital Digest (Finger Print)</li></ul><h2 id="an-evolution-of-a-communication" tabindex="-1"><a class="header-anchor" href="#an-evolution-of-a-communication"><span>An evolution of a communication</span></a></h2><h3 id="round-1" tabindex="-1"><a class="header-anchor" href="#round-1"><span>Round 1</span></a></h3><ol><li>client → server : Hello.</li><li>server → client : Hello, I&#39;m server.</li><li>client → server : &quot;......&quot;</li></ol><p>存在的问题有：</p><ul><li>消息以明文的方式传输</li><li>黑客可以冒充服务器发出 &quot;Hello, I&#39;m server.&quot;，诱导客户端与自己通信，从而取得客户端的隐私信息</li></ul><p>解决思路：引入非对称加密机制</p><ul><li>由于只有服务器持有自己的 <strong>私钥</strong></li><li>那么客户端只要用服务器的 <strong>公钥</strong> 解密，那么就可以保证通信对方是服务器</li></ul><h3 id="round-2" tabindex="-1"><a class="header-anchor" href="#round-2"><span>Round 2</span></a></h3><ol><li>client → server : Hello.</li><li>server → client : Hello, I&#39;m server. My <strong>public key = xxx</strong>.</li><li>client → server : Prove me u r server.</li><li>server → client : Hello, I&#39;m server. { Hello, I&#39;m server. }[ <em>RSA</em> 私钥加密 ] - <code>{}</code> 中表示密文，<code>[]</code> 中表示加密方式</li><li>client → server : { username = xxx, password = ***, money = ? }[ *RSA* 公钥加密 ]</li><li>server → client : { money = $$$ }[ <em>RSA</em> 私钥加密 ]</li></ol><p>黑客由于没有服务器的 <strong>私钥</strong> ，因此无法冒充服务器。</p><p>存在的问题有：由于服务器的 <strong>公钥</strong> 是公开的，因此从服务器到客户端的通信是无法保密的，只要有服务器的 <strong>公钥</strong> 就可以解密内容。服务器也不可能用公钥进行加密，因为客户端没有私钥。</p><p>解决思路：引入对称加密机制，在可靠的单向通信中商定一个对称加密算法及其密钥。</p><h3 id="round-3" tabindex="-1"><a class="header-anchor" href="#round-3"><span>Round 3</span></a></h3><ol><li>client → server : Hello.</li><li>server → client : Hello, I&#39;m server. My <strong>public key = xxx</strong>.</li><li>client → server : Prove me u r server.</li><li>server → client : Hello, I&#39;m server. { Hello, I&#39;m server. }[ <em>RSA</em> 私钥加密 ]</li></ol><p><strong>client generate a secret key with a symmetric encryption algorithm</strong></p><ol start="5"><li>client → server : { Communicate with symmetric encryption. <strong>Algorithm = xxx, key = xxx</strong> }[ <em>RSA</em> 公钥加密 ]</li><li>server → client : { Roger. }[ 对称加密算法加密 ]</li><li>client → server : { username = xxx, password = ***, money = ? }[ 对称加密算法加密 ]</li><li>server → client : { money = $$$ }[ 对称加密算法加密 ]</li></ol><p>由于对称加密算法和密钥由公钥加密，由于黑客没有私钥，因此无法破解。保证只有服务器知道用于此次会话中对称加密算法的密钥。通过 <strong>非对称加密算法</strong> (如 <em>RSA</em> ) 的掩护，服务器和客户端安全地商量了一个 <strong>对称加密算法</strong> 及其 <strong>密钥</strong>，保证了之后通信过程的安全。</p><p>存在问题：如何获取公钥，并判断公钥一定属于服务器？</p><ul><li>将公钥放在互联网某个固定地址，客户端可以实现下载：不安全，该地址可以被伪造</li><li>每次开始通信前，服务器将公钥发送给客户端：不安全，任何人都可以产生密钥对，黑客只需要产生一对密钥，然后向客户端发送公钥即可冒充服务器</li></ul><p>问题根源：<strong>无法确认公钥来源是否可靠</strong>。解决思路：引入 <strong>数字证书</strong>，其中包含内容：</p><ul><li>证书发布机构</li><li>证书有效期</li><li>公钥</li><li>证书所有者</li><li>签名及使用算法</li><li>指纹及使用算法 (摘要)</li></ul><p>假设前提：数字证书可保证数字证书中的 <strong>公钥</strong> 确实是证书所有者的。</p><h3 id="完整过程" tabindex="-1"><a class="header-anchor" href="#完整过程"><span>完整过程</span></a></h3><ul><li>客户端向服务器发送一个通信请求 (包含 TLS 版本、可用的加密算法)</li><li>服务器向客户端发送自己的数字证书，其中包含服务器 <strong>公钥</strong></li><li>客户端生成随机数用于生成对称加密算法密钥，用 <strong>公钥</strong> 加密后发送给服务器，服务器用随机数生成相同密钥</li><li>服务器与客户端使用对称加密算法通信</li></ul><h2 id="components-of-certificate" tabindex="-1"><a class="header-anchor" href="#components-of-certificate"><span>Components of Certificate</span></a></h2><ul><li>Issuer (证书发布机构)：证书的创建者，不是使用者 - CA 机构 (Certificate Authority)</li><li>Valid from &amp; Valid to (证书有效期)：过期作废</li><li>Public key (公钥)</li><li>Subject (证书所有者)：这个证书是颁布给谁的 - 某企业、某机构、某网址</li><li>Signature algorithm (数字签名算法)：利用证书里的公钥，使用该算法对指纹进行解密</li><li>Thumbprint &amp; Thumbprint algorithm (指纹及指纹算法)：指纹被签名算法和 CA 机构私钥加密后，与证书放在一起，保证证书的 <strong>完整性</strong> 与 <strong>非篡改性</strong></li></ul><h2 id="procedure" tabindex="-1"><a class="header-anchor" href="#procedure"><span>Procedure</span></a></h2><p>CA 机构除了向别人发布证书外，也有自己的证书，用于解密其余证书的指纹。Microsoft© 等操作系统提供商会根据权威安全机构的评估选取一些信誉很好的 CA 机构，将这些 CA 机构的证书默认安装在操作系统内。因此证书的内容如下：</p><ul><li>Issuer</li><li>Subject</li><li>Valid from</li><li>Valid to</li><li>Public key</li><li>...</li><li>{ 证书指纹及指纹算法(摘要 + 摘要算法) }[ <em>CA</em> 机构私钥加密 ] - 实际上是一个 <strong>数字签名</strong></li></ul><p>客户端得到证书后：</p><ul><li>在操作系统中寻找对应 Issuer 的 CA 机构公钥</li><li>用 CA 机构的 <strong>公钥</strong> 解密证书的数字签名，得到证书指纹和指纹算法</li><li>使用指纹算法对证书进行计算，将得到的结果与解密的证书指纹进行对比</li><li>若指纹相同，则证书没有被篡改</li><li>那么证书中的 <strong>Public key</strong> 一定属于 <strong>Subject</strong> 中的公司，从而保证了公钥的来源是安全的</li></ul><p>接下来，客户端使用证书中的公钥就可以去对应公司的服务器商定会话的对称加密算法和密钥了。</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>整套数字证书机制如何保证安全性？</p><ul><li>数字证书包括：证书本身 + 数字签名</li><li>数字签名由 CA 机构私钥加密，由操作系统提供的 CA 机构公钥解密，可保证证书的来源与安全性</li><li>证书中的公钥保证从 <strong>客户端</strong> 到 <strong>服务器</strong> 的单向通讯可靠</li><li>客户端可在单向通讯中与服务器商定用于对话的对称加密算法及其密钥</li><li>客户端与服务器商定的对称加密算法及其密钥保证 <strong>客户端</strong> 与 <strong>服务器</strong> 的对话可靠</li></ul><hr>',44)]))}const c=l(o,[["render",t],["__file","Cryptography TLS.html.vue"]]),p=JSON.parse('{"path":"/notes/Cryptography/Cryptography%20TLS.html","title":"Cryptography - TLS","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Precondition","slug":"precondition","link":"#precondition","children":[]},{"level":2,"title":"An evolution of a communication","slug":"an-evolution-of-a-communication","link":"#an-evolution-of-a-communication","children":[{"level":3,"title":"Round 1","slug":"round-1","link":"#round-1","children":[]},{"level":3,"title":"Round 2","slug":"round-2","link":"#round-2","children":[]},{"level":3,"title":"Round 3","slug":"round-3","link":"#round-3","children":[]},{"level":3,"title":"完整过程","slug":"完整过程","link":"#完整过程","children":[]}]},{"level":2,"title":"Components of Certificate","slug":"components-of-certificate","link":"#components-of-certificate","children":[]},{"level":2,"title":"Procedure","slug":"procedure","link":"#procedure","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"notes/Cryptography/Cryptography TLS.md"}');export{c as comp,p as data};
