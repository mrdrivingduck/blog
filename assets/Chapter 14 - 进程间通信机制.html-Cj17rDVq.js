import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-14-进程间通信机制" tabindex="-1"><a class="header-anchor" href="#chapter-14-进程间通信机制"><span>Chapter 14 - 进程间通信机制</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 08 / 06 22:31</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_14-1-概述" tabindex="-1"><a class="header-anchor" href="#_14-1-概述"><span>14.1 概述</span></a></h2><p>Nginx 框架使用了三种 <strong>传递消息</strong> 的方式：</p><ul><li>共享内存</li><li>套接字</li><li>信号</li></ul><p>在多个进程访问共享资源时，还需要通过 <strong>进程同步</strong> 使各进程安全地访问资源：</p><ul><li>原子操作</li><li>信号量</li><li>文件锁</li></ul><p>由于 Nginx 地每个 worker 进程都会同时处理千万个请求，所以处理任意一个请求时，都不应该阻塞当前进程。所以应当尽可能避免 worker 进程进入睡眠状态。</p><hr><h2 id="_14-2-共享内存" tabindex="-1"><a class="header-anchor" href="#_14-2-共享内存"><span>14.2 共享内存</span></a></h2><p>当多个进程使用同一块共享内存时，在任何一个进程修改了共享内存中的内容后，其它进程通过访问这段共享内存，能够立刻得到修改后的内容。</p><p>Nginx 定义了结构体 <code>ngx_shm_t</code> 结构体描述一块共享内存：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    u_char      <span class="token operator">*</span>addr<span class="token punctuation">;</span> <span class="token comment">// 指向共享内存的起始地址</span></span>
<span class="line">    <span class="token class-name">size_t</span>       size<span class="token punctuation">;</span> <span class="token comment">// 共享内存的长度</span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>    name<span class="token punctuation">;</span> <span class="token comment">// 这块共享内存的名称</span></span>
<span class="line">    <span class="token class-name">ngx_log_t</span>   <span class="token operator">*</span>log<span class="token punctuation">;</span> <span class="token comment">// 记录日志的对象</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>   exists<span class="token punctuation">;</span>   <span class="token comment">/* unsigned  exists:1;  */</span> <span class="token comment">// 这块内存是否已经被分配过</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_shm_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作这个结构体的行为有两个：分配与释放。</p><p>Linux 中提供 <code>mmap</code> 系统调用，可以将磁盘文件映射到内存中。用户可以直接操作内存，Linux 内核负责将内存同步到磁盘文件中。而 Nginx 中并没有用到映射文件的功能，仅使用分配内存的功能：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_shm_alloc</span><span class="token punctuation">(</span><span class="token class-name">ngx_shm_t</span> <span class="token operator">*</span>shm<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 开辟一块 shm-&gt;size 大小的可读写共享内存</span></span>
<span class="line">    <span class="token comment">// 内存首地址将会存放在 shm-&gt;addr 中</span></span>
<span class="line">    shm<span class="token operator">-&gt;</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> shm<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span></span>
<span class="line">                                PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span></span>
<span class="line">                                MAP_ANON<span class="token operator">|</span>MAP_SHARED<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 分配失败</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>shm<span class="token operator">-&gt;</span>addr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> shm<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;mmap(MAP_ANON|MAP_SHARED, %uz) failed&quot;</span><span class="token punctuation">,</span> shm<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而当释放内存时，需要使用与 <code>mmap</code> 相对应的 <code>munmap</code> 系统调用：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_shm_free</span><span class="token punctuation">(</span><span class="token class-name">ngx_shm_t</span> <span class="token operator">*</span>shm<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">munmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> shm<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> shm<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> shm<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;munmap(%p, %uz) failed&quot;</span><span class="token punctuation">,</span> shm<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> shm<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出于 Nginx 的跨平台设计，共享内存有三种实现：</p><ul><li>不映射文件，使用 <code>mmap</code> 分配共享内存</li><li>以 <code>/dev/zero</code> 文件使用 <code>mmap</code> 分配共享内存</li><li>使用 <code>shmget</code> 分配共享内存</li></ul><p>Nginx 中，各进程间共享数据的主要方式就是使用共享内存。一般由 master 进程创建共享内存，在 master 进程 fork 出 worker 子进程后，所有进程就开始使用这块共享内存了。作为一个 Web 服务器，Nginx 需要统计整个服务器中 HTTP 连接状况的总体功能 (各 worker 子进程的连接状况总和)。Nginx 定义了一些原子变量，用于统计连接状况：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_atomic_t</span>   ngx_stat_accepted0<span class="token punctuation">;</span> <span class="token comment">// 已经成功建立过的 TCP 连接数</span></span>
<span class="line"><span class="token class-name">ngx_atomic_t</span>         <span class="token operator">*</span>ngx_stat_accepted <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_stat_accepted0<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_atomic_t</span>   ngx_stat_handled0<span class="token punctuation">;</span> <span class="token comment">// 已经被 handle 的连接数</span></span>
<span class="line"><span class="token class-name">ngx_atomic_t</span>         <span class="token operator">*</span>ngx_stat_handled <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_stat_handled0<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_atomic_t</span>   ngx_stat_requests0<span class="token punctuation">;</span> <span class="token comment">// 已经被 HTTP 模块处理过的连接数</span></span>
<span class="line"><span class="token class-name">ngx_atomic_t</span>         <span class="token operator">*</span>ngx_stat_requests <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_stat_requests0<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_atomic_t</span>   ngx_stat_active0<span class="token punctuation">;</span> <span class="token comment">// 活跃连接数</span></span>
<span class="line"><span class="token class-name">ngx_atomic_t</span>         <span class="token operator">*</span>ngx_stat_active <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_stat_active0<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_atomic_t</span>   ngx_stat_reading0<span class="token punctuation">;</span> <span class="token comment">// 正在接收 TCP 流的连接数</span></span>
<span class="line"><span class="token class-name">ngx_atomic_t</span>         <span class="token operator">*</span>ngx_stat_reading <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_stat_reading0<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_atomic_t</span>   ngx_stat_writing0<span class="token punctuation">;</span> <span class="token comment">// 正在发送 TCP 流的连接数</span></span>
<span class="line"><span class="token class-name">ngx_atomic_t</span>         <span class="token operator">*</span>ngx_stat_writing <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_stat_writing0<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_atomic_t</span>   ngx_stat_waiting0<span class="token punctuation">;</span> <span class="token comment">// ?</span></span>
<span class="line"><span class="token class-name">ngx_atomic_t</span>         <span class="token operator">*</span>ngx_stat_waiting <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_stat_waiting0<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Nginx 中，显然需要根据这些变量所占的内存，创建一块能包含这些变量的共享内存。在事件模块的初始化过程中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_event_module_init</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span>              <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>cf<span class="token punctuation">;</span></span>
<span class="line">    u_char              <span class="token operator">*</span>shared<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">size_t</span>               size<span class="token punctuation">,</span> cl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_shm_t</span>            shm<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_time_t</span>          <span class="token operator">*</span>tp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_core_conf_t</span>     <span class="token operator">*</span>ccf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_event_conf_t</span>    <span class="token operator">*</span>ecf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cf <span class="token operator">=</span> <span class="token function">ngx_get_conf</span><span class="token punctuation">(</span>cycle<span class="token operator">-&gt;</span>conf_ctx<span class="token punctuation">,</span> ngx_events_module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ecf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>cf<span class="token punctuation">)</span><span class="token punctuation">[</span>ngx_event_core_module<span class="token punctuation">.</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ngx_test_config <span class="token operator">&amp;&amp;</span> ngx_process <span class="token operator">&lt;=</span> NGX_PROCESS_MASTER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_NOTICE<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;using the \\&quot;%s\\&quot; event method&quot;</span><span class="token punctuation">,</span> ecf<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ccf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_core_conf_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">ngx_get_conf</span><span class="token punctuation">(</span>cycle<span class="token operator">-&gt;</span>conf_ctx<span class="token punctuation">,</span> ngx_core_module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ngx_timer_resolution <span class="token operator">=</span> ccf<span class="token operator">-&gt;</span>timer_resolution<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token punctuation">(</span>NGX_WIN32<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>      limit<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">rlimit</span>  rlmt<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getrlimit</span><span class="token punctuation">(</span>RLIMIT_NOFILE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rlmt<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;getrlimit(RLIMIT_NOFILE) failed, ignored&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ecf<span class="token operator">-&gt;</span>connections <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">ngx_uint_t</span><span class="token punctuation">)</span> rlmt<span class="token punctuation">.</span>rlim_cur</span>
<span class="line">            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ccf<span class="token operator">-&gt;</span>rlimit_nofile <span class="token operator">==</span> NGX_CONF_UNSET</span>
<span class="line">                <span class="token operator">||</span> ecf<span class="token operator">-&gt;</span>connections <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">ngx_uint_t</span><span class="token punctuation">)</span> ccf<span class="token operator">-&gt;</span>rlimit_nofile<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            limit <span class="token operator">=</span> <span class="token punctuation">(</span>ccf<span class="token operator">-&gt;</span>rlimit_nofile <span class="token operator">==</span> NGX_CONF_UNSET<span class="token punctuation">)</span> <span class="token operator">?</span></span>
<span class="line">                         <span class="token punctuation">(</span><span class="token class-name">ngx_int_t</span><span class="token punctuation">)</span> rlmt<span class="token punctuation">.</span>rlim_cur <span class="token operator">:</span> ccf<span class="token operator">-&gt;</span>rlimit_nofile<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_WARN<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;%ui worker_connections exceed &quot;</span></span>
<span class="line">                          <span class="token string">&quot;open file resource limit: %i&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                          ecf<span class="token operator">-&gt;</span>connections<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* !(NGX_WIN32) */</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ccf<span class="token operator">-&gt;</span>master <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ngx_accept_mutex_ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* cl should be equal to or greater than cache line size */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 缓存行大小</span></span>
<span class="line">    <span class="token comment">// 这里每个原子变量都独占一个缓存行</span></span>
<span class="line">    <span class="token comment">// 应该是为了消除缓存的伪共享性，防止共享内存中的值需要反复刷新到进程栈中</span></span>
<span class="line">    cl <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 每个原子变量占一个缓存行大小</span></span>
<span class="line">    size <span class="token operator">=</span> cl            <span class="token comment">/* ngx_accept_mutex */</span></span>
<span class="line">           <span class="token operator">+</span> cl          <span class="token comment">/* ngx_connection_counter */</span></span>
<span class="line">           <span class="token operator">+</span> cl<span class="token punctuation">;</span>         <span class="token comment">/* ngx_temp_number */</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_STAT_STUB<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    size <span class="token operator">+=</span> cl           <span class="token comment">/* ngx_stat_accepted */</span></span>
<span class="line">           <span class="token operator">+</span> cl          <span class="token comment">/* ngx_stat_handled */</span></span>
<span class="line">           <span class="token operator">+</span> cl          <span class="token comment">/* ngx_stat_requests */</span></span>
<span class="line">           <span class="token operator">+</span> cl          <span class="token comment">/* ngx_stat_active */</span></span>
<span class="line">           <span class="token operator">+</span> cl          <span class="token comment">/* ngx_stat_reading */</span></span>
<span class="line">           <span class="token operator">+</span> cl          <span class="token comment">/* ngx_stat_writing */</span></span>
<span class="line">           <span class="token operator">+</span> cl<span class="token punctuation">;</span>         <span class="token comment">/* ngx_stat_waiting */</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化 ngx_shm_t 结构体</span></span>
<span class="line">    shm<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ngx_str_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shm<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;nginx_shared_zone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    shm<span class="token punctuation">.</span>log <span class="token operator">=</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 分配共享内存</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_shm_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shm<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    shared <span class="token operator">=</span> shm<span class="token punctuation">.</span>addr<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 负载均衡锁占共享内存中的第一块</span></span>
<span class="line">    ngx_accept_mutex_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> shared<span class="token punctuation">;</span></span>
<span class="line">    ngx_accept_mutex<span class="token punctuation">.</span>spin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_uint_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化负载均衡锁</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_shmtx_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ngx_accept_mutex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_sh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> shared<span class="token punctuation">,</span></span>
<span class="line">                         cycle<span class="token operator">-&gt;</span>lock_file<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 共享内存的第二块用于统计建立过的连接数</span></span>
<span class="line">    ngx_connection_counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// CAS 设置连接数的值</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>ngx_connection_counter<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;counter: %p, %uA&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                   ngx_connection_counter<span class="token punctuation">,</span> <span class="token operator">*</span>ngx_connection_counter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ngx_temp_number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    tp <span class="token operator">=</span> <span class="token function">ngx_timeofday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ngx_random_number <span class="token operator">=</span> <span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>msec <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> ngx_pid<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_STAT_STUB<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化其余共享变量</span></span>
<span class="line">    ngx_stat_accepted <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_stat_handled <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_stat_requests <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_stat_active <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_stat_reading <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_stat_writing <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_stat_waiting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shared <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些统计变量全部位于共享内存中，由 worker 进程共同修改。对于整个 Nginx 服务来说全局有效。</p><hr><h2 id="_14-3-原子操作" tabindex="-1"><a class="header-anchor" href="#_14-3-原子操作"><span>14.3 原子操作</span></a></h2><p>能够进行原子操作的变量只有整型 (应当是与支持原子操作的指令定义有关)：</p><ul><li><code>ngx_atomic_uint_t</code></li><li><code>ngx_atomic_t</code></li></ul><p>这两种类型都由 <code>volatile</code> 关键字修饰，使编译器不会优化它。</p><p>对原子变量进行修改，需要使用特定的函数：</p><ul><li><code>ngx_atomic_cmp_set()</code> - 将旧值设置为新值</li><li><code>ngx_atomic_fetch_add()</code> - 原子加法</li></ul><p>从函数名上来看，显然都使用了 CAS 的思想。Nginx 为了尽可能不让 worker 进程休眠，在同步上一定是尽可能自旋。这两个函数是 Nginx 封装的，因此 Nginx 在实现中还需要考虑相应的 OS 是否支持原子操作。</p><p>在 x86 架构下，Nginx 需要通过内联汇编直接进行操作，同时还要指定 <code>volatile</code> 关键字防止编译器优化。在汇编中，最终使用 <code>cmpxchgl</code> 指令实现 CAS：</p><ul><li>首先使用 <code>lock</code> 指令锁住总线，防止多核并行执行</li><li>判断旧值与参数值是否相等</li><li>如果旧值与参数值相等，那么将旧值替换为新值</li></ul><p>另外，使用 <code>xaddl</code> 指令可以实现原子加法。</p><h3 id="_14-3-3-自旋锁" tabindex="-1"><a class="header-anchor" href="#_14-3-3-自旋锁"><span>14.3.3 自旋锁</span></a></h3><p>Nginx 基于上述的原子变量实现了 <strong>自旋锁</strong>。自旋锁是一种 <strong>非睡眠锁</strong>，如果进程试图获取锁失败，将不会进入睡眠状态，而是在获取锁的代码处自旋。每当内核调度到这个进程时，进程就能持续检查是否可以获取到锁。</p><p>自旋锁保护的场景为，进程使用锁的时间非常短 - 甚至比进程进入睡眠再被唤醒 + 上下文切换的时间还要短。在这种场景下，自旋损失的 CPU 资源是极其少的。</p><p>Nginx 基于一个原子变量实现了自旋锁。原子变量为 0 时，表示锁被释放。通过 <code>ngx_atomic_cmp_set()</code> 函数将原子变量设置为 0 就能够释放锁，而获得锁的过程要复杂些：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_spinlock</span><span class="token punctuation">(</span><span class="token class-name">ngx_atomic_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token class-name">ngx_atomic_int_t</span> value<span class="token punctuation">,</span> <span class="token class-name">ngx_uint_t</span> spin<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_ATOMIC_OPS<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>  i<span class="token punctuation">,</span> n<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 锁没有被持有</span></span>
<span class="line">        <span class="token comment">// 试图将锁通过 CAS 设置为 value，企图占有锁</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>lock <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 多 CPU 场景</span></span>
<span class="line">        <span class="token comment">// 最好不要立刻让出 CPU，而是等一等，看看其它 core 上的进程是否会释放锁</span></span>
<span class="line">        <span class="token comment">// 减少上下文切换的次数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ngx_ncpu <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> spin<span class="token punctuation">;</span> n <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// 随着等待的次数越来越多，进入下一个分支的频率会越来越低</span></span>
<span class="line">                <span class="token comment">// 检查 lock 值消耗相对较多的 CPU</span></span>
<span class="line">                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 该函数是许多架构中专门为自旋锁提供的指令</span></span>
<span class="line">                    <span class="token comment">// CPU 会将自身置于节能状态，降低等待时的功耗</span></span>
<span class="line">                    <span class="token comment">// 执行这个指令并不会让出 CPU</span></span>
<span class="line">                    <span class="token function">ngx_cpu_pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// 检查锁是否被释放，如果被释放，则试图通过 CAS 占有锁</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>lock <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 让出 CPU，进程依旧是可执行状态</span></span>
<span class="line">        <span class="token comment">// 相当于让内核调用 schedule() 调度其它可执行的进程</span></span>
<span class="line">        <span class="token function">ngx_sched_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_THREADS<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression"><span class="token function">ngx_spinlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> or <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> are not defined <span class="token operator">!</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从实现中可以看出，Nginx 中的自旋锁充分考虑了单 CPU 与多 CPU 的场景，对持有锁时间非常短的场景很有效率。</p><hr><h2 id="_14-4-nginx-频道" tabindex="-1"><a class="header-anchor" href="#_14-4-nginx-频道"><span>14.4 Nginx 频道</span></a></h2><p>Nginx 的 master 与 worker 进程之间的通信是由 <code>ngx_channel_t</code> 频道实现的，使用本机套接字实现。通过 <code>socketpair()</code> 函数，可以创建一对本机 socket <code>sv[2]</code>。向一个描述符中写入，可以从另一个描述符中读取。从一个进程 fork 出另一个进程后，子进程也会继承这个 socket。由此，两个进程可以通过 socket 中的四个描述符进行双工通信。目前，Nginx 仅使用从 master 到 worker 方向的频道，用于 master 进程对 worker 进程的管理。在每次派生 worker 子进程之前，先通过 <code>socketpair()</code> 函数产生描述符，然后再派生子进程。在每个进程的数据结构成员中，保存着描述符：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token class-name">ngx_socket_t</span> channel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_process_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>话说，这不就是 Linux 的管道吗......</p></blockquote><p>Nginx 定义了 master 与 worker 进程之间的消息格式：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>  command<span class="token punctuation">;</span> <span class="token comment">// 命令</span></span>
<span class="line">    <span class="token class-name">ngx_pid_t</span>   pid<span class="token punctuation">;</span> <span class="token comment">// 发送命令方的 pid</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>   slot<span class="token punctuation">;</span> <span class="token comment">// 发送命令方在进程数组中的 index</span></span>
<span class="line">    <span class="token class-name">ngx_fd_t</span>    fd<span class="token punctuation">;</span> <span class="token comment">// 通信的 socket 句柄</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_channel_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而命令定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_CMD_OPEN_CHANNEL</span>   <span class="token expression"><span class="token number">1</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_CMD_CLOSE_CHANNEL</span>  <span class="token expression"><span class="token number">2</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_CMD_QUIT</span>           <span class="token expression"><span class="token number">3</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_CMD_TERMINATE</span>      <span class="token expression"><span class="token number">4</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_CMD_REOPEN</span>         <span class="token expression"><span class="token number">5</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 master 进程来说，会使用 <code>channel[0]</code> 发送消息；对 worker 进程来说，会使用 <code>channel[1]</code> 接收消息。Worker 子进程会把接收消息的事件与回调函数注册到事件驱动模块中，在接收到 master 进程的消息后，回调函数将会被调用。</p><hr><h2 id="_14-5-信号" tabindex="-1"><a class="header-anchor" href="#_14-5-信号"><span>14.5 信号</span></a></h2><p>信号用于在 Linux 进程之间传递消息。Nginx 通过重定义了一些信号的处理函数来使用信号。Nginx 定义了 <code>ngx_signal_t</code> 结构体用于描述接收到信号时的行为：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span>     signo<span class="token punctuation">;</span> <span class="token comment">// 需要处理的信号</span></span>
<span class="line">    <span class="token keyword">char</span>   <span class="token operator">*</span>signame<span class="token punctuation">;</span> <span class="token comment">// 信号对应的名称</span></span>
<span class="line">    <span class="token keyword">char</span>   <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// 信号对应的 Nginx 命令</span></span>
<span class="line">    <span class="token keyword">void</span>  <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span> <span class="token class-name">siginfo_t</span> <span class="token operator">*</span>siginfo<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ucontext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 信号回调函数</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_signal_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，Nginx 定义了一个数组，里面包含了 Nginx 中将会处理的所有信号：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_signal_t</span>  signals<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_signal_value</span><span class="token punctuation">(</span>NGX_RECONFIGURE_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;SIG&quot;</span> <span class="token function">ngx_value</span><span class="token punctuation">(</span>NGX_RECONFIGURE_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;reload&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_signal_value</span><span class="token punctuation">(</span>NGX_REOPEN_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;SIG&quot;</span> <span class="token function">ngx_value</span><span class="token punctuation">(</span>NGX_REOPEN_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;reopen&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_signal_value</span><span class="token punctuation">(</span>NGX_NOACCEPT_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;SIG&quot;</span> <span class="token function">ngx_value</span><span class="token punctuation">(</span>NGX_NOACCEPT_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_signal_value</span><span class="token punctuation">(</span>NGX_TERMINATE_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;SIG&quot;</span> <span class="token function">ngx_value</span><span class="token punctuation">(</span>NGX_TERMINATE_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;stop&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_signal_value</span><span class="token punctuation">(</span>NGX_SHUTDOWN_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;SIG&quot;</span> <span class="token function">ngx_value</span><span class="token punctuation">(</span>NGX_SHUTDOWN_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;quit&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_signal_value</span><span class="token punctuation">(</span>NGX_CHANGEBIN_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;SIG&quot;</span> <span class="token function">ngx_value</span><span class="token punctuation">(</span>NGX_CHANGEBIN_SIGNAL<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> SIGALRM<span class="token punctuation">,</span> <span class="token string">&quot;SIGALRM&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> SIGINT<span class="token punctuation">,</span> <span class="token string">&quot;SIGINT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> SIGIO<span class="token punctuation">,</span> <span class="token string">&quot;SIGIO&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> SIGCHLD<span class="token punctuation">,</span> <span class="token string">&quot;SIGCHLD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> ngx_signal_handler <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> SIGSYS<span class="token punctuation">,</span> <span class="token string">&quot;SIGSYS, SIG_IGN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> SIGPIPE<span class="token punctuation">,</span> <span class="token string">&quot;SIGPIPE, SIG_IGN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如，在执行 <code>nginx -s reload</code> 时，会新拉起一个进程，向所有进程发送信号。这样，运行中的进程将调用信号处理函数来处理信号 (比如重新打开文件)。</p><p>上述信号数组会被用于 <code>ngx_init_signals()</code> 函数中的信号初始化，向 Linux 注册所用到的信号的回调函数。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_init_signals</span><span class="token punctuation">(</span><span class="token class-name">ngx_log_t</span> <span class="token operator">*</span>log<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_signal_t</span>      <span class="token operator">*</span>sig<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span>   sa<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 信号数组中的每一个信号</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>sig <span class="token operator">=</span> signals<span class="token punctuation">;</span> sig<span class="token operator">-&gt;</span>signo <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> sig<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_memzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sa<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 设置信号处理函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sig<span class="token operator">-&gt;</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            sa<span class="token punctuation">.</span>sa_sigaction <span class="token operator">=</span> sig<span class="token operator">-&gt;</span>handler<span class="token punctuation">;</span></span>
<span class="line">            sa<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_SIGINFO<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            sa<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> SIG_IGN<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sa<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 向 Linux 注册信号的回调函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sigaction</span><span class="token punctuation">(</span>sig<span class="token operator">-&gt;</span>signo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sa<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_VALGRIND<span class="token punctuation">)</span></span></span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;sigaction(%s) failed, ignored&quot;</span><span class="token punctuation">,</span> sig<span class="token operator">-&gt;</span>signame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;sigaction(%s) failed&quot;</span><span class="token punctuation">,</span> sig<span class="token operator">-&gt;</span>signame<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_14-6-信号量" tabindex="-1"><a class="header-anchor" href="#_14-6-信号量"><span>14.6 信号量</span></a></h2><p>保证两个或多个代码段不被并发访问。信号量 <strong>可能导致进程睡眠</strong>，因此要谨慎使用。Nginx 仅把信号量作为简单的互斥锁来使用。最初的信号量的值为 0，调用 <code>sem_post()</code> 函数会把信号量的值 + 1，这个操作不会有任何阻塞。调用 <code>sem_wait()</code> 函数会将信号量的值 - 1。如果信号量的值已经为 0，那么进程将在这里阻塞，进入睡眠。直到其它进程释放信号量后，该进程才会被唤醒，从而继续执行。</p><hr><h2 id="_14-7-文件锁" tabindex="-1"><a class="header-anchor" href="#_14-7-文件锁"><span>14.7 文件锁</span></a></h2><p>Linux 内核提供了基于文件的互斥锁：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">fcntl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">flock</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>fd</code> 是一个已经打开的文件句柄</li><li><code>cmd</code> 表示执行的锁操作</li><li><code>lock</code> 描述了锁信息</li></ul><p><code>cmd</code> 参数在 Nginx 中只会有两个值：</p><ul><li><code>F_SETLK</code> - 在争夺锁时，如果失败，则立刻返回</li><li><code>F_SETLKW</code> - 在争夺锁时，如果失败，则当前进程阻塞在该函数上，进程转为睡眠状态</li></ul><p>而 <code>lock</code> 参数用于描述锁信息：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">flock</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">short</span> l_type<span class="token punctuation">;</span> <span class="token comment">// 锁类型</span></span>
<span class="line">    <span class="token keyword">short</span> l_whence<span class="token punctuation">;</span> <span class="token comment">// 锁区域起始地址</span></span>
<span class="line">    <span class="token keyword">long</span> l_start<span class="token punctuation">;</span> <span class="token comment">// 锁区域相对于起始地址的偏移量</span></span>
<span class="line">    <span class="token keyword">long</span> l_len<span class="token punctuation">;</span> <span class="token comment">// 锁区域的长度</span></span>
<span class="line">    <span class="token keyword">long</span> l_pid<span class="token punctuation">;</span> <span class="token comment">// 拥有锁的 pid</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体可以支持锁住文件中的部分内容。但是 Nginx 封装的文件锁仅用于保护代码的顺序执行，使用方式较为简单 - 一个文件对应一个全局互斥锁。因此大部分取值都是固定的，而 <code>l_type</code> 取决于用户想实现阻塞睡眠的锁还是非阻塞的锁。</p><p>Nginx 为文件锁封装了三个函数：</p><ul><li><code>ngx_trylock_fd()</code> - 不会阻塞进程的互斥锁</li><li><code>ngx_lock_fd()</code> - 会阻塞进程执行，导致 worker 进程进入睡眠</li><li><code>ngx_unlock_fd()</code> - 释放锁</li></ul><hr><h2 id="_14-8-互斥锁" tabindex="-1"><a class="header-anchor" href="#_14-8-互斥锁"><span>14.8 互斥锁</span></a></h2><p>基于原子操作、信号量、文件锁，Nginx 在更高层次上封装了一个互斥锁。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// 如果支持原子变量</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_ATOMIC_OPS<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_atomic_t</span>  <span class="token operator">*</span>lock<span class="token punctuation">;</span> <span class="token comment">// 原子变量</span></span>
<span class="line"><span class="token comment">// 如果支持信号量</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_POSIX_SEM<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_atomic_t</span>  <span class="token operator">*</span>wait<span class="token punctuation">;</span> <span class="token comment">// 原子变量</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>     semaphore<span class="token punctuation">;</span> <span class="token comment">// 信号量值</span></span>
<span class="line">    <span class="token class-name">sem_t</span>          sem<span class="token punctuation">;</span> <span class="token comment">// 信号量锁</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line"><span class="token comment">// 文件锁</span></span>
<span class="line">    <span class="token class-name">ngx_fd_t</span>       fd<span class="token punctuation">;</span> <span class="token comment">// 文件句柄</span></span>
<span class="line">    u_char        <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// 文件名</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>     spin<span class="token punctuation">;</span> <span class="token comment">// 自旋次数 (自旋状态下，等待其它 CPU core 释放锁的时间)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_shmtx_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不支持原子操作时，就用文件锁来实现互斥锁；支不支持信号量只会影响获得锁的方式 - 如果不支持信号量，那么互斥锁就相当于自旋锁；如果支持信号量，那么在自旋等待超时后，进程将进入睡眠。</p><h3 id="_14-8-1-文件锁实现的-ngx-shmtx-t" tabindex="-1"><a class="header-anchor" href="#_14-8-1-文件锁实现的-ngx-shmtx-t"><span>14.8.1 文件锁实现的 <code>ngx_shmtx_t</code></span></a></h3><p>首先创建 <code>ngx_shmtx_t</code> 结构体，然后调用 <code>ngx_shmtx_create()</code> 函数创建锁。这个函数的主要目的是确保 fd 可用。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_shmtx_create</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">,</span> <span class="token class-name">ngx_shmtx_sh_t</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> u_char <span class="token operator">*</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// mtx 中已经有值</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// mtx 已经被相同的文件初始化过了</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_strcmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mtx<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            mtx<span class="token operator">-&gt;</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 文件名不一致，说明使用了新文件锁，因此销毁原文件锁</span></span>
<span class="line">        <span class="token function">ngx_shmtx_destroy</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 按照指定的文件名创建并打开文件</span></span>
<span class="line">    mtx<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> <span class="token function">ngx_open_file</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> NGX_FILE_RDWR<span class="token punctuation">,</span> NGX_FILE_CREATE_OR_OPEN<span class="token punctuation">,</span></span>
<span class="line">                            NGX_FILE_DEFAULT_ACCESS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 文件无法打开</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>fd <span class="token operator">==</span> NGX_INVALID_FILE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      ngx_open_file_n <span class="token string">&quot; \\&quot;%s\\&quot; failed&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 只需要这个文件的 inode 信息，因此可以把文件删除</span></span>
<span class="line">    <span class="token comment">// 只需要 fd 可用</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_delete_file</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_FILE_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      ngx_delete_file_n <span class="token string">&quot; \\&quot;%s\\&quot; failed&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    mtx<span class="token operator">-&gt;</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的销毁函数就是关闭已经打开的 fd 句柄：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_shmtx_destroy</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_close_file</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_FILE_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      ngx_close_file_n <span class="token string">&quot; \\&quot;%s\\&quot; failed&quot;</span><span class="token punctuation">,</span> mtx<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以非阻塞的方式获取锁：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_uint_t</span></span>
<span class="line"><span class="token function">ngx_shmtx_trylock</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_err_t</span>  err<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">ngx_trylock_fd</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 已被其它进程持有</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> NGX_EAGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__osf__ </span><span class="token comment">/* Tru64 UNIX */</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> NGX_EACCES<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_abort</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ngx_trylock_fd_n <span class="token string">&quot; %s failed&quot;</span><span class="token punctuation">,</span> mtx<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阻塞方式获取锁 - 将使进程睡眠，等待其它进程释放锁后由内核唤醒。这个函数没有返回值，因为它的返回就意味着已经成功获得了锁 - 代码将会继续向下执行。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_shmtx_lock</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_err_t</span>  err<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    err <span class="token operator">=</span> <span class="token function">ngx_lock_fd</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_abort</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ngx_lock_fd_n <span class="token string">&quot; %s failed&quot;</span><span class="token punctuation">,</span> mtx<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-8-2-原子变量实现的-ngx-shmtx-t" tabindex="-1"><a class="header-anchor" href="#_14-8-2-原子变量实现的-ngx-shmtx-t"><span>14.8.2 原子变量实现的 <code>ngx_shmtx_t</code></span></a></h3><p>原子变量 <code>lock</code> 用于表示当前锁的状态。当 <code>lock</code> 的值为 0 时，说明没有进程持有该锁；当 <code>lock</code> 的值为负数时，表示有进程正持有锁 - Nginx 通过判断 <code>lock</code> 变量的符号位快速判断锁是否已被持有。</p><p>初始化锁：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_shmtx_create</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">,</span> <span class="token class-name">ngx_shmtx_sh_t</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> u_char <span class="token operator">*</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    mtx<span class="token operator">-&gt;</span>lock <span class="token operator">=</span> <span class="token operator">&amp;</span>addr<span class="token operator">-&gt;</span>lock<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>spin <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">ngx_uint_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 自旋等待时间默认为 2048</span></span>
<span class="line">    mtx<span class="token operator">-&gt;</span>spin <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 同时使用信号量</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_POSIX_SEM<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    mtx<span class="token operator">-&gt;</span>wait <span class="token operator">=</span> <span class="token operator">&amp;</span>addr<span class="token operator">-&gt;</span>wait<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将信号量的值初始化为 0</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token operator">-&gt;</span>sem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;sem_init() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 信号量被成功初始化，标志位设为 1</span></span>
<span class="line">        mtx<span class="token operator">-&gt;</span>semaphore <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释放锁：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_shmtx_destroy</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_POSIX_SEM<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 把向内核申请的信号量给释放</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>semaphore<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token operator">-&gt;</span>sem<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;sem_destroy() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非阻塞获取锁 (代码已经重构为与书上说法不一致了 - 没有看到所谓的判断 <code>lock</code> 是否为负数)：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_uint_t</span></span>
<span class="line"><span class="token function">ngx_shmtx_trylock</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 先判断锁是否被持有，然后通过 CAS 操作将锁的状态置为已被持有</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>mtx<span class="token operator">-&gt;</span>lock <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ngx_pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阻塞获取锁：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_shmtx_lock</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>         i<span class="token punctuation">,</span> n<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;shmtx lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 在没拿到锁之间不会退出循环</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 试图获得锁</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>mtx<span class="token operator">-&gt;</span>lock <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ngx_pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 如果是多核 CPU</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ngx_ncpu <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 尝试失败越多次，降频频率越低</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> mtx<span class="token operator">-&gt;</span>spin<span class="token punctuation">;</span> n <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 降低 CPU 功耗，不让出 CPU</span></span>
<span class="line">                    <span class="token function">ngx_cpu_pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// 试图获得锁</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>mtx<span class="token operator">-&gt;</span>lock <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line">                    <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ngx_pid<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_POSIX_SEM<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 如果支持信号量，且使用了信号量</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>semaphore<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ?</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_atomic_fetch_add</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>wait<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// ?</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>mtx<span class="token operator">-&gt;</span>lock <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ngx_pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_atomic_fetch_add</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>wait<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                           <span class="token string">&quot;shmtx wait %uA&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>mtx<span class="token operator">-&gt;</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 检查信号量的值是否为正数</span></span>
<span class="line">            <span class="token comment">// 如果不是正数，那么当前进程进入睡眠状态</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token operator">-&gt;</span>sem<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">ngx_err_t</span>  err<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                err <span class="token operator">=</span> ngx_errno<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NGX_EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> err<span class="token punctuation">,</span></span>
<span class="line">                                  <span class="token string">&quot;sem_wait() failed while waiting on shmtx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                           <span class="token string">&quot;shmtx awoke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 让出 CPU</span></span>
<span class="line">        <span class="token function">ngx_sched_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当不使用信号量时，这里实际上就是一个自旋锁。使用信号量后，进程将可能进入睡眠 - 所以不建议在 Nginx worker 进程中使用带信号量的取锁函数。</p><p>释放锁的过程不会阻塞进程，由 CAS 操作实现：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_shmtx_unlock</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>spin <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_uint_t</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;shmtx unlock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 通过 CAS 操作获得锁</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> ngx_pid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果使用了信号量，那么唤醒睡眠等待的进程</span></span>
<span class="line">        <span class="token function">ngx_shmtx_wakeup</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_shmtx_wakeup</span><span class="token punctuation">(</span><span class="token class-name">ngx_shmtx_t</span> <span class="token operator">*</span>mtx<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// 仅在支持信号量的情况下执行</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_POSIX_SEM<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_atomic_uint_t</span>  wait<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 没有使用信号量，那么直接结束</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mtx<span class="token operator">-&gt;</span>semaphore<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 循环判断 wait 变量的值是否为正数</span></span>
<span class="line">    <span class="token comment">// 如果是正数，那么将其的值 - 1</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        wait <span class="token operator">=</span> <span class="token operator">*</span>mtx<span class="token operator">-&gt;</span>wait<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ngx_atomic_int_t</span><span class="token punctuation">)</span> wait <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_atomic_cmp_set</span><span class="token punctuation">(</span>mtx<span class="token operator">-&gt;</span>wait<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> wait <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;shmtx wake %uA&quot;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 信号量的值 + 1，表示释放了信号量互斥锁</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token operator">-&gt;</span>sem<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;sem_post() failed while wake shmtx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,107)]))}const i=s(t,[["render",l],["__file","Chapter 14 - 进程间通信机制.html.vue"]]),u=JSON.parse('{"path":"/understanding-nginx-notes/Part%203%20-%20%E6%B7%B1%E5%85%A5%20Nginx/Chapter%2014%20-%20%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6.html","title":"Chapter 14 - 进程间通信机制","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"14.1 概述","slug":"_14-1-概述","link":"#_14-1-概述","children":[]},{"level":2,"title":"14.2 共享内存","slug":"_14-2-共享内存","link":"#_14-2-共享内存","children":[]},{"level":2,"title":"14.3 原子操作","slug":"_14-3-原子操作","link":"#_14-3-原子操作","children":[{"level":3,"title":"14.3.3 自旋锁","slug":"_14-3-3-自旋锁","link":"#_14-3-3-自旋锁","children":[]}]},{"level":2,"title":"14.4 Nginx 频道","slug":"_14-4-nginx-频道","link":"#_14-4-nginx-频道","children":[]},{"level":2,"title":"14.5 信号","slug":"_14-5-信号","link":"#_14-5-信号","children":[]},{"level":2,"title":"14.6 信号量","slug":"_14-6-信号量","link":"#_14-6-信号量","children":[]},{"level":2,"title":"14.7 文件锁","slug":"_14-7-文件锁","link":"#_14-7-文件锁","children":[]},{"level":2,"title":"14.8 互斥锁","slug":"_14-8-互斥锁","link":"#_14-8-互斥锁","children":[{"level":3,"title":"14.8.1 文件锁实现的 ngx_shmtx_t","slug":"_14-8-1-文件锁实现的-ngx-shmtx-t","link":"#_14-8-1-文件锁实现的-ngx-shmtx-t","children":[]},{"level":3,"title":"14.8.2 原子变量实现的 ngx_shmtx_t","slug":"_14-8-2-原子变量实现的-ngx-shmtx-t","link":"#_14-8-2-原子变量实现的-ngx-shmtx-t","children":[]}]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 3 - 深入 Nginx/Chapter 14 - 进程间通信机制.md"}');export{i as comp,u as data};
