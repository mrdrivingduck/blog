import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/8-10-NO10GiSP.png",l="/blog/assets/8-11-5g6kTfuu.png",o="/blog/assets/8-12-Uty9JdK9.png",c={};function i(r,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-8-7-signal-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-8-7-signal-c-程序"><span>Chapter 8.7 - signal.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 20 11:58</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_8-7-signal-c-程序" tabindex="-1"><a class="header-anchor" href="#_8-7-signal-c-程序"><span>8.7 signal.c 程序</span></a></h2><h3 id="_8-7-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_8-7-1-功能描述"><span>8.7.1 功能描述</span></a></h3><p>涉及内核中所有有关信号处理的函数。</p><p>UNIX 类系统中，信号是一种软件中断处理机制，异步处理事件。信号是一个整数值，除了指明信号类别，不携带任何信息。早期 UNIX 内核中信号处理方法并不是那么的可靠，可能导致信号丢失。POSIX 提供了一种可靠处理信号的方法。为保持兼容性，Linux 内核同时提供了两种处理信号的方法。</p><h4 id="_8-7-1-1-linux-中的信号" tabindex="-1"><a class="header-anchor" href="#_8-7-1-1-linux-中的信号"><span>8.7.1.1 Linux 中的信号</span></a></h4><p>用一个 <code>unsigned long</code> (32-bit) 的 bitmap 来表示不同的信号</p><ul><li>系统中最多可以有 32 个不同的信号</li><li>其中 20 种是 POSIX.1 标准中规定的信号</li><li>另两种是 Linux 专用信号 <code>SIGUNUSED</code> (未定义) 和 <code>SIGSTKFLT</code> (堆栈错)</li></ul><p>进程收到信号时，可以有三种处理方式：</p><ul><li>忽略信号：但 <code>SIGKILL</code> 和 <code>SIGSTOP</code> 忽略不掉</li><li>捕获信号：告诉内核，在指定的信号发生时，调用自定义的信号处理函数</li><li>默认操作：由系统响应的默认信号处理程序进行处理</li></ul><h4 id="_8-7-1-2-信号处理的实现" tabindex="-1"><a class="header-anchor" href="#_8-7-1-2-信号处理的实现"><span>8.7.1.2 信号处理的实现</span></a></h4><p>一大堆相关的系统调用：</p><ul><li><code>sys_ssetmake()</code>：设置信号屏蔽码</li><li><code>sys_sgetmask()</code>：获取信号屏蔽码</li><li><code>sys_signal()</code>：信号处理，即传统的 <code>signal()</code></li><li><code>sys_sigaction()</code>：可靠的信号处理函数 <code>sigaction()</code></li></ul><p>系统调用中断处理程序中，处理信号的程序 <code>do_signal()</code>。以上，<code>signal()</code> 和 <code>sigaction()</code> 的功能比较类似，都用于更改信号的原处理句柄。<code>signal()</code> 是内核处理信号的传统方式，在某些特殊时刻会导致信号丢失。这两个系统调用会在进程 PCB 的 <code>sigaction[]</code> 结构体数组中，将自定义信号处理函数的指针和相关属性记录到结构体中。当内核 <strong>退出</strong> 系统调用和某些中断过程时，会检测当前进程是否收到信号。若收到了信号，那么就会根据 <code>sigaction[]</code> 中对应的结构项执行信号处理服务程序。</p><h5 id="signal-函数" tabindex="-1"><a class="header-anchor" href="#signal-函数"><span>signal() 函数</span></a></h5><p>两个参数：</p><ul><li>要捕获的信号值：<code>int signr</code></li><li>新的信号处理函数指针：<code>void (*handler)(int)</code></li></ul><p>函数指针可以是用户定义的信号处理函数，也可以是内核提供的特定函数指针。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIG_DFL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">// 默认操作</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIG_IGN</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span> </span><span class="token comment">// 忽略</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>0</code> 和 <code>1</code> 是实际程序中不可能出现的函数地址，所以 <code>signal()</code> 函数就可以根据这两个值来决定对信号进行默认处理或忽略。<code>SIGKILL</code> 和 <code>SIGSTOP</code> 不能被忽略。</p><p>程序刚开始时，系统设置所有的信号处理方式为 <code>SIG_DFL</code> 或 <code>SIG_IGN</code>。另外，当程序 fork 一个子进程时，子进程会 <strong>继承</strong> 父进程的信号处理方式 (屏蔽码)。在父进程对信号的设置和处理方式，在子进程中同样有效。</p><p><code>signal()</code> 函数不可靠的原因：信号发生后，系统会将信号处理函数重新设置为默认值。因此，在自定义的信号处理函数中，首先需要再一次设置信号处理函数。在此之前，如果又来了一个信号，将会被丢失。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">sig_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> signr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 信号发生，调用信号处理函数</span></span>
<span class="line">    <span class="token comment">// 系统将该信号的处理函数重置为默认</span></span>
<span class="line">    <span class="token comment">// 如果想要继续捕获该信号，需要再一次设置处理函数</span></span>
<span class="line">    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> sig_handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在此语句之前，若再来一个信号，将会被丢失</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> sig_handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次设置信号处理函数</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="sigaction-函数" tabindex="-1"><a class="header-anchor" href="#sigaction-函数"><span>sigaction() 函数</span></a></h5><p>可靠地内核处理信号机制。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oldact<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>很显然，就是将 act 对应的结构放置到进程 PCB 的 sigaction[] 中，并返回数组中原来的 sigaction 结构。该结构定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">sigset_t</span> sa_mask<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> sa_flags<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_restorer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，sa_mask 是一个暂时性的信号屏蔽集合？</p><ul><li>在 sa_handler 被调用前，sa_mask 被加入进程 PCB 的信号屏蔽集合中</li><li>在 sa_handler 被调用后，系统会恢复进程原来的信号屏蔽 bitmap</li></ul><p>在处理一指定信号期间，能确保阻塞同一个信号而不让其丢失，直到此次处理完毕？？？</p><p>一个信号被阻塞期间而多次发生时，通常只保存一个样例，即对于阻塞的多个同一信号，只会再调用一次信号处理句柄。修改了一个信号处理句柄后，除非再次更改，否则一直使用该处理句柄；而 <code>signal()</code> 函数会在处理句柄结束后，恢复成信号的默认处理句柄。sa_flags 用于指定处理信号的选项，改变信号处理的默认流程。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SA_NOCLDSTOP</span> <span class="token expression"><span class="token number">1</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SA_INTERRUPT</span> <span class="token expression"><span class="token number">0x20000000</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SA_NO_MASK</span>   <span class="token expression"><span class="token number">0x40000000</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SA_ONESHOT</span>   <span class="token expression"><span class="token number">0x80000000</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sa_restorer 是一个函数指针，在编译链接时由 Libc 函数库提供。在信号处理函数结束后清理用户态堆栈，恢复系统调用返回值。</p><h5 id="do-signal-函数" tabindex="-1"><a class="header-anchor" href="#do-signal-函数"><span>do_signal() 函数</span></a></h5><p>在进程每次从系统调用中断、时钟中断等退出时，若进程已收到信号，则把信号的处理句柄插入到 <strong>用户程序堆栈</strong> 中。这样，中断返回后会立刻执行信号处理程序，再返回用户程序。处理过程如图所示：</p><p><img src="`+t+'" alt="8-10"></p><p>如何把信号处理句柄塞进用户态堆栈呢？</p><ul><li>函数首先处理两个默认信号句柄</li><li>若用户自定义了处理句柄 <ul><li>将内核态堆栈中返回到原用户程序的 eip 指针保存为 old_eip</li><li>将 eip 替换为自定义句柄的入口指针</li><li>将内核态堆栈中的 esp 指针减小 - 使用户态堆栈向下扩展</li><li>将内核态堆栈上的一些寄存器内容复制到用户态堆栈上 <ul><li>old_eip：使信号句柄执行完后可以返回用户程序继续执行</li><li>eax：本来存放着系统调用返回值，但在信号处理句柄中可能会使用到 eax - 所以将 eax 保存在堆栈上</li><li>edx、ecx、eflags 也需要被恢复</li><li>可能有进程的阻塞码</li><li>此外，信号处理函数还需要信号值 signr 作为参数</li></ul></li></ul></li></ul><p><img src="'+l+`" alt="8-11"></p><p>这样，从中断返回后，程序首先转移到信号处理句柄中执行。执行完毕后再返回到用户程序。</p><h5 id="sa-restorer-函数" tabindex="-1"><a class="header-anchor" href="#sa-restorer-函数"><span>sa_restorer() 函数</span></a></h5><p>由函数库提供，负责清理信号处理程序执行完毕后，恢复用户程序的寄存器值和系统调用返回值。</p><div class="language-assembly line-numbers-mode" data-highlighter="prismjs" data-ext="assembly" data-title="assembly"><pre><code><span class="line">.globl ____sig_restore</span>
<span class="line">.globl ____masksig_restore</span>
<span class="line"># 没有 blocked</span>
<span class="line">____sig_restore:</span>
<span class="line">    addl $4, %esp # 丢弃堆栈上的信号值 signr</span>
<span class="line">    popl %eax</span>
<span class="line">    popl %ecx</span>
<span class="line">    popl %edx</span>
<span class="line">    popfl</span>
<span class="line">    ret</span>
<span class="line"># 有 blocked</span>
<span class="line">____masksig_restore:</span>
<span class="line">    addl $4, %esp # 丢弃堆栈上的信号值 signr</span>
<span class="line">    call ____ssetmask</span>
<span class="line">    addl $4, %esp # 丢弃堆栈上的 blocked</span>
<span class="line">    popl %eax</span>
<span class="line">    popl $ecx</span>
<span class="line">    popl %edx</span>
<span class="line">    popfl</span>
<span class="line">    ret</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上，<code>do_signal()</code> 执行完后，<code>sys_call.s</code> 将进程内核态堆栈上 eip 以下的值全部弹出。执行 IRET 指令后，弹出用户态堆栈信息，返回用户特权级执行程序。此时，eip 已经被改为信号处理句柄，所以立即执行信号处理程序。处理完后，通过 RET 指令，CPU 将控制权移交 <code>sa_restorer()</code>，该函数清理用户态堆栈，使堆栈看起来像没有运行过信号处理程序一样。完成后，再通过 RET 指令，弹出 old_eip，恢复原用户程序的执行。用户态堆栈的数据如下图所示：</p><p><img src="`+o+`" alt="8-12"></p><h3 id="_8-7-1-3-进程挂起" tabindex="-1"><a class="header-anchor" href="#_8-7-1-3-进程挂起"><span>8.7.1.3 进程挂起</span></a></h3><p>该程序中还包含一个 <code>sys_sigsuspend()</code> 的系统调用实现函数</p><ul><li>临时把进程的信号屏蔽码替换成参数中给定的集合</li><li>然后挂起进程，直到收到一个信号为止</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_sigsuspend</span><span class="token punctuation">(</span><span class="token keyword">int</span> restart<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> old_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>restart 为重启标志：</p><ul><li>0 - 当前的屏蔽码保存在 oldmask 中，阻塞信号，直到收到任何一个信号</li><li>非 0 - 从保存的 oldmask 中恢复进程的原屏蔽码</li></ul><p>实际调用时，通过函数库中的形式调用：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sigsuspend</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由库函数来维护前两个参数：</p><ul><li>第一次调用系统调用时，restart 为 0，保存原来的 blocked 为 old_mask</li><li>第二次调用时，恢复进程保存在 old_mask 中的屏蔽码</li></ul><h4 id="_8-7-1-4-被信号中断的系统调用的重新启动" tabindex="-1"><a class="header-anchor" href="#_8-7-1-4-被信号中断的系统调用的重新启动"><span>8.7.1.4 被信号中断的系统调用的重新启动</span></a></h4><p>慢速系统调用。被阻塞期间，收到了一个信号。在处理信号时，引入了对某些中断系统调用重新启动的功能：</p><ul><li><code>ioctl</code>、<code>read</code>、<code>write</code> 对低速设备操作时，才会被信号中断</li><li><code>wait</code> 和 <code>waitpid</code> 在捕捉到信号时总是会被中断</li></ul><p>在 Linux 0.12 内核中，在 sigaction 结构体中可以设置是否重新启动被中断的系统调用：</p><ul><li>如果设置 <code>SA_INTERRUPT</code> 标志</li><li>且信号不是 <code>SIGCONT</code>、<code>SIGSTOP</code>、<code>SIGTSTP</code>、<code>SIGTTIN</code> 和 <code>SIGTTOU</code></li></ul><p>那么在系统调用执行时，收到信号就会被中断，否则内核自动重新执行被中断的系统调用。在目前的 Linux 系统中，<code>SA_INTERRUPT</code> 已经弃置不用，使用意义相反的 <code>SA_RESTART</code>。</p><h3 id="_8-7-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_8-7-2-代码注释"><span>8.7.2 代码注释</span></a></h3><h4 id="与信号屏蔽相关的系统调用" tabindex="-1"><a class="header-anchor" href="#与信号屏蔽相关的系统调用"><span>与信号屏蔽相关的系统调用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 获取当前任务的信号屏蔽 bitmap (signal-get-mask)</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_sgetmask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> current<span class="token operator">-&gt;</span>blocked</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 设置新的信号屏蔽 bitmap，返回原信号屏蔽 bitmap</span></span>
<span class="line"><span class="token comment">// SIGKILL 和 SIGSTOP 不能被屏蔽</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_ssetmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> newmask<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> old <span class="token operator">=</span> current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    currrent<span class="token operator">-&gt;</span>blocked <span class="token operator">=</span> newmask <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGKILL<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGSTOP<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> old<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取得进程收到的但被屏蔽的信号</span></span>
<span class="line"><span class="token comment">// fill in &quot;set&quot; with signals pending but blocked</span></span>
<span class="line"><span class="token comment">// set 应当是一个用户空间指针，所以需要验证存储空间</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_sigpending</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4B</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>blocked <span class="token operator">&amp;</span> current<span class="token operator">-&gt;</span>signal<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 更换新的信号屏蔽码，并等待信号到来</span></span>
<span class="line"><span class="token comment">// restart 不为 0，则重新运行程序 - 恢复 old_mask 的原进程屏蔽码</span></span>
<span class="line"><span class="token comment">// restart 为 0，则是第一次调用 - 保存进程当前屏蔽码到 old_mask，替换新的屏蔽码</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_sigsuspend</span><span class="token punctuation">(</span><span class="token keyword">int</span> restart<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> old_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> set<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>restart<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// restarting system call</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>blocked <span class="token operator">=</span> old_mask<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span> <span class="token comment">// 系统调用被信号中断</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>restart<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>old_mask<span class="token punctuation">)</span> <span class="token operator">=</span> current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>blocked <span class="token operator">=</span> set<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待信号到来</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span>ERESTARTNOINTR<span class="token punctuation">;</span> <span class="token comment">// 处理信号，并返回本系统调用继续运行 - 不中断</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sigaction-数据在内核空间和用户空间之间的互相拷贝" tabindex="-1"><a class="header-anchor" href="#sigaction-数据在内核空间和用户空间之间的互相拷贝"><span>sigaction 数据在内核空间和用户空间之间的互相拷贝</span></a></h4><p><code>fs</code> 数据段表示用户空间。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">save_old</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 验证用户空间内存是否够大</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        from<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        to<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get_new</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">*</span><span class="token punctuation">(</span>to<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>from<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="signal-系统调用" tabindex="-1"><a class="header-anchor" href="#signal-系统调用"><span>signal() 系统调用</span></a></h4><p>为指定的信号安装新的信号句柄：</p><ul><li>可以是用户指定的函数</li><li>也可以是 <code>SIG_DFL</code> 或 <code>SIG_IGN</code></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 参数 restorer 由 Libc 库提供</span></span>
<span class="line"><span class="token comment">// 返回原信号句柄</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">long</span> handler<span class="token punctuation">,</span> <span class="token keyword">long</span> restorer<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 验证信号在有效范围内 (1-32)</span></span>
<span class="line">    <span class="token comment">// 不能是信号 SIGKILL 和 SIGSTOP - 这两个信号不能被进程捕获</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>signum<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> signum<span class="token operator">&gt;</span><span class="token number">32</span> <span class="token operator">||</span> signum<span class="token operator">==</span>SIGKILL <span class="token operator">||</span> signum<span class="token operator">==</span>SIGSTOP<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 构造 sigaction 结构体内容</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>sa_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_ONESHOT <span class="token operator">|</span> SA_NOMASK<span class="token punctuation">;</span> <span class="token comment">// 句柄使用一次后恢复默认</span></span>
<span class="line">    tmp<span class="token punctuation">.</span>sa_restorer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> restorer<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 替换 sigaction 结构体</span></span>
<span class="line">    handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler<span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> handler<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sigaction-系统调用" tabindex="-1"><a class="header-anchor" href="#sigaction-系统调用"><span>sigaction() 系统调用</span></a></h4><p>改变进程在收到一个信号时的操作 - SIGKILL 除外</p><ul><li>新 action 不为空，则新 action 被安装</li><li>oldaction 不为空，则原 action 被保存到 oldaction 中</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>action<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oldaction<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 验证信号值在有效范围内 (1-32)</span></span>
<span class="line">    <span class="token comment">// 信号不得是 SIGKILL 和 SIGSTOP</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>signum<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> signum<span class="token operator">&gt;</span><span class="token number">32</span> <span class="token operator">||</span> signum<span class="token operator">==</span>SIGKILL <span class="token operator">||</span> signum<span class="token operator">==</span>SIGSTOP<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 旧的 sigaction 结构体</span></span>
<span class="line">    tmp <span class="token operator">=</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 从用户空间中拷贝新的 sigaction 结构</span></span>
<span class="line">    <span class="token function">get_new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>action<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>signum <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldaction<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">save_old</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> oldaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_mask <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>signum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="core-dump" tabindex="-1"><a class="header-anchor" href="#core-dump"><span>core dump</span></a></h4><p>目前暂未实现。</p><h4 id="do-signal-函数-1" tabindex="-1"><a class="header-anchor" href="#do-signal-函数-1"><span>do_signal() 函数</span></a></h4><p>系统调用中断处理程序中，真正的信号预处理程序：</p><ul><li>将信号处理句柄插入到用户态堆栈中</li><li>使系统调用结束后立刻去执行信号处理句柄</li><li>然后继续执行用户程序</li></ul><p>函数的参数在 <code>sys_call.s</code> 中被依次压入内核态堆栈：</p><ul><li>CPU 执行中断指令后，保存的用户态堆栈的 SS、ESP、EFLAGS、CS、EIP</li><li>DS、ES、FS 段寄存器；EAX 寄存器</li><li>EDX、ECX、EBX</li><li>系统调用返回值 EAX</li><li>当前信号值 signr</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">do_signal</span><span class="token punctuation">(</span><span class="token keyword">long</span> signr<span class="token punctuation">,</span> <span class="token keyword">long</span> eax<span class="token punctuation">,</span> <span class="token keyword">long</span> ebx<span class="token punctuation">,</span> <span class="token keyword">long</span> ecx<span class="token punctuation">,</span> <span class="token keyword">long</span> edx<span class="token punctuation">,</span><span class="token keyword">long</span> orig_eax，</span>
<span class="line">             <span class="token keyword">long</span> fs<span class="token punctuation">,</span> <span class="token keyword">long</span> es<span class="token punctuation">,</span> <span class="token keyword">long</span> ds<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">long</span> eip<span class="token punctuation">,</span> <span class="token keyword">long</span> cs<span class="token punctuation">,</span> <span class="token keyword">long</span> eflags<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> ss<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sa_handler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">long</span> old_eip <span class="token operator">=</span> eip<span class="token punctuation">;</span> <span class="token comment">// 用户程序返回地址</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span> sa <span class="token operator">=</span> current<span class="token operator">-&gt;</span>sigaction <span class="token operator">+</span> signr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// current-&gt;sigaction[signr-1]</span></span>
<span class="line">    <span class="token keyword">int</span> longs<span class="token punctuation">;</span> <span class="token comment">// 用户态堆栈扩展的长度</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> tmp_esp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">notdef</span></span></span>
<span class="line">    <span class="token comment">// printk ...</span></span>
<span class="line">    <span class="token comment">// debug info</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 功能号不为 -1，是系统调用</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>orig_eax <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">(</span>eax <span class="token operator">==</span> <span class="token operator">-</span>ERESTARTSYS<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>eax <span class="token operator">==</span> <span class="token operator">-</span>ERESTARTNOINTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eax <span class="token operator">==</span> <span class="token operator">-</span>ERESTARTSYS<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>saflags <span class="token operator">&amp;</span> SA_INTERRUPT<span class="token punctuation">)</span> <span class="token operator">||</span> signr <span class="token operator">&lt;</span> SIGCONT <span class="token operator">||</span> signr <span class="token operator">&gt;</span> SIGTTOU<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 系统调用返回码是 -ERESTARTSYS (重新启动系统调用)</span></span>
<span class="line">            <span class="token comment">// 并且 sigaction 中含有标志 SA_INTERRUPT</span></span>
<span class="line">            <span class="token comment">// 信号不是 SIGCONT、SIGSTOP、SIGTSTP、SIGTSTP、SIGTTIN、SIGTTOU</span></span>
<span class="line">            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eax<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span> <span class="token comment">// 返回 被信号中断的系统调用</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 返回用户程序时，让程序重新启动被信号中断的系统调用</span></span>
<span class="line">            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eax<span class="token punctuation">)</span> <span class="token operator">=</span> orig_eax<span class="token punctuation">;</span> <span class="token comment">// 恢复 eax 中的系统调用功能号</span></span>
<span class="line">            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eip<span class="token punctuation">)</span> <span class="token operator">=</span> old_eip <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 指令指针回调</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    sa_handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> sa<span class="token operator">-&gt;</span>sa_handler<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>sa_handler <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 信号句柄为 SIG_IGN - 忽略</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sa_handler<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 信号句柄为 SIG_DFL - 默认处理</span></span>
<span class="line">        <span class="token comment">// 根据具体的信号进行分别处理</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>signr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> SIGCONT<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGCHLD<span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// 默认忽略</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> SIGSTOP<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGTSTP<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGTTIN<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGTTOU<span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// 当前进程状态置为停止状态</span></span>
<span class="line">                <span class="token comment">// 若父进程对该进程的 SIGCHLD 信号没有设置处理标志 SA_NOCLDSTOP</span></span>
<span class="line">                <span class="token comment">// 向父进程发送 SIGCHLD 信号</span></span>
<span class="line">                current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_STOPPED<span class="token punctuation">;</span></span>
<span class="line">                current<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> signr<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_flags <span class="token operator">&amp;</span> SA_NOCLDSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    current<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> SIGQUIT<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGILL<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGTRAP<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGIOT<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGFPE<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> SIGSEGV<span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">core_dump</span><span class="token punctuation">(</span>signr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">do_exit</span><span class="token punctuation">(</span>signr <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token function">do_exit</span><span class="token punctuation">(</span>signr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 句柄只使用一次，则置空</span></span>
<span class="line">    <span class="token comment">// 目前句柄已经保存在 sa_handler 中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_ONESHOT<span class="token punctuation">)</span></span>
<span class="line">        sa<span class="token operator">-&gt;</span>sa_handler <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eip<span class="token punctuation">)</span> <span class="token operator">=</span> sa_handler<span class="token punctuation">;</span> <span class="token comment">// 修改 eip 为信号处理句柄</span></span>
<span class="line">    longs <span class="token operator">=</span> <span class="token punctuation">(</span>sa<span class="token operator">&gt;</span>sa_flags <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">7</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>esp<span class="token punctuation">)</span> <span class="token operator">-=</span> longs<span class="token punctuation">;</span> <span class="token comment">// 堆栈向下扩展</span></span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>esp<span class="token punctuation">,</span> longs <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    tmp_esp <span class="token operator">=</span> esp<span class="token punctuation">;</span> <span class="token comment">// tmp_esp 用作暂时的栈顶指针</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> sa<span class="token operator">-&gt;</span>sa_restorer<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>signr<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sa<span class="token operator">-&gt;</span>sa_flags<span class="token punctuation">)</span> <span class="token operator">&amp;</span> SA_NOMASK<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>eax<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>ecx<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>edx<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>eflags<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span>old_eip<span class="token punctuation">,</span> tmp_esp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>blocked <span class="token operator">|=</span> sa<span class="token operator">-&gt;</span>sa_mask<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-7-3-其它信息" tabindex="-1"><a class="header-anchor" href="#_8-7-3-其它信息"><span>8.7.3 其它信息</span></a></h3><h4 id="_8-7-3-1-进程信号说明" tabindex="-1"><a class="header-anchor" href="#_8-7-3-1-进程信号说明"><span>8.7.3.1 进程信号说明</span></a></h4><table><thead><tr><th>Index</th><th>Name</th><th>Description</th><th>Default Operation</th></tr></thead><tbody><tr><td>1</td><td>SIGHUP</td><td>当不再有控制终端时产生</td><td>挂断控制终端或进程</td></tr><tr><td>2</td><td>SIGINT</td><td>键盘中断 - <code>^C</code></td><td>终止程序</td></tr><tr><td>3</td><td>SIGQUIT</td><td>键盘退出中断 - <code>^\\</code></td><td>程序被终止，产生 core dump 文件</td></tr><tr><td>4</td><td>SIGILL</td><td>非法指令</td><td>程序被终止，产生 core dump 文件</td></tr><tr><td>5</td><td>SIGTRAP</td><td>调试，跟踪断点</td><td></td></tr><tr><td>6</td><td>SIGABRT</td><td>放弃执行，异常结束</td><td>程序被终止，产生 core dump 文件</td></tr><tr><td>6</td><td>SIGIOT</td><td>同 SIGABRT</td><td>程序被终止，产生 core dump 文件</td></tr><tr><td>7</td><td>SIGUNUSED</td><td>没有使用</td><td></td></tr><tr><td>8</td><td>SIGFPE</td><td>浮点异常</td><td>程序被终止，产生 core dump 文件</td></tr><tr><td>9</td><td>SIGKILL</td><td>终止 - 该信号不能被捕获或者忽略</td><td>程序被终止</td></tr><tr><td>10</td><td>SIGUSR1</td><td>用户定义的信号</td><td>进程被终止</td></tr><tr><td>11</td><td>SIGSEGV</td><td>程序引用无效内存</td><td>程序被终止，产生 core dump 文件</td></tr><tr><td>12</td><td>SIGUSR2</td><td>用于定义的信号</td><td>进程被终止</td></tr><tr><td>13</td><td>SIGPIPE</td><td>程序向一个 socket 写时没有读者</td><td>进程被终止</td></tr><tr><td>14</td><td>SIGALRM</td><td>设定的 alarm 延迟时间到</td><td>进程被终止</td></tr><tr><td>15</td><td>SIGTERM</td><td>要求程序终止，可以被捕获</td><td>进程被终止</td></tr><tr><td>16</td><td>SIGSTKFLT</td><td>协处理器堆栈错误</td><td>进程被终止</td></tr><tr><td>17</td><td>SIGCHLD</td><td>子进程发出，子进程已停止或终止</td><td>忽略</td></tr><tr><td>18</td><td>SIGCONT</td><td>致使被 SIGSTOP 停止的进程恢复运行</td><td>恢复进程执行</td></tr><tr><td>19</td><td>SIGSTOP</td><td>停止进程的运行 - 不可被捕获或忽略</td><td>停止进程运行</td></tr><tr><td>20</td><td>SIGTSTP</td><td>向终端发送停止键序列</td><td>停止进程运行</td></tr><tr><td>21</td><td>SIGTTIN</td><td>后台进程试图从一个不再被控制的终端上读取数据</td><td>停止进程运行</td></tr><tr><td>22</td><td>SIGTTOU</td><td>后台进程试图向一个不再被控制的终端上输出数据</td><td>停止进程运行</td></tr></tbody></table>`,95)]))}const d=n(c,[["render",i],["__file","Chapter 8.7 - signal.c 程序.html.vue"]]),k=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%208%20-%20%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81/Chapter%208.7%20-%20signal.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 8.7 - signal.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.7 signal.c 程序","slug":"_8-7-signal-c-程序","link":"#_8-7-signal-c-程序","children":[{"level":3,"title":"8.7.1 功能描述","slug":"_8-7-1-功能描述","link":"#_8-7-1-功能描述","children":[]},{"level":3,"title":"8.7.1.3 进程挂起","slug":"_8-7-1-3-进程挂起","link":"#_8-7-1-3-进程挂起","children":[]},{"level":3,"title":"8.7.2 代码注释","slug":"_8-7-2-代码注释","link":"#_8-7-2-代码注释","children":[]},{"level":3,"title":"8.7.3 其它信息","slug":"_8-7-3-其它信息","link":"#_8-7-3-其它信息","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 8 - 内核代码/Chapter 8.7 - signal.c 程序.md"}');export{d as comp,k as data};
