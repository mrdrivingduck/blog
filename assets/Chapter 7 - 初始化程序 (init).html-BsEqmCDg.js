import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/7-2-DoNj-d2O.png",c={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-7-初始化程序-init" tabindex="-1"><a class="header-anchor" href="#chapter-7-初始化程序-init"><span>Chapter 7 - 初始化程序 (init)</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 13 21:21</p><p>Ningbo, Zhejiang, China</p><hr><p>包含了内核初始化的所有操作。</p><hr><h2 id="_7-1-main-c-程序" tabindex="-1"><a class="header-anchor" href="#_7-1-main-c-程序"><span>7.1 main.c 程序</span></a></h2><h3 id="_7-1-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_7-1-1-功能描述"><span>7.1.1 功能描述</span></a></h3><p>利用 <code>setup.s</code> 程序取得的机器参数，设置根文件设备号和内存全局变量。系统的内存被划分为：</p><ul><li>内核程序</li><li>高速缓冲 (扣除显存和 BIOS) - 1KB 为一个数据块单位</li><li>虚拟盘</li><li>主内存区 - 4KB 为一个内存页单位</li></ul><p>内核程序可以自由访问高速缓冲，但只能通过内存管理 mm 才能使用主内存区。之后，内核进行各方面的硬件初始化：</p><ul><li>陷阱门 (中断)</li><li>块设备</li><li>字符设备</li><li>tty</li></ul><p>并人工设置第一个任务 task 0。开中断，切换到任务 0 运行。内核通过任务 0 创建几个最初的任务，运行 shell，并开始正常运行。</p><h4 id="_7-1-1-1-内核初始化程序流程" tabindex="-1"><a class="header-anchor" href="#_7-1-1-1-内核初始化程序流程"><span>7.1.1.1 内核初始化程序流程</span></a></h4><p><img src="'+t+`" alt="7-2"></p><p><code>main.c</code> 程序首先确定如何分配和使用物理内存，然后调用内核各部分的初始化函数：</p><ul><li>内存管理</li><li>中断处理</li><li>块设备</li><li>字符设备</li><li>进程管理</li><li>硬盘和软盘硬件</li></ul><p>此后，程序设置堆栈，将自己手工移到任务 0 中：特权级 0 → 3。使用 <code>fork()</code> 创建出进程 1 (init)。之后，进程 0 在系统空闲时被调度执行：idle 进程，仅执行 <code>pause()</code> 系统调用，然后重新调用调度函数。</p><p>进程 1 进行进一步的初始化工作，并在其中调用 <code>init()</code> 函数，主要工作包含：</p><ol><li>安装根文件系统 <ul><li>使用 <code>setup()</code> 系统调用，收集硬盘分区表信息，并安装根文件系统</li><li>如果有虚拟盘，则尝试把根文件系统加载到虚拟盘区中</li></ul></li><li>显示系统信息 <ul><li>打开一个终端设备 tty0，在终端上显示一些系统信息</li></ul></li><li>执行资源配置文件 <ul><li>新建进程 2</li><li>调用 <code>/bin/sh</code> 程序运行 <code>/etc/rc</code> 中的命令</li><li>执行完成后，立即退出，进程 2 结束</li></ul></li><li>执行登录 shell 命令 <ul><li>进程 1 等待上述进程 2 的结束后，进入一个死循环中</li><li>在循环中，进程 1 再度 fork 进程 2，以登录 shell 的方式 (cmd 参数不同) 再次执行 <code>/bin/sh</code></li><li>进程 1 继续等待进程 2 结束，系统正式开始运行</li><li>如果用户在进程 2 中退出，显示当前登录 shell 退出的信息，死循环再次重复 fork shell 的过程</li></ul></li></ol><h4 id="_7-1-1-2-初始用户栈的操作" tabindex="-1"><a class="header-anchor" href="#_7-1-1-2-初始用户栈的操作"><span>7.1.1.2 初始用户栈的操作</span></a></h4><p>由于 <code>fork()</code> 系统调用完全复制了父进程的代码段和数据段。首次使用 <code>fork()</code> 创建 init 进程时，应当确保新进程用户态堆栈中没有进程 0 的多余信息。因此要求进程 0 在创建首个进程 1 之前不使用用户堆栈。即任务 0 不要调用函数。任务 0 中的 <code>fork()</code> 不能以函数形式调用，通过使用 gcc 的内联函数解决 - <code>static inline _syscall0(int, fork)</code>。<code>_syscall0</code> 是 <code>unistd.h</code> 中的内嵌宏，以嵌入汇编的形式调用 <code>INT 0x80</code>。将宏展开后：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> __res<span class="token punctuation">;</span></span>
<span class="line">    __asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token string">&quot;int $0x80&quot;</span><span class="token operator">:</span> <span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>__res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">(</span>__NR_fork<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__res <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> __res<span class="token punctuation">;</span></span>
<span class="line">    errno <span class="token operator">=</span> <span class="token operator">-</span>__res<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内联能够使上述函数体被直接插入到调用 <code>fork()</code> 的代码处，从而执行 <code>fork()</code> 不会引起函数调用。执行 <code>INT</code> 指令时不可避免会使用到堆栈，但是使用的是内核态堆栈，每个任务都有独立的内核态堆栈，不影响用户栈。</p><p>进程 0 和进程 1 实际上使用着内核代码区内相同的代码和数据物理页面，只是执行的代码不在一处，因此也使用着相同的用户堆栈区：</p><ul><li>进程 0 的页表项属性为 <strong>可读写</strong></li><li>进程 1 的页表项属性被设置为 <strong>只读</strong></li></ul><p>进程 1 中的出入栈操作会导致 <strong>页面写保护异常</strong>：内存管理模块会为进程 1 在主内存区中分配页面，并将任务 0 的用户栈中的内容复制到新页上。自此，任务 1 的用户态栈开始有自己独立的内存页面。</p><p>另外，由于内核随机调度进程，可能任务 0 在 <code>fork()</code> 出任务 1 后，随即先运行任务 0。因此，任务 0 随后的 <code>pause()</code> 也必须使用内联函数的形式创建，避免任务 0 在任务 1 之前使用用户堆栈。</p><p>当进程执行过 <code>execve()</code> 后，代码和数据区会位于主内存区中。可使用 Copy on Write 技术来处理进程的创建和执行。</p><h3 id="_7-1-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_7-1-2-代码注释"><span>7.1.2 代码注释</span></a></h3><p>在内核空间中 fork 是没有 Copy on Write 的 (任务 1)。任务 1 再次 fork 并执行 <code>execve()</code> 后，被加载程序已不属于内核空间，可以使用写时复制了。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * linux/init/main.c</span>
<span class="line"> *</span>
<span class="line"> * (C) 1991 Linus Torvalds</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * we need this inline - forking from kernel space will result</span>
<span class="line"> * in NO COPY ON WRITE (!!!), until an execve is executed. This</span>
<span class="line"> * is no problem, but for the stack. This is handled by not letting</span>
<span class="line"> * main() use the stack at all after fork(). Thus, no function</span>
<span class="line"> * calls - which means inline code for fork too, as otherwise we</span>
<span class="line"> * would use the stack upon exit from &#39;fork()&#39;.</span>
<span class="line"> *</span>
<span class="line"> * Actually only pause and fork are needed inline, so that there</span>
<span class="line"> * won&#39;t be any messing with the stack from main(), but we define</span>
<span class="line"> * some others too.</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明需要使用的内联系统调用：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token function">_syscall0</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> fork<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fork()</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token function">_syscall0</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> pause<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pause()，暂停进程执行，直到收到一个信号</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> setup<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅用于初始化</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token function">_syscall0</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> sync<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新文件系统</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在内核引导期间由 <code>setup.s</code> 程序设置的系统参数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 1MB 后的扩展内存大小 (KB)</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXT_MEM_K</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x90002</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">// 选定的控制台屏幕行、列数</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CON_ROWS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x9000e</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CON_COLS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x9000e</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">// 硬盘参数表 32-bit 内容</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DRIVE_INFO</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">drive_info</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x90080</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">// 根文件系统所在设备号</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ORIG_ROOT_DEV</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x901FC</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">// 交换文件所在设备号</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ORIG_SWAP_DEV</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x901FA</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内核时间初始化 - 从 CMOS 中获取实时钟信息：</p><ul><li><code>outb_p</code>、<code>inb_p</code> - 端口输入输出宏 <ul><li>0x70 - 写地址端口号</li><li>0x71 - 读数据端口号</li><li>0x80 | addr - CMOS 内存地址</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CMOS_READ</span><span class="token expression"><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> addr<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BCD_TO_BIN</span><span class="token expression"><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">time_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">tm</span> time<span class="token punctuation">;</span> <span class="token comment">// defined in include/time.h</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// CMOS 访问速度较慢</span></span>
<span class="line">    <span class="token comment">// 以下循环保证 CMOS 误差在 1s 以内</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        time<span class="token punctuation">.</span>tm_sec <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        time<span class="token punctuation">.</span>tm_min <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        time<span class="token punctuation">.</span>tm_hour <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        time<span class="token punctuation">.</span>tm_mday <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        time<span class="token punctuation">.</span>tm_mon <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        time<span class="token punctuation">.</span>tm_year <span class="token operator">=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>tm_sec <span class="token operator">!=</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 秒值发生变化就重新读取</span></span>
<span class="line">    <span class="token function">BCD_TO_BIN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>tm_sec<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">BCD_TO_BIN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>tm_min<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">BCD_TO_BIN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>tm_hour<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">BCD_TO_BIN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>tm_mday<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">BCD_TO_BIN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>tm_mon<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">BCD_TO_BIN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>tm_year<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    time<span class="token punctuation">.</span>tm_mon<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// startup_time 为全局变量</span></span>
<span class="line">    <span class="token comment">// kernel_mktime 定义在 kernel/mktime.c</span></span>
<span class="line">    <span class="token comment">// 计算 1970.1.1 00:00:00 至现在的秒数</span></span>
<span class="line">    startup_time <span class="token operator">=</span> <span class="token function">kernel_mktime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来定义了只有在本程序中才能被访问的静态变量：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">long</span> memory_end<span class="token punctuation">;</span> <span class="token comment">// 机器具有的物理内存容量 (字节)</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">long</span> buffer_memory_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 高速缓冲区末端地址</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">long</span> main_memory_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 主内存区开始位置</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">char</span> term<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 终端设置字符串 (环境参数)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 读取并执行 /etc/rc 时使用的命令行参数和环境参数</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv_rc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span> envp_rc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;HOME=/&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 运行登录 shell 时所使用的命令行参数和环境参数</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;-/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;HOME=/&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 硬盘参数表信息</span></span>
<span class="line"><span class="token keyword">static</span> drive_info <span class="token punctuation">{</span> <span class="token keyword">char</span> dummy<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> drive_info<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入主函数 (此时中断仍被关闭)：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 保存根文件系统设备号、交换文件设备号</span></span>
<span class="line">    <span class="token comment">// 获取并设置 TERM，作为 shell 的环境变量</span></span>
<span class="line">    <span class="token comment">// 复制硬盘参数表</span></span>
<span class="line">    ROOT_DEV <span class="token operator">=</span> ORIG_ROOT_DEV<span class="token punctuation">;</span> <span class="token comment">// ROOT_DEV defined in fs/super.c</span></span>
<span class="line">    SWAP_DEV <span class="token operator">=</span> ORIG_SWAP_DEV<span class="token punctuation">;</span> <span class="token comment">// SWAP_DEV defined in mm/swap.c</span></span>
<span class="line">    <span class="token function">sprintf</span><span class="token punctuation">(</span>term<span class="token punctuation">,</span> <span class="token string">&quot;TERM=con%dx%d&quot;</span><span class="token punctuation">,</span> CON_COLS<span class="token punctuation">,</span> CON_ROWS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制台行列数</span></span>
<span class="line">    envp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> term<span class="token punctuation">;</span></span>
<span class="line">    envp_rc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> term<span class="token punctuation">;</span></span>
<span class="line">    drive_info <span class="token operator">=</span> DRIVE_INFO<span class="token punctuation">;</span> <span class="token comment">// 硬盘参数表 32-bit 内容</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 根据机器物理内存容量</span></span>
<span class="line">    <span class="token comment">// 设置高速缓冲区和主内存区的位置和范围</span></span>
<span class="line">    memory_end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>EXT_MEM_K <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1MB + 扩展 (KB) × 1024</span></span>
<span class="line">    memory_end <span class="token operator">&amp;=</span> <span class="token number">0xfffff000</span><span class="token punctuation">;</span> <span class="token comment">// 忽略不到 4KB(一页) 的内存</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>memory_end <span class="token operator">&gt;</span> <span class="token number">16</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line">        memory_end <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 内存量超过 16MB，则按 16MB 计</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>memory_end <span class="token operator">&gt;</span> <span class="token number">12</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line">        buffer_memory_end <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 内存 &gt; 12MB，缓冲区 = 末端 4MB</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memory_end <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line">        buffer_memory_end <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 12MB ≥ 内存 &gt; 6MB，缓冲区 = 末端 2MB</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        buffer_memory_end <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 否则缓冲区为末端 1MB</span></span>
<span class="line">    main_memory_start <span class="token operator">=</span> buffer_memory_end<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//如果 Makefile 中定义了虚拟盘，则初始化虚拟盘，主内存区减小</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">RAMDIST</span></span></span>
<span class="line">    main_memory_start <span class="token operator">+=</span> <span class="token function">rd_init</span><span class="token punctuation">(</span>main_memory_start<span class="token punctuation">,</span> RAMDISK<span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 内核进行所有方面的初始化操作</span></span>
<span class="line">    <span class="token comment">// 函数的定义分布在各个部分</span></span>
<span class="line">    <span class="token function">mem_init</span><span class="token punctuation">(</span>main_memory_start<span class="token punctuation">,</span> memory_end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主内存区初始化 (mm/memory.c)</span></span>
<span class="line">    <span class="token function">trap_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 陷阱门(硬件中断向量)初始化 (kernel/traps.c)</span></span>
<span class="line">    <span class="token function">blk_dev_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 块设备初始化 (blk_drv/ll_rw_blk.c)</span></span>
<span class="line">    <span class="token function">chr_dev_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符设备初始化 (chr_drv/tty_io.c)</span></span>
<span class="line">    <span class="token function">tty_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tty 初始化 (chr_drv/tty_io.c)</span></span>
<span class="line">    <span class="token function">time_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置开机启动时间，函数定义如上</span></span>
<span class="line">    <span class="token function">sched_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调度程序初始化 (kernel/sched.c)</span></span>
<span class="line">    <span class="token function">buffer_init</span><span class="token punctuation">(</span>buffer_memory_end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲管理初始化 (fs/buffer.c)</span></span>
<span class="line">    <span class="token function">hd_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 硬盘初始化 (blk_drv/hd.c)</span></span>
<span class="line">    <span class="token function">floppy_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 软驱初始化 (blk_drv/floppy.c)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开中断</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在堆栈中设置参数，利用 ret 指令启动任务 0 运行在用户态</span></span>
<span class="line">    <span class="token function">move_to_user_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 建立任务 1</span></span>
<span class="line">        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在任务 1 中运行</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 以下由任务 0 运行</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;int $0x80::&quot;</span><span class="token function">a</span><span class="token punctuation">(</span>__NR_pause<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;ax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行系统调用 pause()</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进程 1 开始运行的 <code>init()</code> 函数如下：</p><ul><li>对第一个将要执行的 shell 的环境进行初始化</li><li>以登录 shell 的方式重新加载 shell</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> pid<span class="token punctuation">,</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 系统调用</span></span>
<span class="line">    <span class="token comment">// 读取硬盘参数和分区表，加载虚拟盘，安装根文件系统设备</span></span>
<span class="line">    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>drive_info<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 以读写访问方式打开设备 &quot;dev/tty0&quot;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;dev/tty1&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开 stdin(0)</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制句柄，stdout(1)</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制句柄，stderr(2)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 打印缓冲区块数(1024B)和总字节数</span></span>
<span class="line">    <span class="token comment">// 打印主内存区空闲内存字节数</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d buffers = %d bytes buffer space\\n\\r&quot;</span><span class="token punctuation">,</span> NR_BUFFERS<span class="token punctuation">,</span> NR_BUFFERS <span class="token operator">*</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Free mem: %d bytes\\n\\r&quot;</span><span class="token punctuation">,</span> memory_end <span class="token operator">-</span> main_memory_start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建子进程 2，运行 /etc/rc 中的命令</span></span>
<span class="line">    <span class="token comment">// 运行完毕后立刻退出，进程 1 等待进程 2 退出</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 进程 2</span></span>
<span class="line">        <span class="token comment">// 关闭句柄 0 并立刻打开 /etc/rc</span></span>
<span class="line">        <span class="token comment">// 相当于将 stdin 重定向到 /etc/rc</span></span>
<span class="line">        <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/etc/rc&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件打开失败</span></span>
<span class="line">        <span class="token comment">// shell 从 stdin 中读取 /etc/rc 中的命令并执行</span></span>
<span class="line">        <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> argv_rc<span class="token punctuation">,</span> envp_rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// execve 执行失败</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 进程 1 等待进程 2 结束</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>pid <span class="token operator">!=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 返回值应当是子进程的进程号</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 死循环</span></span>
<span class="line">    <span class="token comment">// 再次创建子进程，用于登录 shell</span></span>
<span class="line">    <span class="token comment">// 死循环保证永远有一个 shell 正在处于交互状态</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Fork failed in init \\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// pid == 0，新的子进程</span></span>
<span class="line">            <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 归还遗留句柄</span></span>
<span class="line">            <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/tty1&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// stdin</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// stdout</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// stderr</span></span>
<span class="line">            <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子进程返回码</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 等待子进程结束</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\rchild %d died with code %04x\\n\\r&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步操作，刷新缓冲区</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sys_exit 系统调用，不是普通函数库中的 exit()</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-1-3-其它信息" tabindex="-1"><a class="header-anchor" href="#_7-1-3-其它信息"><span>7.1.3 其它信息</span></a></h3><h4 id="_7-1-3-1-cmos-信息" tabindex="-1"><a class="header-anchor" href="#_7-1-3-1-cmos-信息"><span>7.1.3.1 CMOS 信息</span></a></h4><p>CMOS 内存是由电池供电的 64/128 字节内存块。CMOS 的地址空间位于基本地址空间之外，需要通过 IN/OUT 指令访问。</p><h4 id="_7-1-3-2-调用-fork-创建新进程" tabindex="-1"><a class="header-anchor" href="#_7-1-3-2-调用-fork-创建新进程"><span>7.1.3.2 调用 fork() 创建新进程</span></a></h4><p>fork() 系统调用复制当前进程，在进程表中创建一个与原进程几乎完全一样的新表项，执行同样的代码，但新进程拥有自己的数据空间和环境参数。新进程主要使用 <code>exec()</code> 函数族去执行其它不同的程序。在 fork 调用返回位置处：</p><ul><li>父进程恢复执行，fork 的返回值时子进程的 pid</li><li>子进程刚开始执行，fork 的返回值是 0</li></ul><p>程序执行完成后，可以调用 <code>exit()</code> 来退出执行，终止并释放进程占用的内核资源。父进程使用 <code>wait()</code> 查看或等待子进程退出，并获取被终止进程的退出状态信息。</p><h4 id="_7-1-3-3-关于会话期-session-的概念" tabindex="-1"><a class="header-anchor" href="#_7-1-3-3-关于会话期-session-的概念"><span>7.1.3.3 关于会话期 (session) 的概念</span></a></h4><p>一个进程可以通过 <code>fork()</code> 创建一个或多个子进程，这些进程可以构成进程组。每个进程组都有一个唯一的进程组标识号 gid，每个进程组有一个称为组长的进程，组长进程的 pid == gid。进程可以通过调用 <code>setpgid()</code> 来参加一个现有的进程组或创建一个新的进程组，通常用于终止进程组中的所有进程。</p><p>会话期 (Session) 是一个或多个进程组的集合。用户登录后执行的所有程序都属于一个会话期，登录 shell 是会话期首进程，使用的终端就是会话期的控制终端。会话期首进程也被称为控制进程退出登录时，所有属于该会话期的进程都将被终止。<code>setsid()</code> 用于建立一个新的会话期，通常由环境初始化程序调用。一个会话期中的进程组被分为：</p><ul><li>一个前台进程组 - 会话期中拥有控制终端的进程组</li><li>一个或几个后台进程组 - 其它进程组</li></ul><p>控制终端对应于 <code>/dev/tty</code> 设备文件。要访问控制终端，可直接对 <code>/dev/tty</code> 文件进行读写操作。</p><hr><h2 id="_7-2-环境初始化工作" tabindex="-1"><a class="header-anchor" href="#_7-2-环境初始化工作"><span>7.2 环境初始化工作</span></a></h2><p>实际可用的系统：</p><ul><li>程序根据 <code>/etc</code> 中的配置信息，对系统中支持的每个终端设备创建子进程</li><li>在子进程中运行终端初始化程序 agetty，该程序在终端上显示 <code>login:</code></li><li>用户输入用户名后，getty 被替换为 login 程序</li><li>login 程序验证用户输入的口令后，再被替换为 shell 程序，进入工作界面</li></ul><p>init 进程根据 <code>/etc/rc</code> 和 <code>/etc/inittab</code>，为每个允许登录的终端设备创建子进程：</p><ul><li>每个子进程中运行 agetty 程序，init 进程调用 <code>wait()</code>，等待子进程结束</li><li>根据 <code>wait()</code> 返回的 pid 得知哪个终端对应的子进程结束</li><li>为相应终端设备再次创建一个新的子进程，并重新执行 getty 程序</li><li>每个被允许的终端设备始终有一个对应的进程为其等待处理</li></ul><p>getty 程序打开并初始化一个 tty 窗口，显示提示信息，等待用户键入用户名。若 <code>/etc/issue</code> 文本存在，则会先显示其中的文本信息。login 程序根据用户输入的用户名：</p><ul><li>从口令文件 passwd 中取得对应用户登录项</li><li>调用 <code>getpass()</code> 显示输入密码的提示信息</li><li>读取用户键入的密码，使用加密算法对密码进行加密，与口令文件用户项中的 <code>pw_passwd</code> 字段比较</li><li>若失败几次，则 login 程序以错误码 1 退出，登录失败</li><li>若登录成功，login 会把当前工作目录修改成口令文件中指定的工作目录</li><li>将对终端设备的访问权限修改为用户可读写和组写</li><li>设置进程的 gid</li><li>初始化环境变量信息 <ul><li>起始目录 HOME</li><li>shell 程序 SHELL</li><li>用户名 USER 和 LOGNAME</li><li>系统执行程序默认路径序列 PATH</li></ul></li><li>显示 <code>/etc/motd</code> 文件中的文本信息</li><li>改变登录用户的 uid，执行口令文件中该用户项指定的 shell 程序</li></ul><p>执行 shell 时，如果 <code>argv[0]</code> 的第一个字符是 <code>-</code>，表示该 shell 是作为一个登录 shell 被执行，因此会执行某些与登录过程相应的操作。首先从 <code>/etc/profile</code> 以及 <code>.profile</code> 文件中读取命令并执行，将环境变量 <code>ENV</code> 中指定的文件读取并执行。因此应当把每次登录都要执行的命令放在 <code>.profile</code> 中，把每次运行 shell 都要执行的命令放在 <code>ENV</code> 指定的文件中。</p>`,68)]))}const u=s(c,[["render",o],["__file","Chapter 7 - 初始化程序 (init).html.vue"]]),k=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%207%20-%20%E5%88%9D%E5%A7%8B%E5%8C%96%E7%A8%8B%E5%BA%8F%20(init)/Chapter%207%20-%20%E5%88%9D%E5%A7%8B%E5%8C%96%E7%A8%8B%E5%BA%8F%20(init).html","title":"Chapter 7 - 初始化程序 (init)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"7.1 main.c 程序","slug":"_7-1-main-c-程序","link":"#_7-1-main-c-程序","children":[{"level":3,"title":"7.1.1 功能描述","slug":"_7-1-1-功能描述","link":"#_7-1-1-功能描述","children":[]},{"level":3,"title":"7.1.2 代码注释","slug":"_7-1-2-代码注释","link":"#_7-1-2-代码注释","children":[]},{"level":3,"title":"7.1.3 其它信息","slug":"_7-1-3-其它信息","link":"#_7-1-3-其它信息","children":[]}]},{"level":2,"title":"7.2 环境初始化工作","slug":"_7-2-环境初始化工作","link":"#_7-2-环境初始化工作","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 7 - 初始化程序 (init)/Chapter 7 - 初始化程序 (init).md"}');export{u as comp,k as data};
