import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-5-7-hashtable" tabindex="-1"><a class="header-anchor" href="#chapter-5-7-hashtable"><span>Chapter 5.7 - hashtable</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 06 23:24</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_5-7-1-hashtable-概述" tabindex="-1"><a class="header-anchor" href="#_5-7-1-hashtable-概述"><span>5.7.1 hashtable 概述</span></a></h2><p>二叉搜索树具有对数平均时间的表现，前提是 <strong>输入数据具有足够的随机性</strong>。而哈希表在插入、删除、搜寻等操作上都具有常数平均时间的表现，并且以统计为基础，不需要依赖输入元素的随机性。</p><p>使用 hash 函数带来的问题是有不同的元素被映射到相同的位置上，即所谓 <strong>碰撞</strong> 问题。解决碰撞的方法：</p><ul><li>线性探测 (linear probing)：负载因子小于 1，按照计算所得的 hash 值的位置逐一向下寻找 (平均插入成本的增长幅度远高于负载系数的增长幅度)</li><li>二次探测 (quadratic probing)：负载因子小于 1，按照二次方程作为下一个位置的偏移逐一向下寻找 (两个元素经 hash 函数计算出的位置相同，那么之后插入时探测的位置也相同，导致浪费)</li><li>链地址 (separate chaining)：负载因子大于 1，在每个 hash table 元素上维护一个链表</li></ul><blockquote><p>如果底层桶个数的大小为 <strong>质数</strong>，并且保持负载因子在 <strong>0.5</strong> 以下，那么可以确定每插入一个新元素所需探测次数不多于 2 (为什么？)。当桶的个数需要增长时，需要找到比当前桶个数大两倍左右的质数。</p></blockquote><h2 id="_5-7-2-hashtable-的桶-bucket-与结点-nodes" tabindex="-1"><a class="header-anchor" href="#_5-7-2-hashtable-的桶-bucket-与结点-nodes"><span>5.7.2 hashtable 的桶 (bucket) 与结点 (nodes)</span></a></h2><p>桶是 hash table 中的单元，每个桶中包含了若干结点。桶结点的定义如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Hashtable_node</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Hashtable_node<span class="token operator">*</span> _M_next<span class="token punctuation">;</span></span>
<span class="line">  _Val _M_val<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>桶维护的链表并没有使用 STL 的 list 或 slist，而是自行维护。所有的桶结点被维护在一个 vector 内，以便动态扩充。</p><h2 id="_5-7-3-hashtable-的迭代器" tabindex="-1"><a class="header-anchor" href="#_5-7-3-hashtable-的迭代器"><span>5.7.3 hashtable 的迭代器</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HashFcn</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_ExtractKey</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_EqualKey</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Hashtable_iterator</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> hashtable<span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HashFcn<span class="token punctuation">,</span>_ExtractKey<span class="token punctuation">,</span>_EqualKey<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span></span>
<span class="line">          _Hashtable<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Hashtable_iterator<span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span> _Key<span class="token punctuation">,</span> _HashFcn<span class="token punctuation">,</span></span>
<span class="line">                              _ExtractKey<span class="token punctuation">,</span> _EqualKey<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span></span>
<span class="line">          iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Hashtable_const_iterator<span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span> _Key<span class="token punctuation">,</span> _HashFcn<span class="token punctuation">,</span></span>
<span class="line">                                    _ExtractKey<span class="token punctuation">,</span> _EqualKey<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span></span>
<span class="line">          const_iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Hashtable_node<span class="token operator">&lt;</span>_Val<span class="token operator">&gt;</span> _Node<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> forward_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 单向迭代器</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Val value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> size_t size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Val<span class="token operator">&amp;</span> reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Val<span class="token operator">*</span> pointer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _Node<span class="token operator">*</span> _M_cur<span class="token punctuation">;</span>     <span class="token comment">// 指向结点</span></span>
<span class="line">  _Hashtable<span class="token operator">*</span> _M_ht<span class="token punctuation">;</span> <span class="token comment">// 指向 hashtable</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_Hashtable_iterator</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __n<span class="token punctuation">,</span> _Hashtable<span class="token operator">*</span> __tab<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_cur</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__tab<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_Hashtable_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_cur<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SGI_STL_NO_ARROW_OPERATOR</span></span></span>
<span class="line">  pointer <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></span>
<span class="line">  iterator<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  iterator <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> iterator<span class="token operator">&amp;</span> __it<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_cur <span class="token operator">==</span> __it<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> iterator<span class="token operator">&amp;</span> __it<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_cur <span class="token operator">!=</span> __it<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hashtable 的迭代器必须维护与 hashtable 的联系。迭代器的前进操作意味着利用结点的 <code>next</code> 指针访问桶内链表的下一个元素；如果当前结点刚好是链表的尾端，那么就应当跳转到下一个 bucket 上。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HF</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ExK</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_EqK</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_All</span><span class="token operator">&gt;</span></span>
<span class="line">_Hashtable_iterator<span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_ExK<span class="token punctuation">,</span>_EqK<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span><span class="token operator">&amp;</span></span>
<span class="line">_Hashtable_iterator<span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_ExK<span class="token punctuation">,</span>_EqK<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> _Node<span class="token operator">*</span> __old <span class="token operator">=</span> _M_cur<span class="token punctuation">;</span> <span class="token comment">// 当前结点</span></span>
<span class="line">  _M_cur <span class="token operator">=</span> _M_cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span>    <span class="token comment">// 当前结点的下一个结点</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_M_cur<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 下一个结点已经是链表尾</span></span>
<span class="line">    size_type __bucket <span class="token operator">=</span> _M_ht<span class="token operator">-&gt;</span><span class="token function">_M_bkt_num</span><span class="token punctuation">(</span>__old<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当前结点所在的桶</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>_M_cur <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>__bucket <span class="token operator">&lt;</span> _M_ht<span class="token operator">-&gt;</span>_M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 桶为空，寻找下一个桶</span></span>
<span class="line">      _M_cur <span class="token operator">=</span> _M_ht<span class="token operator">-&gt;</span>_M_buckets<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment">// 下一个非空桶的第一个元素</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HF</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ExK</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_EqK</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_All</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _Hashtable_iterator<span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_ExK<span class="token punctuation">,</span>_EqK<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span></span>
<span class="line">_Hashtable_iterator<span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_ExK<span class="token punctuation">,</span>_EqK<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  iterator __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 暂存返回结点</span></span>
<span class="line">  <span class="token operator">++</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token comment">// 自增</span></span>
<span class="line">  <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>           <span class="token comment">// 返回自增前的结点</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-7-4-hashtable-的数据结构" tabindex="-1"><a class="header-anchor" href="#_5-7-4-hashtable-的数据结构"><span>5.7.4 hashtable 的数据结构</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HashFcn</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_ExtractKey</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_EqualKey</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">hashtable</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Key key_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Val value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _HashFcn hasher<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _EqualKey key_equal<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> size_t            size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t         difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> value_type<span class="token operator">*</span>       pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> value_type<span class="token operator">&amp;</span>       reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  hasher <span class="token function">hash_funct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_hash<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  key_equal <span class="token function">key_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_equals<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Hashtable_node<span class="token operator">&lt;</span>_Val<span class="token operator">&gt;</span> _Node<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Alloc allocator_type<span class="token punctuation">;</span></span>
<span class="line">  allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_Node<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _M_node_allocator_type<span class="token punctuation">;</span> <span class="token comment">// 以结点大小为单位分配结点</span></span>
<span class="line">  _Node<span class="token operator">*</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_node_allocator_type<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_node_allocator_type<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  hasher                _M_hash<span class="token punctuation">;</span>    <span class="token comment">// 计算 hash 的函数 (仿函数)</span></span>
<span class="line">  key_equal             _M_equals<span class="token punctuation">;</span>  <span class="token comment">// 比较 key 的函数 (仿函数)</span></span>
<span class="line">  _ExtractKey           _M_get_key<span class="token punctuation">;</span> <span class="token comment">// 从结点中得到 key 的函数 (仿函数)</span></span>
<span class="line">  vector<span class="token operator">&lt;</span>_Node<span class="token operator">*</span><span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span> _M_buckets<span class="token punctuation">;</span> <span class="token comment">// 桶数组</span></span>
<span class="line">  size_type             _M_num_elements<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链地址法并不需要桶数组的大小为质数，但 SGI STL 仍然以质数来设置桶数组的大小。STL 准备了 28 个接近两倍的质数，并提供一个函数，用于查找最接近并大于等于指定值的那个质数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Note: assumes long is at least 32 bits.</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token punctuation">{</span> __stl_num_primes <span class="token operator">=</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> __stl_prime_list<span class="token punctuation">[</span>__stl_num_primes<span class="token punctuation">]</span> <span class="token operator">=</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">53ul</span><span class="token punctuation">,</span>         <span class="token number">97ul</span><span class="token punctuation">,</span>         <span class="token number">193ul</span><span class="token punctuation">,</span>       <span class="token number">389ul</span><span class="token punctuation">,</span>       <span class="token number">769ul</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1543ul</span><span class="token punctuation">,</span>       <span class="token number">3079ul</span><span class="token punctuation">,</span>       <span class="token number">6151ul</span><span class="token punctuation">,</span>      <span class="token number">12289ul</span><span class="token punctuation">,</span>     <span class="token number">24593ul</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">49157ul</span><span class="token punctuation">,</span>      <span class="token number">98317ul</span><span class="token punctuation">,</span>      <span class="token number">196613ul</span><span class="token punctuation">,</span>    <span class="token number">393241ul</span><span class="token punctuation">,</span>    <span class="token number">786433ul</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1572869ul</span><span class="token punctuation">,</span>    <span class="token number">3145739ul</span><span class="token punctuation">,</span>    <span class="token number">6291469ul</span><span class="token punctuation">,</span>   <span class="token number">12582917ul</span><span class="token punctuation">,</span>  <span class="token number">25165843ul</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">50331653ul</span><span class="token punctuation">,</span>   <span class="token number">100663319ul</span><span class="token punctuation">,</span>  <span class="token number">201326611ul</span><span class="token punctuation">,</span> <span class="token number">402653189ul</span><span class="token punctuation">,</span> <span class="token number">805306457ul</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1610612741ul</span><span class="token punctuation">,</span> <span class="token number">3221225473ul</span><span class="token punctuation">,</span> <span class="token number">4294967291ul</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">__stl_next_prime</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> __n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span> __first <span class="token operator">=</span> __stl_prime_list<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span> __last <span class="token operator">=</span> __stl_prime_list <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>__stl_num_primes<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span> pos <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 二分查找</span></span>
<span class="line">  <span class="token keyword">return</span> pos <span class="token operator">==</span> __last <span class="token operator">?</span> <span class="token operator">*</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">*</span>pos<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与桶数组尺寸相关的 API：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">size_type <span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">size_type <span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> __stl_prime_list<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>__stl_num_primes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-7-5-hashtable-的构造与内存管理" tabindex="-1"><a class="header-anchor" href="#_5-7-5-hashtable-的构造与内存管理"><span>5.7.5 hashtable 的构造与内存管理</span></a></h2><p>通过分配器获得一个结点的空间，构造该结点并返回：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_Node<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _M_node_allocator_type<span class="token punctuation">;</span></span>
<span class="line">_Node<span class="token operator">*</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_node_allocator_type<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_node_allocator_type<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">_Node<span class="token operator">*</span> <span class="token function">_M_new_node</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _Node<span class="token operator">*</span> __n <span class="token operator">=</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __n<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__n<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">,</span> __obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> __n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_delete_node</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__n<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化桶数组，默认将桶内的结点指针全部设为空：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">_M_initialize_buckets</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> size_type __n_buckets <span class="token operator">=</span> <span class="token function">_M_next_size</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以大于等于 n 的第一个质数作为桶容量</span></span>
<span class="line">    _M_buckets<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>__n_buckets<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 保留桶容量大小的空间</span></span>
<span class="line">    _M_buckets<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>_M_buckets<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __n_buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入值为 0 的元素 (空指针)</span></span>
<span class="line">    _M_num_elements <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 桶内元素为 0 个</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">hashtable</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">const</span> _HashFcn<span class="token operator">&amp;</span>    __hf<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">const</span> _EqualKey<span class="token operator">&amp;</span>   __eql<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">const</span> _ExtractKey<span class="token operator">&amp;</span> __ext<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">__HASH_ALLOC_INIT</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">_M_hash</span><span class="token punctuation">(</span>__hf<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">_M_equals</span><span class="token punctuation">(</span>__eql<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">_M_get_key</span><span class="token punctuation">(</span>__ext<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">_M_buckets</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">_M_num_elements</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_M_initialize_buckets</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不允许重复的元素插入操作过程：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">insert_unique</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">resize</span><span class="token punctuation">(</span>_M_num_elements <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 元素个数增加，判断是否需要 rehash</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">insert_unique_noresize</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不 rehash，直接插入元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HF</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ex</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Eq</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_All</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">hashtable</span><span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_Ex<span class="token punctuation">,</span>_Eq<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>size_type __num_elements_hint<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> size_type __old_n <span class="token operator">=</span> _M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 桶个数</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__num_elements_hint <span class="token operator">&gt;</span> __old_n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 元素数量超过了桶个数</span></span>
<span class="line">    <span class="token keyword">const</span> size_type __n <span class="token operator">=</span> <span class="token function">_M_next_size</span><span class="token punctuation">(</span>__num_elements_hint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 寻找扩容后的桶个数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">&gt;</span> __old_n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      vector<span class="token operator">&lt;</span>_Node<span class="token operator">*</span><span class="token punctuation">,</span> _All<span class="token operator">&gt;</span> <span class="token function">__tmp</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                 _M_buckets<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配新的桶空间</span></span>
<span class="line">      __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_type __bucket <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> __bucket <span class="token operator">&lt;</span> __old_n<span class="token punctuation">;</span> <span class="token operator">++</span>__bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          _Node<span class="token operator">*</span> __first <span class="token operator">=</span> _M_buckets<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 旧桶内的第一个元素</span></span>
<span class="line">          <span class="token keyword">while</span> <span class="token punctuation">(</span>__first<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            size_type __new_bucket <span class="token operator">=</span> <span class="token function">_M_bkt_num</span><span class="token punctuation">(</span>__first<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算新的 hash 值</span></span>
<span class="line">            _M_buckets<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span> <span class="token operator">=</span> __first<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span> <span class="token comment">// 将 first 从旧桶链表中取出</span></span>
<span class="line">            __first<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __tmp<span class="token punctuation">[</span>__new_bucket<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// first 进入新桶链表的第一个位置</span></span>
<span class="line">            __tmp<span class="token punctuation">[</span>__new_bucket<span class="token punctuation">]</span> <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">            __first <span class="token operator">=</span> _M_buckets<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">// 旧桶链表的 (新) 头元素</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        _M_buckets<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将临时的新桶与旧桶交换，旧桶将会随着函数退出而被析构</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span>         <span class="token directive keyword">ifdef</span> <span class="token expression">__STL_USE_EXCEPTIONS</span></span></span>
<span class="line">      <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 异常发生，回滚</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_type __bucket <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> __bucket <span class="token operator">&lt;</span> __tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>__bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">while</span> <span class="token punctuation">(</span>__tmp<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            _Node<span class="token operator">*</span> __next <span class="token operator">=</span> __tmp<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span><span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span> <span class="token comment">// 指向临时桶的第二个结点</span></span>
<span class="line">            <span class="token function">_M_delete_node</span><span class="token punctuation">(</span>__tmp<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 销毁临时桶的第一个结点</span></span>
<span class="line">            __tmp<span class="token punctuation">[</span>__bucket<span class="token punctuation">]</span> <span class="token operator">=</span> __next<span class="token punctuation">;</span>                 <span class="token comment">// 临时桶的原第二个结点成为第一个结点</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">throw</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span>         <span class="token directive keyword">endif</span> <span class="token comment">/* __STL_USE_EXCEPTIONS */</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HF</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ex</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Eq</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_All</span><span class="token operator">&gt;</span></span>
<span class="line">pair<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">hashtable</span><span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_Ex<span class="token punctuation">,</span>_Eq<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token class-name">hashtable</span><span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_Ex<span class="token punctuation">,</span>_Eq<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token double-colon punctuation">::</span><span class="token function">insert_unique_noresize</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> size_type __n <span class="token operator">=</span> <span class="token function">_M_bkt_num</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算出元素的 hash</span></span>
<span class="line">  _Node<span class="token operator">*</span> __first <span class="token operator">=</span> _M_buckets<span class="token punctuation">[</span>__n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 元素 hash 对应的桶的第一个元素</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span> __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span> __cur<span class="token punctuation">;</span> __cur <span class="token operator">=</span> __cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span> <span class="token comment">// 遍历桶链表</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_M_equals</span><span class="token punctuation">(</span><span class="token function">_M_get_key</span><span class="token punctuation">(</span>__cur<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_get_key</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 发现相等元素</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">iterator</span><span class="token punctuation">(</span>__cur<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入失败</span></span>
<span class="line"></span>
<span class="line">  _Node<span class="token operator">*</span> __tmp <span class="token operator">=</span> <span class="token function">_M_new_node</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造新结点</span></span>
<span class="line">  __tmp<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __first<span class="token punctuation">;</span>          <span class="token comment">// 将新结点作为桶链表的第一个结点</span></span>
<span class="line">  _M_buckets<span class="token punctuation">[</span>__n<span class="token punctuation">]</span> <span class="token operator">=</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">++</span>_M_num_elements<span class="token punctuation">;</span>                 <span class="token comment">// 元素个数++</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">iterator</span><span class="token punctuation">(</span>__tmp<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入成功</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>允许重复的元素插入操作过程：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">insert_equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span> <span class="token comment">// 由于操作肯定成功，因此不返回 pair</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">resize</span><span class="token punctuation">(</span>_M_num_elements <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同上</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">insert_equal_noresize</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HF</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ex</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Eq</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_All</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">typename</span> <span class="token class-name">hashtable</span><span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_Ex<span class="token punctuation">,</span>_Eq<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator</span>
<span class="line"><span class="token class-name">hashtable</span><span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_Ex<span class="token punctuation">,</span>_Eq<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token double-colon punctuation">::</span><span class="token function">insert_equal_noresize</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> size_type __n <span class="token operator">=</span> <span class="token function">_M_bkt_num</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算元素 hash</span></span>
<span class="line">  _Node<span class="token operator">*</span> __first <span class="token operator">=</span> _M_buckets<span class="token punctuation">[</span>__n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 元素所在的桶链表</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span> __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span> __cur<span class="token punctuation">;</span> __cur <span class="token operator">=</span> __cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span> <span class="token comment">// 遍历桶链表</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_M_equals</span><span class="token punctuation">(</span><span class="token function">_M_get_key</span><span class="token punctuation">(</span>__cur<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_get_key</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果相等</span></span>
<span class="line">      _Node<span class="token operator">*</span> __tmp <span class="token operator">=</span> <span class="token function">_M_new_node</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配新结点</span></span>
<span class="line">      __tmp<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span>   <span class="token comment">// 在当前位置立刻插入</span></span>
<span class="line">      __cur<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>_M_num_elements<span class="token punctuation">;</span>                 <span class="token comment">// 元素个数++</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span>__tmp<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回指向新结点的迭代器</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 没有找到任何相等的结点</span></span>
<span class="line">  _Node<span class="token operator">*</span> __tmp <span class="token operator">=</span> <span class="token function">_M_new_node</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配新结点</span></span>
<span class="line">  __tmp<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __first<span class="token punctuation">;</span>          <span class="token comment">// 新结点插入在桶链表的头部</span></span>
<span class="line">  _M_buckets<span class="token punctuation">[</span>__n<span class="token punctuation">]</span> <span class="token operator">=</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">++</span>_M_num_elements<span class="token punctuation">;</span>                 <span class="token comment">// 元素个数++</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span>__tmp<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回指向新结点的迭代器</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断元素所属的桶。由 hash 函数完成。如果不提供用于取模的数量，则使用桶的容量：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">size_type <span class="token function">_M_bkt_num_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_M_bkt_num_key</span><span class="token punctuation">(</span>__key<span class="token punctuation">,</span> _M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">size_type <span class="token function">_M_bkt_num</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_M_bkt_num_key</span><span class="token punctuation">(</span><span class="token function">_M_get_key</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">size_type <span class="token function">_M_bkt_num_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_M_hash</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span> <span class="token operator">%</span> __n<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">size_type <span class="token function">_M_bkt_num</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_M_bkt_num_key</span><span class="token punctuation">(</span><span class="token function">_M_get_key</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整体删除。需要注意内存释放的问题：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HF</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ex</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Eq</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_All</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">hashtable</span><span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_Ex<span class="token punctuation">,</span>_Eq<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>size_type __i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> __i <span class="token operator">&lt;</span> _M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历每一个桶</span></span>
<span class="line">    _Node<span class="token operator">*</span> __cur <span class="token operator">=</span> _M_buckets<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__cur <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      _Node<span class="token operator">*</span> __next <span class="token operator">=</span> __cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span> <span class="token comment">// 当前结点之后的结点</span></span>
<span class="line">      <span class="token function">_M_delete_node</span><span class="token punctuation">(</span>__cur<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 删除当前结点</span></span>
<span class="line">      __cur <span class="token operator">=</span> __next<span class="token punctuation">;</span>                 <span class="token comment">// 继续之后的结点</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    _M_buckets<span class="token punctuation">[</span>__i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 桶指针置空</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _M_num_elements <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 元素个数清零</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// 没有释放桶对应的 vector 空间</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从另一个 hashtable 复制：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HF</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ex</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Eq</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_All</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">hashtable</span><span class="token operator">&lt;</span>_Val<span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HF<span class="token punctuation">,</span>_Ex<span class="token punctuation">,</span>_Eq<span class="token punctuation">,</span>_All<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token double-colon punctuation">::</span><span class="token function">_M_copy_from</span><span class="token punctuation">(</span><span class="token keyword">const</span> hashtable<span class="token operator">&amp;</span> __ht<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _M_buckets<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先将当前桶中的元素清空 (容量保留)</span></span>
<span class="line">  _M_buckets<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>__ht<span class="token punctuation">.</span>_M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将当前桶容量扩容至与复制目标一致</span></span>
<span class="line">  _M_buckets<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>_M_buckets<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __ht<span class="token punctuation">.</span>_M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将桶容量补齐 (空指针)</span></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_type __i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> __i <span class="token operator">&lt;</span> __ht<span class="token punctuation">.</span>_M_buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 复制目标中的每一个桶</span></span>
<span class="line">      <span class="token keyword">const</span> _Node<span class="token operator">*</span> __cur <span class="token operator">=</span> __ht<span class="token punctuation">.</span>_M_buckets<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 桶内链表的第一个元素</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>__cur<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 桶不为空</span></span>
<span class="line">        _Node<span class="token operator">*</span> __copy <span class="token operator">=</span> <span class="token function">_M_new_node</span><span class="token punctuation">(</span>__cur<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制第一个结点</span></span>
<span class="line">        _M_buckets<span class="token punctuation">[</span>__i<span class="token punctuation">]</span> <span class="token operator">=</span> __copy<span class="token punctuation">;</span>                   <span class="token comment">// 加入链表</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 复制后续结点</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span> __next <span class="token operator">=</span> __cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">             __next<span class="token punctuation">;</span></span>
<span class="line">             __cur <span class="token operator">=</span> __next<span class="token punctuation">,</span> __next <span class="token operator">=</span> __cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          __copy<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> <span class="token function">_M_new_node</span><span class="token punctuation">(</span>__next<span class="token operator">-&gt;</span>_M_val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          __copy <span class="token operator">=</span> __copy<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    _M_num_elements <span class="token operator">=</span> __ht<span class="token punctuation">.</span>_M_num_elements<span class="token punctuation">;</span> <span class="token comment">// 设置元素个数</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败回滚，将元素全部清空</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-7-7-hash-functions" tabindex="-1"><a class="header-anchor" href="#_5-7-7-hash-functions"><span>5.7.7 hash functions</span></a></h2><p>hash 函数的主要工作是将数据转换成一个可以进行模运算的值。对于整数类型 (<code>int</code> / <code>char</code> / <code>long</code>) 来说，大部分 hash 函数什么都不做，直接返回原值：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">signed</span> <span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">short</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于字符串来说，STL 设计了一个转换函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">inline</span> size_t <span class="token function">__stl_hash_string</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> __s<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> __h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">*</span>__s<span class="token punctuation">;</span> <span class="token operator">++</span>__s<span class="token punctuation">)</span></span>
<span class="line">    __h <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span>__h <span class="token operator">+</span> <span class="token operator">*</span>__s<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">size_t</span><span class="token punctuation">(</span>__h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> __s<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">__stl_hash_string</span><span class="token punctuation">(</span>__s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> __s<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">__stl_hash_string</span><span class="token punctuation">(</span>__s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SGI STL 无法处理上述所列各数据类型以外的元素。如果要处理这些类型，用户需要为它们自行定义 hash 函数。</p>`,45)]))}const i=s(e,[["render",o],["__file","Chapter 5.7 - hashtable.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%205%20-%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%205.7%20-%20hashtable.html","title":"Chapter 5.7 - hashtable","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"5.7.1 hashtable 概述","slug":"_5-7-1-hashtable-概述","link":"#_5-7-1-hashtable-概述","children":[]},{"level":2,"title":"5.7.2 hashtable 的桶 (bucket) 与结点 (nodes)","slug":"_5-7-2-hashtable-的桶-bucket-与结点-nodes","link":"#_5-7-2-hashtable-的桶-bucket-与结点-nodes","children":[]},{"level":2,"title":"5.7.3 hashtable 的迭代器","slug":"_5-7-3-hashtable-的迭代器","link":"#_5-7-3-hashtable-的迭代器","children":[]},{"level":2,"title":"5.7.4 hashtable 的数据结构","slug":"_5-7-4-hashtable-的数据结构","link":"#_5-7-4-hashtable-的数据结构","children":[]},{"level":2,"title":"5.7.5 hashtable 的构造与内存管理","slug":"_5-7-5-hashtable-的构造与内存管理","link":"#_5-7-5-hashtable-的构造与内存管理","children":[]},{"level":2,"title":"5.7.7 hash functions","slug":"_5-7-7-hash-functions","link":"#_5-7-7-hash-functions","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 5 - 关联式容器/Chapter 5.7 - hashtable.md"}');export{i as comp,u as data};
