import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(l,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-3-6-iterator-源代码完整重列" tabindex="-1"><a class="header-anchor" href="#chapter-3-6-iterator-源代码完整重列"><span>Chapter 3.6 - iterator 源代码完整重列</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 03 / 31 19:20</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="五种迭代器的类型定义" tabindex="-1"><a class="header-anchor" href="#五种迭代器的类型定义"><span>五种迭代器的类型定义</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">input_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">output_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">forward_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">input_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">bidirectional_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">forward_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">random_access_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">bidirectional_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义迭代器基类" tabindex="-1"><a class="header-anchor" href="#自定义迭代器基类"><span>自定义迭代器基类</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Category</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span> <span class="token operator">=</span> ptrdiff_t<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Pointer</span> <span class="token operator">=</span> _Tp<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Reference</span> <span class="token operator">=</span> _Tp<span class="token operator">&amp;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">iterator</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Category  iterator_category<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp        value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Distance  difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Pointer   pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Reference reference<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="traits-的结构体模板以及原生指针特化版本" tabindex="-1"><a class="header-anchor" href="#traits-的结构体模板以及原生指针特化版本"><span>Traits 的结构体模板以及原生指针特化版本</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Iterator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>iterator_category iterator_category<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>value_type        value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>difference_type   difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer           pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference         reference<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp                         value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                        pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>                        reference<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp                         value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span>                  pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span>                  reference<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取迭代器的关联类型" tabindex="-1"><a class="header-anchor" href="#获取迭代器的关联类型"><span>获取迭代器的关联类型</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// The overloaded functions iterator_category, distance_type, and</span></span>
<span class="line"><span class="token comment">// value_type are not part of the C++ standard.  (They have been</span></span>
<span class="line"><span class="token comment">// replaced by struct iterator_traits.)  They are included for</span></span>
<span class="line"><span class="token comment">// backward compatibility with the HP STL.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// We introduce internal names for these functions.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Iter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator_category</span>
<span class="line"><span class="token function">__iterator_category</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Iter<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator_category _Category<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_Category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Iter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>difference_type<span class="token operator">*</span></span>
<span class="line"><span class="token function">__distance_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Iter<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>difference_type<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Iter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">*</span></span>
<span class="line"><span class="token function">__value_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Iter<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Iter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator_category</span>
<span class="line"><span class="token function">iterator_category</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Iter<span class="token operator">&amp;</span> __i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">__iterator_category</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Iter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>difference_type<span class="token operator">*</span></span>
<span class="line"><span class="token function">distance_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Iter<span class="token operator">&amp;</span> __i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">__distance_type</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Iter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Iter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">*</span></span>
<span class="line"><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Iter<span class="token operator">&amp;</span> __i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">__value_type</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__ITERATOR_CATEGORY</span><span class="token expression"><span class="token punctuation">(</span>__i<span class="token punctuation">)</span> <span class="token function">__iterator_category</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__DISTANCE_TYPE</span><span class="token expression"><span class="token punctuation">(</span>__i<span class="token punctuation">)</span>     <span class="token function">__distance_type</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__VALUE_TYPE</span><span class="token expression"><span class="token punctuation">(</span>__i<span class="token punctuation">)</span>        <span class="token function">__value_type</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="distance" tabindex="-1"><a class="header-anchor" href="#distance"><span>Distance</span></a></h2><p>只对 Input Iterator 和 Random Access Iterator 做了实现。由于五种迭代器类型的继承关系，Forward Iterator 和 Bidirectional Iterator 最终都会被隐式转换为 Input Iterator 从而被分派到 Input Iterator 的实现版本上。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__distance</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span></span>
<span class="line">                       _Distance<span class="token operator">&amp;</span> __n<span class="token punctuation">,</span> input_iterator_tag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">++</span>__first<span class="token punctuation">;</span> <span class="token operator">++</span>__n<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__distance</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span></span>
<span class="line">                       _RandomAccessIterator __last<span class="token punctuation">,</span></span>
<span class="line">                       _Distance<span class="token operator">&amp;</span> __n<span class="token punctuation">,</span> random_access_iterator_tag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  __n <span class="token operator">+=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">distance</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span></span>
<span class="line">                     _InputIterator __last<span class="token punctuation">,</span> _Distance<span class="token operator">&amp;</span> __n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> <span class="token function">iterator_category</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>difference_type</span>
<span class="line"><span class="token function">__distance</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span> input_iterator_tag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>difference_type __n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">++</span>__first<span class="token punctuation">;</span> <span class="token operator">++</span>__n<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __n<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>difference_type</span>
<span class="line"><span class="token function">__distance</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span></span>
<span class="line">           random_access_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>difference_type</span>
<span class="line"><span class="token function">distance</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator_category</span>
<span class="line">    _Category<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> <span class="token function">_Category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="advance" tabindex="-1"><a class="header-anchor" href="#advance"><span>Advance</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__advance</span><span class="token punctuation">(</span>_InputIter<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span> input_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">++</span>__i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__advance</span><span class="token punctuation">(</span>_BidirectionalIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span></span>
<span class="line">                      bidirectional_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIterator<span class="token punctuation">,</span> _BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">++</span>__i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">--</span>__i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__advance</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span></span>
<span class="line">                      random_access_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  __i <span class="token operator">+=</span> __n<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">advance</span><span class="token punctuation">(</span>_InputIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIterator<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__advance</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> <span class="token function">iterator_category</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const i=n(t,[["render",o],["__file","Chapter 3.6 - iterator 源代码完整重列.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%203%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A6%82%E5%BF%B5%E4%B8%8E%20traits%20%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95/Chapter%203.6%20-%20iterator%20%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%8C%E6%95%B4%E9%87%8D%E5%88%97.html","title":"Chapter 3.6 - iterator 源代码完整重列","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"五种迭代器的类型定义","slug":"五种迭代器的类型定义","link":"#五种迭代器的类型定义","children":[]},{"level":2,"title":"自定义迭代器基类","slug":"自定义迭代器基类","link":"#自定义迭代器基类","children":[]},{"level":2,"title":"Traits 的结构体模板以及原生指针特化版本","slug":"traits-的结构体模板以及原生指针特化版本","link":"#traits-的结构体模板以及原生指针特化版本","children":[]},{"level":2,"title":"获取迭代器的关联类型","slug":"获取迭代器的关联类型","link":"#获取迭代器的关联类型","children":[]},{"level":2,"title":"Distance","slug":"distance","link":"#distance","children":[]},{"level":2,"title":"Advance","slug":"advance","link":"#advance","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 3 - 迭代器概念与 traits 编程方法/Chapter 3.6 - iterator 源代码完整重列.md"}');export{i as comp,r as data};
