import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(c,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-6-7-7-random-shuffle" tabindex="-1"><a class="header-anchor" href="#chapter-6-7-7-random-shuffle"><span>Chapter 6.7.7 - random_shuffle</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 15 16:35</p><p>Nanjing, Jiangsu, China</p><hr><p>该算法将 <code>[first, last)</code> 中的元素随机重排，在 <code>N!</code> (<code>N = last - first</code>) 种可能中随机选出一种。注意，需要保证算法能够在 <code>N!</code> 种可能性上均匀分布。另外，算法可以使用自带的随机数生成器打乱序列，也可以使用用户提供的随机数仿函数，这个仿函数是通过 <strong>引用</strong> 的方式传递：因为随机数生成器一般拥有 <strong>本地状态</strong>，每次调用时会发生改变。使用值传递将丢失每次调用对本地状态的修改。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">random_shuffle</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                           _RandomAccessIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIter<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_RandomAccessIter __i <span class="token operator">=</span> __first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> __i <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span>  <span class="token comment">// 依次对每个位置上的元素进行对换</span></span>
<span class="line">    <span class="token function">iter_swap</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> __first <span class="token operator">+</span> <span class="token function">__random_number</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__i <span class="token operator">-</span> __first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 模运算计算对换位置</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Return a random number in the range [0, __n).  This function encapsulates</span></span>
<span class="line"><span class="token comment">// whether we&#39;re using rand (part of the standard C library) or lrand48</span></span>
<span class="line"><span class="token comment">// (not standard, but a much better choice whenever it&#39;s available).</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _Distance <span class="token function">__random_number</span><span class="token punctuation">(</span>_Distance __n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__STL_NO_DRAND48</span></span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> __n<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">lrand48</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> __n<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_RandomNumberGenerator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">random_shuffle</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span> _RandomAccessIter __last<span class="token punctuation">,</span></span>
<span class="line">                    _RandomNumberGenerator<span class="token operator">&amp;</span> __rand<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIter<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_RandomAccessIter __i <span class="token operator">=</span> __first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> __i <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">iter_swap</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> __first <span class="token operator">+</span> <span class="token function">__rand</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__i <span class="token operator">-</span> __first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// mod</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const i=n(t,[["render",o],["__file","Chapter 6.7.7 - random_shuffle.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.7.7%20-%20random_shuffle.html","title":"Chapter 6.7.7 - random_shuffle","lang":"en-US","frontmatter":{},"headers":[],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.7.7 - random_shuffle.md"}');export{i as comp,r as data};
