import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e="/blog/assets/9-4-f-D0hDiw.png",c="/blog/assets/9-3-BVnaRiqk.png",o={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-9-3-hd-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-9-3-hd-c-程序"><span>Chapter 9.3 - hd.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 22 18:57</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_9-3-hd-c-程序" tabindex="-1"><a class="header-anchor" href="#_9-3-hd-c-程序"><span>9.3 hd.c 程序</span></a></h2><h3 id="_9-3-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_9-3-1-功能描述"><span>9.3.1 功能描述</span></a></h3><p><code>sys_setup()</code> 函数</p><ul><li>利用 <code>boot/setup.s</code> 程序中提供的信息，对硬盘驱动器的参数进行设置</li><li>读取硬盘分区表</li><li>尝试把启动引导盘上的虚拟盘根文件系统映像文件复制到内存虚拟盘中</li></ul><p><code>hd_init()</code> 函数</p><ul><li>在内核初始化时设置 <strong>硬盘控制器</strong> 的 中断描述符</li><li>复位硬盘控制器的 <strong>中断屏蔽码</strong>，允许硬盘控制器发送中断请求信号</li></ul><p><code>hd_out()</code> 函数</p><ul><li>硬盘控制器操作命令的发送函数</li><li>带有一个中断过程中调用的 C 函数指针</li><li>在向控制器发送命令之前，需要先用这个指针预置为中断处理过程中的调用指针</li><li>然后按照规定向硬盘控制器发送命令参数</li><li>立刻返回，不等待硬盘控制器执行命令</li></ul><p><code>do_hd_request()</code> 是硬盘请求项的操作函数</p><ol><li>判断当前请求项是否为空</li><li>对请求项中指明的设备号和扇区号进行合法性验证</li><li>计算请求数据的磁道号、磁头号、柱面号</li><li>如果 reset 标志置位，那么设置 recalibrate 标志，并执行硬盘复位操作</li><li>如果 recalibrate 标志置位，那么设置中断执行的函数 <code>recal_intr()</code>，并发送重新校正命令</li><li>如果是写操作 <ul><li>首先设置中断执行函数为 <code>write_intr()</code></li><li>使用 <code>do_out()</code> 向控制器发送写命令，循环查询 DRQ</li><li>若控制器同意接收数据，则将请求项缓冲区的数据被写入控制器缓冲区</li><li>若查询超时后，DRQ 还没有置位，则操作失败，调用 <code>bad_rw_intr()</code></li><li>根据出错次数决定是否放弃处理当前请求项 / 设置复位标志继续重新处理当前请求项</li><li><img src="'+e+'" alt="9-4"></li></ul></li><li>如果是读操作 <ul><li>设置中断执行函数为 <code>read_intr()</code></li><li>使用 <code>do_out()</code> 向控制器发送读命令</li><li><img src="'+c+`" alt="9-3"></li></ul></li><li>立刻返回</li></ol><p>在中断处理过程的调用函数中：</p><ul><li>首先调用 <code>win_result()</code> 函数，读取控制器的 <strong>状态寄存器</strong>，判断是否有错误发生 <ul><li>若发生错误，则调用 <code>bad_rw_intr()</code></li><li>若没有错误，继续</li></ul></li><li>调用 <code>post_write()</code> 或 <code>post_read()</code> 完成读写</li><li>若没有更多数据需要读写，调用 <code>end_handler()</code> 处理请求结束事宜</li><li>继续调用 <code>do_hd_request()</code> 以处理其它请求项</li></ul><h3 id="_9-3-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_9-3-2-代码注释"><span>9.3.2 代码注释</span></a></h3><h4 id="硬盘信息结构体定义" tabindex="-1"><a class="header-anchor" href="#硬盘信息结构体定义"><span>硬盘信息结构体定义</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAJOR_NR</span> <span class="token expression"><span class="token number">3</span> </span><span class="token comment">// 硬盘主设备号</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_ERRORS</span> <span class="token expression"><span class="token number">7</span> </span><span class="token comment">// 读/写扇区时允许的最多出错次数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_HD</span> <span class="token expression"><span class="token number">2</span>     </span><span class="token comment">// 系统支持的最多硬盘数</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 硬盘信息结构</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">hd_i_struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> head<span class="token punctuation">,</span>  <span class="token comment">// 磁头数</span></span>
<span class="line">        sect<span class="token punctuation">,</span>  <span class="token comment">// 每磁道扇区数</span></span>
<span class="line">        cyl<span class="token punctuation">,</span>   <span class="token comment">// 柱面数</span></span>
<span class="line">        wpcom<span class="token punctuation">,</span> <span class="token comment">// 写前预补偿柱面号</span></span>
<span class="line">        lzone<span class="token punctuation">,</span> <span class="token comment">// 磁头着陆区柱面号</span></span>
<span class="line">        ctl<span class="token punctuation">;</span>   <span class="token comment">// 控制字节</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HD_TYPE </span><span class="token comment">// 在 include/linux/config.h 中定义了符号常数</span></span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">hd_i_struct</span> hd_info<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> HD_TYPE <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 预定义的硬盘信息数组</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NR_HD</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hd_i_struct</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// 硬盘个数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">hd_i_struct</span> hd_info<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> NR_HD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="硬盘分区结构体定义" tabindex="-1"><a class="header-anchor" href="#硬盘分区结构体定义"><span>硬盘分区结构体定义</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 5 的倍数的项代表整个硬盘的参数 hd[0]/hd[5]</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">hd_struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> start_sect<span class="token punctuation">;</span> <span class="token comment">// 分区在硬盘中的起始物理扇区</span></span>
<span class="line">    <span class="token keyword">long</span> nr_sects<span class="token punctuation">;</span>   <span class="token comment">// 分区中的扇区总数</span></span>
<span class="line"><span class="token punctuation">}</span> hd<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">*</span>MAX_HD<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 硬盘每个分区的数据块总数</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> hd_sizes<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">*</span>MAX_HD<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="端口读写的嵌入汇编" tabindex="-1"><a class="header-anchor" href="#端口读写的嵌入汇编"><span>端口读写的嵌入汇编</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 读端口 port，读 nr 字，保存在 buf 中</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">port_read</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nr<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;cld; rep; insw&quot;</span><span class="token expression"><span class="token operator">::</span></span><span class="token string">&quot;d&quot;</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;D&quot;</span><span class="token expression"><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;c&quot;</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token operator">:</span></span><span class="token string">&quot;cx&quot;</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token string">&quot;di&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">// 写端口 port，写 nr 字，从 buf 中取数据</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">port_write</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nr<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;cld; rep; outsw&quot;</span><span class="token expression"><span class="token operator">::</span></span><span class="token string">&quot;d&quot;</span><span class="token expression"><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;S&quot;</span><span class="token expression"><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;c&quot;</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token operator">:</span></span><span class="token string">&quot;cx&quot;</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token string">&quot;si&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="系统设置函数-sys-setup" tabindex="-1"><a class="header-anchor" href="#系统设置函数-sys-setup"><span>系统设置函数 sys_setup()</span></a></h4><p>只在初始化时被调用一次。函数参数 BIOS 由初始化程序设置为指向硬盘参数表结构体的指针。该结构体中包含两个硬盘参数表的内容，从内存 0x90080 处复制而来。0x90080 处的硬盘参数表由 setup.s 程序利用 ROM BIOS 获得。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_setup</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> BIOS<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">int</span> callable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 调用次数标志</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> drive<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmos_disks<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">partition</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span>bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callable<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 已经被调用一次</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    callable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HD_TYPE</span></span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>drive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> drive <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> drive<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> BIOS<span class="token punctuation">;</span> <span class="token comment">// 柱面数</span></span>
<span class="line">        hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 磁头数</span></span>
<span class="line">        hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>wpcom <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写前预补偿柱面号</span></span>
<span class="line">        hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>ctl <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制字节</span></span>
<span class="line">        hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>lzone <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 磁头着陆区柱面号</span></span>
<span class="line">        hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>sect <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">+</span>BIOS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每磁道扇区数</span></span>
<span class="line">        BIOS <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment">// 每个硬盘参数表 16B</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 判断第二个硬盘的参数表是否为 0，判断是否有第二个硬盘</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">)</span></span>
<span class="line">        NR_HD <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        NR_HD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设置硬盘的分区结构体</span></span>
<span class="line">    <span class="token comment">// 项 1-4 和 6-9 分别表示两个硬盘 4 个分区的参数</span></span>
<span class="line">    <span class="token comment">// 这里仅设置第 0 和 5 项，即整个硬盘的信息</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_HD<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">*</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sect <span class="token operator">*</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检测硬盘是否是 AT 控制器兼容的</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cmos_disks <span class="token operator">==</span> <span class="token function">CMOS_READ</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmos_disks <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span></span>
<span class="line">            NR_HD <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            NR_HD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        NR_HD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 如果两个硬盘都不兼容，则两个硬盘的数据结构清 0</span></span>
<span class="line">    <span class="token comment">// 如果只有一个兼容，则将第二个硬盘的数据结构清 0</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> NR_HD<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        hd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 读取每个硬盘上的分区表信息，设置硬盘分区结构体</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>drive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> drive <span class="token operator">&lt;</span> NR_HD<span class="token punctuation">;</span> driver<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 分配缓冲区，读硬盘第一个扇区</span></span>
<span class="line">        <span class="token comment">// 0x300 和 0x305 分别是两个硬盘的设备号</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token number">0x300</span> <span class="token operator">+</span> drive<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 读取失败</span></span>
<span class="line">            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to read partition table of drive %d\\n\\r&quot;</span><span class="token punctuation">,</span> drive<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0x55</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">511</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0xAA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 第一扇区最后两字节不是 0xAA55，硬盘数据无效</span></span>
<span class="line">            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Bad partition table on drive %d\\n\\r&quot;</span><span class="token punctuation">,</span> drive<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 分区表位于第一扇区 0x1BE 处</span></span>
<span class="line">        p <span class="token operator">=</span> <span class="token number">0x1BE</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置各分区的信息</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            hd<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect <span class="token operator">=</span> p<span class="token operator">-&gt;</span>start_sect<span class="token punctuation">;</span></span>
<span class="line">            hd<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">=</span> p<span class="token operator">-&gt;</span>nr_sects<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放存放硬盘第一扇区的缓冲区</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 对每个分区中的数据块总数进行统计</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token operator">*</span>MAX_HD<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        hd_sizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 扇区数 / 2 == 块数</span></span>
<span class="line">    blk_size<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span> <span class="token operator">=</span> hd_sizes<span class="token punctuation">;</span> <span class="token comment">// 块设备的扇区总数指向该数组</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>NR_HD<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Partition table%s ok.\\n\\r&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>NR_HD <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;s&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">rd_load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内存虚拟盘</span></span>
<span class="line">    <span class="token function">init_swapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// swap 分区</span></span>
<span class="line">    <span class="token function">mount_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根文件系统</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环判断并等待硬盘控制器就绪-controller-ready" tabindex="-1"><a class="header-anchor" href="#循环判断并等待硬盘控制器就绪-controller-ready"><span>循环判断并等待硬盘控制器就绪 controller_ready()</span></a></h4><p>读取硬盘控制器的状态寄存器端口，检测其中的 <em>状态寄存器忙</em> bit 来判断控制器是否处于忙状态。如果返回值为 0，则说明等待控制器空闲的时间已经超时而出错；否则说明在等待时间期限内控制器回到空闲状态。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">controller_ready</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> retries <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>retries <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xc0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>retries<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回循环等待的次数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="向硬盘控制器发送命令-hd-out" tabindex="-1"><a class="header-anchor" href="#向硬盘控制器发送命令-hd-out"><span>向硬盘控制器发送命令 hd_out()</span></a></h4><p>等待硬盘控制器就绪，设置全局的函数指针变量 <code>do_hd</code> 指向硬盘中断处理程序将要调用的 C 处理函数，再向硬盘控制器发送 <strong>控制字节</strong> 和 <strong>参数命令块</strong>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hd_out</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> drive<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nsect<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sect<span class="token punctuation">,</span></span>
<span class="line">                   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cyl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span></span>
<span class="line">                   <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>intr_addr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">register</span> <span class="token keyword">int</span> port <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;dx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 参数合法性检查</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>drive <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> head <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 驱动器号 &gt; 1 || 磁头号 &gt; 15</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to write bad sector&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">controller_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;HD controller not ready&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">SET_INTR</span><span class="token punctuation">(</span>intr_addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// do_hd = intr_addr</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>ctl<span class="token punctuation">,</span> HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向控制寄存器输出控制字节</span></span>
<span class="line">    port <span class="token operator">=</span> HD_DATA<span class="token punctuation">;</span> <span class="token comment">// dx 寄存器指向数据寄存器端口</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>drive<span class="token punctuation">]</span><span class="token punctuation">.</span>wpcom <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数：补偿柱面号</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>nsect<span class="token punctuation">,</span> <span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数：读/写扇区总数</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>sect<span class="token punctuation">,</span> <span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数：起始扇区</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>cyl<span class="token punctuation">,</span> <span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数：柱面号低 8 位</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>cyl <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数：柱面号高 8 位</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0xA0</span> <span class="token operator">|</span> <span class="token punctuation">(</span>drive <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> head<span class="token punctuation">,</span> <span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数：驱动器号 + 磁头号</span></span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token operator">++</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检测硬盘执行命令后的状态-win-result" tabindex="-1"><a class="header-anchor" href="#检测硬盘执行命令后的状态-win-result"><span>检测硬盘执行命令后的状态 win_result()</span></a></h4><p>如果执行出错，需要再读错误寄存器 HD_ERROR。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">win_result</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取状态寄存器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BUSY_STAT <span class="token operator">|</span> READY_STAT <span class="token operator">|</span> WRERR_STAT <span class="token operator">|</span> SEEK_STAT <span class="token operator">|</span> ERR_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        i <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>HD_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环判断并等待硬盘就绪-drive-busy" tabindex="-1"><a class="header-anchor" href="#循环判断并等待硬盘就绪-drive-busy"><span>循环判断并等待硬盘就绪 drive_busy()</span></a></h4><p>循环读取控制器的主状态寄存器 HD_STATUS，仅检测 <strong>忙位</strong>、<strong>就绪位</strong>、<strong>寻道结束位</strong>，如果忙位复位，就绪位和寻道结束位置位，则表示硬盘就绪；否则等待超时，显示警告信息。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">drive_busy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        c <span class="token operator">=</span> <span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        c <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>BUSY_STAT <span class="token operator">|</span> READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token punctuation">(</span>READY_STAT <span class="token operator">|</span> SEEK_STAT<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD controller times out\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重新校正硬盘控制器-reset-controller" tabindex="-1"><a class="header-anchor" href="#重新校正硬盘控制器-reset-controller"><span>重新校正硬盘控制器 reset_controller()</span></a></h4><p>向控制寄存器端口发送控制字节，循环等待一段时间，让控制器进行复位操作。再向端口发送正常的控制字节，等待硬盘就绪。若超时，则显示忙警告信息，并读取错误寄存器中的内容。<strong>不引发中断</strong>。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reset_controller</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送复位控制字节</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 等待一段时间</span></span>
<span class="line">        <span class="token function">nop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ctl <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> HD_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送正常控制字节</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">drive_busy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD-controller still busy\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>HD_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD-controller reset failed: %02x\\n\\r&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="硬盘复位-reset-hd" tabindex="-1"><a class="header-anchor" href="#硬盘复位-reset-hd"><span>硬盘复位 reset_hd()</span></a></h4><p>首先复位 (校正) 硬盘控制器，发送建立驱动器参数命令。在这条命令引起的中断处理程序中，再次调用本函数。根据命令执行结果判断是否进行错误处理或是继续进行请求项处理。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reset_hd</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        reset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">reset_controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 处理下一个硬盘</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> NR_HD<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">hd_out</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> hd_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cyl<span class="token punctuation">,</span> WIN_SPECIFY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reset_hd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读写硬盘失败处理调用函数-bad-rw-intr" tabindex="-1"><a class="header-anchor" href="#读写硬盘失败处理调用函数-bad-rw-intr"><span>读写硬盘失败处理调用函数 bad_rw_intr()</span></a></h4><p>读扇区出错次数 ≥ 7：</p><ul><li>结束当前请求项</li><li>唤醒等待该请求的进程</li><li>缓冲区更新标志复位，表示数据没有更新</li></ul><p>写扇区出错次数 &gt; 3：复位硬盘控制器。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;=</span> MAX_ERRORS<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;</span> MAX_ERRORS <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        reset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 设置复位标志</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="意外硬盘中断调用的默认函数-unexpected-hd-interrupt" tabindex="-1"><a class="header-anchor" href="#意外硬盘中断调用的默认函数-unexpected-hd-interrupt"><span>意外硬盘中断调用的默认函数 unexpected_hd_interrupt()</span></a></h4><p>默认 - 当被调用函数的指针为 NULL 时，就会调用该函数。设置复位标志，继续调用 <code>do_hd_request()</code> 执行复位处理操作。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">unexpected_hd_interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected HD interrupt\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    reset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读扇区中断调用函数-read-intr" tabindex="-1"><a class="header-anchor" href="#读扇区中断调用函数-read-intr"><span>读扇区中断调用函数 read_intr()</span></a></h4><p>在读命令完成后引发的中断中被调用：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 读命令操作出错</span></span>
<span class="line">        <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读写硬盘失败处理</span></span>
<span class="line">        <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再次请求硬盘处理</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 读操作没有出错</span></span>
<span class="line">    <span class="token function">port_read</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span> CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读数据到请求结构缓冲区 (256 内存字，即 512B)</span></span>
<span class="line">    CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 清理出错次数</span></span>
<span class="line">    CURRENT<span class="token operator">-&gt;</span>buffer <span class="token operator">+=</span> <span class="token number">512</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区指针</span></span>
<span class="line">    CURRENT<span class="token operator">-&gt;</span>sector<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 起始扇区号 + 1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>CURRENT<span class="token operator">-&gt;</span>nr_sectors<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 还没读完</span></span>
<span class="line">        <span class="token function">SET_INTR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>read_intr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新设置中断调用函数</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 所有扇区已经读完</span></span>
<span class="line">    <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据已更新标志位置位</span></span>
<span class="line">    <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写扇区中断调用函数-write-intr" tabindex="-1"><a class="header-anchor" href="#写扇区中断调用函数-write-intr"><span>写扇区中断调用函数 write_intr()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 写命令操作出错</span></span>
<span class="line">        <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败处理</span></span>
<span class="line">        <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再次请求硬盘处理</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 写操作没有出错</span></span>
<span class="line">    <span class="token comment">// 还有更多扇区要写</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>CURRENT<span class="token operator">-&gt;</span>nr_sectors<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        CURRENT<span class="token operator">-&gt;</span>sector<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 起始扇区</span></span>
<span class="line">        CURRENT<span class="token operator">-&gt;</span>buffer <span class="token operator">+=</span> <span class="token number">512</span><span class="token punctuation">;</span> <span class="token comment">// 调整缓冲区指针</span></span>
<span class="line">        <span class="token function">SET_INTR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>write_intr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新设置中断调用函数</span></span>
<span class="line">        <span class="token function">port_write</span><span class="token punctuation">(</span>HD_DATA<span class="token punctuation">,</span> CURRENT<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向数据端口写 256 个内存字</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 全部扇区数据已经写完</span></span>
<span class="line">    <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置更新标志，善后</span></span>
<span class="line">    <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="硬盘控制器重新校正-复位-中断调用函数-recal-intr" tabindex="-1"><a class="header-anchor" href="#硬盘控制器重新校正-复位-中断调用函数-recal-intr"><span>硬盘控制器重新校正 (复位) 中断调用函数 recal_intr()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recal_intr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 硬盘控制器是否返回错误信息</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">win_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读写失败处理</span></span>
<span class="line">    <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="硬盘操作超时处理函数-hd-times-out" tabindex="-1"><a class="header-anchor" href="#硬盘操作超时处理函数-hd-times-out"><span>硬盘操作超时处理函数 hd_times_out()</span></a></h4><p>会在 <code>do_timer()</code> 中被调用。向硬盘控制器发送命令后，在 hd_timeout 个滴答后控制器还没有发出硬盘中断信号，说明硬盘控制器或硬盘操作超时。<code>do_timer()</code> 函数调用本函数来设置硬盘复位标志，并调用 <code>do_hd_request()</code> 来执行复位处理。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">hd_times_out</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CURRENT<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;HD timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>CURRENT<span class="token operator">-&gt;</span>errors <span class="token operator">&gt;=</span> MAX_ERRORS<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不设置缓冲区更新标志</span></span>
<span class="line">    <span class="token function">SET_INTR</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将中断调用函数指针置空</span></span>
<span class="line">    reset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 置位 reset 标志</span></span>
<span class="line">    <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行复位处理</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行硬盘读写请求-do-hd-request" tabindex="-1"><a class="header-anchor" href="#执行硬盘读写请求-do-hd-request"><span>执行硬盘读写请求 do_hd_request()</span></a></h4><p>根据当前请求项中的设备号和起始扇区号。计算得到：</p><ul><li>硬盘上的柱面号</li><li>当前磁道中的扇区号、磁头号数据</li></ul><p>根据当前请求项中的命令对硬盘控制器发送相应的读写命令。如果控制器或硬盘需要复位，则首先进行复位操作。如果请求项是第一个，那么块设备的当前请求项指针将直接指向该请求项，立刻调用本函数进行读写操作；否则，在一个读写操作完成引发的硬盘中断过程中，若还有请求项需要处理，也会在硬盘中断过程中调用本函数。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_hd_request</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> r<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> block<span class="token punctuation">,</span> dev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sec<span class="token punctuation">,</span> head<span class="token punctuation">,</span> cyl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nsect<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检测请求项合法性</span></span>
<span class="line">    INIT_REQUEST<span class="token punctuation">;</span> <span class="token comment">// 对当前请求项结构体中的内容进行合法性检查</span></span>
<span class="line">    dev <span class="token operator">=</span> <span class="token function">MINOR</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子设备号</span></span>
<span class="line">    block <span class="token operator">=</span> CURRENT<span class="token operator">-&gt;</span>sector<span class="token punctuation">;</span> <span class="token comment">// 起始扇区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token operator">*</span>NR_HD <span class="token operator">||</span> block<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&gt;</span> hd<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_sects<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 设备号不存在 || 一次读写一块 (1024B) 超出范围</span></span>
<span class="line">        <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span> <span class="token comment">// blk.h 的最后</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    block <span class="token operator">+=</span> hd<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>start_sect<span class="token punctuation">;</span></span>
<span class="line">    dev <span class="token operator">/=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 硬盘号 0/1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 根据硬盘信息结构中的每磁道扇区数和硬盘磁头数计算</span></span>
<span class="line">    <span class="token comment">// 计算扇区号、柱面号、磁头号</span></span>
<span class="line">    <span class="token comment">// 啊啊啊啊啊啊啊啊</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;divl %4&quot;</span><span class="token operator">:</span><span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;=d&quot;</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;divl %4&quot;</span><span class="token operator">:</span><span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>cyl<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;=d&quot;</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>hd_info<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sec<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    nsect <span class="token operator">=</span> CURRENT<span class="token operator">-&gt;</span>nr_sectors<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 首先查看是否需要复位硬盘或硬盘控制器</span></span>
<span class="line">    <span class="token comment">// 需要复位硬盘</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        recalibrate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 同时也复位 (重新校准) 硬盘驱动器</span></span>
<span class="line">        <span class="token function">reset_hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>recalibrate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        recalibrate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> hd_info<span class="token punctuation">[</span>CURRENT_DEV<span class="token punctuation">]</span><span class="token punctuation">.</span>sect<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> WIN_RESTORE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>recal_intr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 开始向硬盘控制器发送命令</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> nsect<span class="token punctuation">,</span> sec<span class="token punctuation">,</span> head<span class="token punctuation">,</span> cyl<span class="token punctuation">,</span> WIN_WRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>write_intr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">inb_p</span><span class="token punctuation">(</span>HD_STATUS<span class="token punctuation">)</span> <span class="token operator">&amp;</span> DRQ_STAT<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 循环查询状态寄存器的 DRQ_STAT 是否置位</span></span>
<span class="line">            <span class="token comment">// 驱动器是否准备好接收写数据</span></span>
<span class="line">            <span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">bad_rw_intr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span> <span class="token comment">// blk.h 的最后面</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> READ<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">hd_out</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> nsect<span class="token punctuation">,</span> sec<span class="token punctuation">,</span> head<span class="token punctuation">,</span> cyl<span class="token punctuation">,</span> WIN_READ<span class="token punctuation">,</span> <span class="token operator">&amp;</span>read_intr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unknown hd-command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="硬盘系统初始化-hd-init" tabindex="-1"><a class="header-anchor" href="#硬盘系统初始化-hd-init"><span>硬盘系统初始化 hd_init()</span></a></h4><ul><li>设置硬盘中断描述符</li><li>允许硬盘控制器发送中断请求信号</li></ul><p>在内核初始化时被调用。INT 46：对应 8259A 从片 IRQ14，级联到 8259A 主片 IRQ2。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">hd_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn <span class="token operator">=</span> DEVICE_REQUEST<span class="token punctuation">;</span> <span class="token comment">// do_hd_request()</span></span>
<span class="line">    <span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hd_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// INT 0x2e(46)</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复位 8259A 主片级联屏蔽位</span></span>
<span class="line">    <span class="token function">oubb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复位 8259A 从片中断请求屏蔽位</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="附-硬盘中断处理程序-sys-call-s" tabindex="-1"><a class="header-anchor" href="#附-硬盘中断处理程序-sys-call-s"><span><em>附 - 硬盘中断处理程序 (sys_call.s)</em></span></a></h4><div class="language-assembly line-numbers-mode" data-highlighter="prismjs" data-ext="assembly" data-title="assembly"><pre><code><span class="line"># INT 46 - 硬盘中断处理程序</span>
<span class="line"># 响应硬件中断请求 IRQ 14</span>
<span class="line">_hd_interrupt:</span>
<span class="line">    pushl %eax</span>
<span class="line">    pushl %ecx</span>
<span class="line">    pushl %edx</span>
<span class="line">    push %ds</span>
<span class="line">    push %es</span>
<span class="line">    push %fs</span>
<span class="line">    movl $0x10, %eax # ds,es 置为内核数据段</span>
<span class="line">    mov %ax, %ds</span>
<span class="line">    mov %ax, %es</span>
<span class="line">    movl $0x17, %eax # fs 置为用户数据段</span>
<span class="line">    mov %ax, %fs</span>
<span class="line">    </span>
<span class="line">    movb $0x20, %al</span>
<span class="line">    outb %al, $0xA0 # 没有采用自动 EOI，因此手动结束中断</span>
<span class="line">    jmp 1f</span>
<span class="line">1:  jmp 1f # 延时</span>
<span class="line">1:  xorl %edx, %edx</span>
<span class="line">    movl %edx, _hd_timeout # 置 0，控制器已在规定时间内产生了中断</span>
<span class="line">    xchgl _do_hd, %edx # 硬盘中断调用函数放置在 edx 中</span>
<span class="line">    testl %edx, %edx</span>
<span class="line">    jne 1f # 若函数为空，则使用默认的 C 函数</span>
<span class="line">    movl $_unexpected_hd_interrupt</span>
<span class="line">1:  outb %al, $0x20 # 结束硬件中断</span>
<span class="line">    call *%edx # 调用 do_hd 指向的函数</span>
<span class="line">    pop %fs</span>
<span class="line">    pop %es</span>
<span class="line">    pop %ds</span>
<span class="line">    popl %edx</span>
<span class="line">    popl %ecx</span>
<span class="line">    popl %eax</span>
<span class="line">    iret</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74)]))}const r=s(o,[["render",l],["__file","Chapter 9.3 - hd.c 程序.html.vue"]]),k=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%209%20-%20%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/Chapter%209.3%20-%20hd.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 9.3 - hd.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"9.3 hd.c 程序","slug":"_9-3-hd-c-程序","link":"#_9-3-hd-c-程序","children":[{"level":3,"title":"9.3.1 功能描述","slug":"_9-3-1-功能描述","link":"#_9-3-1-功能描述","children":[]},{"level":3,"title":"9.3.2 代码注释","slug":"_9-3-2-代码注释","link":"#_9-3-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 9 - 块设备驱动程序/Chapter 9.3 - hd.c 程序.md"}');export{r as comp,k as data};
