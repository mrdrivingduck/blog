import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_5-3-futurelistener" tabindex="-1"><a class="header-anchor" href="#_5-3-futurelistener"><span>5.3 - FutureListener</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 02 / 22 13:12</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="genericfuturelistener" tabindex="-1"><a class="header-anchor" href="#genericfuturelistener"><span>GenericFutureListener</span></a></h2><p>定义接口监听 <code>Future</code> 的执行结果。当监听器被注册到 <code>Future</code> 上后，<code>Future</code> 的执行结果会在执行完成后通知监听器。该接口的定义继承自 JDK 原生的 <code>EventListener</code>，并且只定义了一个函数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Listens to the result of a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span></span><span class="token punctuation">}</span>.  The result of the asynchronous operation is notified once this listener</span>
<span class="line"> * is added by calling <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span><span class="token punctuation">#</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Invoked when the operation associated with the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span></span><span class="token punctuation">}</span> has been completed.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">future</span>  the source <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span></span><span class="token punctuation">}</span> which called this callback</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">F</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="channelfuturelistener" tabindex="-1"><a class="header-anchor" href="#channelfuturelistener"><span>ChannelFutureListener</span></a></h2><p>继承自 <code>GenericFutureListener</code>，定义了几个监听器实现。<code>operationComplete()</code> 会直接被一个 I/O 线程回调，所以应当快速返回。如果需要执行一些耗时操作，应当把操作放在线程池的另一个线程中。</p><h3 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Listens to the result of a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFuture</span></span><span class="token punctuation">}</span>.  The result of the</span>
<span class="line"> * asynchronous <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> I/O operation is notified once this listener</span>
<span class="line"> * is added by calling <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFuture</span><span class="token punctuation">#</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">GenericFutureListener</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Return the control to the caller quickly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is directly called by an I/O</span>
<span class="line"> * thread.  Therefore, performing a time consuming task or a blocking operation</span>
<span class="line"> * in the handler method can cause an unexpected pause during I/O.  If you need</span>
<span class="line"> * to perform a blocking operation on I/O completion, try to execute the</span>
<span class="line"> * operation in a different thread using a thread pool.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChannelFutureListener</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChannelFuture</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="close" tabindex="-1"><a class="header-anchor" href="#close"><span>Close</span></a></h3><p>监听器实现。在 <code>Channel</code> 事件完成时关闭 <code>Channel</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFutureListener</span></span><span class="token punctuation">}</span> that closes the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> which is</span>
<span class="line"> * associated with the specified <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFuture</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelFutureListener</span> <span class="token constant">CLOSE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="close-on-failure" tabindex="-1"><a class="header-anchor" href="#close-on-failure"><span>Close On Failure</span></a></h3><p>监听器实现。在 <code>Channel</code> 事件发生异常时关闭 <code>Channel</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFutureListener</span></span><span class="token punctuation">}</span> that closes the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> when the</span>
<span class="line"> * operation ended up with a failure or cancellation rather than a success.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelFutureListener</span> <span class="token constant">CLOSE_ON_FAILURE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fire-exception-on-failure" tabindex="-1"><a class="header-anchor" href="#fire-exception-on-failure"><span>Fire Exception On Failure</span></a></h3><p>监听器实现。在 <code>Channel</code> 事件发生异常时，将 <code>Throwable</code> 对象传播到 <code>ChannelPipeline</code> 中。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFutureListener</span></span><span class="token punctuation">}</span> that forwards the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Throwable</span></span><span class="token punctuation">}</span> of the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFuture</span></span><span class="token punctuation">}</span> into the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>. This mimics the old behavior of Netty 3.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelFutureListener</span> <span class="token constant">FIRE_EXCEPTION_ON_FAILURE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireExceptionCaught</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21)]))}const o=s(p,[["render",l],["__file","5.3 - FutureListener.html.vue"]]),u=JSON.parse('{"path":"/netty-in-action-notes/5.3%20-%20FutureListener.html","title":"5.3 - FutureListener","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"GenericFutureListener","slug":"genericfuturelistener","link":"#genericfuturelistener","children":[]},{"level":2,"title":"ChannelFutureListener","slug":"channelfuturelistener","link":"#channelfuturelistener","children":[{"level":3,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":3,"title":"Close","slug":"close","link":"#close","children":[]},{"level":3,"title":"Close On Failure","slug":"close-on-failure","link":"#close-on-failure","children":[]},{"level":3,"title":"Fire Exception On Failure","slug":"fire-exception-on-failure","link":"#fire-exception-on-failure","children":[]}]}],"git":{},"filePathRelative":"netty-in-action-notes/5.3 - FutureListener.md"}');export{o as comp,u as data};
