import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="tomcat-container" tabindex="-1"><a class="header-anchor" href="#tomcat-container"><span>Tomcat - Container</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 11 / 30 23:04</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="servlet-容器是如何工作的" tabindex="-1"><a class="header-anchor" href="#servlet-容器是如何工作的"><span>Servlet 容器是如何工作的</span></a></h2><p>Servlet 容器是一个复杂的系统。要为一个 Servlet 请求提供服务，通常要做三件事：</p><ol><li>创建一个 request 对象，并填充其中的信息： <ul><li>参数</li><li>请求头</li><li>Cookies</li><li>Query string</li><li>URI</li></ul></li><li>创建一个 response 对象，Servlet 使用该对象向客户端发送响应</li><li>调用 Servlet 的 <code>service()</code> 函数，并传入 request 和 response 对象，从 request 中取值，从 response 中写值</li></ol><h2 id="catalina-架构" tabindex="-1"><a class="header-anchor" href="#catalina-架构"><span>Catalina 架构</span></a></h2><p>Catalina 由两个主要模块组成：</p><ul><li>连接器 (Connector) - 接收 HTTP 请求，并构造 request 和 response 对象</li><li>容器 (Container) - 接收 request 和 response 对象，并调用 Servlet 的 <code>service()</code> 函数</li></ul><h3 id="连接器" tabindex="-1"><a class="header-anchor" href="#连接器"><span>连接器</span></a></h3><p>一个符合 Servlet 2.3 和 2.4 规范的连接器需要创建 <code>javax.servlet.http.HttpServletRequest</code> 和 <code>javax.servlet.http.HttpServletResponse</code>，并传递给被调用的 <code>service()</code> 函数。</p><p>连接器是一个可以插入 Servlet 容器的独立模块。一个 Tomcat 连接器必须符合以下条件：</p><ol><li>实现接口 <code>org.apache.catalina.Connector</code></li><li>创建请求对象，请求对象实现 <code>org.apache.catalina.Request</code></li><li>创建响应对象，响应对象实现 <code>org.apache.catalina.Response</code></li></ol><p>Tomcat 4 的默认连接器等待 HTTP 请求后，创建 <code>request</code> 和 <code>response</code> 对象，然后调用容器 (<code>org.apache.catalina.Container</code>) 的 <code>invoke()</code> 函数来传递这两个对象：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span></span>Request</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span></span>Response</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>连接器必须实现 <code>org.apache.catalina.Connector</code> 接口，包含以下重要函数：</p><ul><li><code>setContainer()</code> - 关联连接器和容器</li><li><code>getContainer()</code></li><li><code>createRequest()</code></li><li><code>createResponse()</code></li></ul><p>默认连接器运行在一个独立的线程中，且连接器拥有一个处理对象池，从而避免每次重复创建处理对象。每个处理对象也运行在一个独立的线程中，因此实际上每个连接器对应了一个线程池。</p><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h3><p>容器需要实现 <code>org.apache.catalina.Container</code> 接口。容器被分为四种类型 (四个接口)，每种容器都有一个默认的标准实现：</p><ul><li>Engine - 整个 Catalina Servlet 引擎</li><li>Host - 包含数个 Context 的虚拟主机</li><li>Context - 一个 Web 应用，包括一个或多个 Wrapper</li><li>Wrapper - 一个独立的 Servlet</li></ul><p>一个容器可以有一个或多个更低层次的子容器，Wrapper 是层次最低的子容器类型。每一个容器内部会有一个 <strong>流水线任务</strong> 实例，流水线中包含了容器被唤醒后要处理的所有任务。每个流水线中包含了一个或多个 <strong>阀门</strong>，请求将依次通过阀门，每个阀门都可以操作传递给它的 <code>request</code> 和 <code>response</code> 实例。处理完毕后，流水线的 <strong>基本阀门</strong> 被调用，负责加载相关的 Servlet 类。</p><ol><li>一个容器有一个流水线实例，容器的 <code>invoke()</code> 会调用流水线的 <code>invoke()</code></li><li>流水线的 <code>invoke()</code> 会依次调用每个阀门的 <code>invoke()</code>，最终调用基本阀门的 <code>invoke()</code></li><li>Wrapper 的基本阀门负责加载相关 Servlet 类；Context 的基本阀门复杂查找子容器，并调用子容器的 <code>invoke()</code></li></ol><h3 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>Server</span></a></h3><p><code>org.apache.cataline.Server</code> 接口描述了整个 Catalina Servlet 容器及其组件，并提供了优雅的机制启动和停止系统。其中实现了四个生命周期函数：</p><ul><li><code>initialize()</code> - 初始化组件</li><li><code>start()</code> - 启动组件</li><li><code>await()</code> - 等待关闭指令</li><li><code>stop()</code> - 停止所有组件</li></ul><p>Server 内部维护了零个或多个 <strong>服务</strong>，服务实现了 <code>org.apache.catalina.Service</code> 接口，用于持有组件。一个服务可以有 <strong>一个容器</strong> 和 <strong>多个连接器</strong>：</p><ul><li>容器使得服务可以响应 Servlet 请求</li><li>多个连接器使得 Tomcat 可以服务多个 <strong>协议</strong> (HTTP / HTTPS / ...)</li></ul><h2 id="servlet-接口" tabindex="-1"><a class="header-anchor" href="#servlet-接口"><span>Servlet 接口</span></a></h2><p>所有的 Servlet 必须实现该接口，或继承自实现该接口的类。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Defines methods that all servlets must implement.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A servlet is a small Java program that runs within a Web server.</span>
<span class="line"> * Servlets receive and respond to requests from Web clients,</span>
<span class="line"> * usually across HTTP, the HyperText Transfer Protocol.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>To implement this interface, you can write a generic servlet</span>
<span class="line"> * that extends</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>GenericServlet</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> or an HTTP servlet that</span>
<span class="line"> * extends <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServlet</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This interface defines methods to initialize a servlet,</span>
<span class="line"> * to service requests, and to remove a servlet from the server.</span>
<span class="line"> * These are known as life-cycle methods and are called in the</span>
<span class="line"> * following sequence:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The servlet is constructed, then initialized with the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">init</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> method.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Any calls from clients to the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">service</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> method are handled.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The servlet is taken out of service, then destroyed with the</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">destroy</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> method, then garbage collected and finalized.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>In addition to the life-cycle methods, this interface</span>
<span class="line"> * provides the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">getServletConfig</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> method, which the servlet</span>
<span class="line"> * can use to get any startup information, and the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">getServletInfo</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * method, which allows the servlet to return basic information about itself,</span>
<span class="line"> * such as author, version, and copyright.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span>     Various</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">GenericServlet</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span></span>
<span class="line"> *</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，以下三个函数是 Servlet 的生命周期函数：</p><ul><li><code>init()</code> - 只在 Servlet 类被加载时调用一次，必须在 Servlet 可以接受任何请求之前运行完毕</li><li><code>service()</code> - 在生命周期中会被多次调用，由 Servlet 容器将 request 和 response 对象传递给该函数</li><li><code>destroy()</code> - 在 Servlet 容器移除 Servlet 实例时被调用一次 (比如容器关闭，或容器需要一些空闲内存)</li></ul><h2 id="一个简单的-servlet-容器" tabindex="-1"><a class="header-anchor" href="#一个简单的-servlet-容器"><span>一个简单的 Servlet 容器</span></a></h2><p>Servlet 容器会为 Servlet 的每个 HTTP 请求做如下工作：</p><ol><li>第一次调用该 Servlet 时，加载该类并调用该类的 <code>init()</code> 函数 (仅一次)</li><li>对每次请求，构造 <code>javax.servlet.ServletRequest</code> 和 <code>javax.servlet.ServletResponse</code> 实例</li><li>调用 Servlet 的 <code>service()</code> 函数，并传递 <code>ServletRequest</code> 和 <code>ServletResponse</code> 实例</li><li>当 Servlet 类被关闭时，调用 Servlet 的 <code>destroy()</code> 函数，卸载该类</li></ol><p>可以基于最经典的 ServerSocket 程序，实现一个简单的 Servlet 容器。该容器能够根据路由区分 <strong>静态资源</strong> 的调用和 <strong>Servlet</strong> 的调用。对于 Servlet 的调用，通过 <em>类加载器</em> 加载 Servlet 类，实例化并调用 <code>service()</code> 函数。</p><h3 id="request-response" tabindex="-1"><a class="header-anchor" href="#request-response"><span>Request &amp;&amp; Response</span></a></h3><p>在最原始的 ServerSocket 程序中，每个请求可以通过 <code>accept()</code> 函数获得一个 <code>Socket</code>。通过这个 <code>Socket</code>，可以取得其输入流和输出流。基于输入流，可以构造出一个 Request，并从流中读取 HTTP 协议数据，并 parse 为相应的字段 set 倒 Request 对象的成员变量中，供 <code>service()</code> 函数使用；基于输出流，可以构造出一个 Response，并向客户端写回响应内容。</p><p>Request 需要继承自 <code>javax.Servlet.Request</code>，Response 需要继承自 <code>javax.Servlet.Response</code>。</p><h3 id="静态资源与-servlet-的路由" tabindex="-1"><a class="header-anchor" href="#静态资源与-servlet-的路由"><span>静态资源与 Servlet 的路由</span></a></h3><p>指定了一个路径作为静态资源的存放路径。在 parse 出请求的 URI 后，判断 URI 中的路径是否是静态资源路径。如果是，则在该路径下寻找静态资源并返回；否则，使用类加载器寻找 Servlet 类，加载并执行其生命周期函数。由于本章只是一个简单实现，每次 Servlet 被请求时，Servlet 类都会被加载。核心代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">output <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">setRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">request<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/servlet/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Servlet</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Static resources</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>parse()</code> 函数需要解析接收到的 HTTP 请求。HTTP 请求包含三部分：</p><ul><li>请求行</li><li>请求头</li><li>请求体</li></ul><p>为了提升性能，具体的实现可以根据需要，选择性地解析一些字段；其它字段可以推迟到需要使用时再解析。</p><h3 id="servlet-加载" tabindex="-1"><a class="header-anchor" href="#servlet-加载"><span>Servlet 加载</span></a></h3><p>假设 HTTP 请求中通过如下方式调用 Servlet：</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">GET /servlet/servletName</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>servletName</code> 是 Servlet 的类名。在 Servlet 容器中，类加载器可以找到 Servlet 类的地方称为 <em>资源库 (repository)</em>，因此需要指定一个资源库路径。这里，使用 <code>java.net.URLClassLoader</code> 类加载器，它接收一个 <code>URL</code> 对象数组。核心代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> servletName <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">URLClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// one URL for Servlet only</span></span>
<span class="line">    <span class="token class-name">URLStreamHandler</span> streamHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> repo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span></span>
<span class="line">        			<span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        			<span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;WEB_ROOT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>saparator<span class="token punctuation">)</span></span>
<span class="line">                  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    urls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> repo<span class="token punctuation">,</span> streamHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    myClass <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>servletName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Servlet</span> servlet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    servlet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Servlet</span><span class="token punctuation">)</span> myClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这里通过类加载器获得了 Servlet 类的 Class 对象，然后通过反射机制实例化了一个 Servlet 实例，并调用其 <code>service()</code> 函数。</p><h3 id="增强安全性" tabindex="-1"><a class="header-anchor" href="#增强安全性"><span>增强安全性</span></a></h3><p>上述程序的最后有一点不安全的地方。假设我是一个 Servlet 程序员，可以自行实现 Servlet 中的逻辑。如果我知道 Servlet 容器中的实现是上述的代码，那么我就可以在 <code>service()</code> 函数中将 <code>request</code> 强制转换为我自己的 <code>Request</code> 类，并调用该类中的公共函数。从容器的角度来看，不允许发生这种事情。一种优雅的解决方式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestFacade</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ServletRequest</span> request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RequestFacade</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 实现 ServletRequest 接口的所有函数</span></span>
<span class="line">    <span class="token comment">// 直接调用传入的 request 的实现函数</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，相当于将自定义的 Request 类封装到了 <code>RequestFacade</code> 类的私有域中，该类只暴露 ServletRequest 类中允许被调用的公共函数，其它公共函数被屏蔽。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">RequestFacade</span> requestFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestFacade</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">ResponseFacade</span> responseFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseFacade</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    servlet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Servlet</span><span class="token punctuation">)</span> myClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span><span class="token punctuation">)</span> requestFacade<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ServletResponse</span><span class="token punctuation">)</span> responseFacade<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准容器实现" tabindex="-1"><a class="header-anchor" href="#标准容器实现"><span>标准容器实现</span></a></h2><h3 id="standardwrapper" tabindex="-1"><a class="header-anchor" href="#standardwrapper"><span>StandardWrapper</span></a></h3><p>主要职责：加载其表示的 Servlet (Class) 并建立一个实例。<code>StandardWrapper</code> 容器流水线中的基本阀门 <code>StandardWrapperValve</code> 负责调用 <code>StandarWrapper</code> 的 <code>allocate()</code> 获得 Servlet 实例，然后调用 Servlet 实例的 <code>service()</code> 函数。</p><p>其中重要的区别在于，Servlet 是否实现了 <code>SingleThreadModel</code> 接口。实现该接口的目的在于保证一个 Servlet 实例的 <code>service()</code> 函数不会被两个线程同时调用。那么，为了提高 Servlet 容器的响应性能，通常会为实现 STM 的 Servlet 类创建多个实例，这样同时可以有多个线程分别调用每个实例的 <code>service()</code>。</p><p>由此，如果 Servlet 容器发现请求的 Servlet 没有实现 STM 接口，那么容器只加载并实例化该容器一次，对于之后的每次请求，返回同一个实例即可 (容器假定 <code>service()</code> 线程安全)，并调用 <code>service()</code> 函数；对于实现了 STM 接口的 Servlet 请求，容器需要从 <strong>实例池</strong> 中取出一个没有被使用的 Servlet 实例，再调用其 <code>service()</code> 函数。</p><p>可以看到，在类成员变量定义中，分别定义了可以被重复使用的 <code>instance</code> 实例，以及 <code>Stack</code> 实现的实例池：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Standard implementation of the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Wrapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> interface that represents</span>
<span class="line"> * an individual servlet definition.  No child Containers are allowed, and</span>
<span class="line"> * the parent Container must be a Context.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> Craig R. McClanahan</span>
<span class="line"> * <span class="token keyword">@author</span> Remy Maucherat</span>
<span class="line"> * <span class="token keyword">@version</span> $Id: StandardWrapper.java 939525 2010-04-30 00:36:35Z kkolinko $</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardWrapper</span></span>
<span class="line">    <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span></span>
<span class="line">    <span class="token keyword">implements</span> <span class="token class-name">ServletConfig</span><span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token punctuation">,</span> <span class="token class-name">NotificationEmitter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * The (single) initialized instance of this servlet.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Servlet</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Stack containing the STM instances.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Stack</span> instancePool <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，类内部的 <code>allocate()</code> 根据 Servlet 是否实现了 STM 来决定如何对上述两个变量进行赋值：</p><ul><li>要么将 <code>instance</code> 赋值为一个 Servlet 实例</li><li>要么将 <code>instancePool</code> 初始化并放入实例</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Allocate an initialized instance of this Servlet that is ready to have</span>
<span class="line"> * its <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> method called.  If the servlet class does</span>
<span class="line"> * not implement <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">SingleThreadModel</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>, the (only) initialized</span>
<span class="line"> * instance may be returned immediately.  If the servlet class implements</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">SingleThreadModel</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>, the Wrapper implementation must ensure</span>
<span class="line"> * that this instance is not allocated again until it is deallocated by a</span>
<span class="line"> * call to <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@exception</span> <span class="token reference"><span class="token class-name">ServletException</span></span> if the servlet init() method threw</span>
<span class="line"> *  an exception</span>
<span class="line"> * <span class="token keyword">@exception</span> <span class="token reference"><span class="token class-name">ServletException</span></span> if a loading error occurs</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Servlet</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// If we are currently unloading this servlet, throw an exception</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>unloading<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span></span>
<span class="line">        <span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.unloading&quot;</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// If not SingleThreadedModel, return the same instance every time</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Load and initialize our instance if necessary</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Allocating non-STM instance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                        instance <span class="token operator">=</span> <span class="token function">loadServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">throw</span> e<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span></span>
<span class="line">                            <span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.allocate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;  Returning non-STM instance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            countAllocated<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>instancePool<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>countAllocated <span class="token operator">&gt;=</span> nInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Allocate a new instance if possible, or else wait</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>nInstances <span class="token operator">&lt;</span> maxInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">loadServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    nInstances<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span></span>
<span class="line">                        <span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.allocate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    instancePool<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;  Returning allocated STM instance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        countAllocated<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Servlet</span><span class="token punctuation">)</span> instancePool<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种赋值方式都会用到真正获取到 Servlet 实例的 <code>loadServlet()</code>，加载实例后，还会调用 Servlet 实例的 <code>init()</code> 函数：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Load and initialize an instance of this servlet, if there is not already</span>
<span class="line"> * at least one initialized instance.  This can be used, for example, to</span>
<span class="line"> * load servlets that are marked in the deployment descriptor to be loaded</span>
<span class="line"> * at server startup time.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Servlet</span> <span class="token function">loadServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Nothing to do if we already have an instance or an instance pool</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleThreadModel <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>swallowOutput<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SystemLogHandler</span><span class="token punctuation">.</span><span class="token function">startCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Servlet</span> servlet<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Instantiate and initialize an instance of the servlet class itself</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            servlet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Servlet</span><span class="token punctuation">)</span> classClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">unavailable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// Restore the context ClassLoader</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span></span>
<span class="line">                <span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.notServlet&quot;</span><span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">unavailable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Added extra log statement for Bugzilla 36630:</span></span>
<span class="line">            <span class="token comment">// http://issues.apache.org/bugzilla/show_bug.cgi?id=36630</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.instantiate&quot;</span><span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Restore the context ClassLoader</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span></span>
<span class="line">                <span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.instantiate&quot;</span><span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Check if loading the servlet in this web application should be</span></span>
<span class="line">        <span class="token comment">// allowed</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isServletAllowed</span><span class="token punctuation">(</span>servlet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span></span>
<span class="line">                <span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.privilegedServlet&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                              actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Special handling for ContainerServlet instances</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>servlet <span class="token keyword">instanceof</span> <span class="token class-name">ContainerServlet</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token function">isContainerProvidedServlet</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">             <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">)</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContainerServlet</span><span class="token punctuation">)</span> servlet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setWrapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        classLoadTime<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Call the initialization method of this servlet</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            instanceSupport<span class="token punctuation">.</span><span class="token function">fireInstanceEvent</span><span class="token punctuation">(</span><span class="token class-name">InstanceEvent</span><span class="token punctuation">.</span><span class="token constant">BEFORE_INIT_EVENT</span><span class="token punctuation">,</span></span>
<span class="line">                                              servlet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span><span class="token punctuation">)</span>facade<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span><span class="token function">doAsPrivilege</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                           servlet<span class="token punctuation">,</span></span>
<span class="line">                                           classType<span class="token punctuation">,</span></span>
<span class="line">                                           args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                servlet<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>facade<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Invoke jspInit on JSP pages</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>loadOnStartup <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>jspFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// Invoking jspInit</span></span>
<span class="line">                <span class="token class-name">DummyRequest</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DummyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                req<span class="token punctuation">.</span><span class="token function">setServletPath</span><span class="token punctuation">(</span>jspFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                req<span class="token punctuation">.</span><span class="token function">setQueryString</span><span class="token punctuation">(</span><span class="token string">&quot;jsp_precompile=true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">DummyResponse</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DummyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>req<span class="token punctuation">,</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span><span class="token function">doAsPrivilege</span><span class="token punctuation">(</span><span class="token string">&quot;service&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                               servlet<span class="token punctuation">,</span></span>
<span class="line">                                               classTypeUsedInService<span class="token punctuation">,</span></span>
<span class="line">                                               args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            instanceSupport<span class="token punctuation">.</span><span class="token function">fireInstanceEvent</span><span class="token punctuation">(</span><span class="token class-name">InstanceEvent</span><span class="token punctuation">.</span><span class="token constant">AFTER_INIT_EVENT</span><span class="token punctuation">,</span></span>
<span class="line">                                              servlet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnavailableException</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            instanceSupport<span class="token punctuation">.</span><span class="token function">fireInstanceEvent</span><span class="token punctuation">(</span><span class="token class-name">InstanceEvent</span><span class="token punctuation">.</span><span class="token constant">AFTER_INIT_EVENT</span><span class="token punctuation">,</span></span>
<span class="line">                                              servlet<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">unavailable</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">throw</span> f<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            instanceSupport<span class="token punctuation">.</span><span class="token function">fireInstanceEvent</span><span class="token punctuation">(</span><span class="token class-name">InstanceEvent</span><span class="token punctuation">.</span><span class="token constant">AFTER_INIT_EVENT</span><span class="token punctuation">,</span></span>
<span class="line">                                              servlet<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// If the servlet wanted to be unavailable it would have</span></span>
<span class="line">            <span class="token comment">// said so, so do not call unavailable(null).</span></span>
<span class="line">            <span class="token keyword">throw</span> f<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;StandardWrapper.Throwable&quot;</span><span class="token punctuation">,</span> f <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            instanceSupport<span class="token punctuation">.</span><span class="token function">fireInstanceEvent</span><span class="token punctuation">(</span><span class="token class-name">InstanceEvent</span><span class="token punctuation">.</span><span class="token constant">AFTER_INIT_EVENT</span><span class="token punctuation">,</span></span>
<span class="line">                                              servlet<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// If the servlet wanted to be unavailable it would have</span></span>
<span class="line">            <span class="token comment">// said so, so do not call unavailable(null).</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span></span>
<span class="line">                <span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardWrapper.initException&quot;</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Register our newly initialized instance</span></span>
<span class="line">        singleThreadModel <span class="token operator">=</span> servlet <span class="token keyword">instanceof</span> <span class="token class-name">SingleThreadModel</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleThreadModel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>instancePool <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">                instancePool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">fireContainerEvent</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        loadTime<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>t1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>swallowOutput<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> log <span class="token operator">=</span> <span class="token class-name">SystemLogHandler</span><span class="token punctuation">.</span><span class="token function">stopCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>log <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> log<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> servlet<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="standardcontext" tabindex="-1"><a class="header-anchor" href="#standardcontext"><span>StandardContext</span></a></h3><p>一个上下文容器代表一个 Web 应用，包含一个或多个 wrapper，每个 wrapper 代表一个 Servlet。上下文容器内部维护了请求 URI 与每个 wrapper (即每个 Servlet) 的映射。对于每个请求，上下文容器内流水线的基本阀门 <code>StandardContextValve</code> 会查找容器内维护的所有 wrapper，并选择一个与要处理的请求匹配的 wrapper，调用其 <code>invoke()</code> 函数。</p><hr>`,74)]))}const i=s(t,[["render",l],["__file","Tomcat Container.html.vue"]]),u=JSON.parse('{"path":"/notes/Java/Tomcat%20Container.html","title":"Tomcat - Container","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Servlet 容器是如何工作的","slug":"servlet-容器是如何工作的","link":"#servlet-容器是如何工作的","children":[]},{"level":2,"title":"Catalina 架构","slug":"catalina-架构","link":"#catalina-架构","children":[{"level":3,"title":"连接器","slug":"连接器","link":"#连接器","children":[]},{"level":3,"title":"容器","slug":"容器","link":"#容器","children":[]},{"level":3,"title":"Server","slug":"server","link":"#server","children":[]}]},{"level":2,"title":"Servlet 接口","slug":"servlet-接口","link":"#servlet-接口","children":[]},{"level":2,"title":"一个简单的 Servlet 容器","slug":"一个简单的-servlet-容器","link":"#一个简单的-servlet-容器","children":[{"level":3,"title":"Request && Response","slug":"request-response","link":"#request-response","children":[]},{"level":3,"title":"静态资源与 Servlet 的路由","slug":"静态资源与-servlet-的路由","link":"#静态资源与-servlet-的路由","children":[]},{"level":3,"title":"Servlet 加载","slug":"servlet-加载","link":"#servlet-加载","children":[]},{"level":3,"title":"增强安全性","slug":"增强安全性","link":"#增强安全性","children":[]}]},{"level":2,"title":"标准容器实现","slug":"标准容器实现","link":"#标准容器实现","children":[{"level":3,"title":"StandardWrapper","slug":"standardwrapper","link":"#standardwrapper","children":[]},{"level":3,"title":"StandardContext","slug":"standardcontext","link":"#standardcontext","children":[]}]}],"git":{},"filePathRelative":"notes/Java/Tomcat Container.md"}');export{i as comp,u as data};
