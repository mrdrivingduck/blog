import{_ as a,c as n,a as e,o as p}from"./app-7eKjwDat.js";const l={};function t(c,s){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="chapter-8-1-8-2-container-adapters" tabindex="-1"><a class="header-anchor" href="#chapter-8-1-8-2-container-adapters"><span>Chapter 8.1-8.2 - Container Adapters</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 07 20:44</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_8-1-适配器的概念与分类" tabindex="-1"><a class="header-anchor" href="#_8-1-适配器的概念与分类"><span>8.1 适配器的概念与分类</span></a></h2><p>适配器在 STL 组件的灵活组合运用上扮演转换器的概念。Adapter 实际上也是一种设计模式，定义为：将一个 class 的接口转换为另一个 class 的接口，使原本因接口不兼容而不能合作的 classes 可以一起运作：</p><ul><li>改变仿函数接口的，称为 function adapter <ul><li>bind (绑定)</li><li>negate (否定)</li><li>compose (组合)</li><li>对一般函数 / 成员函数进行修饰</li></ul></li><li>改变容器接口的，称为 container adapter <ul><li>queue / stack</li></ul></li><li>改变迭代器接口的，称为 iterator adapter <ul><li>insert iterators</li><li>reverse iterators</li><li>IO stream iterators</li></ul></li></ul><h2 id="_8-2-container-adapters" tabindex="-1"><a class="header-anchor" href="#_8-2-container-adapters"><span>8.2 Container Adapters</span></a></h2><p>stack 和 queue 两个适配器的底层都是 deque。这两个适配器通过屏蔽或保留 deque 的一些接口，形成了不同的功能。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Sequence</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>deque<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">stack</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Sequence</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">stack</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Sequence c<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Sequence</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>deque<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">queue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Sequence</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">queue</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Sequence c<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const o=a(l,[["render",t],["__file","Chapter 8.1-8.2 - Container Adapters.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%208%20-%20%E9%80%82%E9%85%8D%E5%99%A8/Chapter%208.1-8.2%20-%20Container%20Adapters.html","title":"Chapter 8.1-8.2 - Container Adapters","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.1 适配器的概念与分类","slug":"_8-1-适配器的概念与分类","link":"#_8-1-适配器的概念与分类","children":[]},{"level":2,"title":"8.2 Container Adapters","slug":"_8-2-container-adapters","link":"#_8-2-container-adapters","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 8 - 适配器/Chapter 8.1-8.2 - Container Adapters.md"}');export{o as comp,r as data};
