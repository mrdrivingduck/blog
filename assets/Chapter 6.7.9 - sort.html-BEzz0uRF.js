import{_ as n,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(l,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-6-7-9-sort" tabindex="-1"><a class="header-anchor" href="#chapter-6-7-9-sort"><span>Chapter 6.7.9 - sort</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 15 22:25</p><p>Nanjing, Jiangsu, China</p><hr><p>STL 中的 <code>sort()</code> 接受两个 Random Access Iterator，默认使用 <code>operator&lt;</code> 使元素从小到大排列，但也允许用户指定一个二元仿函数作为排序标准。</p><ul><li>STL 中的关系型容器由于本身就是有序的，因此并不需要用到这个算法</li><li>序列式容器中拥有特定出入口的容器 (stack / queue / priority_queue) 不能使用这个算法</li><li>list 和 slist 由于提供的迭代器类型不属于随机访问迭代器，因此只能使用它们自己的成员函数 <code>sort()</code></li></ul><p>剩下只有 vector 和 deque 能够使用这个算法。</p><p>STL 的 <code>sort()</code> 在数据量较大时使用 <strong>快速排序算法</strong> 进行分段递归排序；当数据量低于某个阈值后，改用 <strong>插入排序算法</strong>；如果递归的层次过深，改用 <strong>堆排序算法</strong>。</p><h2 id="insertion-sort" tabindex="-1"><a class="header-anchor" href="#insertion-sort"><span>Insertion Sort</span></a></h2><p>插入排序算法是一个经典的两层循环。将序列的前端视为有序区，后端视为无序区。每轮外层循环将无序区的第一个元素插入有序区中，而具体的插入位置需要通过内层循环来确定。内存循环通过不断交换 <em>逆序对 (inversion)</em> 完成排序。这个算法的复杂度为 O(N^2)，但在数据量较少时有不错的效果；另外，在数据已经大致有序的前提下，性能也会很不错。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__insertion_sort</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span> _RandomAccessIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_RandomAccessIter __i <span class="token operator">=</span> __first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> __i <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span>  <span class="token comment">// 从无序区的第一个元素开始循环</span></span>
<span class="line">    <span class="token function">__linear_insert</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __i<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__linear_insert</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                            _RandomAccessIter __last<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  _Tp __val <span class="token operator">=</span> <span class="token operator">*</span>__last<span class="token punctuation">;</span>     <span class="token comment">// 待插入的元素</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__val <span class="token operator">&lt;</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 待插入的元素比第一个元素都小</span></span>
<span class="line">    <span class="token function">copy_backward</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __last <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>__first <span class="token operator">=</span> __val<span class="token punctuation">;</span>      <span class="token comment">// 直接将整个有序区后移，并将待插入放到第一个位置上</span></span>
<span class="line">  <span class="token punctuation">}</span>  <span class="token comment">// 该分支使得下面的内存循环不需要判断循环区间是否到达边界，省下内层循环中的一个判断操作</span></span>
<span class="line">  <span class="token keyword">else</span></span>
<span class="line">    <span class="token function">__unguarded_linear_insert</span><span class="token punctuation">(</span>__last<span class="token punctuation">,</span> __val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 否则开始插入</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__unguarded_linear_insert</span><span class="token punctuation">(</span>_RandomAccessIter __last<span class="token punctuation">,</span> _Tp __val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  _RandomAccessIter __next <span class="token operator">=</span> __last<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">--</span>__next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__val <span class="token operator">&lt;</span> <span class="token operator">*</span>__next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 待插入元素小于当前元素 (目前是一个逆序对)</span></span>
<span class="line">    <span class="token operator">*</span>__last <span class="token operator">=</span> <span class="token operator">*</span>__next<span class="token punctuation">;</span>       <span class="token comment">// 对换逆序对</span></span>
<span class="line">    __last <span class="token operator">=</span> __next<span class="token punctuation">;</span>         <span class="token comment">// 探索前一个位置</span></span>
<span class="line">    <span class="token operator">--</span>__next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">*</span>__last <span class="token operator">=</span> __val<span class="token punctuation">;</span>  <span class="token comment">// 将待插入元素放入最终的插入位置</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="quick-sort" tabindex="-1"><a class="header-anchor" href="#quick-sort"><span>Quick Sort</span></a></h2><p>快速排序是目前已知最快的排序方法，平均复杂度为 O(N log(N))，最坏情况将达到 O(N^2)。快速排序的核心在于将大区间分割为小区间，然后分段递归。最坏的情况发生在枢轴分割时产生了一个空的子区间，这样完全没有达到分割的预期效果。</p><h3 id="median-of-three" tabindex="-1"><a class="header-anchor" href="#median-of-three"><span>Median-of-Three</span></a></h3><p>任何一个元素都可以被选为枢轴，但合适与否会影响快速排序的效率。为了避免序列元素中的非随机性，可以选择序列中头、中、尾三个位置的元素，以其中的中间值作为枢轴。为了能够快速取出序列中间位置的值，迭代器需要能够随机访问。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> <span class="token function">__median</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __a<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __b<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__a <span class="token operator">&lt;</span> __b<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__b <span class="token operator">&lt;</span> __c<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> __b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__a <span class="token operator">&lt;</span> __c<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> __c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      <span class="token keyword">return</span> __a<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__a <span class="token operator">&lt;</span> __c<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> __a<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__b <span class="token operator">&lt;</span> __c<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> __c<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span></span>
<span class="line">    <span class="token keyword">return</span> __b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span></span>
<span class="line"><span class="token function">__median</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __a<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __b<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __c<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="partitioning" tabindex="-1"><a class="header-anchor" href="#partitioning"><span>Partitioning</span></a></h3><p>使头部迭代器和尾部迭代器同时向中间移动，知道不满足枢轴条件时停下。如果两个迭代器没有交错，那么元素互换；如果两个迭代器已经交错，说明整个序列已经分割完毕。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_RandomAccessIter <span class="token function">__unguarded_partition</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                                        _RandomAccessIter __last<span class="token punctuation">,</span></span>
<span class="line">                                        _Tp __pivot<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">&lt;</span> __pivot<span class="token punctuation">)</span>  <span class="token comment">// 从前寻找第一个不满足枢轴条件的元素</span></span>
<span class="line">      <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>__last<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__pivot <span class="token operator">&lt;</span> <span class="token operator">*</span>__last<span class="token punctuation">)</span>   <span class="token comment">// 从后寻找第一个不满足枢轴条件的元素</span></span>
<span class="line">      <span class="token operator">--</span>__last<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>__first <span class="token operator">&lt;</span> __last<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 前后迭代器已经交错</span></span>
<span class="line">      <span class="token keyword">return</span> __first<span class="token punctuation">;</span>           <span class="token comment">// 返回</span></span>
<span class="line">    <span class="token function">iter_swap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 交换不满足枢轴条件的两端元素</span></span>
<span class="line">    <span class="token operator">++</span>__first<span class="token punctuation">;</span>                   <span class="token comment">// 继续检查下一个元素</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_RandomAccessIter <span class="token function">__unguarded_partition</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                                        _RandomAccessIter __last<span class="token punctuation">,</span></span>
<span class="line">                                        _Tp __pivot<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="threshold" tabindex="-1"><a class="header-anchor" href="#threshold"><span>threshold</span></a></h3><p>插入排序和快速排序的切换阈值为多少？实际最佳值因设备而异。</p><h3 id="final-insertion-sort" tabindex="-1"><a class="header-anchor" href="#final-insertion-sort"><span>final insertion sort</span></a></h3><p>插入排序算法在面对 <em>几乎已经有序</em> 的序列时，有着很好的表现。</p><h3 id="introsort" tabindex="-1"><a class="header-anchor" href="#introsort"><span>introsort</span></a></h3><p>由 <em>David R.Musser</em> 提出，当分割行为有向 O(N^2) 转化的倾向时，自动侦测并转而改用堆排序。</p><h3 id="sgi-stl-sort" tabindex="-1"><a class="header-anchor" href="#sgi-stl-sort"><span>SGI STL sort</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span> _RandomAccessIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIter<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__introsort_loop</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>              <span class="token comment">// 进行一轮 introsort</span></span>
<span class="line">                     <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">__lg</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归深度计算</span></span>
<span class="line">    <span class="token function">__final_insertion_sort</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 最终进行一次插入排序</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _Size <span class="token function">__lg</span><span class="token punctuation">(</span>_Size __n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  _Size __k<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>__k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> __n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> __n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>__k<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __k<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述排序包含两个过程：</p><ol><li>introsort</li><li>final_insertion_sort</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__introsort_loop</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                      _RandomAccessIter __last<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">,</span></span>
<span class="line">                      _Size __depth_limit<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">&gt;</span> __stl_threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 元素数量大于阈值，使用快速排序</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__depth_limit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">// 不再允许加深递归</span></span>
<span class="line">      <span class="token function">partial_sort</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 改为使用堆排序</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">--</span>__depth_limit<span class="token punctuation">;</span>  <span class="token comment">// 递归深度减 1，准备递归</span></span>
<span class="line">    _RandomAccessIter __cut <span class="token operator">=</span></span>
<span class="line">      <span class="token function">__unguarded_partition</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span></span>
<span class="line">                            <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token function">__median</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">,</span>  <span class="token comment">// 选择合适的枢轴，并进行切分</span></span>
<span class="line">                                         <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                         <span class="token operator">*</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">__introsort_loop</span><span class="token punctuation">(</span>__cut<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> <span class="token punctuation">(</span>_Tp<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> __depth_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对后半区间递归排序</span></span>
<span class="line">    __last <span class="token operator">=</span> __cut<span class="token punctuation">;</span>  <span class="token comment">// 将区间缩小为前半区间，对前半区间进行排序</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> __stl_threshold <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token comment">// 开始 introsort 的阈值个数为 16</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__final_insertion_sort</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                            _RandomAccessIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">&gt;</span> __stl_threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 区间内元素个数多于阈值</span></span>
<span class="line">    <span class="token function">__insertion_sort</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __first <span class="token operator">+</span> __stl_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对阈值区间直接进行插入排序 (这部分没有被 introsort 排序)</span></span>
<span class="line">    <span class="token function">__unguarded_insertion_sort</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __stl_threshold<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阈值区间以外的元素进行插入排序</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span>                                  <span class="token comment">// 区间内元素个数少于阈值</span></span>
<span class="line">    <span class="token function">__insertion_sort</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 直接进行插入排序</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__unguarded_insertion_sort</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                                _RandomAccessIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__unguarded_insertion_sort_aux</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__unguarded_insertion_sort_aux</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                                    _RandomAccessIter __last<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_RandomAccessIter __i <span class="token operator">=</span> __first<span class="token punctuation">;</span> __i <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">__unguarded_linear_insert</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 双层循环的插入排序</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const i=n(e,[["render",o],["__file","Chapter 6.7.9 - sort.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.7.9%20-%20sort.html","title":"Chapter 6.7.9 - sort","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Insertion Sort","slug":"insertion-sort","link":"#insertion-sort","children":[]},{"level":2,"title":"Quick Sort","slug":"quick-sort","link":"#quick-sort","children":[{"level":3,"title":"Median-of-Three","slug":"median-of-three","link":"#median-of-three","children":[]},{"level":3,"title":"Partitioning","slug":"partitioning","link":"#partitioning","children":[]},{"level":3,"title":"threshold","slug":"threshold","link":"#threshold","children":[]},{"level":3,"title":"final insertion sort","slug":"final-insertion-sort","link":"#final-insertion-sort","children":[]},{"level":3,"title":"introsort","slug":"introsort","link":"#introsort","children":[]},{"level":3,"title":"SGI STL sort","slug":"sgi-stl-sort","link":"#sgi-stl-sort","children":[]}]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.7.9 - sort.md"}');export{i as comp,r as data};
