import{_ as r,c as a,a as n,o as s}from"./app-7eKjwDat.js";const c={};function o(l,e){return s(),a("div",null,e[0]||(e[0]=[n(`<h1 id="linux-performance-perf-record" tabindex="-1"><a class="header-anchor" href="#linux-performance-perf-record"><span>Linux Performance - Perf Record</span></a></h1><p>Created by: Mr Dk.</p><p>2023 / 09 / 18 20:55 💣</p><p>Hangzhou, Zhejiang, China</p><hr><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>Background</span></a></h2><p><code>perf record</code> 用于采样程序运行时的统计信息并记录到文件中。采样结果可以被转移到其它机器上进行分析，需要和其它 <code>perf</code> 子命令配合使用。采样的粒度可以是每个线程、每个进程、每个 CPU、某几类事件，等等。</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><p>文档过长，选项过多，暂不一一记录。根据性能分析大师 Brendan Gregg 提供的一些 <a href="https://www.brendangregg.com/perf.html" target="_blank" rel="noopener noreferrer">One-Liners</a>，比较常用的命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Sample CPU stack traces (via frame pointers) for the specified PID, at 99 Hertz, for 10 seconds:</span></span>
<span class="line">perf record <span class="token parameter variable">-F</span> <span class="token number">99</span> <span class="token parameter variable">-p</span> PID <span class="token parameter variable">-g</span> -- <span class="token function">sleep</span> <span class="token number">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>-F</code> 表示采样频率赫兹数（每秒采样多少次），以更高的频率采样也可以，但会带来更多开销；以 <code>99</code> Hz 采样可以与 CPU 时钟周期错开，防止采样到一些因时钟周期而产生的特定行为</li><li><code>-p</code> 表示被采样的进程号，也可以是一个逗号分隔的列表；<code>-t</code> 同理，表示线程号</li><li><code>-a</code> 表示在所有 CPU 上采样，自 Linux 4.11 开始已经是默认选项；通过 <code>-C</code> 可以指定 CPU 列表或范围采样</li><li><code>-g</code> 表示记录采样时的程序调用栈</li><li><code>-- sleep 10</code> 表示采样 10s</li></ul><p><code>-e</code> 可以指定记录的事件。什么事件都不指定时，默认追踪 <code>cycles</code> 事件（时钟周期数）。</p><p>采样结束以后，在当前目录下将会生成一个采样结果文件 <code>perf.data</code>（用 <code>-o</code> 参数可以重命名）。</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://perf.wiki.kernel.org/index.php/Tutorial#Sampling_with_perf_record" target="_blank" rel="noopener noreferrer">Kernel Wiki - Sampling with perf record</a></p><p><a href="https://man7.org/linux/man-pages/man1/perf-record.1.html" target="_blank" rel="noopener noreferrer">perf-record(1) — Linux manual page</a></p><p><a href="https://www.brendangregg.com/perf.html" target="_blank" rel="noopener noreferrer">perf Examples</a></p>`,18)]))}const d=r(c,[["render",o],["__file","Linux Perf Record.html.vue"]]),t=JSON.parse('{"path":"/notes/Performance/Linux%20Perf%20Record.html","title":"Linux Performance - Perf Record","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Background","slug":"background","link":"#background","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Performance/Linux Perf Record.md"}');export{d as comp,t as data};
