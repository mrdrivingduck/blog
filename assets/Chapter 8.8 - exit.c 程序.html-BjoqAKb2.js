import{_ as s}from"./5-20-XR9q3PuR.js";import{_ as a,c as p,a as t,o as e}from"./app-7eKjwDat.js";const o={};function l(c,n){return e(),p("div",null,n[0]||(n[0]=[t('<h1 id="chapter-8-8-exit-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-8-8-exit-c-程序"><span>Chapter 8.8 - exit.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 20 17:43</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_8-8-exit-c-程序" tabindex="-1"><a class="header-anchor" href="#_8-8-exit-c-程序"><span>8.8 exit.c 程序</span></a></h2><h3 id="_8-8-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_8-8-1-功能描述"><span>8.8.1 功能描述</span></a></h3><p>主要实现进程终止和退出的相关处理事宜。</p><h3 id="_8-8-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_8-8-2-代码注释"><span>8.8.2 代码注释</span></a></h3><h4 id="release-函数" tabindex="-1"><a class="header-anchor" href="#release-函数"><span>release() 函数</span></a></h4><p>在 <code>sys_kill()</code> 和 <code>sys_waitpid()</code> 系统调用中被调用，释放进程占用的任务数组项，以及 TSS 占用的内存页面：</p><ul><li>扫描任务数组指针表</li><li>如果找到，清空任务槽，释放任务数据结构占用的内存页面</li><li>执行调度函数，在返回时立刻退出</li></ul><p>如果表中没有找到指定任务对应的项，则内核 panic，将任务 p 从进程双向链表中删除：</p><p><img src="'+s+`" alt="5-20"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 任务指针为 NULL</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;task releasing itself\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_TASKS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 更新进程链表的链接</span></span>
<span class="line">            <span class="token comment">// 将任务 p 从双向链表中删除</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 不是最老子进程</span></span>
<span class="line">                p<span class="token operator">-&gt;</span>p_osptr<span class="token operator">-&gt;</span>p_ysptr <span class="token operator">=</span> p<span class="token operator">-&gt;</span>p_ysptr<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>p_ysptr<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 不是最新子进程</span></span>
<span class="line">                p<span class="token operator">-&gt;</span>p_ysptr<span class="token operator">-&gt;</span>p_osptr <span class="token operator">=</span> p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                <span class="token comment">// 最新子进程需要设置父进程指针</span></span>
<span class="line">                p<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>p_cptr <span class="token operator">=</span> p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token function">free_page</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">   <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to release non-existent task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检查进程树-调试函数" tabindex="-1"><a class="header-anchor" href="#检查进程树-调试函数"><span>检查进程树 - 调试函数</span></a></h4><p>下面的部分是条件编译的，仅在调试时使用。因为这个函数很慢：</p><ul><li>验证 p_ysptr 和 p_osptr 构成的双向链表</li><li>检查 p_cptr 和 p_pptr 构成的进程树</li></ul><p>逻辑有些无聊，我不乐意写。</p><h4 id="send-sig-向任务发送信号" tabindex="-1"><a class="header-anchor" href="#send-sig-向任务发送信号"><span>send_sig() - 向任务发送信号</span></a></h4><p>首先判断参数的正确性。判断条件是否能够满足 - 是否有发送信号的权利。如果满足条件，就向指定的进程发送信号。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">send_sig</span><span class="token punctuation">(</span><span class="token keyword">long</span> sig<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> priv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 没有权限 &amp;&amp; 当前进程的有效用户 ID 和 p 不同 &amp;&amp; 不是超级用户</span></span>
<span class="line">    <span class="token comment">// suser() - (current-&gt;euid == 0)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>priv <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>euid <span class="token operator">!=</span> p<span class="token operator">-&gt;</span>euid<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果发送的信号是 SIGKILL 或 SIGCONT</span></span>
<span class="line">    <span class="token comment">// 如果此时 p 处于停止状态，就置其为就绪状态</span></span>
<span class="line">    <span class="token comment">// 修改进程的信号 bitmap，去掉会导致进程停止的信号</span></span>
<span class="line">    <span class="token comment">//   -- SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sig <span class="token operator">==</span> SIGKILL<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sig <span class="token operator">==</span> SIGCONT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_STOPPED<span class="token punctuation">)</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGSTOP<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGTSTP<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span></span>
<span class="line">                        <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGTTIN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGTTOU<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 发送的信号被进程忽略，因此不需要发送信号</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> p<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果信号是 SIGSTOP、SIGTSTP、SIGTTIN、SIGTTOU 之一</span></span>
<span class="line">    <span class="token comment">// 就要让接收信号的进程停止运行</span></span>
<span class="line">    <span class="token comment">// 因此还要复位让进程继续运行的信号 - SIGCONT</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sig <span class="token operator">&gt;=</span> SIGSTOP<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sig <span class="token operator">&lt;=</span> SIGTTOU<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGCONT<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 发送信号</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="session-of-pgrp-根据进程组号取得进程所属会话号" tabindex="-1"><a class="header-anchor" href="#session-of-pgrp-根据进程组号取得进程所属会话号"><span>session_of_pgrp() - 根据进程组号取得进程所属会话号</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">session_of_pgrp</span><span class="token punctuation">(</span><span class="token keyword">int</span> pgrp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">==</span> pgrp<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kill-pg-向进程组发送信号" tabindex="-1"><a class="header-anchor" href="#kill-pg-向进程组发送信号"><span>kill_pg() - 向进程组发送信号</span></a></h4><blockquote><p>有意思的是，Linux 里面的 kill 实际上是向进程或进程组发送信号，而不是杀死进程的意思。只是其中有一个信号可以杀死进程。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">kill_pg</span><span class="token punctuation">(</span><span class="token keyword">int</span> pgrp<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">int</span> priv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> err<span class="token punctuation">,</span> retval <span class="token operator">=</span> <span class="token operator">-</span>ESRCH<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> found <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>sig <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> sig <span class="token operator">&gt;</span> <span class="token number">32</span> <span class="token operator">||</span> pgrp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">==</span> pgrp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>sig <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> priv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 信号发送失败，返回发送失败的错误码</span></span>
<span class="line">                retval <span class="token operator">=</span> err<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                <span class="token comment">// 信号发送成功</span></span>
<span class="line">                found<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>found <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> retval<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只要有一次信号发送成功，就返回 0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kill-proc-向进程发送信号" tabindex="-1"><a class="header-anchor" href="#kill-proc-向进程发送信号"><span>kill_proc() - 向进程发送信号</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">kill_proc</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">int</span> priv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>sig <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> sig <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 发送成功返回 0，发送失败返回出错号</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>sig <span class="token operator">?</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> priv<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span>ESRCH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进程不存在</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-kill-kill-系统调用" tabindex="-1"><a class="header-anchor" href="#sys-kill-kill-系统调用"><span>sys_kill() - kill 系统调用</span></a></h4><p>可用于向任何进程或进程组发送任何信号，并非只是杀死进程：</p><ul><li>pid 是进程号 <ul><li>pid &gt; 0 : 信号发送给 pid 进程</li><li>pid = 0 : 信号发送给当前进程的进程组中的所有进程</li><li>pid = -1 : 信号发送给除 init 进程意外的所有进程</li><li>pid &lt; -1 : 信号发送给进程组 -pid 的所有进程</li></ul></li><li>sig 是要发送的信号 <ul><li>sig = 0 则不发送信号，但仍会进行错误检查</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> NR_TASKS <span class="token operator">+</span> task<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> err<span class="token punctuation">,</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 当前进程组中的所有进程</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">kill_pg</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 除 init 进程之外的所有进程</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                retval <span class="token operator">=</span> err<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 进程组 -pid 中的所有进程</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">kill_pg</span><span class="token punctuation">(</span><span class="token operator">-</span>pid<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 普通的信号发送</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">kill_proc</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="is-orphaned-pgrp-判断孤儿进程组" tabindex="-1"><a class="header-anchor" href="#is-orphaned-pgrp-判断孤儿进程组"><span>is_orphaned_pgrp() - 判断孤儿进程组</span></a></h4><p>两种情况下，当一个进程终止时，可能导致进程组变成孤儿。</p><ul><li>组外最后一个连接父进程的进程终止</li><li>最后一个父进程的直接后裔终止</li></ul><p><img src="`+s+`" alt="5-20"></p><p>孤儿进程组中的所有进程会与它们的作业控制 shell 断开联系。因此，含有停止状态进程的孤儿进程组需要接收到一个 SIGHUP 信号和一个 SIGCONT 信号，指示它们已经从它们的会话中断开联系：</p><ul><li>SIGHUP 信号将导致进程终止</li><li>SIGCONT 信号使进程继续运行</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 判断进程组是否是孤儿进程</span></span>
<span class="line"><span class="token comment">// 如果不是则返回 0，如果是则返回 1</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">is_orphaned_pgrp</span><span class="token punctuation">(</span><span class="token keyword">int</span> pgrp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FRIST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">||</span>                           <span class="token comment">// 空槽</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> pgrp<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token comment">// 不是指定进程组的成员</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_ZOMBIE<span class="token punctuation">)</span> <span class="token operator">||</span>    <span class="token comment">// 已经处于僵死状态</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>pid <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// 父进程是 init 进程</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span>                          <span class="token comment">// 跳过</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> pgrp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token comment">// 父进程不属于进程组</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>session <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 属于同一个会话</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                 <span class="token comment">// 肯定不是孤儿</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 否则，一定是孤儿进程组</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这一段没看懂 😥</p></blockquote><h4 id="has-stopped-jobs-判断进程组中是否含有处于停止状态的作业" tabindex="-1"><a class="header-anchor" href="#has-stopped-jobs-判断进程组中是否含有处于停止状态的作业"><span>has_stopped_jobs() - 判断进程组中是否含有处于停止状态的作业</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">has_stopped_jobs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pgrp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> pgrp<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_STOPPED<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-exit-程序退出处理函数" tabindex="-1"><a class="header-anchor" href="#do-exit-程序退出处理函数"><span>do_exit() - 程序退出处理函数</span></a></h4><p>被 <code>exit()</code> 系统调用处理函数调用。根据当前进程自身的特性进行处理，将当前进程的状态设置为僵死状态。调用调度函数执行其它进程，不再返回。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">volatile</span> <span class="token keyword">void</span> <span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token keyword">long</span> code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 释放当前进程代码段和数据段所占内存页</span></span>
<span class="line">    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代码段</span></span>
<span class="line">    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据段</span></span>
<span class="line">    <span class="token comment">// 关闭进程打开的所有文件</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_OPEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">sys_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// inode 以及库文件的同步操作</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>pwd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>executable <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>library<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>library <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设置进程状态</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_ZOMBIE<span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查当前进程的退出，是否会造成任何进程组变成孤儿进程组</span></span>
<span class="line">    <span class="token comment">// 如果有，且有处于停止状态的进程，则发送 SIGHUP 和 SIGCONT 信号</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 情况 1 - 父进程在另一个进程组中，本进程是进程组与外界唯一的联系</span></span>
<span class="line">    <span class="token comment">// 所以进程组将变成一个孤儿进程组</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>session <span class="token operator">==</span> current<span class="token operator">-&gt;</span>session<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token function">is_orphaned_pgrp</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token function">has_stopped_jobs</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">kill_pg</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> SIGHUP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">kill_pg</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> ISGCONT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 通知父进程当前进程将要终止</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 处理当前进程所有的子进程</span></span>
<span class="line">    <span class="token comment">// 让 init 进程集成当前进程的所有子进程</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> current<span class="token operator">-&gt;</span>p_cptr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>p_pptr <span class="token operator">=</span> task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_ZOMBIE<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 向 init 进程发送 SIGCHLD</span></span>
<span class="line">                task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 情况 2 - 当前进程和子进程在不同的进程组中</span></span>
<span class="line">            <span class="token comment">// 本进程是它们与外界的唯一链接</span></span>
<span class="line">            <span class="token comment">// 子进程所在的进程组将变成孤儿进程组</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>session <span class="token operator">==</span> current<span class="token operator">-&gt;</span>session<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                <span class="token function">is_orphaned_pgrp</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                <span class="token function">has_stopped_jobs</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">kill_pg</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> SIGHUP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">kill_pg</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> SIGCONT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 处理下一个子进程</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 最老的子进程</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>p_osptr <span class="token operator">=</span> task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>p_cptr<span class="token punctuation">;</span> <span class="token comment">// 链接到 task 1 的最新子进程</span></span>
<span class="line">            task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>p_cptr<span class="token operator">-&gt;</span>p_ysptr <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// task 1 的原最新子进程反链接</span></span>
<span class="line">            task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>p_cptr <span class="token operator">=</span> current<span class="token operator">-&gt;</span>p_cptr<span class="token punctuation">;</span> <span class="token comment">// task 1 的最新子进程</span></span>
<span class="line">            current<span class="token operator">-&gt;</span>p_cptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 本进程的子进程置空</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 当前进程是会话首领进程</span></span>
<span class="line">    <span class="token comment">// 如果有控制终端，则应当向使用控制终端的进程组发送挂断信号 SIGHUP 并释放终端</span></span>
<span class="line">    <span class="token comment">// 扫描任务数组，将属于当前进程会话的进程终端置空</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>leader<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">task_sturct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span>tty<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            tty <span class="token operator">=</span> <span class="token function">TTY_TABLE</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">kill_pg</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> SIGHUP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            tty<span class="token operator">-&gt;</span>session <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>session <span class="token operator">==</span> current<span class="token operator">-&gt;</span>session<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>tty <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 当前进程使用过协处理器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span></span>
<span class="line">        last_task_used_math <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG_PROC_TREE</span></span></span>
<span class="line">    <span class="token function">audit_ptree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="系统调用-exit" tabindex="-1"><a class="header-anchor" href="#系统调用-exit"><span>系统调用 exit()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 系统调用 exit()</span></span>
<span class="line"><span class="token comment">// error_code 是用户程序提供的退出状态信息，只有低字节有效</span></span>
<span class="line"><span class="token comment">// 被左移 8 位，低字节中将用来保存 wait() 的状态信息</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error_code <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="系统调用-waitpid" tabindex="-1"><a class="header-anchor" href="#系统调用-waitpid"><span>系统调用 waitpid()</span></a></h4><p>挂起当前进程，直到以下情况发生：</p><ul><li>pid 指定的子进程退出</li><li>收到要求终止该进程的信号</li><li>需要调用一个信号句柄</li></ul><p>若 pid 所指进程早已僵死，则本系统调用立刻返回，并释放子进程占用的资源</p><ul><li>pid &gt; 0：等待进程号为 pid 的子进程</li><li>pid = 0：等待进程组号 == 当前进程组号的任何子进程</li><li>pid &lt; -1：等待进程组号等于 -pid 的任何子进程</li><li>pid = -1：等待任何子进程</li></ul><p>选项：</p><ul><li>WUNTRACED：如果子进程是停止的，也马上返回</li><li>WNOHANG：如果没有子进程退出或终止，就马上返回</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_waitpid</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> stat_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> options<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> flag<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> oldblocked<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>stat_addr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 验证存放状态信息的内存空间是否足够</span></span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> current<span class="token operator">-&gt;</span>p_cptr<span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pid <span class="token operator">!=</span> pid<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 当前进程的其它子进程，跳过</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// pid == 0</span></span>
<span class="line">                <span class="token comment">// 该进程的进程组和当前进程组不同，跳过</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> <span class="token operator">-</span>pid<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// pid &lt; -1</span></span>
<span class="line">                <span class="token comment">// 该进程的进程组号不为 -pid</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// pid == -1</span></span>
<span class="line">        <span class="token comment">// pid &gt; 0 &amp;&amp; p-&gt;pid == pid</span></span>
<span class="line">        <span class="token comment">// pid == 0 &amp;&amp; p-&gt;pgrp == current-&gt;pgrp</span></span>
<span class="line">        <span class="token comment">// pid == -1 &amp;&amp; p-&gt;pgrp == -pid</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 此时，p 已经指向选择到的一个进程</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> TASK_STOPPED<span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// 子进程已停止</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>options <span class="token operator">&amp;</span> WUNTRACED<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>p<span class="token operator">-&gt;</span>exit_code<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>exit_code <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> stat_addr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                p<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> TASK_ZOMBIE<span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// 子进程已僵死</span></span>
<span class="line">                <span class="token comment">// 累计时间</span></span>
<span class="line">                current<span class="token operator">-&gt;</span>cutime <span class="token operator">+=</span> p<span class="token operator">-&gt;</span>utime<span class="token punctuation">;</span></span>
<span class="line">                current<span class="token operator">-&gt;</span>cstime <span class="token operator">+=</span> p<span class="token operator">-&gt;</span>stime<span class="token punctuation">;</span></span>
<span class="line">                flag <span class="token operator">=</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 放置退出码</span></span>
<span class="line">                <span class="token function">put_fs_long</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>exit_code<span class="token punctuation">,</span> stat_addr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 释放子进程</span></span>
<span class="line">                <span class="token function">release</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> flag<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// 既不停止，也不僵死</span></span>
<span class="line">                <span class="token comment">// 找到过一个符合要求的子进程，但其处于运行态或睡眠态</span></span>
<span class="line">                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 存在符合等待要求的子进程，但没有处于退出或僵死状态</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;</span> WNOHANG<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 选项 - 如果没有子进程处于退出或终止状态，就立刻返回</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 把当前进程置为可中断等待状态</span></span>
<span class="line">        <span class="token comment">// 保留并修改当前进程的信号屏蔽 bitmap，允许接收 SIGCHLD</span></span>
<span class="line">        <span class="token comment">// 调度</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span></span>
<span class="line">        oldblocked <span class="token operator">=</span> current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">;</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>blocked <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>blocked <span class="token operator">=</span> oldblocked<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>currrent<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>blokced <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGCHLD<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 接收到其它未屏蔽信号，返回 - 重新启动系统调用</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>ERESTARTSYS<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// flag == 0，没有找到符合要求的子进程</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span>ECHILD<span class="token punctuation">;</span> <span class="token comment">// 子进程不存在</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56)]))}const r=a(o,[["render",l],["__file","Chapter 8.8 - exit.c 程序.html.vue"]]),k=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%208%20-%20%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81/Chapter%208.8%20-%20exit.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 8.8 - exit.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.8 exit.c 程序","slug":"_8-8-exit-c-程序","link":"#_8-8-exit-c-程序","children":[{"level":3,"title":"8.8.1 功能描述","slug":"_8-8-1-功能描述","link":"#_8-8-1-功能描述","children":[]},{"level":3,"title":"8.8.2 代码注释","slug":"_8-8-2-代码注释","link":"#_8-8-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 8 - 内核代码/Chapter 8.8 - exit.c 程序.md"}');export{r as comp,k as data};
