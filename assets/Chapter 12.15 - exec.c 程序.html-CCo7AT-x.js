import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/12-31-BlRNu_d9.png",o="/blog/assets/12-33-HjoVjt99.png",c="/blog/assets/12-34-C4Qfhp9Q.png",l={};function i(u,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-15-exec-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-15-exec-c-程序"><span>Chapter 12.15 - exec.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 21 15:57</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-15-exec-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-15-exec-c-程序"><span>12.15 exec.c 程序</span></a></h2><h3 id="_12-15-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-15-1-功能描述"><span>12.15.1 功能描述</span></a></h3><p>实现对 <strong>二进制可执行文件</strong> 的加载与执行。最主要的函数是 <code>do_execve()</code>。Linux 0.12 内核仅支持 <code>a.out</code> 格式的执行文件。这种文件中，保存了一个 exec 数据结构：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">exec</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_magic<span class="token punctuation">;</span> <span class="token comment">// ?</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_text<span class="token punctuation">;</span> <span class="token comment">// 代码字节长度</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_data<span class="token punctuation">;</span> <span class="token comment">// 数据字节长度</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_bss<span class="token punctuation">;</span> <span class="token comment">// 文件未初始化数据区字节长度</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_syms<span class="token punctuation">;</span> <span class="token comment">// 文件中的符号表字节长度</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_entry<span class="token punctuation">;</span> <span class="token comment">// 执行开始地址</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_trsize<span class="token punctuation">;</span> <span class="token comment">// 代码重定位信息字节长度</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> a_drsize<span class="token punctuation">;</span> <span class="token comment">// 数据重定位信息字节长度</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序通过 <code>fork()</code> 创建了一个子进程时，在子进程中调用 <code>exec()</code> 族函数之一 <strong>加载</strong>、<strong>执行</strong> 另一个新程序。此时，子进程的代码段、数据段被新程序完全替换。由此，<code>execve()</code> 函数的主要功能：</p><ul><li>对 <strong>命令行参数</strong> 和 <strong>环境参数</strong> 空间页面的初始化操作；取执行对象的 inode；计算参数个数和环境变量个数；检查文件类型和执行权限</li><li>根据 inode，读取 exec 结构中的信息；判断是否可执行</li><li>初始化：指向新执行文件的 inode；复位信号处理句柄；设置局部描述符；设置参数和环境参数页面指针；修改进程执行字段的内容</li><li>替换堆栈上 <code>execve()</code> 的返回地址为新执行程序的运行地址</li></ul><p>系统会清掉 <code>fork()</code> 复制的原程序的目录项和页表项，并释放对应页面，为新加载的代码重新设置 PCB 中的信息，申请和映射命令行参数和环境参数所占内存页面。设置了代码执行点。此时，并不立刻从块设备上加载新程序代码，而是通过首次运行时的缺页异常中断。在主内存区为新程序申请内存页面，设置页表，载入页面 - Load on demand (按需加载)</p><p>对于新进程来说，是否关闭父进程打开的文件，由文件描述符的 close on exec 标志有关。如果该标志被设置，则执行 <code>execve()</code> 后，对应的描述符将被关闭。</p><p>对于参数的处理：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>argc</code> 为参数个数</li><li><code>argv</code> 为字符串参数数组，以 NULL 结尾</li><li><code>envp</code> 为环境变量参数</li></ul><p><code>execve()</code> 为命令行参数和环境变量参数预留了 MAX_ARG_PAGES (32) 个页面 (128kB)</p><p>在该空间中，以类似于堆栈操作的方式，从 128kB 末端放入参数：</p><p><img src="`+t+'" alt="12-31"></p><p>然后根据参数变量个数 argc 和环境变量个数 envc，在新程序的用户态堆栈中创建指针表。其中，需要分别为命令行参数和环境变量各预留一个 NULL 指针，作为参数表的结束标志，并最终存放命令行参数表和环境变量表的首地址，以及命令行参数个数。</p><p>调整堆栈指针到命令行参数个数的位置：</p><p><img src="'+o+'" alt="12-33"></p><p>在函数 <code>do_execve()</code> 返回时，将内核态堆栈上保存的 eip 替换为新执行程序的入口地址，将内核态堆栈上保存的 esp 替换为新的用户态堆栈位置 (如上图所示)。系统调用返回指令会弹出这两个值，并使 CPU 执行新的程序：</p><p><img src="'+c+`" alt="12-34"></p><blockquote><p>在进入该系统调用时，程序的用户堆栈的 eip 和 esp 被保存在内核态堆栈上：</p><ul><li>eip 指向系统调用返回后，继续执行的程序指令</li><li>esp 指向用户态堆栈栈顶</li></ul><p>经过 <code>execve()</code> 函数的处理后，为程序设置了新的环境和参数及其指针表，并使 esp 指向参数表地址，重新设置了程序的代码段、数据段 (但不立刻分配页面 - Load on demand)，将 eip 设置为代码段的首条指令咯。</p><p>这样，从中断返回后，用户态堆栈 esp 指向了新设置的环境参数，从 eip 指向的新程序的第一条指令开始执行。此时引发缺页，再分配页面，将新程序的开头部分载入内存。这一套机制有点复杂的哦，但挺巧妙的 🤤</p></blockquote><h3 id="_12-15-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-15-2-代码注释"><span>12.15.2 代码注释</span></a></h3><h4 id="sys-uselib-替换进程库文件系统调用" tabindex="-1"><a class="header-anchor" href="#sys-uselib-替换进程库文件系统调用"><span>sys_uselib() - 替换进程库文件系统调用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_uselib</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> library<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> base<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TASK_SIZE<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 当前进程是否为普通进程</span></span>
<span class="line">        <span class="token comment">// 普通进程的长度被设置为 TASK_SIZE (64MB)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>library<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>library<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 库文件 inode</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">        inode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 放回原库文件 inode</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>library<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>library <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 释放库代码占用的内存页</span></span>
<span class="line">    base <span class="token operator">=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    base <span class="token operator">+=</span> LIBRARY_OFFSET<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">free_page_tables</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> LIBRARY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    current<span class="token operator">-&gt;</span>library <span class="token operator">=</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="create-tables-创建参数指针表" tabindex="-1"><a class="header-anchor" href="#create-tables-创建参数指针表"><span>create_tables() - 创建参数指针表</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> <span class="token function">create_tables</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">int</span> envc<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> argv<span class="token punctuation">,</span> <span class="token operator">*</span>envp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> sp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    sp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0xfffffffc</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sp <span class="token operator">-=</span> envc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// sp 向下移动留出环境变量的所有指针空间 (包括一个 NULL)</span></span>
<span class="line">    envp <span class="token operator">=</span> sp<span class="token punctuation">;</span> <span class="token comment">// envp 指向环境变量指针表</span></span>
<span class="line">    sp <span class="token operator">-=</span> argc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// sp 向下移动留出命令行参数的所有指针空间 (包括一个 NULL)</span></span>
<span class="line">    argv <span class="token operator">=</span> sp<span class="token punctuation">;</span> <span class="token comment">// argv 指向命令行参数指针表</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> envp<span class="token punctuation">,</span> <span class="token operator">--</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 环境变量指针表指针</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> argv<span class="token punctuation">,</span> <span class="token operator">--</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 命令行参数指针表指针</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> argc<span class="token punctuation">,</span> <span class="token operator">--</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 命令行参数个数</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>argc<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">,</span> argv<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// next string</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// argv 表的最后是 NULL</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>envc<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">,</span> envp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// next string</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// envp 表的最后是 NULL</span></span>
<span class="line">    <span class="token keyword">return</span> sp<span class="token punctuation">;</span> <span class="token comment">// 返回新栈指针</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="count-计算命令行参数-环境变量的个数" tabindex="-1"><a class="header-anchor" href="#count-计算命令行参数-环境变量的个数"><span>count() - 计算命令行参数/环境变量的个数</span></a></h4><p>指针表中的最后一个指针项为 NULL。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">=</span> argv<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">get_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tmp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="copy-strings-拷贝参数-环境字符串" tabindex="-1"><a class="header-anchor" href="#copy-strings-拷贝参数-环境字符串"><span>copy_strings() - 拷贝参数/环境字符串</span></a></h4><p>增加了 <code>from_kmem</code> 参数，指明了字符串或字符串数组是来自用户端还是内核段：</p><table><thead><tr><th>from_kmem</th><th>指针 argv *</th><th>字符串 argv **</th></tr></thead><tbody><tr><td>0</td><td>User space</td><td>User space</td></tr><tr><td>1</td><td>Kernel space</td><td>User space</td></tr><tr><td>2</td><td>Kernel space</td><td>Kernel space</td></tr></tbody></table><p>一般来说，所有参数字符串都在用户空间中</p><blockquote><p>注意，<code>get_fs_long()</code> 是将 fs 指向段中的 long 数据拷贝到 ds 指向段中。因此，如果被拷贝的数据在内核数据段，需要让 fs 指向内核空间。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_strings</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">,</span> unsinged <span class="token keyword">long</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> from_kmem<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>tmp<span class="token punctuation">,</span> <span class="token operator">*</span>pag<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> old_fs<span class="token punctuation">,</span> new_fs<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    new_fs <span class="token operator">=</span> <span class="token function">get_ds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 段寄存器 ds 指向内核数据段</span></span>
<span class="line">    old_fs <span class="token operator">=</span> <span class="token function">get_fs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 段寄存器 fs 指向用户数据段</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>from_kmem <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">set_fs</span><span class="token punctuation">(</span>new_fs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使 fs 指向内核空间</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>argc<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>from_kmem <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 若 argv 指向内核空间，则使 fs 指向内核空间</span></span>
<span class="line">            <span class="token function">set_fs</span><span class="token punctuation">(</span>new_fs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> argv<span class="token punctuation">)</span> <span class="token operator">+</span> argc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;argc is wrong&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>from_kmem <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">set_fs</span><span class="token punctuation">(</span>old_fs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fs 指回用户空间</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// tmp 为字符串指针，指向参数字符串</span></span>
<span class="line">        <span class="token comment">// 从用户空间取字符串</span></span>
<span class="line">        len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            len<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>tmp<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 统计了字符串的长度</span></span>
<span class="line">        <span class="token comment">// 此时 tmp 指向字符串尾</span></span>
<span class="line">        <span class="token comment">// 字符串此时应当位于内核空间中</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 不太可能发生</span></span>
<span class="line">            <span class="token function">set_fs</span><span class="token punctuation">(</span>old_fs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 将字符串逐个字符复制到参数和环境空间末端</span></span>
<span class="line">        <span class="token comment">// 首先判断相应位置是否已有内存页面</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token operator">--</span>p<span class="token punctuation">;</span> <span class="token operator">--</span>tmp<span class="token punctuation">;</span> <span class="token operator">--</span>len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// offset 为页面中的偏移</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                offset <span class="token operator">=</span> p <span class="token operator">%</span> PAGE_SIZE<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>from_kmem <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">set_fs</span><span class="token punctuation">(</span>old_fs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> page<span class="token punctuation">[</span>p<span class="token operator">/</span>PAGE_SIZE<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                    <span class="token operator">!</span><span class="token punctuation">(</span>pag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> page<span class="token punctuation">[</span>p<span class="token operator">/</span>PAGE_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>from_kmem <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">set_fs</span><span class="token punctuation">(</span>old_fs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">*</span><span class="token punctuation">(</span>pag <span class="token operator">+</span> offset<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>from_kmem <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">set_fs</span><span class="token punctuation">(</span>old_fs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> p<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>擦 这吊毛函数到底 tm 什么意思啊？？？</p></blockquote><h4 id="change-ldt-修改任务的-ldt" tabindex="-1"><a class="header-anchor" href="#change-ldt-修改任务的-ldt"><span>change_ldt() - 修改任务的 LDT</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">change_ldt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> text_size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> page<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> code_limit<span class="token punctuation">,</span> data_limit<span class="token punctuation">,</span> code_base<span class="token punctuation">,</span> data_base<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 代码段和数据段长度设置为 64MB</span></span>
<span class="line">    code_limit <span class="token operator">=</span> TASK_SIZE<span class="token punctuation">;</span></span>
<span class="line">    data_limit <span class="token operator">=</span> TASK_SIZE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 重新设置 LDT 中代码段和数据段的基址和段限长</span></span>
<span class="line">    code_base <span class="token operator">=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    data_base <span class="token operator">=</span> code_base<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_limit</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> code_limit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_limit</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data_limit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 将参数和环境空间中已存放数据的页面放到数据段末端</span></span>
<span class="line">    <span class="token comment">// 从进程空间库代码开始处逆向一页一页地放 (库代码占用进程空间末端 4MB 部分)</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;push $0x17\\n\\tpop %%fs&quot;</span><span class="token operator">::</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    data_base <span class="token operator">+=</span> data_limit <span class="token operator">-</span> LIBRARY_SIZE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> MAX_ARG_PAGES <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        data_base <span class="token operator">-=</span> PAGE_SIZE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">put_dirty_page</span><span class="token punctuation">(</span>page<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> data_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> data_limit<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>新执行的程序和原程序使用的段基址与原程序相同，所有不用再重新设置段基址了，只需要设置段限长。</p></blockquote><h4 id="do-execve-execve-系统中断调用函数" tabindex="-1"><a class="header-anchor" href="#do-execve-execve-系统中断调用函数"><span>do_execve() - execve 系统中断调用函数</span></a></h4><p>函数的参数全部由汇编压入堆栈。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">do_execve</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> eip<span class="token punctuation">,</span> <span class="token keyword">long</span> tmp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> page<span class="token punctuation">[</span>MAX_ARG_PAGES<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> envc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> e_uid<span class="token punctuation">,</span> e_gid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> retval<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> sh_bang <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 是否需要执行脚本程序</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> p <span class="token operator">=</span> PAGE_SIZE <span class="token operator">*</span> MAX_ARG_PAGES <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 内核准备了 32 个 page (128kB) 存放参数和环境字符串</span></span>
<span class="line">    <span class="token comment">// p 被初始化指向 128kB 空间的最后一个长字</span></span>
<span class="line">    <span class="token comment">// p 指明在 128kB 中的当前位置</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0xffff</span> <span class="token operator">&amp;</span> eip<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x000f</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// CS 寄存器应当指向当前任务的段选择符 0x000f</span></span>
<span class="line">        <span class="token comment">// 若不是，则只可能是内核代码段，但内核代码是不能被 execve 替换的</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;execve called from supervisor mode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_ARG_PAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 页面清零</span></span>
<span class="line">        page<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 取执行文件的 inode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    argc <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算命令行参数个数</span></span>
<span class="line">    envc <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>envp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算环境字符串变量个数</span></span>
<span class="line">    </span>
<span class="line">restart_interp<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// 要执行的必须是一个文件</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        retval <span class="token operator">=</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 权限判断</span></span>
<span class="line">    i <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">;</span></span>
<span class="line">    e_uid <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> S_ISUID<span class="token punctuation">)</span> <span class="token operator">?</span> inode<span class="token operator">-&gt;</span>i_uid <span class="token operator">:</span> current<span class="token operator">-&gt;</span>euid<span class="token punctuation">;</span></span>
<span class="line">    e_gid <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> S_ISGID<span class="token punctuation">)</span> <span class="token operator">?</span> inode<span class="token operator">-&gt;</span>i_gid <span class="token operator">:</span> current<span class="token operator">-&gt;</span>egid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>euid <span class="token operator">==</span> inode<span class="token operator">-&gt;</span>i_uid<span class="token punctuation">)</span></span>
<span class="line">        i <span class="token operator">&gt;&gt;=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_group_p</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_gid<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        i <span class="token operator">&gt;&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">&amp;</span> <span class="token number">0111</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        retval <span class="token operator">=</span> <span class="token operator">-</span>ENOEXEC<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 权限检查通过</span></span>
<span class="line">    <span class="token comment">// 取出文件首部的数据</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        retval <span class="token operator">=</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    ex <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">exec</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// exec 头部</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>sh_bang<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 文件头部以 #! 开头</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件头部已被拷贝到 exec 中，先释放缓冲块</span></span>
<span class="line">    <span class="token comment">// 文件合法性的判断</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">N_MAGIC</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token operator">!=</span> ZMAGIC <span class="token operator">||</span></span>
<span class="line">        ex<span class="token punctuation">.</span>a_trsize <span class="token operator">||</span></span>
<span class="line">        ex<span class="token punctuation">.</span>a_drsize <span class="token operator">||</span></span>
<span class="line">        ex<span class="token punctuation">.</span>a_text <span class="token operator">+</span> ex<span class="token punctuation">.</span>a_data <span class="token operator">+</span> ex<span class="token punctuation">.</span>a_bss <span class="token operator">&gt;</span> <span class="token number">0x3000000</span> <span class="token operator">||</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_size <span class="token operator">&lt;</span> ex<span class="token punctuation">.</span>a_text <span class="token operator">+</span> ex<span class="token punctuation">.</span>a_data <span class="token operator">+</span> ex<span class="token punctuation">.</span>a_syms <span class="token operator">+</span> <span class="token function">N_TXTOFF</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        retval <span class="token operator">=</span> <span class="token operator">-</span>ENOEXEC<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 执行文件中代码开始处不位于页边界</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">N_TXTOFF</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token operator">!=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%s: N_TXTOFF != BLOCK_SIZE. See a.out.h.&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        retval <span class="token operator">=</span> <span class="token operator">-</span>ENOEXEC<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sh_bang<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 复制命令行参数和环境字符串到对应内存空间中</span></span>
<span class="line">        p <span class="token operator">=</span> <span class="token function">copy_strings</span><span class="token punctuation">(</span>envc<span class="token punctuation">,</span> envp<span class="token punctuation">,</span> page<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        p <span class="token operator">=</span> <span class="token function">copy_strings</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> page<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            retval <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> exec_error2<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放回原执行程序的 inode</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>executable <span class="token operator">=</span> inode<span class="token punctuation">;</span> <span class="token comment">// 设置新的执行文件 inode</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>signal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 复位所有信号</span></span>
<span class="line">    <span class="token comment">// 处理所有信号</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sa_make <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler <span class="token operator">!=</span> SIG_IGN<span class="token punctuation">)</span></span>
<span class="line">            current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 关闭打开的文件 (根据 close_on_exec 标志)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_OPEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>close_on_exec <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">sys_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>close_on_exec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 释放原来程序的代码段和数据段所对应的物理页面和页表</span></span>
<span class="line">    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 如果原进程使用了协处理器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span></span>
<span class="line">        last_task_used_math <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>used_math <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 在栈空间中创建指针表，共 main() 使用</span></span>
<span class="line">    p <span class="token operator">+=</span> <span class="token function">change_ldt</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>a_text<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    p <span class="token operator">-=</span> LIBRARY_SIZE <span class="token operator">+</span> MAX_ARG_PAGES <span class="token operator">*</span> PAGE_SIZE<span class="token punctuation">;</span></span>
<span class="line">    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">create_tables</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> p<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> envc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 修改进程 PCB</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>brk <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_bss <span class="token operator">+</span></span>
<span class="line">        <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>end_data <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_data <span class="token operator">+</span></span>
<span class="line">         <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>end_code <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>start_stack <span class="token operator">=</span> p <span class="token operator">&amp;</span> <span class="token number">0xfffff000</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>suid <span class="token operator">=</span> current<span class="token operator">-&gt;</span>euid <span class="token operator">=</span> e_uid<span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>sgid <span class="token operator">=</span> current<span class="token operator">-&gt;</span>egid <span class="token operator">=</span> e_gid<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    eip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ex<span class="token punctuation">.</span>a_entry<span class="token punctuation">;</span> <span class="token comment">// eip 指向程序入口地址</span></span>
<span class="line">    eip<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// esp 指向参数表顶端</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">exec_error2<span class="token operator">:</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">exec_error1<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_ARG_PAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">free_page</span><span class="token punctuation">(</span>page<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46)]))}const k=s(l,[["render",i],["__file","Chapter 12.15 - exec.c 程序.html.vue"]]),d=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.15%20-%20exec.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.15 - exec.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.15 exec.c 程序","slug":"_12-15-exec-c-程序","link":"#_12-15-exec-c-程序","children":[{"level":3,"title":"12.15.1 功能描述","slug":"_12-15-1-功能描述","link":"#_12-15-1-功能描述","children":[]},{"level":3,"title":"12.15.2 代码注释","slug":"_12-15-2-代码注释","link":"#_12-15-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.15 - exec.c 程序.md"}');export{k as comp,d as data};
