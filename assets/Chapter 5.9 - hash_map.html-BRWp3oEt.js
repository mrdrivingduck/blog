import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-5-8-hash-map" tabindex="-1"><a class="header-anchor" href="#chapter-5-8-hash-map"><span>Chapter 5.8 - hash_map</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 06 23:35</p><p>Nanjing, Jiangsu, China</p><hr><p>SGI STL 的 hash_map 以 hashtable 作为底层机制，API 基本转而调用 hashtable 的 API。hash_map 和 map 的区别在于 <strong>无序性</strong>。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_HashFcn</span>  <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>hash<span class="token operator">&lt;</span>_Key<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_EqualKey</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>equal_to<span class="token operator">&lt;</span>_Key<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span>  <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">hash_map</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HashFcn</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_EqualKey</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">hash_map</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// requirements:</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Key<span class="token punctuation">,</span> _Assignable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Assignable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_UNARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_HashFcn<span class="token punctuation">,</span> size_t<span class="token punctuation">,</span> _Key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_EqualKey<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> _Key<span class="token punctuation">,</span> _Key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> hashtable<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> _Key<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">,</span>_Key<span class="token punctuation">,</span>_HashFcn<span class="token punctuation">,</span></span>
<span class="line">                    _Select1st<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> _Key<span class="token punctuation">,</span>_Tp<span class="token operator">&gt;</span> <span class="token operator">&gt;</span><span class="token punctuation">,</span>_EqualKey<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span> _Ht<span class="token punctuation">;</span></span>
<span class="line">  _Ht _M_ht<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>key_type key_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp data_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp mapped_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>value_type value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>hasher hasher<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>key_equal key_equal<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>size_type size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>difference_type difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>pointer pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>const_pointer const_pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>reference reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>iterator iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>const_iterator const_iterator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Ht</span><span class="token double-colon punctuation">::</span>allocator_type allocator_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  hasher <span class="token function">hash_funct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">hash_funct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  key_equal <span class="token function">key_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">key_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token comment">// 构造函数</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">hash_map</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token function">hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> hasher<span class="token operator">&amp;</span> __hf<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __hf<span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> hasher<span class="token operator">&amp;</span> __hf<span class="token punctuation">,</span> <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> __eql<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __hf<span class="token punctuation">,</span> __eql<span class="token punctuation">,</span> __a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __f<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __l<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __f<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __l<span class="token punctuation">,</span> size_type __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token function">hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __f<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __l<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> hasher<span class="token operator">&amp;</span> __hf<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __hf<span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __f<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __l<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> hasher<span class="token operator">&amp;</span> __hf<span class="token punctuation">,</span> <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> __eql<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __hf<span class="token punctuation">,</span> __eql<span class="token punctuation">,</span> __a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span>const_iterator __f<span class="token punctuation">,</span> const_iterator __l<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span>const_iterator __f<span class="token punctuation">,</span> const_iterator __l<span class="token punctuation">,</span> size_type __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token function">hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span>const_iterator __f<span class="token punctuation">,</span> const_iterator __l<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> hasher<span class="token operator">&amp;</span> __hf<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __hf<span class="token punctuation">,</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">hash_map</span><span class="token punctuation">(</span>const_iterator __f<span class="token punctuation">,</span> const_iterator __l<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> hasher<span class="token operator">&amp;</span> __hf<span class="token punctuation">,</span> <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> __eql<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_ht</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __hf<span class="token punctuation">,</span> __eql<span class="token punctuation">,</span> __a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token comment">// 元素个数相关</span></span>
<span class="line">  size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>hash_map<span class="token operator">&amp;</span> __hs<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__hs<span class="token punctuation">.</span>_M_ht<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 迭代器相关</span></span>
<span class="line">  iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token comment">// 插入操作</span></span>
<span class="line">  pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __f<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __l<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span>__l<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __f<span class="token punctuation">,</span> const_iterator __l<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">insert_noresize</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_unique_noresize</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// key 值搜素</span></span>
<span class="line">  iterator <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_iterator <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 查找或插入 (左右值)</span></span>
<span class="line">  _Tp<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">find_or_insert</span><span class="token punctuation">(</span><span class="token function">value_type</span><span class="token punctuation">(</span>__key<span class="token punctuation">,</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// key 值个数</span></span>
<span class="line">  size_type <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 相等 key 值的迭代器区间</span></span>
<span class="line">  pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> iterator<span class="token operator">&gt;</span> <span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span> const_iterator<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 删除操作</span></span>
<span class="line">  size_type <span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>iterator __it<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>__it<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>iterator __f<span class="token punctuation">,</span> iterator __l<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 桶容量操作</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_type __hint<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>__hint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">elems_in_bucket</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">elems_in_bucket</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_HashFcn</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_EqlKey</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">bool</span></span>
<span class="line"><span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> hash_map<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_HashFcn<span class="token punctuation">,</span>_EqlKey<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __hm1<span class="token punctuation">,</span></span>
<span class="line">           <span class="token keyword">const</span> hash_map<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_HashFcn<span class="token punctuation">,</span>_EqlKey<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __hm2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __hm1<span class="token punctuation">.</span>_M_ht <span class="token operator">==</span> __hm2<span class="token punctuation">.</span>_M_ht<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const u=s(e,[["render",o],["__file","Chapter 5.9 - hash_map.html.vue"]]),i=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%205%20-%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%205.9%20-%20hash_map.html","title":"Chapter 5.8 - hash_map","lang":"en-US","frontmatter":{},"headers":[],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 5 - 关联式容器/Chapter 5.9 - hash_map.md"}');export{u as comp,i as data};
