import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-5-inode-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-5-inode-c-程序"><span>Chapter 12.5 - inode.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 05 16:10</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-5-inode-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-5-inode-c-程序"><span>12.5 inode.c 程序</span></a></h2><h3 id="_12-5-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-5-1-功能描述"><span>12.5.1 功能描述</span></a></h3><p><code>iget()</code> 函数</p><ul><li>从设备 dev 上读取指定结点号 nr 的 inode</li><li>并把 inode 的引用计数字段值 <code>i_count</code> 增 1</li></ul><p><code>iput()</code> 函数</p><ul><li>把 inode 引用计数值减 1</li><li>若 inode 的链接计数为 0，则释放 inode 占用的所有磁盘逻辑块</li></ul><p>在某时刻，进程不需要持续使用一个 inode 时就应当调用 <code>iput()</code> 函数。内核代码通常调用 <code>iput()</code> 的时机：</p><ul><li>inode 的引用计数字段增 1</li><li>调用了 <code>namei()</code>、<code>dir_namei()</code> 或 <code>open_namei()</code> 函数</li><li>调用了 <code>iget()</code>、<code>new_inode()</code> 或 <code>get_empty_inode()</code> 函数</li><li>关闭文件，且没有其它进程使用该文件</li><li>卸载文件系统</li></ul><p><code>bmap()</code> 函数用于把文件数据块映射到对应的盘块上，参数为 inode 指针和文件中的数据块号。在对应文件数据块不存在的情况下，根据 create 标志判断是否需要在盘上建立盘块，并返回在对应设备上的盘块号。函数主要对 inode 中的 <code>i_zone[]</code> 进行处理，根据 <code>i_zone[]</code> 中设置的盘块号，设置逻辑块 bitmap 的占用情况。</p><h3 id="_12-5-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-5-2-代码注释"><span>12.5.2 代码注释</span></a></h3><h4 id="inode-的数据结构" tabindex="-1"><a class="header-anchor" href="#inode-的数据结构"><span>inode 的数据结构</span></a></h4><p>磁盘上的 inode (32B)</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_mode<span class="token punctuation">;</span> <span class="token comment">// 文件类型和属性</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_uid<span class="token punctuation">;</span> <span class="token comment">// 用户 id</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> i_size<span class="token punctuation">;</span> <span class="token comment">// 文件大小</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> i_time<span class="token punctuation">;</span> <span class="token comment">// 修改时间</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_gid<span class="token punctuation">;</span> <span class="token comment">// 组 id</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_nlinks<span class="token punctuation">;</span> <span class="token comment">// 链接计数 (多少个目录指向该 inode)</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_zone<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑块号 (直接、一次间接、二次间接)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存中的 inode - 其中前 7 项与 d_node 完全一样。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_mode<span class="token punctuation">;</span> <span class="token comment">// 文件类型和属性</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_uid<span class="token punctuation">;</span> <span class="token comment">// 用户 id</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> i_size<span class="token punctuation">;</span> <span class="token comment">// 文件大小</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> i_time<span class="token punctuation">;</span> <span class="token comment">// 修改时间</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_gid<span class="token punctuation">;</span> <span class="token comment">// 组 id</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_nlinks<span class="token punctuation">;</span> <span class="token comment">// 链接计数 (多少个目录指向该 inode)</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_zone<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑块号 (直接、一次间接、二次间接)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> i_wait<span class="token punctuation">;</span> <span class="token comment">// 等待 inode 的进程</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> i_wait2<span class="token punctuation">;</span> <span class="token comment">// for pipes</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> i_atime<span class="token punctuation">;</span> <span class="token comment">// 最后访问时间</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> i_ctime<span class="token punctuation">;</span> <span class="token comment">// 修改时间</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_dev<span class="token punctuation">;</span> <span class="token comment">// inode 所在设备号</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_num<span class="token punctuation">;</span> <span class="token comment">// inode 号</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> i_count<span class="token punctuation">;</span> <span class="token comment">// inode 被使用次数 (0 为空闲)</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_lock<span class="token punctuation">;</span> <span class="token comment">// 锁定标志</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_dirt<span class="token punctuation">;</span> <span class="token comment">// 修改标志</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_pipe<span class="token punctuation">;</span> <span class="token comment">// 管道标志</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_mount<span class="token punctuation">;</span> <span class="token comment">// 安装标志</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_seek<span class="token punctuation">;</span> <span class="token comment">// 搜寻标志</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i_update<span class="token punctuation">;</span> <span class="token comment">// 更新标志</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存中的 inode 表：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> inode_table<span class="token punctuation">[</span>NR_INODE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 32 项</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="wait-on-inode-等待-inode-可用" tabindex="-1"><a class="header-anchor" href="#wait-on-inode-等待-inode-可用"><span>wait_on_inode() - 等待 inode 可用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lock-inode-对-inode-上锁" tabindex="-1"><a class="header-anchor" href="#lock-inode-对-inode-上锁"><span>lock_inode() - 对 inode 上锁</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">lock_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unlock-inode-对-inode-解锁" tabindex="-1"><a class="header-anchor" href="#unlock-inode-对-inode-解锁"><span>unlock_inode() - 对 inode 解锁</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="invalidate-inodes-释放设备-dev-在内存-inode-表中的所有-inode" tabindex="-1"><a class="header-anchor" href="#invalidate-inodes-释放设备-dev-在内存-inode-表中的所有-inode"><span>invalidate_inodes() - 释放设备 dev 在内存 inode 表中的所有 inode</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">invalidate_inodes</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 扫描内存 inode 表中每一项</span></span>
<span class="line">    inode <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> inode_table<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_INODE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> inode<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待 inode 解锁</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;inode in use on removed disk\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 释放 inode</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sync-inodes-同步-inode" tabindex="-1"><a class="header-anchor" href="#sync-inodes-同步-inode"><span>sync_inodes() - 同步 inode</span></a></h4><p>将内存 inode 表中所有的 inode 与设备上的 inode 作同步操作。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">sync_inodes</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 扫描内存 inode 表</span></span>
<span class="line">    inode <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> inode_table<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_INODE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> inode<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// inode 已修改，且不是管道结点</span></span>
<span class="line">            <span class="token function">write_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入缓冲区</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bmap-文件数据块与盘块的映射" tabindex="-1"><a class="header-anchor" href="#bmap-文件数据块与盘块的映射"><span>_bmap() - 文件数据块与盘块的映射</span></a></h4><p>将指定的文件数据块对应到设备的逻辑块上，并返回逻辑块号：</p><ul><li>如果创建标志置位，那么对应逻辑块不存在时就申请新逻辑块</li><li>返回文件数据块对应在设备上的逻辑块号</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_bmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">,</span> <span class="token keyword">int</span> create<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 判断参数有效性</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 文件数据块号小于 0</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;_bmap: block&lt;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">&gt;=</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">512</span> <span class="token operator">+</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 文件数据块号大于文件系统表示范围</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;_bmap: block&gt;big&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 直接块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 创建标志置位</span></span>
<span class="line">            <span class="token comment">// 数据块对应的逻辑块为空</span></span>
<span class="line">            <span class="token comment">// 向设备申请一块磁盘块</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span>block<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                inode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">                inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// inode 已被修改</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 一次间接块</span></span>
<span class="line">    block <span class="token operator">-=</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 创建标志置位</span></span>
<span class="line">            <span class="token comment">// 一次间接块对应逻辑块为空</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                inode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 申请磁盘块失败</span></span>
<span class="line">            <span class="token comment">// 或 inode 没有一次间接块，映射失败</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将一次间接块读入缓冲区</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 一次间接块中，文件数据块对应的逻辑块</span></span>
<span class="line">        i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>i<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 创建标志置位 &amp;&amp; 文件数据块没有对应逻辑块</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 申请逻辑块，将逻辑块号写入缓冲区中的一次间接块中</span></span>
<span class="line">                <span class="token comment">// 缓冲区修改标志置位</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>block<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">                bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">        <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 二次间接块</span></span>
<span class="line">    block <span class="token operator">-=</span> <span class="token number">512</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 二次间接块对应逻辑块为空</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 申请二次间接块</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 申请失败 || 二次间接块本来就为空</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 为二次间接块申请缓冲区</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span> <span class="token punctuation">[</span>block <span class="token operator">&gt;&gt;</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 第 block / 512 项 (第 block/512 个一次间接块)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>i<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 申请一次间接块</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>block <span class="token operator">&gt;&gt;</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">            bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 二次间接块的缓冲区被修改</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放二次间接块的缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 一次间接块不存在</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 为一次间接块申请缓冲区</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span> <span class="token punctuation">[</span>block <span class="token operator">&amp;</span> <span class="token number">511</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑块在一次间接块中的位置</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>create <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>i<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 逻辑块不存在，申请逻辑块</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 一次间接块对应的缓冲区被修改</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>block <span class="token operator">&amp;</span> <span class="token number">511</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">            bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放一次间接块对应的缓冲区</span></span>
<span class="line">    <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bmap-取文件数据块在设备上的对应逻辑块号" tabindex="-1"><a class="header-anchor" href="#bmap-取文件数据块在设备上的对应逻辑块号"><span>bmap() - 取文件数据块在设备上的对应逻辑块号</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">bmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_bmap</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑块不存在时，不申请</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="create-block-取文件数据块在设备上对应的逻辑块号-若不存在就创建一块" tabindex="-1"><a class="header-anchor" href="#create-block-取文件数据块在设备上对应的逻辑块号-若不存在就创建一块"><span>create_block() - 取文件数据块在设备上对应的逻辑块号，若不存在就创建一块</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">create_block</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_bmap</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="iput-放回一个-inode" tabindex="-1"><a class="header-anchor" href="#iput-放回一个-inode"><span>iput() - 放回一个 inode</span></a></h4><p>将 inode 的引用计数递减。</p><ul><li>管道 inode：唤醒等待的进程</li><li>块设备 inode：刷新设备</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">iput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;iput: trying to free free inode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_wait2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// inode 还有引用，则直接返回</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// inode 已无更多引用</span></span>
<span class="line">        <span class="token comment">// 释放管道占用的内存页面</span></span>
<span class="line">        <span class="token function">free_page</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// inode 变为空闲</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_pipe <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 设备号为 0</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_count<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 块设备</span></span>
<span class="line">        <span class="token function">sync_dev</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设备号</span></span>
<span class="line">        <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// inode 还有人再用，不能释放</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_count<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// i_count == 1</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// inode 链接数为 0，对应的文件被删除</span></span>
<span class="line">        <span class="token comment">// 释放该 inode 的所有的逻辑块</span></span>
<span class="line">        <span class="token function">truncate</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">free_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dirt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">write_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span> <span class="token comment">// 因为睡眠了，所以要重复判断</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_count<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// == 0，已释放</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-empty-inode-从-inode-表中获取一个空闲-inode-项" tabindex="-1"><a class="header-anchor" href="#get-empty-inode-从-inode-表中获取一个空闲-inode-项"><span>get_empty_inode() - 从 inode 表中获取一个空闲 inode 项</span></a></h4><p>寻找引用计数 count 为 0 的 inode，将其写盘后清零，引用计数被置 1。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_empty_inode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> last_inode <span class="token operator">=</span> inode_table<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        inode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> NR_INODE<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>last_inode <span class="token operator">&gt;=</span> inode_table <span class="token operator">+</span> NR_INODE<span class="token punctuation">)</span></span>
<span class="line">                last_inode <span class="token operator">=</span> inode_table<span class="token punctuation">;</span> <span class="token comment">// 返回 inode 表头</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>last_inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                inode <span class="token operator">=</span> last_inode<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_lock<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token comment">// 可以使用该 inode</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 没有找到空闲 inode 结点</span></span>
<span class="line">            <span class="token comment">// 打印 inode 表供调试使用，停机</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_INODE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%04x: %6d\\t&quot;</span><span class="token punctuation">,</span> inode_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_dev<span class="token punctuation">,</span> inode_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;No free inodes in mem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待该 inode 解锁</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dirt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">write_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步 inode</span></span>
<span class="line">            <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待解锁</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果 inode 又被占用，则又要重新寻找</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">memset</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inode 清零</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-pipe-inode-获取管道-inode" tabindex="-1"><a class="header-anchor" href="#get-pipe-inode-获取管道-inode"><span>get_pipe_inode() - 获取管道 inode</span></a></h4><p>扫描 inode 表，取得一个空闲 inode。取得一页空闲内存供管道使用，将得到 inode 的引用计数置位 2 (Reader + Writer)。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_pipe_inode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">get_empty_inode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// i_size 字段指向缓冲区</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">PIPE_HEAD</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">PIPE_TAIL</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 管道头尾指针</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_pipe <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 管道标志</span></span>
<span class="line">    <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="iget-取得一个-inode" tabindex="-1"><a class="header-anchor" href="#iget-取得一个-inode"><span>iget() - 取得一个 inode</span></a></h4><p>从设备读取指定编号的 inode 到内存 inode 表中，返回该 inode 的指针。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">iget</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token operator">*</span> empty<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;iget with dev==0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    empty <span class="token operator">=</span> <span class="token function">get_empty_inode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// inode 可能已在 inode 表中</span></span>
<span class="line">    inode <span class="token operator">=</span> inode_table<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>inode <span class="token operator">&lt;</span> NR_INODE <span class="token operator">+</span> inode_table<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">!=</span> dev <span class="token operator">||</span> inode<span class="token operator">-&gt;</span>i_num <span class="token operator">!=</span> nr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            inode<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">wait_on_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待 inode 解锁</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">!=</span> dev <span class="token operator">||</span> inode<span class="token operator">-&gt;</span>i_num <span class="token operator">!=</span> nr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            inode <span class="token operator">=</span> inode_table<span class="token punctuation">;</span> <span class="token comment">// 重头扫描</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_SUPER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>super_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_imount <span class="token operator">==</span> inode<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> NR_SUPER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Mounted inode hasn&#39;t got sb\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>empty<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">iput</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            dev <span class="token operator">=</span> super_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_dev<span class="token punctuation">;</span></span>
<span class="line">            nr <span class="token operator">=</span> ROOT_INO<span class="token punctuation">;</span></span>
<span class="line">            inode <span class="token operator">=</span> inode_table<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>empty<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在 inode 表中没有找到指定的 inode</span></span>
<span class="line">    <span class="token comment">// 利用之前申请的空闲 inode 在 inode 表中建立该 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>empty<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    inode <span class="token operator">=</span> empty<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">=</span> dev<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_num <span class="token operator">=</span> nr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">read_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read-inode-读取指定的-inode-信息" tabindex="-1"><a class="header-anchor" href="#read-inode-读取指定的-inode-信息"><span>read_inode() - 读取指定的 inode 信息</span></a></h4><p>从设备上读取含有指定 inode 信息的盘块，读入缓冲区。从缓冲区复制到指定的 inode 结构中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> block<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">lock_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 取得设备 super block</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to read inode without dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 取得 inode 编号对应的逻辑块号</span></span>
<span class="line">    <span class="token comment">// 启动块 + 超级块 + inode bitmap 占用块 + 逻辑块 bitmap 占用块</span></span>
<span class="line">    <span class="token comment">// + (inode_num - 1) / 每块含有的 inode 号</span></span>
<span class="line">    block <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> sb<span class="token operator">-&gt;</span>s_imap_blocks <span class="token operator">+</span> sb<span class="token operator">-&gt;</span>s_zmap_blocks <span class="token operator">+</span> </span>
<span class="line">        <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>INODE_PER_BLOCK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 取得对应缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unable to read i-node block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 从缓冲区指定项中复制数据</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span> inode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> INODES_PER_BLOCK<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 块设备文件</span></span>
<span class="line">        <span class="token keyword">int</span> i <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 设备号</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>blk_size<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> blk_size<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">MINOR</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">unlock_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="write-inode-将-inode-写入缓冲区中" tabindex="-1"><a class="header-anchor" href="#write-inode-将-inode-写入缓冲区中"><span>write_inode() - 将 inode 写入缓冲区中</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> block<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">lock_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁定 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">||</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// inode 未修改 || inode 设备号为 0</span></span>
<span class="line">        <span class="token comment">// 不需修改，直接退出</span></span>
<span class="line">        <span class="token function">unlock_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to write inode without device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 计算 inode 对应的逻辑块号</span></span>
<span class="line">    block <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> sb<span class="token operator">-&gt;</span>s_imap_blocks <span class="token operator">+</span> sb<span class="token operator">-&gt;</span>s_zmap_blocks <span class="token operator">+</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>INODES_PER_BLOCK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将 inode 对应的逻辑块读入缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unable to read i-node block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 复制内存 inode 中的信息到缓冲区中</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> INODES_PER_BLOCK<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">d_inode</span> <span class="token operator">*</span><span class="token punctuation">)</span> inode<span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区已修改</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// inode 已同步到缓冲区中</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">    <span class="token function">unlock_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>之前一直没弄清楚的是磁盘、缓冲区、内存三个位置的数据结构之间的关系，这三个地方的数据是独立的。</p><p>inode 表位于内存中，这个源代码文件中，基本上是对内存中的 inode 表进行操作；而 inode 实际上位于磁盘。在读取 inode 时，需要先将 inode 所在的磁盘逻辑块读进缓冲区，然后再从缓冲区中将数据拷贝到内存的 inode 表中。</p><p>而写入 inode 时，需要将内存 inode 表中的数据拷贝到对应的缓冲区中，再从缓冲区同步到磁盘上。对于内存中的 inode 来说，写入 inode 时，只需要同步到缓冲区中，即可认为同步完成。从缓冲区到磁盘的同步由 <strong>缓冲区管理机制</strong> 负责完成。</p>`,64)]))}const i=s(t,[["render",o],["__file","Chapter 12.5 - inode.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.5%20-%20inode.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.5 - inode.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.5 inode.c 程序","slug":"_12-5-inode-c-程序","link":"#_12-5-inode-c-程序","children":[{"level":3,"title":"12.5.1 功能描述","slug":"_12-5-1-功能描述","link":"#_12-5-1-功能描述","children":[]},{"level":3,"title":"12.5.2 代码注释","slug":"_12-5-2-代码注释","link":"#_12-5-2-代码注释","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.5 - inode.c 程序.md"}');export{i as comp,u as data};
