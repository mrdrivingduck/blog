import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_4-1-channel" tabindex="-1"><a class="header-anchor" href="#_4-1-channel"><span>4.1 - Channel</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 02 / 19 16:20</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>Channel</span></a></h2><p><code>Channel</code> 的接口定义。</p><h3 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A nexus to a network socket or a component which is capable of I/O</span>
<span class="line"> * operations such as read, write, connect, and bind.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * A channel provides a user:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>the current state of the channel (e.g. is it open? is it connected?),<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>the <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">ChannelConfig</span></span> configuration parameters<span class="token punctuation">}</span> of the channel (e.g. receive buffer size),<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>the I/O operations that the channel supports (e.g. read, write, connect, and bind), and<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span> which handles all I/O events and requests</span>
<span class="line"> *     associated with the channel.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>All I/O operations are asynchronous.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * All I/O operations in Netty are asynchronous.  It means any I/O calls will</span>
<span class="line"> * return immediately with no guarantee that the requested I/O operation has</span>
<span class="line"> * been completed at the end of the call.  Instead, you will be returned with</span>
<span class="line"> * a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelFuture</span></span><span class="token punctuation">}</span> instance which will notify you when the requested I/O</span>
<span class="line"> * operation has succeeded, failed, or canceled.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Channels are hierarchical<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> can have a <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> parent<span class="token punctuation">}</span> depending on</span>
<span class="line"> * how it was created.  For instance, a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SocketChannel</span></span><span class="token punctuation">}</span>, that was accepted</span>
<span class="line"> * by <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ServerSocketChannel</span></span><span class="token punctuation">}</span>, will return the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ServerSocketChannel</span></span><span class="token punctuation">}</span></span>
<span class="line"> * as its parent on <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * The semantics of the hierarchical structure depends on the transport</span>
<span class="line"> * implementation where the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> belongs to.  For example, you could</span>
<span class="line"> * write a new <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> implementation that creates the sub-channels that</span>
<span class="line"> * share one socket connection, as <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://beepcore.org/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>BEEP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> and</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://en.wikipedia.org/wiki/Secure_Shell<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SSH<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> do.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Downcast to access transport-specific operations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * Some transports exposes additional operations that is specific to the</span>
<span class="line"> * transport.  Down-cast the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> to sub-type to invoke such</span>
<span class="line"> * operations.  For example, with the old I/O datagram transport, multicast</span>
<span class="line"> * join / leave operations are provided by <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DatagramChannel</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Release resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * It is important to call <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ChannelPromise</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to release all</span>
<span class="line"> * resources once you are done with the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span>. This ensures all resources are</span>
<span class="line"> * released in a proper way, i.e. filehandles.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Channel</span> <span class="token keyword">extends</span> <span class="token class-name">AttributeMap</span><span class="token punctuation">,</span> <span class="token class-name">ChannelOutboundInvoker</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="id" tabindex="-1"><a class="header-anchor" href="#id"><span>ID</span></a></h3><p><code>Channel</code> 具有全局唯一的 ID。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the globally unique identifier of this <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelId</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop"><span>EventLoop</span></a></h3><p><code>Channel</code> 会被注册到一个 <code>EventLoop</code> 上，由该 <code>EventLoop</code> 处理 <code>Channel</code> 的所有事件。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EventLoop</span></span><span class="token punctuation">}</span> this <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> was registered to.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">EventLoop</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline"><span>Pipeline</span></a></h3><p>服务 <code>Channel</code> 的 <code>ChannelPipeline</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return the assigned <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelPipeline</span> <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="buffer-allocator" tabindex="-1"><a class="header-anchor" href="#buffer-allocator"><span>Buffer Allocator</span></a></h3><p>返回用于分配缓冲区的 <code>ByteBufAllocator</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return the assigned <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ByteBufAllocator</span></span><span class="token punctuation">}</span> which will be used to allocate <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ByteBuf</span></span><span class="token punctuation">}</span>s.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ByteBufAllocator</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the configuration of this channel.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelConfig</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="status" tabindex="-1"><a class="header-anchor" href="#status"><span>Status</span></a></h3><p>返回当前 <code>Channel</code> 的状态。<code>Channel</code> 的状态包含：</p><ul><li>Unregistered - <code>Channel</code> 已被创建，但还未注册到 <code>EventLoop</code></li><li>Registered - <code>Channel</code> 已被注册到 <code>EventLoop</code></li><li>Inactive - <code>Channel</code> 还未连接到远程结点</li><li>Active - <code>Channel</code> 已经连接到远程结点，可以收发数据</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> is open and may get active later</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> is registered with an <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EventLoop</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> is active and so connected.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="address" tabindex="-1"><a class="header-anchor" href="#address"><span>Address</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the local address where this channel is bound to.  The returned</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SocketAddress</span></span><span class="token punctuation">}</span> is supposed to be down-cast into more concrete</span>
<span class="line"> * type such as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">}</span> to retrieve the detailed</span>
<span class="line"> * information.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> the local address of this channel.</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if this channel is not bound.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">SocketAddress</span> <span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the remote address where this channel is connected to.  The</span>
<span class="line"> * returned <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SocketAddress</span></span><span class="token punctuation">}</span> is supposed to be down-cast into more</span>
<span class="line"> * concrete type such as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">}</span> to retrieve the detailed</span>
<span class="line"> * information.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> the remote address of this channel.</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if this channel is not connected.</span>
<span class="line"> *         If this channel is not connected but it can receive messages</span>
<span class="line"> *         from arbitrary remote addresses (e.g. <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DatagramChannel</span></span><span class="token punctuation">}</span>,</span>
<span class="line"> *         use <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DatagramPacket</span><span class="token punctuation">#</span><span class="token function">recipient</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to determine</span>
<span class="line"> *         the origination of the received message as this method will</span>
<span class="line"> *         return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">SocketAddress</span> <span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)]))}const o=s(p,[["render",l],["__file","4.1 - Channel.html.vue"]]),u=JSON.parse('{"path":"/netty-in-action-notes/4.1%20-%20Channel.html","title":"4.1 - Channel","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Channel","slug":"channel","link":"#channel","children":[{"level":3,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":3,"title":"ID","slug":"id","link":"#id","children":[]},{"level":3,"title":"EventLoop","slug":"eventloop","link":"#eventloop","children":[]},{"level":3,"title":"Pipeline","slug":"pipeline","link":"#pipeline","children":[]},{"level":3,"title":"Buffer Allocator","slug":"buffer-allocator","link":"#buffer-allocator","children":[]},{"level":3,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":3,"title":"Status","slug":"status","link":"#status","children":[]},{"level":3,"title":"Address","slug":"address","link":"#address","children":[]}]}],"git":{},"filePathRelative":"netty-in-action-notes/4.1 - Channel.md"}');export{o as comp,u as data};
