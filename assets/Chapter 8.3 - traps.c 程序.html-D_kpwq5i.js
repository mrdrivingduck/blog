import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-8-3-traps-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-8-3-traps-c-程序"><span>Chapter 8.3 - traps.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 15 10:57</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_8-3-traps-c-程序" tabindex="-1"><a class="header-anchor" href="#_8-3-traps-c-程序"><span>8.3 traps.c 程序</span></a></h2><h3 id="_8-3-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_8-3-1-功能描述"><span>8.3.1 功能描述</span></a></h3><p>实现了 asm.s 汇编程序中调用的 C 函数，用于显示出错位置和出错号等调试信息。其中的 <code>die()</code> 函数用于在中断处理中显示详细的出错信息，而 <code>trap_init()</code> 函数则在之前的 <code>init/main.c</code> 中被调用，初始化硬件异常处理中断向量。</p><h3 id="_8-3-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_8-3-2-代码注释"><span>8.3.2 代码注释</span></a></h3><p>首先，定义了三个嵌入汇编的宏函数，作用分别为：</p><ul><li>取段 seg 中地址 addr 处的一个字节</li><li>取段 seg 中地址 addr 处的一个长字</li><li>取 fs 段寄存器的值</li></ul><p>其中，定义了一个寄存器变量 <code>__res</code>，将会被保存在一个寄存器中，以便于快速访问和操作。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取段 seg 中地址 addr 处的一个字节</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">get_seg_byte</span><span class="token expression"><span class="token punctuation">(</span>seg<span class="token punctuation">,</span> addr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token keyword">register</span> <span class="token keyword">char</span> __res<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span> </span><span class="token punctuation">\\</span></span>
<span class="line">        <span class="token string">&quot;push %%fs; mov %%ax, %%fs; movb %%fs:%2,%%al; pop %%fs&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">        <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;=a&quot;</span> <span class="token expression"><span class="token punctuation">(</span>__res<span class="token punctuation">)</span> <span class="token operator">:</span> </span><span class="token string">&quot;0&quot;</span> <span class="token expression"><span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;m&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression">__res<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取段 seg 中地址 addr 处的一个长字</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">get_seg_long</span><span class="token expression"><span class="token punctuation">(</span>seg<span class="token punctuation">,</span> addr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token keyword">register</span> <span class="token keyword">long</span> __res<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span> </span><span class="token punctuation">\\</span></span>
<span class="line">        <span class="token string">&quot;push %%fs; mov %%ax, %%fs; movl %%fs:%2,%%eax; pop %%fs&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">        <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;=a&quot;</span> <span class="token expression"><span class="token punctuation">(</span>__res<span class="token punctuation">)</span> <span class="token operator">:</span> </span><span class="token string">&quot;0&quot;</span> <span class="token expression"><span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;m&quot;</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression">__res<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取 fs 段寄存器的值</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_fs</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> __res<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span> </span><span class="token punctuation">\\</span></span>
<span class="line">        <span class="token string">&quot;mov %%fs, %%ax&quot;</span> <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;=a&quot;</span> <span class="token expression"><span class="token punctuation">(</span>__res<span class="token punctuation">)</span><span class="token operator">:</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression">__res<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是一个通用的子函数 <code>die()</code></p><ul><li>用于打印错误名称、出错码、调用程序的 EIP、EFLAGS、ESP、fs 段寄存器</li><li>段基址、段长度、pid、任务号、10B 指令码</li><li>若堆栈在用户数据段，则打印 16B 堆栈内容</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// str - 错误名字符串</span></span>
<span class="line"><span class="token comment">// esp_ptr - 被中断的出错程序信息在栈中信息的指针 esp0</span></span>
<span class="line"><span class="token comment">// nr - 出错码</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">long</span> esp_ptr<span class="token punctuation">,</span> <span class="token keyword">long</span> nr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token operator">*</span>esp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> esp_ptr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %04x\\n\\r&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> nr <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;EIP:\\t%04x:%p\\nEFLAGS:\\t%p\\nESP:\\t%04x:%p\\n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> esp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> esp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;fs: %04x\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">_fs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;base: %p, limit: %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Stack: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> <span class="token number">0xff</span> <span class="token operator">&amp;</span> <span class="token function">get_seg_byte</span><span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取当前运行任务的任务号</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Pid: %d, process nr: %d\\n\\r&quot;</span><span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span> <span class="token number">0xffff</span> <span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> <span class="token number">0xff</span> <span class="token operator">&amp;</span> <span class="token function">get_seg_byte</span><span class="token punctuation">(</span>esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是 asm.s 中调用的中断处理 C 函数，以 <code>do_</code> 前缀开头：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_double_fault</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;double fault&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_general_protection</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;general protection&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_alignment_check</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;alignment check&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_divide_error</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;divide error&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_int3</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span>esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">long</span> fs<span class="token punctuation">,</span> <span class="token keyword">long</span> es<span class="token punctuation">,</span> <span class="token keyword">long</span> ds<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">long</span> ebp<span class="token punctuation">,</span> <span class="token keyword">long</span> esi<span class="token punctuation">,</span> <span class="token keyword">long</span> edi<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">long</span> edx<span class="token punctuation">,</span> <span class="token keyword">long</span> ecx<span class="token punctuation">,</span> <span class="token keyword">long</span> ebx<span class="token punctuation">,</span> <span class="token keyword">long</span> eax<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> tr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;str %%ax&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>tr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取任务寄存器 TR</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;eax\\t\\tebx\\t\\tecx\\t\\tedx\\n\\r%8x\\t%8x\\t%8x\\t%8x\\n\\r&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            eax<span class="token punctuation">,</span> ebx<span class="token punctuation">,</span> ecx<span class="token punctuation">,</span> edx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;esi\\t\\tedi\\t\\tebp\\t\\tesp\\n\\r%8x\\t%8x\\t%8x\\t%8x\\n\\r&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            esi<span class="token punctuation">,</span> edi<span class="token punctuation">,</span> ebp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> esp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\rds\\tes\\tfs\\ttr\\n\\r%4x\\t%4x\\t%4x\\t%4x\\n\\r&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            ds<span class="token punctuation">,</span> es<span class="token punctuation">,</span> fs<span class="token punctuation">,</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;EIP: %8x  CS: %4x  EFLAGS: %8x\\n\\r&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> esp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> esp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_nmi</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;nmi&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_debug</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_overflow</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;overflow&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_bounds</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;bounds&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_invalid_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;invalid operand&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_device_not_available</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;device not available&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_coprocessor_segment_overrun</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;coprocessor segment overrun&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_invalid_TSS</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;invalid TSS&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_segment_not_present</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;segment not present&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_stack_segment</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;stack segment&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_coprocessor_error</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">!=</span> current<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;coprocessor error&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_reserved</span><span class="token punctuation">(</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;reserved (15, 17-47) error&quot;</span><span class="token punctuation">,</span> esp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面定义了一些函数原型，用于中断初始化：</p><blockquote><p>没弄懂的一点是，只声明了原型，没有函数实现啊</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">page_exception</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 页异常 (page_fault)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">divide_error</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// INT 0</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// INT 1</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">nmi</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// INT 2</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">int3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// INT 3</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">overflow</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// INT 4</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">bounds</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// INT 5</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">invalid_op</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// INT 6</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">device_not_available</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// INT 7</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">double_fault</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// INT 8</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">coprocessor_segment_overrun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// INT 9</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">invalid_TSS</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// INT 10</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">segment_not_present</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// INT 11</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">stack_segment</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// INT 12</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">general_protection</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// INT 13</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">page_fault</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// INT 14</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">coprocessor_error</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// INT 16</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">reserved</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// INT 15</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">parallel_interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// INT 39</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">irq13</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// INT 45</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">alignment_check</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// INT 46</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是内核初始化程序中调用的 <code>trap_init()</code> 函数，其中用到了 <code>set_trap_gate()</code> 和 <code>set_system_gate()</code>，都用到了 IDT 中的陷阱门：前者设置的特权级为 0，后者为 3。这两个函数是嵌入汇编程序 (<code>include/asm/system.h</code>)。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">trap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置中断向量值</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>divide_error<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nmi<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>int3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* int3-5 can be called from all */</span></span>
<span class="line">    <span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bounds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>invalid_op<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>device_not_available<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>double_fault<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>coprocessor_segment_overrun<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>invalid_TSS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>segment_not_present<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_segment<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>general_protection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>page_fault<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reserved<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>coprocessor_error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>alignment_check<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 下面把 INT 17-47 的陷阱门均先设置为 reserved</span></span>
<span class="line">    <span class="token comment">// 以后各硬件初始化时会重新设置自己的陷阱门</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">set_trap_gate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reserved<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 协处理器 INT 45 的陷阱门描述符</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>irq13<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 允许 8259A 主芯片的 IRQ2 中断请求</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 允许 8259A 从芯片的 IRQ13 中断请求</span></span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xdf</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置并行口 1 的中断 0x27 陷阱门描述符</span></span>
<span class="line">    <span class="token function">set_trap_gate</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>parallel_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41)]))}const i=s(e,[["render",o],["__file","Chapter 8.3 - traps.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%208%20-%20%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81/Chapter%208.3%20-%20traps.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 8.3 - traps.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.3 traps.c 程序","slug":"_8-3-traps-c-程序","link":"#_8-3-traps-c-程序","children":[{"level":3,"title":"8.3.1 功能描述","slug":"_8-3-1-功能描述","link":"#_8-3-1-功能描述","children":[]},{"level":3,"title":"8.3.2 代码注释","slug":"_8-3-2-代码注释","link":"#_8-3-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 8 - 内核代码/Chapter 8.3 - traps.c 程序.md"}');export{i as comp,u as data};
