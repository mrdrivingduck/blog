import{_ as e,c as a,a as s,o as t}from"./app-7eKjwDat.js";const i={};function p(l,n){return t(),a("div",null,n[0]||(n[0]=[s(`<h1 id="chapter-6-整数集合" tabindex="-1"><a class="header-anchor" href="#chapter-6-整数集合"><span>Chapter 6 - 整数集合</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 01 16:20</p><p>Nanjing, Jiangsu, China</p><hr><p>整数集合 (intset) 是 Redis 保存整数值集合的抽象数据结构，并保证集合中不会出现重复元素。</p><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">uint32_t</span> encoding<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">int8_t</span> contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>contents</code> 数组的数据类型取决于 <code>encoding</code>：</p><ul><li><code>INTSET_ENC_INT16</code> - <code>int16_t</code></li><li><code>INTSET_ENC_INT32</code> - <code>int32_t</code></li><li><code>INTSET_ENC_INT64</code> - <code>int64_t</code></li></ul><p><code>contents</code> 内维护集合内的所有元素，以 <strong>有序</strong> 的方式排列。</p><h2 id="upgrade" tabindex="-1"><a class="header-anchor" href="#upgrade"><span>Upgrade</span></a></h2><p>当新元素被添加到集合中时，如果新元素的数据长度比当前集合中的长度等级长，将触发集合的升级：</p><ul><li>扩展整数集合底层数组的空间，并分配新空间</li><li>将原有数据全部转换为新类型，并添加到正确的位置上，保证有序</li><li>添加新元素</li></ul><p>由于升级时要对底层数组中已有的元素进行转换，所以时间复杂度为 O(N)。</p><p>整数集合不支持降级。一旦对数组进行了升级，编码就一直保持升级后的状态。</p>`,16)]))}const o=e(i,[["render",p],["__file","Chapter 6 - 整数集合.html.vue"]]),d=JSON.parse('{"path":"/redis-implementation-notes/Part%201%20-%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1/Chapter%206%20-%20%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88.html","title":"Chapter 6 - 整数集合","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Upgrade","slug":"upgrade","link":"#upgrade","children":[]}],"git":{},"filePathRelative":"redis-implementation-notes/Part 1 - 数据结构与对象/Chapter 6 - 整数集合.md"}');export{o as comp,d as data};
