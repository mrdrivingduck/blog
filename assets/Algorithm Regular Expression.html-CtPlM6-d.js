import{_ as s,c as a,a as t,o as e}from"./app-7eKjwDat.js";const o={};function c(p,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="algorithm-regular-expression" tabindex="-1"><a class="header-anchor" href="#algorithm-regular-expression"><span>Algorithm - Regular Expression</span></a></h1><p>Created by : Mr Dk.</p><p>2018 / 10 / 11 09:04</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_1-about" tabindex="-1"><a class="header-anchor" href="#_1-about"><span>1. About</span></a></h2><p><strong>正则表达式</strong> 是对字符串操作的一种逻辑公式。用事先定义好的一些特定字符的组合，组成一个 <strong>规则字符串</strong> ，用来表达对字符串的一种 <em>过滤逻辑</em> 。</p><p>可达到如下的目的：</p><ul><li>匹配 - 给定的字符串是否符合正则表达式的过滤逻辑</li><li>截取 - 通过正则表达式，从字符串中获取需要的特定部分</li></ul><h2 id="_2-feature" tabindex="-1"><a class="header-anchor" href="#_2-feature"><span>2. Feature</span></a></h2><ul><li>灵活性 - 只需写出表达式</li><li>逻辑性 - 对于刚接触的人比较晦涩难懂</li><li>功能性 - 可以迅速用简单的方式达到字符串的复杂控制</li></ul><h2 id="_3-metacharacter-元字符" tabindex="-1"><a class="header-anchor" href="#_3-metacharacter-元字符"><span>3. Metacharacter 元字符</span></a></h2><p>在正则表达式中具有特殊意义的专用字符</p><table><thead><tr><th>Meta-character</th><th>Description</th></tr></thead><tbody><tr><td><code>\\</code></td><td>转义符，如 <code>\\n</code> 匹配换行符，<code>\\\\n</code> 匹配 <code>\\n</code></td></tr><tr><td><code>^</code></td><td>匹配输入行首</td></tr><tr><td><code>$</code></td><td>匹配输入行尾</td></tr><tr><td><code>*</code></td><td>匹配前面的子表达式任意次，等价于 <code>{0,}</code></td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次(≥ 1)，等价于 <code>{1,}</code></td></tr><tr><td><code>?</code></td><td>匹配前面的子表达式 0 次或 1 次，等价于 <code>{0,1}</code></td></tr><tr><td><code>{n}</code></td><td>匹配确定的 <em>n</em> 次</td></tr><tr><td><code>{n,}</code></td><td>至少匹配 <em>n</em> 次</td></tr><tr><td><code>{n,m}</code></td><td>至少匹配 <em>n</em> 次，最多匹配 <em>m</em> 次</td></tr><tr><td><code>.</code></td><td>匹配除 <code>\\r</code> 和 <code>\\n</code> 之外的任何单个字符</td></tr><tr><td><code>x丨y</code></td><td>匹配 <em>x</em> 或 <em>y</em></td></tr><tr><td><code>[xyz]</code></td><td>字符集合，匹配所包含的任意字符</td></tr><tr><td><code>[^xyz]</code></td><td>负值字符集合，匹配不包含的任意字符</td></tr><tr><td><code>[a-z]</code></td><td>字符范围，匹配指定范围内的任意字符</td></tr><tr><td><code>[^a-z]</code></td><td>负值字符范围，匹配不在指定范围内的任意字符</td></tr><tr><td><code>\\b</code></td><td>匹配一个单词的边界 (单词和空格间的位置)</td></tr><tr><td><code>\\B</code></td><td>匹配非单词边界</td></tr><tr><td><code>\\d</code></td><td>匹配一个数字字符，等价于 <code>[0-9]</code></td></tr><tr><td><code>\\D</code></td><td>匹配一个非数字字符，等价于 <code>[^0-9]</code></td></tr><tr><td><code>\\f</code></td><td>匹配一个换页符</td></tr><tr><td><code>\\n</code></td><td>匹配一个换行符</td></tr><tr><td><code>\\r</code></td><td>匹配一个回车符</td></tr><tr><td><code>\\s</code></td><td>匹配任何不可见字符</td></tr><tr><td><code>\\S</code></td><td>匹配任何可见字符</td></tr><tr><td><code>\\t</code></td><td>匹配一个制表符</td></tr><tr><td><code>\\w</code></td><td>匹配包括 <code>_</code> 的任意单词字符</td></tr><tr><td><code>\\W</code></td><td>匹配任意非单词字符</td></tr><tr><td>......</td><td>......</td></tr></tbody></table><h2 id="_4-example" tabindex="-1"><a class="header-anchor" href="#_4-example"><span>4. Example</span></a></h2><p>判断输入的用户名是否合法：用户名必须是 3 - 10 位的英文字母或数字。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 在 JS 中使用 /Reg/ 来定义正则表达式</span></span>
<span class="line"><span class="token keyword">var</span> userNameReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9]{3,10}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> username1 <span class="token operator">=</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> username2 <span class="token operator">=</span> <span class="token string">&quot;12.&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> username3 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> username4 <span class="token operator">=</span> <span class="token string">&quot;123456789a&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> username5 <span class="token operator">=</span> <span class="token string">&quot;1234axz7789&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userNameReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userNameReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userNameReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userNameReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userNameReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 中，似乎不需要使用 <code>^</code> 和 <code>$</code>。</p><hr><h2 id="_5-summary" tabindex="-1"><a class="header-anchor" href="#_5-summary"><span>5. Summary</span></a></h2><p>用这东西可以避免模式匹配的时候写一大堆 <code>if-else</code> 逻辑。</p>`,21)]))}const l=s(o,[["render",c],["__file","Algorithm Regular Expression.html.vue"]]),r=JSON.parse('{"path":"/notes/Algorithm/Algorithm%20Regular%20Expression.html","title":"Algorithm - Regular Expression","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. About","slug":"_1-about","link":"#_1-about","children":[]},{"level":2,"title":"2. Feature","slug":"_2-feature","link":"#_2-feature","children":[]},{"level":2,"title":"3. Metacharacter 元字符","slug":"_3-metacharacter-元字符","link":"#_3-metacharacter-元字符","children":[]},{"level":2,"title":"4. Example","slug":"_4-example","link":"#_4-example","children":[]},{"level":2,"title":"5. Summary","slug":"_5-summary","link":"#_5-summary","children":[]}],"git":{},"filePathRelative":"notes/Algorithm/Algorithm Regular Expression.md"}');export{l as comp,r as data};
