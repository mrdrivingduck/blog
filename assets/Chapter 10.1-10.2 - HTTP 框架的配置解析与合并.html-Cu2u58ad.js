import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const c="/blog/assets/module-conf-BueQPLCS.png",t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-10-1-10-2-http-框架的配置解析与合并" tabindex="-1"><a class="header-anchor" href="#chapter-10-1-10-2-http-框架的配置解析与合并"><span>Chapter 10.1-10.2 - HTTP 框架的配置解析与合并</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 07 / 28 20:08</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_10-1-http-框架概述" tabindex="-1"><a class="header-anchor" href="#_10-1-http-框架概述"><span>10.1 HTTP 框架概述</span></a></h2><p>在 Nginx 中，HTTP 框架是事件消费模块的大户。HTTP 框架要完成的基础性工作包含：</p><ol><li>处理 <code>http{}</code> 块内的配置项</li><li>监听 Web 端口，处理新连接事件、可读事件、可写事件</li><li>通过状态机，分析接收到的 TCP 字符流是否是完成的 HTTP packet</li><li>根据接收到的 HTTP 请求的 URI 和 HTTP header，按请求所在阶段，分发到某个 HTTP 模块，调用其回调函数处理请求</li><li>向 HTTP 模块提供必要的工具函数 (处理网络 I/O 和磁盘 I/O)</li><li>提供 upstream 机制帮助 HTTP 模块访问第三方服务</li><li>提供 subrequest 机制帮助 HTTP 模块实现子请求</li></ol><p>一个典型的 HTTP 配置：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span></span>
<span class="line">    ...<span class="token punctuation">;</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span></span>
<span class="line">        ...<span class="token punctuation">;</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> /L1</span> <span class="token punctuation">{</span></span>
<span class="line">            ...<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> /L2</span> <span class="token punctuation">{</span></span>
<span class="line">            ...<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span></span>
<span class="line">        ...<span class="token punctuation">;</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> /L1</span> <span class="token punctuation">{</span></span>
<span class="line">            ...<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> /L2</span> <span class="token punctuation">{</span></span>
<span class="line">            ...<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，HTTP 框架支持在一个 <code>http{}</code> 块中包含多个 <code>server{}</code> 块和多个 <code>location{}</code> 块。<code>ngx_http_module</code> 核心模块定义了新的模块类型 <code>NGX_HTTP_MODULE</code>。这类模块中的 <code>ctx</code> 被定义为 <code>ngx_http_module_t</code>，是所有 HTTP 模块的通用接口。<code>ngx_http_module_t</code> 接口完全围绕着解析配置项来进行。其中包含三类配置项：</p><ul><li>直接隶属于 <code>http{}</code> 块的 main 配置项</li><li>直接隶属于 <code>server{}</code> 块的 srv 配置项</li><li>直接隶属于 <code>location{}</code> 块的 loc 配置项</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 解析 http{} 块前后的回调</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>   <span class="token punctuation">(</span><span class="token operator">*</span>preconfiguration<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>   <span class="token punctuation">(</span><span class="token operator">*</span>postconfiguration<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建存储 http{} 中配置项的结构体</span></span>
<span class="line">    <span class="token keyword">void</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>create_main_conf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 解析完 http{} 内 main 配置项的回调</span></span>
<span class="line">    <span class="token keyword">char</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>init_main_conf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建存储 server{} 中 srv 配置项的结构体</span></span>
<span class="line">    <span class="token keyword">void</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>create_srv_conf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将 main 中的配置项合并到 srv 中</span></span>
<span class="line">    <span class="token keyword">char</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>merge_srv_conf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>prev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建存储 location{} 中 loc 配置项的结构体</span></span>
<span class="line">    <span class="token keyword">void</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>create_loc_conf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将 main、srv 中的配置项合并到 loc 中</span></span>
<span class="line">    <span class="token keyword">char</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>merge_loc_conf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>prev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_module_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_10-2-管理-http-模块的配置项" tabindex="-1"><a class="header-anchor" href="#_10-2-管理-http-模块的配置项"><span>10.2 管理 HTTP 模块的配置项</span></a></h2><p>HTTP 模块配置项的复杂性。HTTP 模块有三种等级的配置项，对于 HTTP 模块而言，只需要关心在工作时能够正确取到配置项即可。但对于 HTTP 框架来说，其 server 相关的配置项可能会出现在 main 级别中，location 相关的配置项可能会出现在 main、srv 级别中。所以在解析完配置项后，还要进行 <strong>合并</strong> 操作，把 main 级别、srv 级别的配置项合并到 loc 级别配置项中。具体的合并行为也可以通过实现 <code>ngx_http_module_t</code> 中的 <code>merge()</code> 函数自行定义行为。</p><p>具体涉及到数据结构的组织非常复杂。在 <a href="https://blog.csdn.net/apelife/article/details/53574273" target="_blank" rel="noopener noreferrer">CSDN</a> 上盗了个图，不想贴代码了：</p><p><img src="`+c+`" alt="module-conf"></p><p>首先是存储配置项的结构体定义。这个结构体会被 <strong>每一个 HTTP 模块</strong> 解析 <strong>每一个等级的配置项</strong> 时建立：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span>        <span class="token operator">*</span><span class="token operator">*</span>main_conf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span>        <span class="token operator">*</span><span class="token operator">*</span>srv_conf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span>        <span class="token operator">*</span><span class="token operator">*</span>loc_conf<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_conf_ctx_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在解析到 <code>http{}</code> 块的 main 级别配置项时，会分别调用每个 HTTP 模块的 <code>create_main_conf()</code>、<code>create_srv_conf()</code>、<code>create_loc_conf()</code> 函数，通过这个结构体，建立属于 <code>http{}</code> 块的配置项。</p><p>在解析到 <code>server{}</code> 块时，则回调 <code>ngx_http_core_server()</code>，开始解析 srv 级别的配置项。同样也会建立属于这个 <code>server{}</code> 块的 <code>ngx_http_conf_ctx_t</code> 结构体。其中，<code>main_conf</code> 指针指向所属 <code>http{}</code> 块的 <code>main_conf</code>，而 <code>srv_conf</code> 和 <code>loc_conf</code> 都会重新分配数组，并依次调用所有 HTTP 模块的 <code>create_srv_conf()</code> 函数和 <code>create_loc_conf()</code> 函数。</p><p>在解析到 <code>location{}</code> 块时，回调 <code>ngx_http_core_location()</code>，开始解析 loc 级别的配置项。同样这里也会建立属于 <code>location{}</code> 块的 <code>ngx_http_conf_ctx_t</code> 结构体，其中 <code>main_conf</code> 和 <code>srv_conf</code> 分别指向所属 <code>server{}</code> 块的 <code>main_conf</code> 和 <code>srv_conf</code>。而 <code>loc_conf</code> 则将会重新分配指针数组，并依次调用所有 HTTP 模块的 <code>create_loc_conf()</code> 函数。</p><p>可以看到，<code>create_loc_conf()</code> 被三个等级的配置项分别调用了一次，它们都可以被合并到 loc 级别的配置中；<code>create_srv_conf()</code> 被两个等级的配置项分别调用了一次，它们都可以被合并到 srv 级别的配置中。</p><p>首先进行的是 main 级别与 srv 级别的同名配置的合并 (节选自 <code>ngx_http_block()</code> 函数)：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * init http{} main_conf&#39;s, merge the server{}s&#39; srv_conf&#39;s</span>
<span class="line"> * and its location{}s&#39; loc_conf&#39;s</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">cmcf <span class="token operator">=</span> ctx<span class="token operator">-&gt;</span>main_conf<span class="token punctuation">[</span>ngx_http_core_module<span class="token punctuation">.</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">cscfp <span class="token operator">=</span> cmcf<span class="token operator">-&gt;</span>servers<span class="token punctuation">.</span>elts<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 遍历所有 Nginx 模块</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cf<span class="token operator">-&gt;</span>cycle<span class="token operator">-&gt;</span>modules<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// HTTP 类型的模块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cf<span class="token operator">-&gt;</span>cycle<span class="token operator">-&gt;</span>modules<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">-&gt;</span>type <span class="token operator">!=</span> NGX_HTTP_MODULE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获得模块结构体和编号</span></span>
<span class="line">    module <span class="token operator">=</span> cf<span class="token operator">-&gt;</span>cycle<span class="token operator">-&gt;</span>modules<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx<span class="token punctuation">;</span></span>
<span class="line">    mi <span class="token operator">=</span> cf<span class="token operator">-&gt;</span>cycle<span class="token operator">-&gt;</span>modules<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx_index<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* init http{} main_conf&#39;s */</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token operator">-&gt;</span>init_main_conf<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        rv <span class="token operator">=</span> module<span class="token operator">-&gt;</span><span class="token function">init_main_conf</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> ctx<span class="token operator">-&gt;</span>main_conf<span class="token punctuation">[</span>mi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> NGX_CONF_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">goto</span> failed<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将 http{} 块中的配置向 server{} 块中合并</span></span>
<span class="line">    rv <span class="token operator">=</span> <span class="token function">ngx_http_merge_servers</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> cmcf<span class="token punctuation">,</span> module<span class="token punctuation">,</span> mi<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> NGX_CONF_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ngx_http_merge_servers()</code> 函数中，将 <code>http{}</code> 块对应的配置结构体中的 <code>srv_conf</code> 和 <code>loc_conf</code> 合并到 <code>server{}</code> 块的 <code>srv_conf</code> 和 <code>loc_conf</code> 中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span></span>
<span class="line"><span class="token function">ngx_http_merge_servers</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">,</span> <span class="token class-name">ngx_http_core_main_conf_t</span> <span class="token operator">*</span>cmcf<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ngx_http_module_t</span> <span class="token operator">*</span>module<span class="token punctuation">,</span> <span class="token class-name">ngx_uint_t</span> ctx_index<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span>                        <span class="token operator">*</span>rv<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                   s<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_conf_ctx_t</span>         <span class="token operator">*</span>ctx<span class="token punctuation">,</span> saved<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_core_loc_conf_t</span>    <span class="token operator">*</span>clcf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_core_srv_conf_t</span>   <span class="token operator">*</span><span class="token operator">*</span>cscfp<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cscfp <span class="token operator">=</span> cmcf<span class="token operator">-&gt;</span>servers<span class="token punctuation">.</span>elts<span class="token punctuation">;</span> <span class="token comment">// 所有 server{} 块下的配置</span></span>
<span class="line">    ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_http_conf_ctx_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> cf<span class="token operator">-&gt;</span>ctx<span class="token punctuation">;</span> <span class="token comment">// http{} 块下的全局配置</span></span>
<span class="line">    saved <span class="token operator">=</span> <span class="token operator">*</span>ctx<span class="token punctuation">;</span></span>
<span class="line">    rv <span class="token operator">=</span> NGX_CONF_OK<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 遍历所有 server 块下的 srv 级别配置</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;</span> cmcf<span class="token operator">-&gt;</span>servers<span class="token punctuation">.</span>nelts<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* merge the server{}s&#39; srv_conf&#39;s */</span></span>
<span class="line"></span>
<span class="line">        ctx<span class="token operator">-&gt;</span>srv_conf <span class="token operator">=</span> cscfp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx<span class="token operator">-&gt;</span>srv_conf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 如果当前 HTTP 模块实现了 http{} 块到 server{} 块的 srv 级别配置的合并函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token operator">-&gt;</span>merge_srv_conf<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 调用合并函数，参数分别为 http{} 块的 srv 配置和 server{} 块的 srv 配置</span></span>
<span class="line">            rv <span class="token operator">=</span> module<span class="token operator">-&gt;</span><span class="token function">merge_srv_conf</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> saved<span class="token punctuation">.</span>srv_conf<span class="token punctuation">[</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                        cscfp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx<span class="token operator">-&gt;</span>srv_conf<span class="token punctuation">[</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> NGX_CONF_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">goto</span> failed<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 如果当前 HTTP 模块实现了 http{} 块到 server{} 块的 loc 级别配置的合并函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token operator">-&gt;</span>merge_loc_conf<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">/* merge the server{}&#39;s loc_conf */</span></span>
<span class="line"></span>
<span class="line">            ctx<span class="token operator">-&gt;</span>loc_conf <span class="token operator">=</span> cscfp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx<span class="token operator">-&gt;</span>loc_conf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 调用合并函数，参数分别为 http{} 块的 loc 配置和 server{} 块的 loc 配置</span></span>
<span class="line">            rv <span class="token operator">=</span> module<span class="token operator">-&gt;</span><span class="token function">merge_loc_conf</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> saved<span class="token punctuation">.</span>loc_conf<span class="token punctuation">[</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                        cscfp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx<span class="token operator">-&gt;</span>loc_conf<span class="token punctuation">[</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> NGX_CONF_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">goto</span> failed<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">/* merge the locations{}&#39; loc_conf&#39;s */</span></span>
<span class="line"></span>
<span class="line">            clcf <span class="token operator">=</span> cscfp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx<span class="token operator">-&gt;</span>loc_conf<span class="token punctuation">[</span>ngx_http_core_module<span class="token punctuation">.</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 开始将 server{} 块中的配置向 location{} 块中合并</span></span>
<span class="line">            rv <span class="token operator">=</span> <span class="token function">ngx_http_merge_locations</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> clcf<span class="token operator">-&gt;</span>locations<span class="token punctuation">,</span></span>
<span class="line">                                          cscfp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-&gt;</span>ctx<span class="token operator">-&gt;</span>loc_conf<span class="token punctuation">,</span></span>
<span class="line">                                          module<span class="token punctuation">,</span> ctx_index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> NGX_CONF_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">goto</span> failed<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">failed<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">*</span>ctx <span class="token operator">=</span> saved<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> rv<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>ngx_http_merge_locations()</code> 函数中，将 <code>server{}</code> 块的 <code>loc_conf</code> (此时已经与 <code>http{}</code> 块的 <code>loc_conf</code> 合并) 与 <code>location{}</code> 块的 <code>loc_conf</code> 合并：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span></span>
<span class="line"><span class="token function">ngx_http_merge_locations</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">,</span> <span class="token class-name">ngx_queue_t</span> <span class="token operator">*</span>locations<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>loc_conf<span class="token punctuation">,</span> <span class="token class-name">ngx_http_module_t</span> <span class="token operator">*</span>module<span class="token punctuation">,</span> <span class="token class-name">ngx_uint_t</span> ctx_index<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span>                       <span class="token operator">*</span>rv<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_queue_t</span>                <span class="token operator">*</span>q<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_conf_ctx_t</span>        <span class="token operator">*</span>ctx<span class="token punctuation">,</span> saved<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_core_loc_conf_t</span>   <span class="token operator">*</span>clcf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_location_queue_t</span>  <span class="token operator">*</span>lq<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 当前 server 块下没有 location 块，直接返回</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>locations <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_CONF_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_http_conf_ctx_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> cf<span class="token operator">-&gt;</span>ctx<span class="token punctuation">;</span></span>
<span class="line">    saved <span class="token operator">=</span> <span class="token operator">*</span>ctx<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 遍历每一个 location 块</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> <span class="token function">ngx_queue_head</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         q <span class="token operator">!=</span> <span class="token function">ngx_queue_sentinel</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         q <span class="token operator">=</span> <span class="token function">ngx_queue_next</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        lq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_http_location_queue_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> q<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        clcf <span class="token operator">=</span> lq<span class="token operator">-&gt;</span>exact <span class="token operator">?</span> lq<span class="token operator">-&gt;</span>exact <span class="token operator">:</span> lq<span class="token operator">-&gt;</span>inclusive<span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token operator">-&gt;</span>loc_conf <span class="token operator">=</span> clcf<span class="token operator">-&gt;</span>loc_conf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 合并 server{} 块与 location{} 块的配置项</span></span>
<span class="line">        rv <span class="token operator">=</span> module<span class="token operator">-&gt;</span><span class="token function">merge_loc_conf</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> loc_conf<span class="token punctuation">[</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                    clcf<span class="token operator">-&gt;</span>loc_conf<span class="token punctuation">[</span>ctx_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> NGX_CONF_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> rv<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// location 块可以嵌套 location 块，所以递归</span></span>
<span class="line">        rv <span class="token operator">=</span> <span class="token function">ngx_http_merge_locations</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> clcf<span class="token operator">-&gt;</span>locations<span class="token punctuation">,</span> clcf<span class="token operator">-&gt;</span>loc_conf<span class="token punctuation">,</span></span>
<span class="line">                                      module<span class="token punctuation">,</span> ctx_index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> NGX_CONF_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> rv<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">*</span>ctx <span class="token operator">=</span> saved<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_CONF_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://blog.csdn.net/apelife/article/details/53574273" target="_blank" rel="noopener noreferrer">CSDN - Nginx 配置解析之配置合并</a></p>`,33)]))}const u=s(t,[["render",o],["__file","Chapter 10.1-10.2 - HTTP 框架的配置解析与合并.html.vue"]]),r=JSON.parse('{"path":"/understanding-nginx-notes/Part%203%20-%20%E6%B7%B1%E5%85%A5%20Nginx/Chapter%2010.1-10.2%20-%20HTTP%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%90%88%E5%B9%B6.html","title":"Chapter 10.1-10.2 - HTTP 框架的配置解析与合并","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"10.1 HTTP 框架概述","slug":"_10-1-http-框架概述","link":"#_10-1-http-框架概述","children":[]},{"level":2,"title":"10.2 管理 HTTP 模块的配置项","slug":"_10-2-管理-http-模块的配置项","link":"#_10-2-管理-http-模块的配置项","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 3 - 深入 Nginx/Chapter 10.1-10.2 - HTTP 框架的配置解析与合并.md"}');export{u as comp,r as data};
