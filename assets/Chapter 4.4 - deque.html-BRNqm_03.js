import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e="/blog/assets/4-10-C5-xecag.png",o="/blog/assets/4-12-CnjqqjRp.png",c={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-4-4-deque" tabindex="-1"><a class="header-anchor" href="#chapter-4-4-deque"><span>Chapter 4.4 - deque</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 04 14:33 🍀</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_4-4-1-deque-概述" tabindex="-1"><a class="header-anchor" href="#_4-4-1-deque-概述"><span>4.4.1 deque 概述</span></a></h2><p>deque 是一种 <strong>双向开口的连续线性空间</strong>。vector 当然也可以在头尾两端进行操作，但是头部操作的效率奇差。而 deque 允许 <strong>在常数时间内对头尾元素进行插入或移除</strong>。另外，deque 也没有容量的概念，而是以 <strong>动态的分段连续空间</strong> 的形式组合而成：随时可以增加一段新的空间并链接起来。因此，deque 也没有 vector 的 <code>reserve()</code> 功能。</p><p>deque 也能够提供 Random Access Iterator，但是迭代器肯定不是简单的指针了。迭代器的内部实现屏蔽了 deque 构造的复杂性，但是在性能上显然会逊于 vector 的迭代器。因此，除非必要，应当尽可能优先使用 vector。</p><h2 id="_4-4-2-deque-的中控器" tabindex="-1"><a class="header-anchor" href="#_4-4-2-deque-的中控器"><span>4.4.2 deque 的中控器</span></a></h2><p>deque 由一段一段的连续空间组成。这些一段一段的连续空间本身需要由数据结构来维护。这个数据结构就是中控器 map。当 deque 的前端或后端的空间不够用时，则分配一段新的连续空间，并将空间维护在 map 中。map 本身也是一小块连续空间，可被视为是一个 <strong>指针数组</strong>，里面的每个指针指向一段缓冲区 - 缓冲区才是 deque 的存储主体。SGI STL 允许用户指定缓冲区大小，或使用默认的 512 bytes。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">_Deque_base</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Tp<span class="token operator">*</span><span class="token operator">*</span> _M_map<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+e+`" alt="4-10" style="zoom:50%;"><p>当 map 本身不够用时，map 自己需要被扩容，以便容纳更多指向缓冲区的指针。</p><h2 id="_4-4-3-deque-的迭代器" tabindex="-1"><a class="header-anchor" href="#_4-4-3-deque-的迭代器"><span>4.4.3 deque 的迭代器</span></a></h2><p>由于 deque 时分段连续空间，而迭代器需要实现随机存取。因此，deque 的迭代器需要尽全力 <strong>维持整体连续的假象</strong>。由迭代器的 <code>operator++</code> 和 <code>operator--</code> 两个运算符来实现这一功能。</p><p>deque 的迭代器不仅需要知道自己当当前缓冲区中是否已经到达边缘，同时还需要知道自己在哪个缓冲区中。当迭代器前进或后退时，可能需要切换缓冲区。因此迭代器的定义中有几个重要的指针：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ref</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ptr</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Deque_iterator</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span>             iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span> const_iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> size_t <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Ptr pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Ref reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> size_t size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span><span class="token operator">*</span> _Map_pointer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> _Deque_iterator _Self<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _Tp<span class="token operator">*</span> _M_cur<span class="token punctuation">;</span>          <span class="token comment">// 当前缓冲区中的当前位置</span></span>
<span class="line">  _Tp<span class="token operator">*</span> _M_first<span class="token punctuation">;</span>        <span class="token comment">// 当前缓冲区中的头</span></span>
<span class="line">  _Tp<span class="token operator">*</span> _M_last<span class="token punctuation">;</span>         <span class="token comment">// 当前缓冲区中的尾 (包括未使用的空间在内)</span></span>
<span class="line">  _Map_pointer _M_node<span class="token punctuation">;</span> <span class="token comment">// 指向 map</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>deque 类内也维护着两个重要的迭代器 <code>start</code> 和 <code>finish</code>：</p><ul><li><code>start</code> 迭代器的 <code>cur</code> 指针指向 deque 内第一个缓冲区的第一个 (已被使用) 的位置</li><li><code>finish</code> 迭代器的 <code>cur</code> 指针指向 deque 内最后一个缓冲区的最后一个 (已被使用) 的位置的下一个位置</li></ul><p>这两个迭代器的 <code>cur</code> 指针标定了 deque 的数据访问范围。如图所示：</p><img src="`+o+`" alt="4-12" style="zoom:50%;"><p>deque 迭代器的关键行为在于对所有运算符的正确重载。尤其是当迭代器遇到缓冲区边缘时，需要调用 <code>set_node()</code> 跳到另一个缓冲区中。该函数负责重新设置 <code>cur</code>、<code>first</code>、<code>last</code> 指针：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">  <span class="token keyword">void</span> <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_Map_pointer __new_node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_node <span class="token operator">=</span> __new_node<span class="token punctuation">;</span></span>
<span class="line">    _M_first <span class="token operator">=</span> <span class="token operator">*</span>__new_node<span class="token punctuation">;</span></span>
<span class="line">    _M_last <span class="token operator">=</span> _M_first <span class="token operator">+</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解引用运算符直接使用 <code>cur</code> 指针：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span>_M_cur<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">pointer <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_cur<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>operator-</code> 运算符计算两个迭代器之间的距离。这个距离包含三个部分：</p><ul><li>两个迭代器之间的完整缓冲区个数 * 缓冲区大小</li><li>当前迭代器所在缓冲区中，<code>cur</code> 与 <code>first</code> 之间的距离</li><li>参数迭代器所在缓冲区中，<code>cur</code> 与 <code>last</code> 之间的距离</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">difference_type <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>_M_node <span class="token operator">-</span> __x<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">        <span class="token punctuation">(</span>_M_cur <span class="token operator">-</span> _M_first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>__x<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> __x<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>operator++</code> 和 <code>operator--</code> 运算符在修改 <code>cur</code> 的同时，需要判断是否到达缓冲区边界：</p><ul><li>如果到达缓冲区前边界，那么跳到前一个缓冲区，并将 <code>cur</code> 设置为缓冲区最后一个元素的下一个位置</li><li>如果到达缓冲区后边界，那么跳到后一个缓冲区，并将 <code>cur</code> 设置为缓冲区的第一个元素</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">++</span>_M_cur<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">==</span> _M_last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        _M_cur <span class="token operator">=</span> _M_first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">_Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">==</span> _M_first<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        _M_cur <span class="token operator">=</span> _M_last<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">--</span>_M_cur<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">_Self <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>operator+=</code> 和 <code>operator-=</code> (附带 <code>operator+</code> 和 <code>operator-</code>) 实现了返回一个随机访问迭代器。对于给定的参数，需要通过计算确定其跨越了几个缓冲区，然后计算确定在目标缓冲区中 <code>cur</code> 的最终位置：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    difference_type __offset <span class="token operator">=</span> __n <span class="token operator">+</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">-</span> _M_first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__offset <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> __offset <span class="token operator">&lt;</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        _M_cur <span class="token operator">+=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 不超出当前缓冲区</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        difference_type __node_offset <span class="token operator">=</span></span>
<span class="line">            __offset <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> __offset <span class="token operator">/</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">:</span> <span class="token operator">-</span><span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>__offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">+</span> __node_offset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换缓冲区</span></span>
<span class="line">        _M_cur <span class="token operator">=</span> _M_first <span class="token operator">+</span>  <span class="token comment">// 确定 cur 指针的最终位置</span></span>
<span class="line">            <span class="token punctuation">(</span>__offset <span class="token operator">-</span> __node_offset <span class="token operator">*</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">_Self <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp <span class="token operator">+=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 借用 += 的实现</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">-=</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">+=</span> <span class="token operator">-</span>__n<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 借用 += 的实现</span></span>
<span class="line"></span>
<span class="line">_Self <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp <span class="token operator">-=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 借用 -= 的实现</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>operator[]</code> 可以实现元素的随机访问，内部实际上借用了 <code>operator+</code> 的实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>所有的迭代器比较操作都取决于：</p><ol><li>所属缓冲区</li><li>所属缓冲区相同的前提下，<code>cur</code> 指针的位置</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_cur <span class="token operator">==</span> __x<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">==</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>_M_node <span class="token operator">==</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token operator">?</span></span>
<span class="line">        <span class="token punctuation">(</span>_M_cur <span class="token operator">&lt;</span> __x<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">_M_node</span> <span class="token generic class-name"><span class="token operator">&lt;</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>__x <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-4-deque-的数据结构" tabindex="-1"><a class="header-anchor" href="#_4-4-4-deque-的数据结构"><span>4.4.4 deque 的数据结构</span></a></h2><p>deque 最重要的成员变量是一个指向 map 的指针，以及刚才提到的 <code>start</code> 和 <code>finish</code> 两个迭代器。另外，将默认的 <code>alloc</code> 分配器封装为两个分配器，一个以缓冲区大小为单位分配内存 (用于分配新的缓冲区)，一个以缓冲区指针的大小为单位分配内存 (用于分配新的 map 以扩容)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">_Deque_base</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span>_Tp<span class="token operator">*</span><span class="token operator">&gt;</span>             iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span> const_iterator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> _Alloc allocator_type<span class="token punctuation">;</span></span>
<span class="line">  allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_Deque_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span><span class="token punctuation">,</span> size_t __num_elements<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_map</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_map_size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">_M_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>__num_elements<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_Deque_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_map</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_map_size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">_M_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">~</span><span class="token function">_Deque_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_create_nodes</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span><span class="token operator">*</span> __nstart<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">*</span> __nfinish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span><span class="token operator">*</span> __nstart<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">*</span> __nfinish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">enum</span> <span class="token punctuation">{</span> _S_initial_map_size <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Tp<span class="token operator">*</span><span class="token operator">*</span> _M_map<span class="token punctuation">;</span>       <span class="token comment">// 指向 map</span></span>
<span class="line">  size_t _M_map_size<span class="token punctuation">;</span> <span class="token comment">// map 的大小</span></span>
<span class="line">  iterator _M_start<span class="token punctuation">;</span>  <span class="token comment">// start 迭代器</span></span>
<span class="line">  iterator _M_finish<span class="token punctuation">;</span> <span class="token comment">// finish 迭代器</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span>  _Node_alloc_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _Map_alloc_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _Tp<span class="token operator">*</span> <span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _Node_alloc_type<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _Node_alloc_type<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  _Tp<span class="token operator">*</span><span class="token operator">*</span> <span class="token function">_M_allocate_map</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _Map_alloc_type<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_deallocate_map</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span><span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _Map_alloc_type<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了 <code>start</code> 和 <code>finish</code> 迭代器，以及迭代器重载的所有运算符，可以轻松实现以下成员函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_finish<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_finish<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_start<span class="token punctuation">[</span><span class="token function">difference_type</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 从第一个有效元素开始随机访问</span></span>
<span class="line">const_reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_start<span class="token punctuation">[</span><span class="token function">difference_type</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span>_M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    iterator __tmp <span class="token operator">=</span> _M_finish<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>__tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span>__tmp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span>_M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    const_iterator __tmp <span class="token operator">=</span> _M_finish<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>__tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span>__tmp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_finish <span class="token operator">-</span> _M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_finish <span class="token operator">==</span> _M_start<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-5-deque-的构造与内存管理" tabindex="-1"><a class="header-anchor" href="#_4-4-5-deque-的构造与内存管理"><span>4.4.5 deque 的构造与内存管理</span></a></h2><p>deque 本身最复杂的地方在于插入和删除时造成的缓冲区分配与回收；另外，当 map 本身不够用时，又牵扯到 map 的重新分配与释放。</p><p>deque 的构造函数支持用户设定缓冲区中的元素个数，但是显式声明意味着要把之前的缺省参数补齐。另外，还支持保留指定个数的元素空间。</p><blockquote><p>？咋没有第三个模板参数</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">deque</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_Deque_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构造函数中，根据要保留的元素个数，决定如何对 map 进行初始化：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">_Deque_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span><span class="token punctuation">,</span> size_t __num_elements<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_map</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_map_size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">_M_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>__num_elements<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>initialize_map()</code> 来构造 map：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token class-name">_Deque_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>size_t __num_elements<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  size_t __num_nodes <span class="token operator">=</span></span>
<span class="line">    __num_elements <span class="token operator">/</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 容纳指定元素需要的缓冲区个数</span></span>
<span class="line"></span>
<span class="line">  _M_map_size <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> _S_initial_map_size<span class="token punctuation">,</span> __num_nodes <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// map 内前后各预留一个空指针备用</span></span>
<span class="line">  <span class="token comment">// enum { _S_initial_map_size = 8 };</span></span>
<span class="line">  <span class="token comment">// 最少要有 8 个缓冲区指针的空间</span></span>
<span class="line"></span>
<span class="line">  _M_map <span class="token operator">=</span> <span class="token function">_M_allocate_map</span><span class="token punctuation">(</span>_M_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配 map 内存</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 从 map 的中间开始启用 (前后留空)</span></span>
<span class="line">  _Tp<span class="token operator">*</span><span class="token operator">*</span> __nstart <span class="token operator">=</span> _M_map <span class="token operator">+</span> <span class="token punctuation">(</span>_M_map_size <span class="token operator">-</span> __num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  _Tp<span class="token operator">*</span><span class="token operator">*</span> __nfinish <span class="token operator">=</span> __nstart <span class="token operator">+</span> __num_nodes<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_M_create_nodes</span><span class="token punctuation">(</span>__nstart<span class="token punctuation">,</span> __nfinish<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依次创建每一个缓冲区</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">_M_deallocate_map</span><span class="token punctuation">(</span>_M_map<span class="token punctuation">,</span> _M_map_size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 失败时回滚所有已创建缓冲区</span></span>
<span class="line">                _M_map <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _M_map_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 设置 start 和 finish 迭代器所在的结点和 cur 指针</span></span>
<span class="line">  _M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__nstart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__nfinish <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span></span>
<span class="line">  _M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_finish<span class="token punctuation">.</span>_M_first <span class="token operator">+</span></span>
<span class="line">               __num_elements <span class="token operator">%</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">_Deque_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_create_nodes</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span><span class="token operator">*</span> __nstart<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">*</span> __nfinish<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Tp<span class="token operator">*</span><span class="token operator">*</span> __cur<span class="token punctuation">;</span></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>__cur <span class="token operator">=</span> __nstart<span class="token punctuation">;</span> __cur <span class="token operator">&lt;</span> __nfinish<span class="token punctuation">;</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">*</span>__cur <span class="token operator">=</span> <span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span>__nstart<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 <code>push_back()</code> 为例。如果 <code>finish</code> 迭代器指向的缓冲区 (最后一个缓冲区) 中还有两个以上的备用空间，那么直接在备用空间上构造元素即可；如果只剩一个备用空间了，那么在构造元素后，还需要分配新的缓冲区，并把 <code>finish</code> 迭代器切换到新的缓冲区上。<code>push_front()</code> 的思路也类似，只不过是换了个方向。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __t<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> _M_finish<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">construct</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span> __t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">++</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">_M_push_back_aux</span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __t<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> _M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">construct</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> __t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">--</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">_M_push_front_aux</span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Called only if _M_finish._M_cur == _M_finish._M_last - 1.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_push_back_aux</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __t<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  value_type __t_copy <span class="token operator">=</span> __t<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">_M_reserve_map_at_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保 map 的后端有空闲的指针用于分配缓冲区</span></span>
<span class="line">  <span class="token operator">*</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配缓冲区</span></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">construct</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span> __t_copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 finish 迭代器的 cur 指针所在位置构造元素</span></span>
<span class="line">    _M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换 finish 迭代器到新分配的缓冲区</span></span>
<span class="line">    _M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span> <span class="token comment">// finish 迭代器的 cur 指针指向新缓冲区的第一个位置</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回滚</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Called only if _M_start._M_cur == _M_start._M_first.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span>  <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_push_front_aux</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __t<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  value_type __t_copy <span class="token operator">=</span> __t<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">_M_reserve_map_at_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    _M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_start<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">construct</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span> __t_copy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>_M_start<span class="token punctuation">,</span> <span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里引出了问题：如果 map 中的空间不够用了怎么办？不妨看看 <code>reserve_map_at_back()</code> 和 <code>reserve_map_at_front()</code> 是怎么干的。这两个函数不负责分配缓冲区，只负责重新分配一个更大的 map，并将原来 map 中的缓冲区指针搬运到新的 map 中，并析构释放原来的 map。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Makes sure the _M_map has space for new nodes.  Does not actually</span></span>
<span class="line"><span class="token comment">//  add the nodes.  Can invalidate _M_map pointers.  (And consequently,</span></span>
<span class="line"><span class="token comment">//  deque iterators.)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_reserve_map_at_back</span> <span class="token punctuation">(</span>size_type __nodes_to_add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__nodes_to_add <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> _M_map_size <span class="token operator">-</span> <span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> _M_map<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>__nodes_to_add<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_reserve_map_at_front</span> <span class="token punctuation">(</span>size_type __nodes_to_add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__nodes_to_add <span class="token operator">&gt;</span> <span class="token function">size_type</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> _M_map<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>__nodes_to_add<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，完成核心功能的是 <code>reallocate_map()</code> 函数，通过参数来决定向前扩容还是向后扩容：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>size_type __nodes_to_add<span class="token punctuation">,</span></span>
<span class="line">                                          <span class="token keyword">bool</span> __add_at_front<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  size_type __old_num_nodes <span class="token operator">=</span> _M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> _M_start<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// map 内原有指针数</span></span>
<span class="line">  size_type __new_num_nodes <span class="token operator">=</span> __old_num_nodes <span class="token operator">+</span> __nodes_to_add<span class="token punctuation">;</span> <span class="token comment">// 原有指针数 + 1 (缺省值)</span></span>
<span class="line"></span>
<span class="line">  _Map_pointer __new_nstart<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_map_size <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不需重新分配，前后不均罢了，将有效指针搬运到 map 中间</span></span>
<span class="line">    __new_nstart <span class="token operator">=</span> _M_map <span class="token operator">+</span> <span class="token punctuation">(</span>_M_map_size <span class="token operator">-</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line">                     <span class="token operator">+</span> <span class="token punctuation">(</span>__add_at_front <span class="token operator">?</span> __nodes_to_add <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__new_nstart <span class="token operator">&lt;</span> _M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">copy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> _M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> __new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      <span class="token function">copy_backward</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> _M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                    __new_nstart <span class="token operator">+</span> __old_num_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 需要重新分配 map</span></span>
<span class="line">    size_type __new_map_size <span class="token operator">=</span></span>
<span class="line">      _M_map_size <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>_M_map_size<span class="token punctuation">,</span> __nodes_to_add<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 新的 map 大小</span></span>
<span class="line"></span>
<span class="line">    _Map_pointer __new_map <span class="token operator">=</span> <span class="token function">_M_allocate_map</span><span class="token punctuation">(</span>__new_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配</span></span>
<span class="line">    __new_nstart <span class="token operator">=</span> __new_map <span class="token operator">+</span> <span class="token punctuation">(</span>__new_map_size <span class="token operator">-</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line">                         <span class="token operator">+</span> <span class="token punctuation">(</span>__add_at_front <span class="token operator">?</span> __nodes_to_add <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">copy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> _M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> __new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将原有效指针搬运到 map 中间</span></span>
<span class="line">    <span class="token function">_M_deallocate_map</span><span class="token punctuation">(</span>_M_map<span class="token punctuation">,</span> _M_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放原来的 map</span></span>
<span class="line"></span>
<span class="line">    _M_map <span class="token operator">=</span> __new_map<span class="token punctuation">;</span> <span class="token comment">// 更改 map 指针与大小</span></span>
<span class="line">    _M_map_size <span class="token operator">=</span> __new_map_size<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 重新设置 start 和 finish 迭代器</span></span>
<span class="line">  _M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__new_nstart <span class="token operator">+</span> __old_num_nodes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-6-deque-的元素操作" tabindex="-1"><a class="header-anchor" href="#_4-4-6-deque-的元素操作"><span>4.4.6 deque 的元素操作</span></a></h2><p><code>pop</code> 操作需要判断被删除的元素是否是当前缓冲区中的最后一个元素：</p><ul><li>如果不是，则直接析构元素，并调整 <code>cur</code> 指针</li><li>如果是，那么切换缓冲区，重新调整 <code>cur</code> 指针，销毁元素，此外还需要释放缓冲区</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> _M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">--</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">destroy</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接析构</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">_M_pop_back_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要释放缓冲区</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> _M_start<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">destroy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接析构</span></span>
<span class="line">        <span class="token operator">++</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">_M_pop_front_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要释放缓冲区</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Called only if _M_finish._M_cur == _M_finish._M_first.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_pop_back_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">  _M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换缓冲区</span></span>
<span class="line">  _M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_finish<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">destroy</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 析构元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Called only if _M_start._M_cur == _M_start._M_last - 1.  Note that</span></span>
<span class="line"><span class="token comment">// if the deque has at least one element (a precondition for this member</span></span>
<span class="line"><span class="token comment">// function), and if _M_start._M_cur == _M_start._M_last, then the deque</span></span>
<span class="line"><span class="token comment">// must have at least two nodes.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_pop_front_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">destroy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>clear()</code> 清除整个 deque。deque 在最初状态 (无任何元素) 时保有一个缓冲区。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_Map_pointer __node <span class="token operator">=</span> _M_start<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">       __node <span class="token operator">&lt;</span> _M_finish<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> <span class="token comment">// 释放除头尾缓冲区以外的缓冲区</span></span>
<span class="line">       <span class="token operator">++</span>__node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">*</span>__node<span class="token punctuation">,</span> <span class="token operator">*</span>__node <span class="token operator">+</span> <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span><span class="token operator">*</span>__node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">!=</span> _M_finish<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 头尾缓冲区不是同一个</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span> _M_start<span class="token punctuation">.</span>_M_last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 析构头缓冲区内所有元素</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">,</span> _M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 析构尾缓冲区内所有元素</span></span>
<span class="line">    <span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放尾缓冲区 (保留头缓冲区)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token comment">// 头尾缓冲区是同一个缓冲区</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span> _M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 析构所有元素 (但不释放缓冲区)</span></span>
<span class="line"></span>
<span class="line">  _M_finish <span class="token operator">=</span> _M_start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>erase()</code> 清除某一个或某个区间内的元素。清除单个元素时，首先判断清楚位置之前与之后的元素哪边更多，移动较少那一端的元素以减小搬运代价。移动完毕后，调用 <code>pop_back()</code> 或 <code>pop_front()</code> 移除边界冗余的元素 (这两个函数还会自动释放冗余缓冲区)。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    iterator __next <span class="token operator">=</span> __pos<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__next<span class="token punctuation">;</span></span>
<span class="line">    difference_type __index <span class="token operator">=</span> __pos <span class="token operator">-</span> _M_start<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span>__index<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">copy_backward</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> __pos<span class="token punctuation">,</span> __next<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">copy</span><span class="token punctuation">(</span>__next<span class="token punctuation">,</span> _M_finish<span class="token punctuation">,</span> __pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> _M_start <span class="token operator">+</span> __index<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要移除的是一个区间，同样需要判断区间之前与区间之后的元素哪边更多，移动剩余元素较少的那一端。搬运完毕后，将冗余的元素全部删除，并释放已经冗余的缓冲区。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator</span>
<span class="line"><span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> _M_start <span class="token operator">&amp;&amp;</span> __last <span class="token operator">==</span> _M_finish<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> _M_finish<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    difference_type __n <span class="token operator">=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span></span>
<span class="line">    difference_type __elems_before <span class="token operator">=</span> __first <span class="token operator">-</span> _M_start<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__elems_before <span class="token operator">&lt;</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">copy_backward</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      iterator __new_start <span class="token operator">=</span> _M_start <span class="token operator">+</span> __n<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span>_M_start<span class="token punctuation">,</span> __new_start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> _M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      _M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">copy</span><span class="token punctuation">(</span>__last<span class="token punctuation">,</span> _M_finish<span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      iterator __new_finish <span class="token operator">=</span> _M_finish <span class="token operator">-</span> __n<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span>__new_finish<span class="token punctuation">,</span> _M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span>__new_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> _M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      _M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> _M_start <span class="token operator">+</span> __elems_before<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>insert()</code> 在某个位置 (之前) 插入元素。首先判断插入位置是否在前后两个端点，如果是，则直接使用 <code>push_back()</code> / <code>push_front()</code> 完成功能；否则，将最前端 / 最后段插入与第一个元素 / 最后一个元素值相同的元素，并通过搬运元素使得插入位置留空，最终将新值放到插入位置上。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator</span>
<span class="line"><span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  difference_type __index <span class="token operator">=</span> __pos <span class="token operator">-</span> _M_start<span class="token punctuation">;</span></span>
<span class="line">  value_type __x_copy <span class="token operator">=</span> __x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span>__index<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能导致扩容缓冲区</span></span>
<span class="line">    iterator __front1 <span class="token operator">=</span> _M_start<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__front1<span class="token punctuation">;</span></span>
<span class="line">    iterator __front2 <span class="token operator">=</span> __front1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__front2<span class="token punctuation">;</span></span>
<span class="line">    __pos <span class="token operator">=</span> _M_start <span class="token operator">+</span> __index<span class="token punctuation">;</span></span>
<span class="line">    iterator __pos1 <span class="token operator">=</span> __pos<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__pos1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">copy</span><span class="token punctuation">(</span>__front2<span class="token punctuation">,</span> __pos1<span class="token punctuation">,</span> __front1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能导致扩容缓冲区</span></span>
<span class="line">    iterator __back1 <span class="token operator">=</span> _M_finish<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>__back1<span class="token punctuation">;</span></span>
<span class="line">    iterator __back2 <span class="token operator">=</span> __back1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>__back2<span class="token punctuation">;</span></span>
<span class="line">    __pos <span class="token operator">=</span> _M_start <span class="token operator">+</span> __index<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">copy_backward</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> __back2<span class="token punctuation">,</span> __back1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">*</span>__pos <span class="token operator">=</span> __x_copy<span class="token punctuation">;</span> <span class="token comment">// 在空位上插入元素</span></span>
<span class="line">  <span class="token keyword">return</span> __pos<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上，<code>erase()</code> 和 <code>insert()</code> 能够成功实现的前提都是 <code>copy()</code> 和 <code>copy_backward()</code> 的正确操作。而这两个操作应当都是使用了 deque 迭代器屏蔽了底层细节，从而实现了可能的跨缓冲区的顺利复制。</p>`,72)]))}const r=s(c,[["render",l],["__file","Chapter 4.4 - deque.html.vue"]]),k=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%204%20-%20%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%204.4%20-%20deque.html","title":"Chapter 4.4 - deque","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.4.1 deque 概述","slug":"_4-4-1-deque-概述","link":"#_4-4-1-deque-概述","children":[]},{"level":2,"title":"4.4.2 deque 的中控器","slug":"_4-4-2-deque-的中控器","link":"#_4-4-2-deque-的中控器","children":[]},{"level":2,"title":"4.4.3 deque 的迭代器","slug":"_4-4-3-deque-的迭代器","link":"#_4-4-3-deque-的迭代器","children":[]},{"level":2,"title":"4.4.4 deque 的数据结构","slug":"_4-4-4-deque-的数据结构","link":"#_4-4-4-deque-的数据结构","children":[]},{"level":2,"title":"4.4.5 deque 的构造与内存管理","slug":"_4-4-5-deque-的构造与内存管理","link":"#_4-4-5-deque-的构造与内存管理","children":[]},{"level":2,"title":"4.4.6 deque 的元素操作","slug":"_4-4-6-deque-的元素操作","link":"#_4-4-6-deque-的元素操作","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 4 - 序列式容器/Chapter 4.4 - deque.md"}');export{r as comp,k as data};
