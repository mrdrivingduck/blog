import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-6-7-5-permutation" tabindex="-1"><a class="header-anchor" href="#chapter-6-7-5-permutation"><span>Chapter 6.7.5 - permutation</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 15 16:27</p><p>Nanjing, Jiangsu, China</p><hr><p>STL 提供了获取序列 <em>前一个</em> / <em>后一个</em> 排列组合序列的算法。所谓 <em>前一个 / 后一个</em> 是指将序列中的所有元素根据 <code>operator&lt;</code> 进行字典序排序后的 <em>前一个 / 后一个</em> 序列。函数默认使用 <code>operator&lt;</code> 来进行比较，但用户可以自行指定二元仿函数进行比较。</p><h2 id="next-permutation" tabindex="-1"><a class="header-anchor" href="#next-permutation"><span>next_permutation</span></a></h2><p>从结尾开始寻找一对递增元素 <code>(a, b)</code>，然后再从结尾开始寻找第一个值大于 <code>a</code> 的元素 <code>c</code>。将 <code>a</code> 与 <code>c</code> 交换顺序后，将从 <code>b</code> 开始之后的区间进行颠倒。</p><blockquote><p>为什么可以这样？</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// next_permutation and prev_permutation, with and without an explicitly</span></span>
<span class="line"><span class="token comment">// supplied comparison function.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">next_permutation</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span> _BidirectionalIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIter<span class="token punctuation">,</span> _BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_BidirectionalIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  _BidirectionalIter __i <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">++</span>__i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  __i <span class="token operator">=</span> __last<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">--</span>__i<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _BidirectionalIter __ii <span class="token operator">=</span> __i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>__i<span class="token punctuation">;</span>                          <span class="token comment">// i 与 ii 为一对相邻元素</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__i <span class="token operator">&lt;</span> <span class="token operator">*</span>__ii<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// (i, ii) 递增</span></span>
<span class="line">      _BidirectionalIter __j <span class="token operator">=</span> __last<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>__i <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token operator">--</span>__j<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 从结尾开始寻找第一个不小于 i 的元素 j</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">iter_swap</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> __j<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// i 与 j 互换</span></span>
<span class="line">      <span class="token function">reverse</span><span class="token punctuation">(</span>__ii<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将从 ii 开始之后的区间颠倒</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> __first<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// (i, ii) 不递增，且 i 已经是第一个元素</span></span>
<span class="line">      <span class="token function">reverse</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 颠倒整个区间</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">next_permutation</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span> _BidirectionalIter __last<span class="token punctuation">,</span></span>
<span class="line">                      _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prev-permutation" tabindex="-1"><a class="header-anchor" href="#prev-permutation"><span>prev_permutation</span></a></h2><p>与 <code>next_permutation()</code> 类似。从结尾开始寻找第一对递减的相邻元素 <code>(a, b)</code>，然后再从结尾开始寻找第一个不大于 <code>a</code> 的元素 <code>c</code>。将 <code>a</code> 与 <code>c</code> 对换后，将 <code>b</code> 开始到结尾的区间颠倒。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">prev_permutation</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span> _BidirectionalIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIter<span class="token punctuation">,</span> _BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_BidirectionalIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  _BidirectionalIter __i <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">++</span>__i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  __i <span class="token operator">=</span> __last<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">--</span>__i<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _BidirectionalIter __ii <span class="token operator">=</span> __i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>__i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__ii <span class="token operator">&lt;</span> <span class="token operator">*</span>__i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// 寻找到相邻的递减区间 (i, ii)</span></span>
<span class="line">      _BidirectionalIter __j <span class="token operator">=</span> __last<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">--</span>__j <span class="token operator">&lt;</span> <span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// 从结尾寻找第一个不小于 i 的元素 j</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">iter_swap</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> __j<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// i 与 j 互换</span></span>
<span class="line">      <span class="token function">reverse</span><span class="token punctuation">(</span>__ii<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将从 ii 开始的区间颠倒</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> __first<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">reverse</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">prev_permutation</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span> _BidirectionalIter __last<span class="token punctuation">,</span></span>
<span class="line">                      _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)]))}const i=s(t,[["render",o],["__file","Chapter 6.7.5 - permutation.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.7.5%20-%20permutation.html","title":"Chapter 6.7.5 - permutation","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"next_permutation","slug":"next-permutation","link":"#next-permutation","children":[]},{"level":2,"title":"prev_permutation","slug":"prev-permutation","link":"#prev-permutation","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.7.5 - permutation.md"}');export{i as comp,u as data};
