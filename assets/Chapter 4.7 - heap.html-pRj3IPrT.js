import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function c(o,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-4-7-heap" tabindex="-1"><a class="header-anchor" href="#chapter-4-7-heap"><span>Chapter 4.7 - heap</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 04 15:42 🍀</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_4-7-1-heap-概述" tabindex="-1"><a class="header-anchor" href="#_4-7-1-heap-概述"><span>4.7.1 heap 概述</span></a></h2><p>heap 不属于 SQL 容器组件，而是一种组织数据的方式，用于实现 priority_queue。优先队列允许用于以任意顺序将元素 push 到容器内，但取出时一定从最高优先级的数据开始取出。</p><p>如果使用平衡二叉树来维护所有元素，代价有些高。因为优先队列并不要求元素整体有序，每次只需要取出最大的那个元素即可，不需要其它元素之间有序。二叉堆是一颗完全二叉树，满足效率和代价的折衷。完全二叉树的树内没有洞，因此可以直接使用线性数组来存储结点，并且通过数组下标的倍数关系方便地取得左右孩子结点和父结点。</p><p>这样一来，只需要：</p><ul><li>一个数组</li><li>一组 heap 算法</li></ul><p>就能够实现堆。堆可以被分为 max-heap 和 min-heap。STL 提供的是 max-heap。</p><h2 id="_4-7-2-heap-算法" tabindex="-1"><a class="header-anchor" href="#_4-7-2-heap-算法"><span>4.7.2 heap 算法</span></a></h2><h3 id="push-heap-算法" tabindex="-1"><a class="header-anchor" href="#push-heap-算法"><span><code>push_heap</code> 算法</span></a></h3><p>该算法默认新的元素已经被插入在底层结构的 <code>end()</code> 迭代器所在的位置上。为了让这个新元素满足堆的定义，需要对该结点执行一个 <em>上浮 (percolate up)</em> 操作，直到该元素的父结点比该元素大。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">push_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span></span>
<span class="line">          _Compare __comp<span class="token punctuation">)</span> <span class="token comment">// 头尾迭代器指示区间，其中最后一个元素是新插入的；comp 表示比较方式</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__push_heap_aux</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __comp<span class="token punctuation">,</span></span>
<span class="line">                  <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">__push_heap_aux</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span></span>
<span class="line">                _RandomAccessIterator __last<span class="token punctuation">,</span> _Distance<span class="token operator">*</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__push_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> <span class="token function">_Distance</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_Distance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指明堆的有效区间，以及最后一个位置的元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">__push_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span></span>
<span class="line">            _Distance __holeIndex<span class="token punctuation">,</span> _Distance __topIndex<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Distance __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 最后一个元素的父结点</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">&gt;</span> __topIndex <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">)</span> <span class="token operator">&lt;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 父结点 &lt; 最后一个结点</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父结点下移</span></span>
<span class="line">    __holeIndex <span class="token operator">=</span> __parent<span class="token punctuation">;</span>                           <span class="token comment">// 父结点空缺</span></span>
<span class="line">    __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">// 指向父结点的父结点</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> __value<span class="token punctuation">;</span> <span class="token comment">// 新元素放入合适的结点</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pop-heap-算法" tabindex="-1"><a class="header-anchor" href="#pop-heap-算法"><span><code>pop_heap</code> 算法</span></a></h3><p>取走根结点，将空出的根结点位置下放 (percolate down) 直到叶子结点；然后将堆的最右下结点填到空出的位置，做一次上浮 (percolate up) 操作。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">pop_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span></span>
<span class="line">         _RandomAccessIterator __last<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__pop_heap_aux</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">__pop_heap_aux</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span></span>
<span class="line">               _Tp<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> __last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">__pop_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span></span>
<span class="line">           _RandomAccessIterator __result<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">,</span> _Distance<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span> <span class="token comment">// 将堆顶元素 (最大元素) 保存到空间的最后</span></span>
<span class="line">  <span class="token function">__adjust_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> <span class="token function">_Distance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_Distance</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span><span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">__adjust_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _Distance __holeIndex<span class="token punctuation">,</span></span>
<span class="line">              _Distance __len<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Distance __topIndex <span class="token operator">=</span> __holeIndex<span class="token punctuation">;</span> <span class="token comment">// 堆顶目前空缺</span></span>
<span class="line">  _Distance __secondChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> __holeIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 右孩子</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">&lt;</span> __len<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __secondChild<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      __secondChild<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __secondChild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左孩子</span></span>
<span class="line">    __holeIndex <span class="token operator">=</span> __secondChild<span class="token punctuation">;</span></span>
<span class="line">    __secondChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">==</span> __len<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __holeIndex <span class="token operator">=</span> __secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__push_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __holeIndex<span class="token punctuation">,</span> __topIndex<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将堆内最后一个元素移到空位，并上浮</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，堆内的最大元素被放到了底层元素的尾端 (未被取走)，同时堆的区间范围比原先少 1。</p><h3 id="sort-heap-算法" tabindex="-1"><a class="header-anchor" href="#sort-heap-算法"><span><code>sort_heap</code> 算法</span></a></h3><p>迭代地对整个 heap 进行 <code>pop_heap()</code> 操作，那么每次堆区间的最后就是堆内最大元素。每次操作范围缩小 1，最终得到的就是一个递增的序列。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">sort_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">sort_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span></span>
<span class="line">          _RandomAccessIterator __last<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token operator">--</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="make-heap-算法" tabindex="-1"><a class="header-anchor" href="#make-heap-算法"><span><code>make_heap</code> 算法</span></a></h3><p>该算法将一段现有数据 <strong>堆化</strong>。找到区间内最后一个元素的父结点。以该结点为堆的根，进行堆调整。然后不断调整每一个父结点，直到父结点成为整个堆的根。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">__make_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span></span>
<span class="line">            _Compare __comp<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">,</span> _Distance<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  _Distance __len <span class="token operator">=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span></span>
<span class="line">  _Distance __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__adjust_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __parent<span class="token punctuation">,</span> __len<span class="token punctuation">,</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                  __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__parent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    __parent<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">make_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span></span>
<span class="line">          _RandomAccessIterator __last<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__make_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __comp<span class="token punctuation">,</span></span>
<span class="line">              <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-7-3-heap-没有迭代器" tabindex="-1"><a class="header-anchor" href="#_4-7-3-heap-没有迭代器"><span>4.7.3 heap 没有迭代器</span></a></h2><p>heap 不提供遍历功能，也不提供迭代器。</p>`,32)]))}const i=n(t,[["render",c],["__file","Chapter 4.7 - heap.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%204%20-%20%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%204.7%20-%20heap.html","title":"Chapter 4.7 - heap","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.7.1 heap 概述","slug":"_4-7-1-heap-概述","link":"#_4-7-1-heap-概述","children":[]},{"level":2,"title":"4.7.2 heap 算法","slug":"_4-7-2-heap-算法","link":"#_4-7-2-heap-算法","children":[{"level":3,"title":"push_heap 算法","slug":"push-heap-算法","link":"#push-heap-算法","children":[]},{"level":3,"title":"pop_heap 算法","slug":"pop-heap-算法","link":"#pop-heap-算法","children":[]},{"level":3,"title":"sort_heap 算法","slug":"sort-heap-算法","link":"#sort-heap-算法","children":[]},{"level":3,"title":"make_heap 算法","slug":"make-heap-算法","link":"#make-heap-算法","children":[]}]},{"level":2,"title":"4.7.3 heap 没有迭代器","slug":"_4-7-3-heap-没有迭代器","link":"#_4-7-3-heap-没有迭代器","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 4 - 序列式容器/Chapter 4.7 - heap.md"}');export{i as comp,u as data};
