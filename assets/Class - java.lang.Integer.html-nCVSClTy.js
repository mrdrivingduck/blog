import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="class-java-lang-integer" tabindex="-1"><a class="header-anchor" href="#class-java-lang-integer"><span>Class - java.lang.Integer</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 05 / 29 11:15</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * The <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> class wraps a value of the primitive type</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> in an object. An object of type <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * contains a single field whose type is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>In addition, this class provides several methods for converting</span>
<span class="line"> * an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> to a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> and a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> to an</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span>, as well as other constants and methods useful when</span>
<span class="line"> * dealing with an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Implementation note: The implementations of the &quot;bit twiddling&quot;</span>
<span class="line"> * methods (such as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">highestOneBit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span> highestOneBit<span class="token punctuation">}</span> and</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">numberOfTrailingZeros</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span> numberOfTrailingZeros<span class="token punctuation">}</span>) are</span>
<span class="line"> * based on material from Henry S. Warren, Jr.&#39;s <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>Hacker&#39;s</span>
<span class="line"> * Delight<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>, (Addison Wesley, 2002).</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span>  Lee Boynton</span>
<span class="line"> * <span class="token keyword">@author</span>  Arthur van Hoff</span>
<span class="line"> * <span class="token keyword">@author</span>  Josh Bloch</span>
<span class="line"> * <span class="token keyword">@author</span>  Joseph D. Darcy</span>
<span class="line"> * <span class="token keyword">@since</span> JDK1.0</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Integer</code> 类将一个原始类型的 <code>int</code> 封装在对象中。类中的函数主要分为两部分：</p><ul><li>静态工具函数，负责 <code>int</code> 和 <code>String</code> 之间的互相转换</li><li>对象函数，负责有效处理 <code>Integer</code> 中封装的 <code>int</code> 值</li></ul><hr><p>内部 <code>int</code> 数值的范围为 <code>-2^31 ~ 2^31-1</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A constant holding the minimum value an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> can</span>
<span class="line"> * have, -2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Native</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>   <span class="token constant">MIN_VALUE</span> <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A constant holding the maximum value an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> can</span>
<span class="line"> * have, 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span>-1.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Native</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>   <span class="token constant">MAX_VALUE</span> <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><code>Integer</code> 类中提供的一个重要功能，就是 <code>int</code> 与 <code>String</code> 类之间的转换。这个功能提供的函数基本是 <code>static</code>，与 <code>Integer</code> 本身的状态无关，仅提供代码功能。这些函数接收的外部参数不是 <code>int</code> 就是 <code>String</code>。其中，字符串所对应的 <strong>进制</strong> 可以通过参数来指定。</p><p>首先缓存了字符串中可能出现的所有字符。如果输入的进制 <code>radix</code> 为 N，那么前 N 个字符将被用于表示这个字符串。比如对于二进制，就用前两个字符 <code>0</code> <code>1</code>。进制数如果没有特别指定，默认为十进制；指定的范围为 <code>2</code> 到 <code>36</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * All possible chars for representing a number as a String</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token char">&#39;0&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token char">&#39;6&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token char">&#39;c&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;g&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;h&#39;</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token char">&#39;i&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;j&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;k&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;m&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;n&#39;</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token char">&#39;o&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;p&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;q&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;r&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token char">&#39;u&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;w&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;x&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;y&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;z&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下函数将一个输入的 <code>int</code> 按输入的进制 <code>radix</code> 转换为对应的字符串。如果对应一个负数，那么先将其转换为相反数进行转换，最终在字符串最前面将被添上 <code>-</code>。整体过程就是经典的 <em>除以进制数取余数</em>，倒序构造字符串的每一个字符。如果确定转换十进制字符串，那么调用另一个专为十进制设计的快速版本。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a string representation of the first argument in the</span>
<span class="line"> * radix specified by the second argument.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the radix is smaller than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MIN_RADIX</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * or larger than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MAX_RADIX</span></span></span><span class="token punctuation">}</span>, then the radix</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">10</span></span></span><span class="token punctuation">}</span> is used instead.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the first argument is negative, the first element of the</span>
<span class="line"> * result is the ASCII minus character <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;-&#39;</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu002D&#39;</span></span><span class="token punctuation">}</span>). If the first argument is not</span>
<span class="line"> * negative, no sign character appears in the result.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The remaining characters of the result represent the magnitude</span>
<span class="line"> * of the first argument. If the magnitude is zero, it is</span>
<span class="line"> * represented by a single zero character <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;0&#39;</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span>); otherwise, the first character of</span>
<span class="line"> * the representation of the magnitude will not be the zero</span>
<span class="line"> * character.  The following ASCII characters are used as digits:</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *   <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0123456789</span>abcdefghijklmnopqrstuvwxyz</span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * These are <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span> through</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0039&#39;</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0061&#39;</span></span><span class="token punctuation">}</span> through</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu007A&#39;</span></span><span class="token punctuation">}</span>. If <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">radix</span></span><span class="token punctuation">}</span> is</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>var</span><span class="token punctuation">&gt;</span></span>N<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>var</span><span class="token punctuation">&gt;</span></span>, then the first <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>var</span><span class="token punctuation">&gt;</span></span>N<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>var</span><span class="token punctuation">&gt;</span></span> of these characters</span>
<span class="line"> * are used as radix-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>var</span><span class="token punctuation">&gt;</span></span>N<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>var</span><span class="token punctuation">&gt;</span></span> digits in the order shown. Thus,</span>
<span class="line"> * the digits for hexadecimal (radix 16) are</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0123456789</span>abcdef</span></span><span class="token punctuation">}</span>. If uppercase letters are</span>
<span class="line"> * desired, the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span><span class="token punctuation">#</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> method may</span>
<span class="line"> * be called on the result:</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">i</span>       an integer to be converted to a string.</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">radix</span>   the radix to use in the string representation.</span>
<span class="line"> * <span class="token keyword">@return</span>  a string representation of the argument in the specified radix.</span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token field">MAX_RADIX</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token field">MIN_RADIX</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>radix <span class="token operator">&lt;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MIN_RADIX</span> <span class="token operator">||</span> radix <span class="token operator">&gt;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MAX_RADIX</span><span class="token punctuation">)</span></span>
<span class="line">        radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Use the faster version */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>radix <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> negative <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> charPos <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>negative<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        i <span class="token operator">=</span> <span class="token operator">-</span>i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token operator">-</span>radix<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        buf<span class="token punctuation">[</span>charPos<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>i <span class="token operator">%</span> radix<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        i <span class="token operator">=</span> i <span class="token operator">/</span> radix<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    buf<span class="token punctuation">[</span>charPos<span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>negative<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        buf<span class="token punctuation">[</span><span class="token operator">--</span>charPos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> charPos<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">33</span> <span class="token operator">-</span> charPos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，还可以按进制将 <code>int</code> 转换为无符号的字符串。在 <code>Integer</code> 类中，只支持二进制、八进制、十六进制。其它进制的支持位于 <code>Long</code> 类中：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a string representation of the first argument as an</span>
<span class="line"> * unsigned integer value in the radix specified by the second</span>
<span class="line"> * argument.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the radix is smaller than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MIN_RADIX</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * or larger than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MAX_RADIX</span></span></span><span class="token punctuation">}</span>, then the radix</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">10</span></span></span><span class="token punctuation">}</span> is used instead.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Note that since the first argument is treated as an unsigned</span>
<span class="line"> * value, no leading sign character is printed.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the magnitude is zero, it is represented by a single zero</span>
<span class="line"> * character <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;0&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span>); otherwise,</span>
<span class="line"> * the first character of the representation of the magnitude will</span>
<span class="line"> * not be the zero character.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The behavior of radixes and the characters used as digits</span>
<span class="line"> * are the same as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span> toString<span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">i</span>       an integer to be converted to an unsigned string.</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">radix</span>   the radix to use in the string representation.</span>
<span class="line"> * <span class="token keyword">@return</span>  an unsigned string representation of the argument in the specified radix.</span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token punctuation">#</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * <span class="token keyword">@since</span> 1.8</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toUnsignedString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toUnsignedString</span><span class="token punctuation">(</span><span class="token function">toUnsignedLong</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a string representation of the integer argument as an</span>
<span class="line"> * unsigned integer in base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>16.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The unsigned integer value is the argument plus 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * if the argument is negative; otherwise, it is equal to the</span>
<span class="line"> * argument.  This value is converted to a string of ASCII digits</span>
<span class="line"> * in hexadecimal (base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>16) with no extra leading</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span>s.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The value of the argument can be recovered from the returned</span>
<span class="line"> * string <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s</span></span><span class="token punctuation">}</span> by calling <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> * <span class="token reference"><span class="token class-name">Integer</span><span class="token punctuation">#</span><span class="token function">parseUnsignedInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * Integer.parseUnsignedInt(s, 16)<span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the unsigned magnitude is zero, it is represented by a</span>
<span class="line"> * single zero character <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;0&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span>);</span>
<span class="line"> * otherwise, the first character of the representation of the</span>
<span class="line"> * unsigned magnitude will not be the zero character. The</span>
<span class="line"> * following characters are used as hexadecimal digits:</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0123456789</span>abcdef</span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * These are the characters <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span> through</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0039&#39;</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0061&#39;</span></span><span class="token punctuation">}</span> through</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0066&#39;</span></span><span class="token punctuation">}</span>. If uppercase letters are</span>
<span class="line"> * desired, the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span><span class="token punctuation">#</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> method may</span>
<span class="line"> * be called on the result:</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">i</span>   an integer to be converted to a string.</span>
<span class="line"> * <span class="token keyword">@return</span>  the string representation of the unsigned integer value</span>
<span class="line"> *          represented by the argument in hexadecimal (base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>16).</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">parseUnsignedInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">toUnsignedString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * <span class="token keyword">@since</span>   JDK1.0.2</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">toUnsignedString0</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a string representation of the integer argument as an</span>
<span class="line"> * unsigned integer in base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>8.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The unsigned integer value is the argument plus 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * if the argument is negative; otherwise, it is equal to the</span>
<span class="line"> * argument.  This value is converted to a string of ASCII digits</span>
<span class="line"> * in octal (base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>8) with no extra leading <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span>s.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The value of the argument can be recovered from the returned</span>
<span class="line"> * string <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s</span></span><span class="token punctuation">}</span> by calling <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> * <span class="token reference"><span class="token class-name">Integer</span><span class="token punctuation">#</span><span class="token function">parseUnsignedInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * Integer.parseUnsignedInt(s, 8)<span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the unsigned magnitude is zero, it is represented by a</span>
<span class="line"> * single zero character <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;0&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span>);</span>
<span class="line"> * otherwise, the first character of the representation of the</span>
<span class="line"> * unsigned magnitude will not be the zero character. The</span>
<span class="line"> * following characters are used as octal digits:</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">01234567</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * These are the characters <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span> through</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0037&#39;</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">i</span>   an integer to be converted to a string.</span>
<span class="line"> * <span class="token keyword">@return</span>  the string representation of the unsigned integer value</span>
<span class="line"> *          represented by the argument in octal (base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>8).</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">parseUnsignedInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">toUnsignedString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * <span class="token keyword">@since</span>   JDK1.0.2</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">toUnsignedString0</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a string representation of the integer argument as an</span>
<span class="line"> * unsigned integer in base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>2.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The unsigned integer value is the argument plus 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * if the argument is negative; otherwise it is equal to the</span>
<span class="line"> * argument.  This value is converted to a string of ASCII digits</span>
<span class="line"> * in binary (base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>2) with no extra leading <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span>s.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The value of the argument can be recovered from the returned</span>
<span class="line"> * string <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s</span></span><span class="token punctuation">}</span> by calling <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> * <span class="token reference"><span class="token class-name">Integer</span><span class="token punctuation">#</span><span class="token function">parseUnsignedInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * Integer.parseUnsignedInt(s, 2)<span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the unsigned magnitude is zero, it is represented by a</span>
<span class="line"> * single zero character <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;0&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span>);</span>
<span class="line"> * otherwise, the first character of the representation of the</span>
<span class="line"> * unsigned magnitude will not be the zero character. The</span>
<span class="line"> * characters <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;0&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0030&#39;</span></span><span class="token punctuation">}</span>) and <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token char">&#39;1&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu0031&#39;</span></span><span class="token punctuation">}</span>) are used as binary digits.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">i</span>   an integer to be converted to a string.</span>
<span class="line"> * <span class="token keyword">@return</span>  the string representation of the unsigned integer value</span>
<span class="line"> *          represented by the argument in binary (base<span class="token entity named-entity" title=" ">&amp;nbsp;</span>2).</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">parseUnsignedInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">toUnsignedString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> * <span class="token keyword">@since</span>   JDK1.0.2</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">toUnsignedString0</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从实现中可以看到，先计算了转换后字符串的长度，然后开辟 buffer，以倒序将缓存中的字符复制到 buffer 中，同时对数值进行移位和掩码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Convert the integer to an unsigned number.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toUnsignedString0</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> shift<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// assert shift &gt; 0 &amp;&amp; shift &lt;=5 : &quot;Illegal shift value&quot;;</span></span>
<span class="line">    <span class="token keyword">int</span> mag <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">SIZE</span> <span class="token operator">-</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> chars <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mag <span class="token operator">+</span> <span class="token punctuation">(</span>shift <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> shift<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">formatUnsignedInt</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Use special constructor which takes over &quot;buf&quot;.</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Format a long (treated as unsigned) into a character buffer.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">val</span> the unsigned int to format</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">shift</span> the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">buf</span> the character buffer to write to</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">offset</span> the offset in the destination buffer to start at</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">len</span> the number of characters to write</span>
<span class="line"> * <span class="token keyword">@return</span> the lowest character  location used</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">formatUnsignedInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> shift<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> charPos <span class="token operator">=</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> mask <span class="token operator">=</span> radix <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        buf<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token operator">--</span>charPos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>digits<span class="token punctuation">[</span>val <span class="token operator">&amp;</span> mask<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        val <span class="token operator">&gt;&gt;&gt;=</span> shift<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> charPos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> charPos<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>将字符串按指定进制转换为 <code>int</code>。首先根据字符串的首字符来判断符号，之后一律按正数处理。然后就是根据进制数将数不断扩大，以一个最大值作为限制。最终，根据之前判断的符号决定返回正数还是负数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Parses the string argument as a signed integer in the radix</span>
<span class="line"> * specified by the second argument. The characters in the string</span>
<span class="line"> * must all be digits of the specified radix (as determined by</span>
<span class="line"> * whether <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token function">digit</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> returns a</span>
<span class="line"> * nonnegative value), except that the first character may be an</span>
<span class="line"> * ASCII minus sign <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;-&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu002D&#39;</span></span><span class="token punctuation">}</span>) to</span>
<span class="line"> * indicate a negative value or an ASCII plus sign <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;+&#39;</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu002B&#39;</span></span><span class="token punctuation">}</span>) to indicate a positive value. The</span>
<span class="line"> * resulting integer value is returned.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>An exception of type <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">NumberFormatException</span></span></span><span class="token punctuation">}</span> is</span>
<span class="line"> * thrown if any of the following situations occurs:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The first argument is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> or is a string of</span>
<span class="line"> * length zero.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The radix is either smaller than</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token field">MIN_RADIX</span></span><span class="token punctuation">}</span> or</span>
<span class="line"> * larger than <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token field">MAX_RADIX</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Any character of the string is not a digit of the specified</span>
<span class="line"> * radix, except that the first character may be a minus sign</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;-&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu002D&#39;</span></span><span class="token punctuation">}</span>) or plus sign</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token char">&#39;+&#39;</span></span></span><span class="token punctuation">}</span> (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">&#39;\\u005Cu002B&#39;</span></span><span class="token punctuation">}</span>) provided that the</span>
<span class="line"> * string is longer than length 1.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The value represented by the string is not a value of type</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Examples:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token code-section">* <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> returns <span class="token number">0</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;473&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> returns <span class="token number">473</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;+42&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> returns <span class="token number">42</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;-0&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> returns <span class="token number">0</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;-FF&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> returns <span class="token operator">-</span><span class="token number">255</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1100110&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> returns <span class="token number">102</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;2147483647&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> returns <span class="token number">2147483647</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;-2147483648&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> returns <span class="token operator">-</span><span class="token number">2147483648</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;2147483648&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> a <span class="token class-name">NumberFormatException</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;99&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> a <span class="token class-name">NumberFormatException</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;Kona&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> a <span class="token class-name">NumberFormatException</span></span></span></span>
<span class="line"> * <span class="token line"><span class="token code language-java"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;Kona&quot;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span> returns <span class="token number">411787</span></span></span></span>
<span class="line"> *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>      <span class="token parameter">s</span>   the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> containing the integer</span>
<span class="line"> *                  representation to be parsed</span>
<span class="line"> * <span class="token keyword">@param</span>      <span class="token parameter">radix</span>   the radix to be used while parsing <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * <span class="token keyword">@return</span>     the integer represented by the string argument in the</span>
<span class="line"> *             specified radix.</span>
<span class="line"> * <span class="token keyword">@exception</span>  <span class="token reference"><span class="token class-name">NumberFormatException</span></span> if the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> *             does not contain a parsable <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">        * WARNING: This method may be invoked early during VM initialization</span>
<span class="line">        * before IntegerCache is initialized. Care must be taken to not use</span>
<span class="line">        * the valueOf method.</span>
<span class="line">        */</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>radix <span class="token operator">&lt;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MIN_RADIX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">&quot;radix &quot;</span> <span class="token operator">+</span> radix <span class="token operator">+</span></span>
<span class="line">                                        <span class="token string">&quot; less than Character.MIN_RADIX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>radix <span class="token operator">&gt;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MAX_RADIX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">&quot;radix &quot;</span> <span class="token operator">+</span> radix <span class="token operator">+</span></span>
<span class="line">                                        <span class="token string">&quot; greater than Character.MAX_RADIX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> negative <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token operator">-</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> multmin<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> digit<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">char</span> firstChar <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstChar <span class="token operator">&lt;</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Possible leading &quot;+&quot; or &quot;-&quot;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstChar <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                negative <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">                limit <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstChar <span class="token operator">!=</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Cannot have lone &quot;+&quot; or &quot;-&quot;</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        multmin <span class="token operator">=</span> limit <span class="token operator">/</span> radix<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></span>
<span class="line">            digit <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>radix<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> multmin<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            result <span class="token operator">*=</span> radix<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> limit <span class="token operator">+</span> digit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            result <span class="token operator">-=</span> digit<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> negative <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token operator">-</span>result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>接下来是对象相关的部分。这里的核心是如何将一个 <code>int</code> 维护在 <code>Integer</code> 对象中，并保证操作性能。如下所示，一个 <code>int</code> 类型的数值就这样被维护在对象中。这个值可以通过构造函数直接指定，也可以通过传入一个字符串进行转换。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * The value of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@serial</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Constructs a newly allocated <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> object that</span>
<span class="line"> * represents the specified <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">value</span>   the value to be represented by the</span>
<span class="line"> *                  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> object.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Constructs a newly allocated <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> object that</span>
<span class="line"> * represents the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value indicated by the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> parameter. The string is converted to an</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value in exactly the manner used by the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">parseInt</span></span><span class="token punctuation">}</span> method for radix 10.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>      <span class="token parameter">s</span>   the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> to be converted to an</span>
<span class="line"> *                 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * <span class="token keyword">@exception</span>  <span class="token reference"><span class="token class-name">NumberFormatException</span></span>  if the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> does not</span>
<span class="line"> *               contain a parsable integer.</span>
<span class="line"> * <span class="token keyword">@see</span>        <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Integer</span><span class="token punctuation">#</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>性能相关。在 <code>Integer</code> 类第一次被加载时，会将一个 (JLS 规定) 范围内的 <code>int</code> 相对应的 <code>Integer</code> 对象提前实例化，缓存起来。在之后访问时，如果需要的 <code>Integer</code> 对象在这个缓存范围内，将不再实例化新的对象，而是直接使用缓存中的。默认的缓存范围是 <code>-128</code> 到 <code>127</code>，但这个范围可以在 JVM 初始化时通过参数进行调整。</p><p>所以这里就成了关于 <code>equals()</code> <code>==</code> 的面试题的常见考点。因为有些 <code>Integer</code> 到最终指向的相同的内存地址，有些指向的是不同的内存地址。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Cache to support the object identity semantics of autoboxing for values between</span>
<span class="line"> * -128 and 127 (inclusive) as required by JLS.</span>
<span class="line"> *</span>
<span class="line"> * The cache is initialized on first usage.  The size of the cache</span>
<span class="line"> * may be controlled by the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">AutoBoxCacheMax</span><span class="token operator">=</span><span class="token generics"><span class="token punctuation">&lt;</span>size<span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> option.</span>
<span class="line"> * During VM initialization, java.lang.Integer.IntegerCache.high property</span>
<span class="line"> * may be set and saved in the private system properties in the</span>
<span class="line"> * sun.misc.VM class.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// high value may be configured by property</span></span>
<span class="line">        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span></span>
<span class="line">            sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Integer.IntegerCache.high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span></span>
<span class="line">                h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        high <span class="token operator">=</span> h<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span>
<span class="line">        <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">&gt;=</span> <span class="token number">127</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 <code>Integer</code> 对象时，如果已在缓存中，就不实例化新的对象：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> instance representing the specified</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value.  If a new <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> instance is not</span>
<span class="line"> * required, this method should generally be used in preference to</span>
<span class="line"> * the constructor <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>, as this method is likely</span>
<span class="line"> * to yield significantly better space and time performance by</span>
<span class="line"> * caching frequently requested values.</span>
<span class="line"> *</span>
<span class="line"> * This method will always cache values in the range -128 to 127,</span>
<span class="line"> * inclusive, and may cache other values outside of this range.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>  <span class="token parameter">i</span> an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value.</span>
<span class="line"> * <span class="token keyword">@return</span> an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> instance representing <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">i</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> * <span class="token keyword">@since</span>  1.5</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>以下是 <code>java.lang.Number</code> 抽象类中需要实现的函数，主要是将 <code>int</code> 强制转换为其它数据类型：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the value of this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> as a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">byte</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * after a narrowing primitive conversion.</span>
<span class="line"> * <span class="token keyword">@jls</span> 5.1.3 Narrowing Primitive Conversions</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the value of this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> as a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">short</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * after a narrowing primitive conversion.</span>
<span class="line"> * <span class="token keyword">@jls</span> 5.1.3 Narrowing Primitive Conversions</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">short</span> <span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the value of this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> as an</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the value of this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> as a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">long</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * after a widening primitive conversion.</span>
<span class="line"> * <span class="token keyword">@jls</span> 5.1.2 Widening Primitive Conversions</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Integer</span><span class="token punctuation">#</span><span class="token function">toUnsignedLong</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the value of this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> as a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">float</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * after a widening primitive conversion.</span>
<span class="line"> * <span class="token keyword">@jls</span> 5.1.2 Widening Primitive Conversions</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the value of this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> as a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">double</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * after a widening primitive conversion.</span>
<span class="line"> * <span class="token keyword">@jls</span> 5.1.2 Widening Primitive Conversions</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>关于 hash code，直接返回对象内维护的 <code>int</code> 数值：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a hash code for this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span>  a hash code value for this object, equal to the</span>
<span class="line"> *          primitive <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value represented by this</span>
<span class="line"> *          <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> object.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a hash code for a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value; compatible with</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">value</span> the value to hash</span>
<span class="line"> * <span class="token keyword">@since</span> 1.8</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> a hash code value for a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><code>equals()</code> 函数的实现，直接比较对象内维护的 <code>int</code> 数值 (前提是比较对象也要是一个 <code>Integer</code>)：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Compares this object to the specified object.  The result is</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the argument is not</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> and is an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> object that</span>
<span class="line"> * contains the same <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value as this object.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">obj</span>   the object to compare with.</span>
<span class="line"> * <span class="token keyword">@return</span>  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the objects are the same;</span>
<span class="line"> *          <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> otherwise.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>compare()</code> 函数的实现。通过返回负数、0、整数来决定两个数的大小：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Compares two <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> objects numerically.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>   <span class="token parameter">anotherInteger</span>   the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> to be compared.</span>
<span class="line"> * <span class="token keyword">@return</span>  the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> is</span>
<span class="line"> *          equal to the argument <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span>; a value less than</span>
<span class="line"> *          <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> is numerically less</span>
<span class="line"> *          than the argument <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span>; and a value greater</span>
<span class="line"> *          than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> is numerically</span>
<span class="line"> *           greater than the argument <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span> (signed</span>
<span class="line"> *           comparison).</span>
<span class="line"> * <span class="token keyword">@since</span>   1.2</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> anotherInteger<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> anotherInteger<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Compares two <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> values numerically.</span>
<span class="line"> * The value returned is identical to what would be returned by:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token code-section">*    <span class="token line"><span class="token code language-java"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"> *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>  <span class="token parameter">x</span> the first <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> to compare</span>
<span class="line"> * <span class="token keyword">@param</span>  <span class="token parameter">y</span> the second <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> to compare</span>
<span class="line"> * <span class="token keyword">@return</span> the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">x <span class="token operator">==</span> y</span></span><span class="token punctuation">}</span>;</span>
<span class="line"> *         a value less than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">x <span class="token operator">&lt;</span> y</span></span><span class="token punctuation">}</span>; and</span>
<span class="line"> *         a value greater than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">x <span class="token operator">&gt;</span> y</span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@since</span> 1.7</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Compares two <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> values numerically treating the values</span>
<span class="line"> * as unsigned.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span>  <span class="token parameter">x</span> the first <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> to compare</span>
<span class="line"> * <span class="token keyword">@param</span>  <span class="token parameter">y</span> the second <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> to compare</span>
<span class="line"> * <span class="token keyword">@return</span> the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">x <span class="token operator">==</span> y</span></span><span class="token punctuation">}</span>; a value less</span>
<span class="line"> *         than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">x <span class="token operator">&lt;</span> y</span></span><span class="token punctuation">}</span> as unsigned values; and</span>
<span class="line"> *         a value greater than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">x <span class="token operator">&gt;</span> y</span></span><span class="token punctuation">}</span> as</span>
<span class="line"> *         unsigned values</span>
<span class="line"> * <span class="token keyword">@since</span> 1.8</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareUnsigned</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>位操作。。。😥 要么暂时。。。</p><hr>`,48)]))}const i=s(t,[["render",c],["__file","Class - java.lang.Integer.html.vue"]]),u=JSON.parse('{"path":"/jdk-source-code-analysis/java.lang/Class%20-%20java.lang.Integer.html","title":"Class - java.lang.Integer","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]}],"git":{},"filePathRelative":"jdk-source-code-analysis/java.lang/Class - java.lang.Integer.md"}');export{i as comp,u as data};
