import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(c,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="interface-java-util-concurrent-executorservice" tabindex="-1"><a class="header-anchor" href="#interface-java-util-concurrent-executorservice"><span>Interface - java.util.concurrent.ExecutorService</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 02 / 15 22:34</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><p>该接口扩展了 <code>Executor</code>，除了 <code>execute()</code> 提供了任务执行的方式外，该接口提供了 <strong>终结管理</strong> 以及 <strong>追踪一个或多个异步任务的状态</strong> 的能力：</p><ul><li>使执行器能够被终结：停止接受新任务 / 将已有任务暂停并关闭</li><li>扩展 <code>execute()</code> 为 <code>submit()</code>，使任务能够返回一个 <code>Future</code> 对象，可用于中止任务或等待任务完成</li></ul><p>总体来说，该接口定义了 <strong>池化</strong> 所必须的管理函数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * An <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Executor</span></span><span class="token punctuation">}</span> that provides methods to manage termination and</span>
<span class="line"> * methods that can produce a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span></span><span class="token punctuation">}</span> for tracking progress of</span>
<span class="line"> * one or more asynchronous tasks.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>An <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ExecutorService</span></span></span><span class="token punctuation">}</span> can be shut down, which will cause</span>
<span class="line"> * it to reject new tasks.  Two different methods are provided for</span>
<span class="line"> * shutting down an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ExecutorService</span></span></span><span class="token punctuation">}</span>. The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">shutdown</span></span><span class="token punctuation">}</span></span>
<span class="line"> * method will allow previously submitted tasks to execute before</span>
<span class="line"> * terminating, while the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">shutdownNow</span></span><span class="token punctuation">}</span> method prevents waiting</span>
<span class="line"> * tasks from starting and attempts to stop currently executing tasks.</span>
<span class="line"> * Upon termination, an executor has no tasks actively executing, no</span>
<span class="line"> * tasks awaiting execution, and no new tasks can be submitted.  An</span>
<span class="line"> * unused <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ExecutorService</span></span></span><span class="token punctuation">}</span> should be shut down to allow</span>
<span class="line"> * reclamation of its resources.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Method <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">submit</span></span><span class="token punctuation">}</span> extends base method <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> * <span class="token reference"><span class="token class-name">Executor</span><span class="token punctuation">#</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> by creating and returning a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span></span><span class="token punctuation">}</span></span>
<span class="line"> * that can be used to cancel execution and/or wait for completion.</span>
<span class="line"> * Methods <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">invokeAny</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">invokeAll</span></span><span class="token punctuation">}</span> perform the most</span>
<span class="line"> * commonly useful forms of bulk execution, executing a collection of</span>
<span class="line"> * tasks and then waiting for at least one, or all, to</span>
<span class="line"> * complete. (Class <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ExecutorCompletionService</span></span><span class="token punctuation">}</span> can be used to</span>
<span class="line"> * write customized variants of these methods.)</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Executors</span></span><span class="token punctuation">}</span> class provides factory methods for the</span>
<span class="line"> * executor services provided in this package.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Usage Examples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * Here is a sketch of a network service in which threads in a thread</span>
<span class="line"> * pool service incoming requests. It uses the preconfigured <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> * <span class="token reference"><span class="token class-name">Executors</span><span class="token punctuation">#</span><span class="token field">newFixedThreadPool</span></span><span class="token punctuation">}</span> factory method:</span>
<span class="line"> *</span>
<span class="line"> *  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token keyword">class</span> <span class="token class-name">NetworkService</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerSocket</span> serverSocket<span class="token punctuation">;</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> pool<span class="token punctuation">;</span></span></span>
<span class="line"> *</span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">public</span> <span class="token class-name">NetworkService</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> poolSize<span class="token punctuation">)</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java">serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *     <span class="token code language-java">pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>poolSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> *</span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// run the service</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *         <span class="token code language-java">pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *       <span class="token code language-java">pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token code language-java"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token comment">// read and service request on socket</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * The following method shuts down an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ExecutorService</span></span></span><span class="token punctuation">}</span> in two phases,</span>
<span class="line"> * first by calling <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">shutdown</span></span><span class="token punctuation">}</span> to reject incoming tasks, and then</span>
<span class="line"> * calling <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">shutdownNow</span></span><span class="token punctuation">}</span>, if necessary, to cancel any lingering tasks:</span>
<span class="line"> *</span>
<span class="line"> *  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token keyword">void</span> <span class="token function">shutdownAndAwaitTermination</span><span class="token punctuation">(</span><span class="token class-name">ExecutorService</span> pool<span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java">pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Disable new tasks from being submitted</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token comment">// Wait a while for existing tasks to terminate</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *       <span class="token code language-java">pool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cancel currently executing tasks</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token comment">// Wait a while for tasks to respond to being cancelled</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="line"> *           <span class="token code language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pool did not terminate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token comment">// (Re-)Cancel if current thread also interrupted</span></span></span>
<span class="line"> *     <span class="token code language-java">pool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token comment">// Preserve interrupt status</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Memory consistency effects: Actions in a thread prior to the</span>
<span class="line"> * submission of a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Runnable</span></span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Callable</span></span></span><span class="token punctuation">}</span> task to an</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ExecutorService</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package-summary.html#MemoryVisibility<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>happen-before<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * any actions taken by that task, which in turn <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>happen-before<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> the</span>
<span class="line"> * result is retrieved via <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@since</span> 1.5</span>
<span class="line"> * <span class="token keyword">@author</span> Doug Lea</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shut-down" tabindex="-1"><a class="header-anchor" href="#shut-down"><span>Shut Down</span></a></h2><p><code>shutdown()</code> 使已经被提交的任务有序完成，但是不再接受任何新的任务。该函数不等待之前提交的任务执行完成。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Initiates an orderly shutdown in which previously submitted</span>
<span class="line"> * tasks are executed, but no new tasks will be accepted.</span>
<span class="line"> * Invocation has no additional effect if already shut down.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This method does not wait for previously submitted tasks to</span>
<span class="line"> * complete execution.  Use <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">awaitTermination</span></span> awaitTermination<span class="token punctuation">}</span></span>
<span class="line"> * to do that.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SecurityException</span></span> if a security manager exists and</span>
<span class="line"> *         shutting down this ExecutorService may manipulate</span>
<span class="line"> *         threads that the caller is not permitted to modify</span>
<span class="line"> *         because it does not hold <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> *         <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">RuntimePermission</span></span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token punctuation">(</span><span class="token string">&quot;modifyThread&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>,</span>
<span class="line"> *         or the security manager&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">checkAccess</span></span><span class="token punctuation">}</span> method</span>
<span class="line"> *         denies access.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>shutdownNow()</code> 试图停止所有正在执行的任务，停止处理正在等待的任务，并返回所有等待被执行的任务。该函数不等待之前提交的任务执行完成。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Attempts to stop all actively executing tasks, halts the</span>
<span class="line"> * processing of waiting tasks, and returns a list of the tasks</span>
<span class="line"> * that were awaiting execution.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This method does not wait for actively executing tasks to</span>
<span class="line"> * terminate.  Use <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">awaitTermination</span></span> awaitTermination<span class="token punctuation">}</span> to</span>
<span class="line"> * do that.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>There are no guarantees beyond best-effort attempts to stop</span>
<span class="line"> * processing actively executing tasks.  For example, typical</span>
<span class="line"> * implementations will cancel via <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token field">interrupt</span></span><span class="token punctuation">}</span>, so any</span>
<span class="line"> * task that fails to respond to interrupts may never terminate.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> list of tasks that never commenced execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SecurityException</span></span> if a security manager exists and</span>
<span class="line"> *         shutting down this ExecutorService may manipulate</span>
<span class="line"> *         threads that the caller is not permitted to modify</span>
<span class="line"> *         because it does not hold <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> *         <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">RuntimePermission</span></span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token punctuation">(</span><span class="token string">&quot;modifyThread&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>,</span>
<span class="line"> *         or the security manager&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">checkAccess</span></span><span class="token punctuation">}</span> method</span>
<span class="line"> *         denies access.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回执行器是否已被关闭。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this executor has been shut down.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this executor has been shut down</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回执行器中的所有任务是否已经停止。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if all tasks have completed following shut down.</span>
<span class="line"> * Note that <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">isTerminated</span></span><span class="token punctuation">}</span> is never <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> unless</span>
<span class="line"> * either <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">shutdown</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">shutdownNow</span></span><span class="token punctuation">}</span> was called first.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if all tasks have completed following shut down</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阻塞等待执行器中的所有任务执行完成，或超时 / 中断。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Blocks until all tasks have completed execution after a shutdown</span>
<span class="line"> * request, or the timeout occurs, or the current thread is</span>
<span class="line"> * interrupted, whichever happens first.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">timeout</span> the maximum time to wait</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the timeout argument</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if this executor terminated and</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> if the timeout elapsed before termination</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if interrupted while waiting</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="submit" tabindex="-1"><a class="header-anchor" href="#submit"><span>Submit</span></a></h2><p>提交一个指定类型返回值的任务。<code>Future</code> 可被视为是任务未来执行结果的 <strong>占位符</strong>，在任务成功完成后，将会返回任务的结果。该函数不会阻塞，如果想要阻塞获取结果，可以立刻调用返回的 <code>Future</code> 对象的 <code>get()</code> 函数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Submits a value-returning task for execution and returns a</span>
<span class="line"> * Future representing the pending results of the task. The</span>
<span class="line"> * Future&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">get</span></span><span class="token punctuation">}</span> method will return the task&#39;s result upon</span>
<span class="line"> * successful completion.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * If you would like to immediately block waiting</span>
<span class="line"> * for a task, you can use constructions of the form</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">result <span class="token operator">=</span> exec<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>aCallable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Note: The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Executors</span></span><span class="token punctuation">}</span> class includes a set of methods</span>
<span class="line"> * that can convert some other common closure-like objects,</span>
<span class="line"> * for example, <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">PrivilegedAction</span></span><span class="token punctuation">}</span> to</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Callable</span></span><span class="token punctuation">}</span> form so they can be submitted.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">task</span> the task to submit</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the task&#39;s result</span>
<span class="line"> * <span class="token keyword">@return</span> a Future representing pending completion of the task</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the task is null</span>
<span class="line"> */</span></span>
<span class="line"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Submits a Runnable task for execution and returns a Future</span>
<span class="line"> * representing that task. The Future&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">get</span></span><span class="token punctuation">}</span> method will</span>
<span class="line"> * return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> upon <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>successful<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> completion.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">task</span> the task to submit</span>
<span class="line"> * <span class="token keyword">@return</span> a Future representing pending completion of the task</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the task is null</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的函数与上述函数类似，但是多了一个 <code>T</code> 类型的参数。在未来任务完成时，将返回这个参数的值。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Submits a Runnable task for execution and returns a Future</span>
<span class="line"> * representing that task. The Future&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">get</span></span><span class="token punctuation">}</span> method will</span>
<span class="line"> * return the given result upon successful completion.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">task</span> the task to submit</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">result</span> the result to return</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the result</span>
<span class="line"> * <span class="token keyword">@return</span> a Future representing pending completion of the task</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the task is null</span>
<span class="line"> */</span></span>
<span class="line"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke"><span>Invoke</span></a></h2><p>执行给定的所有任务，在 <strong>所有任务完成后</strong>，返回一个列表的 <code>Future</code> 对象，其中持有每个任务的状态和结果。每个 <code>Future</code> 的 <code>isDone()</code> 都是 <code>true</code>。在任务执行期间对集合进行修改后，该函数的结果未知。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Executes the given tasks, returning a list of Futures holding</span>
<span class="line"> * their status and results when all complete.</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span><span class="token punctuation">#</span><span class="token field">isDone</span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> for each</span>
<span class="line"> * element of the returned list.</span>
<span class="line"> * Note that a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> task could have</span>
<span class="line"> * terminated either normally or by throwing an exception.</span>
<span class="line"> * The results of this method are undefined if the given</span>
<span class="line"> * collection is modified while this operation is in progress.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">tasks</span> the collection of tasks</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the values returned from the tasks</span>
<span class="line"> * <span class="token keyword">@return</span> a list of Futures representing the tasks, in the same</span>
<span class="line"> *         sequential order as produced by the iterator for the</span>
<span class="line"> *         given task list, each of which has completed</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if interrupted while waiting, in</span>
<span class="line"> *         which case unfinished tasks are cancelled</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if tasks or any of its elements are <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if any task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> */</span></span>
<span class="line"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数的超时版本。如果阻塞时间已过，则函数立刻返回。返回时，如果任务没有完成则将被取消。同样，每个 <code>Future</code> 的 <code>isDone()</code> 都将返回 <code>true</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Executes the given tasks, returning a list of Futures holding</span>
<span class="line"> * their status and results</span>
<span class="line"> * when all complete or the timeout expires, whichever happens first.</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Future</span><span class="token punctuation">#</span><span class="token field">isDone</span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> for each</span>
<span class="line"> * element of the returned list.</span>
<span class="line"> * Upon return, tasks that have not completed are cancelled.</span>
<span class="line"> * Note that a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> task could have</span>
<span class="line"> * terminated either normally or by throwing an exception.</span>
<span class="line"> * The results of this method are undefined if the given</span>
<span class="line"> * collection is modified while this operation is in progress.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">tasks</span> the collection of tasks</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">timeout</span> the maximum time to wait</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the timeout argument</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the values returned from the tasks</span>
<span class="line"> * <span class="token keyword">@return</span> a list of Futures representing the tasks, in the same</span>
<span class="line"> *         sequential order as produced by the iterator for the</span>
<span class="line"> *         given task list. If the operation did not time out,</span>
<span class="line"> *         each task will have completed. If it did time out, some</span>
<span class="line"> *         of these tasks will not have completed.</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if interrupted while waiting, in</span>
<span class="line"> *         which case unfinished tasks are cancelled</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if tasks, any of its elements, or</span>
<span class="line"> *         unit are <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if any task cannot be scheduled</span>
<span class="line"> *         for execution</span>
<span class="line"> */</span></span>
<span class="line"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行给定的所有任务，当其中任意一个成功完成时，返回结果。函数返回后，还没有完成的任务将会被取消。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Executes the given tasks, returning the result</span>
<span class="line"> * of one that has completed successfully (i.e., without throwing</span>
<span class="line"> * an exception), if any do. Upon normal or exceptional return,</span>
<span class="line"> * tasks that have not completed are cancelled.</span>
<span class="line"> * The results of this method are undefined if the given</span>
<span class="line"> * collection is modified while this operation is in progress.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">tasks</span> the collection of tasks</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the values returned from the tasks</span>
<span class="line"> * <span class="token keyword">@return</span> the result returned by one of the tasks</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if interrupted while waiting</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if tasks or any element task</span>
<span class="line"> *         subject to execution is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if tasks is empty</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ExecutionException</span></span> if no task successfully completes</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if tasks cannot be scheduled</span>
<span class="line"> *         for execution</span>
<span class="line"> */</span></span>
<span class="line"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述任务的超时版本。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Executes the given tasks, returning the result</span>
<span class="line"> * of one that has completed successfully (i.e., without throwing</span>
<span class="line"> * an exception), if any do before the given timeout elapses.</span>
<span class="line"> * Upon normal or exceptional return, tasks that have not</span>
<span class="line"> * completed are cancelled.</span>
<span class="line"> * The results of this method are undefined if the given</span>
<span class="line"> * collection is modified while this operation is in progress.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">tasks</span> the collection of tasks</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">timeout</span> the maximum time to wait</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the timeout argument</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the values returned from the tasks</span>
<span class="line"> * <span class="token keyword">@return</span> the result returned by one of the tasks</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span> if interrupted while waiting</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if tasks, or unit, or any element</span>
<span class="line"> *         task subject to execution is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">TimeoutException</span></span> if the given timeout elapses before</span>
<span class="line"> *         any task successfully completes</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ExecutionException</span></span> if no task successfully completes</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if tasks cannot be scheduled</span>
<span class="line"> *         for execution</span>
<span class="line"> */</span></span>
<span class="line"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,36)]))}const i=n(t,[["render",l],["__file","Interface - java.util.concurrent.ExecutorService.html.vue"]]),u=JSON.parse('{"path":"/jdk-source-code-analysis/java.util.concurrent/Interface%20-%20java.util.concurrent.ExecutorService.html","title":"Interface - java.util.concurrent.ExecutorService","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Shut Down","slug":"shut-down","link":"#shut-down","children":[]},{"level":2,"title":"Submit","slug":"submit","link":"#submit","children":[]},{"level":2,"title":"Invoke","slug":"invoke","link":"#invoke","children":[]}],"git":{},"filePathRelative":"jdk-source-code-analysis/java.util.concurrent/Interface - java.util.concurrent.ExecutorService.md"}');export{i as comp,u as data};
