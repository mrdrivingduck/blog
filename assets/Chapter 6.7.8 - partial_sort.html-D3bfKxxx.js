import{_ as n,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function c(l,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-6-7-8-partial-sort-partial-sort-copy" tabindex="-1"><a class="header-anchor" href="#chapter-6-7-8-partial-sort-partial-sort-copy"><span>Chapter 6.7.8 - partial_sort / partial_sort_copy</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 15 16:57</p><p>Nanjing, Jiangsu, China</p><hr><p>算法接收一个处于 <code>[first, last)</code> 之间的迭代器 <code>middle</code>，使得序列中 <code>middle - first</code> 个最小元素按递增顺序排序，放置于 <code>[first, middle)</code> 内；其余 <code>last - middle</code> 个元素放置在 <code>[middle, last)</code> 中，不保证任何顺序。顾名思义，只对序列的前 <code>middle - first</code> 个最小元素进行部分排序。</p><p>算法根据 <code>operator&lt;</code> 或用户自定义的二元仿函数来决定如何比较元素。</p><p>算法使用 <strong>堆排序</strong> 实现 (与我预想的部分快速排序的方式不同)。首先将 <code>[first, middle)</code> 区间内的所有元素通过 <code>make_heap()</code> 维护为一个大顶堆，然后将 <code>[middle, last)</code> 区间内的每个元素依次与堆顶比较，堆顶元素为目前 <code>[first, middle)</code> 区间内的最大值：如果比堆顶元素小，那么将堆顶元素与当前元素替换，然后重整堆。最终，堆内应当维护的是整个序列中最小的 <code>middle - first</code> 个数，对这个区间进行堆排序 <code>sort_heap()</code> 即可。</p><h2 id="partial-sort" tabindex="-1"><a class="header-anchor" href="#partial-sort"><span>partial_sort</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// partial_sort, partial_sort_copy, and auxiliary functions.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">partial_sort</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                         _RandomAccessIter __middle<span class="token punctuation">,</span></span>
<span class="line">                         _RandomAccessIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIter<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__partial_sort</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __middle<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__partial_sort</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span> _RandomAccessIter __middle<span class="token punctuation">,</span></span>
<span class="line">                    _RandomAccessIter __last<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">make_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __middle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对前 middle - first 个元素建堆</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>_RandomAccessIter __i <span class="token operator">=</span> __middle<span class="token punctuation">;</span> __i <span class="token operator">&lt;</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span>  <span class="token comment">// 遍历之后区间的每个元素</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__i <span class="token operator">&lt;</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span>                                       <span class="token comment">// 元素小于堆顶</span></span>
<span class="line">      <span class="token function">__pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __middle<span class="token punctuation">,</span> __i<span class="token punctuation">,</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// 堆顶元素从堆中移除，并换成当前遍历元素</span></span>
<span class="line">                 <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">sort_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __middle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对前 middle - first 个元素进行堆排序</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">partial_sort</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span></span>
<span class="line">                         _RandomAccessIter __middle<span class="token punctuation">,</span></span>
<span class="line">                         _RandomAccessIter __last<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="partial-sort-copy" tabindex="-1"><a class="header-anchor" href="#partial-sort-copy"><span>partial_sort_copy</span></a></h2><p>先将区间复制到另一块空间中，然后在复制后的空间中完成部分排序。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _RandomAccessIter</span>
<span class="line"><span class="token function">partial_sort_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                  _RandomAccessIter __result_first<span class="token punctuation">,</span></span>
<span class="line">                  _RandomAccessIter __result_last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_RandomAccessIter<span class="token punctuation">,</span> _Mutable_RandomAccessIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CONVERTIBLE</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__partial_sort_copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result_first<span class="token punctuation">,</span> __result_last<span class="token punctuation">,</span></span>
<span class="line">                             <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__result_first<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                             <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_RandomAccessIter <span class="token function">__partial_sort_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span></span>
<span class="line">                                      _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                                      _RandomAccessIter __result_first<span class="token punctuation">,</span></span>
<span class="line">                                      _RandomAccessIter __result_last<span class="token punctuation">,</span></span>
<span class="line">                                      _Distance<span class="token operator">*</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__result_first <span class="token operator">==</span> __result_last<span class="token punctuation">)</span> <span class="token keyword">return</span> __result_last<span class="token punctuation">;</span></span>
<span class="line">  _RandomAccessIter __result_real_last <span class="token operator">=</span> __result_first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last <span class="token operator">&amp;&amp;</span> __result_real_last <span class="token operator">!=</span> __result_last<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 复制所有元素到新空间中</span></span>
<span class="line">    <span class="token operator">*</span>__result_real_last <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__result_real_last<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">make_heap</span><span class="token punctuation">(</span>__result_first<span class="token punctuation">,</span> __result_real_last<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 对整个复制后的区间建堆？</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">&lt;</span> <span class="token operator">*</span>__result_first<span class="token punctuation">)</span>                <span class="token comment">// 当前遍历元素小于目前堆顶</span></span>
<span class="line">      <span class="token function">__adjust_heap</span><span class="token punctuation">(</span>__result_first<span class="token punctuation">,</span> <span class="token function">_Distance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 当前遍历元素赋值给堆顶，并调整堆序</span></span>
<span class="line">                    <span class="token function">_Distance</span><span class="token punctuation">(</span>__result_real_last <span class="token operator">-</span> __result_first<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 遍历下一个元素</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">sort_heap</span><span class="token punctuation">(</span>__result_first<span class="token punctuation">,</span> __result_real_last<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 对部分排序区间进行堆排序</span></span>
<span class="line">  <span class="token keyword">return</span> __result_real_last<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)]))}const i=n(e,[["render",c],["__file","Chapter 6.7.8 - partial_sort.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.7.8%20-%20partial_sort.html","title":"Chapter 6.7.8 - partial_sort / partial_sort_copy","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"partial_sort","slug":"partial-sort","link":"#partial-sort","children":[]},{"level":2,"title":"partial_sort_copy","slug":"partial-sort-copy","link":"#partial-sort-copy","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.7.8 - partial_sort.md"}');export{i as comp,u as data};
