import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-9-4-9-6-事件驱动模块与-epoll" tabindex="-1"><a class="header-anchor" href="#chapter-9-4-9-6-事件驱动模块与-epoll"><span>Chapter 9.4-9.6 - 事件驱动模块与 EPOLL</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 07 / 24 10:44</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_9-4-事件核心模块" tabindex="-1"><a class="header-anchor" href="#_9-4-事件核心模块"><span>9.4 事件核心模块</span></a></h2><p><code>ngx_events_module</code> 是一个 <strong>核心模块</strong>。其中，定义了新的 <strong>事件模块</strong>，以及所有事件模块都要实现的 <code>ngx_event_module_t</code> 通用接口。回顾核心模块的接口定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_module_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>            ctx_index<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>            index<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">char</span>                 <span class="token operator">*</span>name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>            spare0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>            spare1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>            version<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span>           <span class="token operator">*</span>signature<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span>                 <span class="token operator">*</span>ctx<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_command_t</span>        <span class="token operator">*</span>commands<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>            type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>           <span class="token punctuation">(</span><span class="token operator">*</span>init_master<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_log_t</span> <span class="token operator">*</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>           <span class="token punctuation">(</span><span class="token operator">*</span>init_module<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>           <span class="token punctuation">(</span><span class="token operator">*</span>init_process<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>           <span class="token punctuation">(</span><span class="token operator">*</span>init_thread<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span>                <span class="token punctuation">(</span><span class="token operator">*</span>exit_thread<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span>                <span class="token punctuation">(</span><span class="token operator">*</span>exit_process<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span>                <span class="token punctuation">(</span><span class="token operator">*</span>exit_master<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook3<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook4<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook5<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook6<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span>             spare_hook7<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了定义一个新的核心模块，要满足三个要素：</p><ul><li>模块类型 <code>type</code></li><li>模块感兴趣的配置项 <code>commands</code></li><li>实现核心模块的通用接口 <code>ngx_core_module_t</code> 于 <code>ctx</code> 指针中</li></ul><p>那么，<code>ngx_events_module</code> 核心模块感兴趣的配置项有哪些呢？如下所示，该模块只对 <code>events{...}</code> 配置项感兴趣。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_command_t</span> ngx_events_commandsp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        NGX_MAIN_CONF <span class="token operator">|</span> NGX_CONF_BLOCK <span class="token operator">|</span> NGX_CONF_NOARGS<span class="token punctuation">,</span></span>
<span class="line">        ngx_events_block<span class="token punctuation">,</span> <span class="token comment">// 解析配置项的回调</span></span>
<span class="line">        <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">NULL</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    ngx_null_command</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为核心模块，<code>ngx_events_module</code> 需要实现核心模块的通用接口。其中只是定义了模块名称，并没有实现 <code>create_conf()</code> 和 <code>init_conf()</code> - 因为这个模块不解析具体的配置项参数，由各个事件模块实现这两个函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_core_module_t</span> ngx_events_module_ctx <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token constant">NULL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，<code>ngx_events_module</code> 核心模块的定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_module_t</span> ngx_events_module <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    NGX_MODULE_V1<span class="token punctuation">,</span></span>
<span class="line">    <span class="token operator">&amp;</span>ngx_events_module_ctx<span class="token punctuation">,</span> <span class="token comment">// 核心模块通用接口</span></span>
<span class="line">    ngx_events_commands<span class="token punctuation">,</span> <span class="token comment">// 模块感兴趣的配置项</span></span>
<span class="line">    NGX_CORE_MODULE<span class="token punctuation">,</span> <span class="token comment">// 模块类型</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// init master</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// init module</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// init process</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// init thread</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// exit thread</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// exit process</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// exit master</span></span>
<span class="line">    NGX_MODULE_V1_PADDING</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4-1-管理所有事件模块的配置项" tabindex="-1"><a class="header-anchor" href="#_9-4-1-管理所有事件模块的配置项"><span>9.4.1 管理所有事件模块的配置项</span></a></h3><p>每个事件模块都必须实现 <code>ngx_event_module_t</code> 通用接口，其中的 <code>create_conf()</code> 函数允许每个事件模块自己分配内存建立自己的配置项结构体。但各个模块的配置项结构体的内存指针如何由 <code>ngx_events_module</code> 模块管理呢？每一个事件模块的配置结构体都会被存放到 <code>ngx_events_module</code> 模块的指针数组中。这个指针数组又会被存放到 <code>ngx_cycle_t</code> 核心结构体的的 <code>conf_ctx</code> 成员中：(四级指针哦 😪)</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>conf_ctx<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也就是说，在 <code>ngx_cycle_t</code> 核心结构体中，可以看到每一个核心模块下属的每一个扩展模块中的每一个配置项。每个事件模块通过如下的宏就可以从 <code>conf_ctx</code> 中获得当前模块建立的配置项结构体：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ngx_event_get_conf</span><span class="token expression"><span class="token punctuation">(</span>conf_ctx<span class="token punctuation">,</span> module<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">ngx_get_conf</span><span class="token punctuation">(</span>conf_ctx<span class="token punctuation">,</span> ngx_events_module<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>module<span class="token punctuation">.</span>ctx_index<span class="token punctuation">]</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ngx_get_conf</span><span class="token expression"><span class="token punctuation">(</span>conf_ctx<span class="token punctuation">,</span> module<span class="token punctuation">)</span> conf_ctx<span class="token punctuation">[</span>module<span class="token punctuation">.</span>index<span class="token punctuation">]</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4-2-管理事件模块" tabindex="-1"><a class="header-anchor" href="#_9-4-2-管理事件模块"><span>9.4.2 管理事件模块</span></a></h3><p>所有配置项的保存都在 <code>ngx_events_block()</code> 函数中进行。首先会初始化每个事件模块的 <code>ctx_index</code> 成员。这里注意每个模块的 <code>index</code> 指的是该模块在所有模块中的序号，而 <code>ctx_index</code> 是指该模块在同类型模块中的序号。</p><p>所有模块编号确定，个数也就确定了，那么分配配置项指针数组。然后对每一个事件模块，依次调用事件模块通用接口中的 <code>create_conf()</code> 函数，产生的结构体指针保存在上述指针数组中。配置项解析完毕后，依次调用每一个事件模块的 <code>init_conf()</code> 函数。</p><hr><h2 id="_9-5-核心事件模块" tabindex="-1"><a class="header-anchor" href="#_9-5-核心事件模块"><span>9.5 核心事件模块</span></a></h2><blockquote><p><code>ngx_events_module</code> - 事件核心模块 - 是一个核心模块，但定义了事件模块的信息</p><p><code>ngx_event_core_module</code> - 核心事件模块 - 是一个事件模块，但是是最核心的事件模块</p></blockquote><p><code>ngx_event_core_module</code> 是所有事件模块中排第一位的模块。它负责创建连接池，并决定使用哪种事件驱动机制，并初始化相应的事件驱动机制模块。该模块对以下配置项感兴趣：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_command_t</span>  ngx_event_core_commands<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 连接池大小 (每个 worker 进程的最大连接数)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;worker_connections&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_TAKE1<span class="token punctuation">,</span></span>
<span class="line">      ngx_event_connections<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 选择哪一个事件驱动模块</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;use&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_TAKE1<span class="token punctuation">,</span></span>
<span class="line">      ngx_event_use<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 尽可能多地接收连接</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;multi_accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_FLAG<span class="token punctuation">,</span></span>
<span class="line">      ngx_conf_set_flag_slot<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token class-name">ngx_event_conf_t</span><span class="token punctuation">,</span> multi_accept<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 是否启用负载均衡锁</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;accept_mutex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_FLAG<span class="token punctuation">,</span></span>
<span class="line">      ngx_conf_set_flag_slot<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token class-name">ngx_event_conf_t</span><span class="token punctuation">,</span> accept_mutex<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 启用负载均衡锁后，在试图处理新连接之前，延迟的毫秒数</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;accept_mutex_delay&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_TAKE1<span class="token punctuation">,</span></span>
<span class="line">      ngx_conf_set_msec_slot<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token class-name">ngx_event_conf_t</span><span class="token punctuation">,</span> accept_mutex_delay<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 对指定 IP 的 TCP 连接打印 debug 级别的调试日志</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;debug_connection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_TAKE1<span class="token punctuation">,</span></span>
<span class="line">      ngx_event_debug_connection<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">      ngx_null_command</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该模块中，定义了存储上述所有配置的结构体 (两者对应)：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>    connections<span class="token punctuation">;</span> <span class="token comment">// 连接池大小</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>    use<span class="token punctuation">;</span> <span class="token comment">// 选用的事件驱动模块在所有事件模块中的序号</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>    multi_accept<span class="token punctuation">;</span> <span class="token comment">// 标志位，是否尽可能多地建立连接</span></span>
<span class="line">    <span class="token class-name">ngx_flag_t</span>    accept_mutex<span class="token punctuation">;</span> <span class="token comment">// 标志位，是否启动负载均衡锁</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_msec_t</span>    accept_mutex_delay<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    u_char       <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// 使用事件驱动模块的名称</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_DEBUG<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>   debug_connection<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_event_conf_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为一个 <strong>事件模块</strong>，<code>ngx_event_core_module</code> 也要实现事件模块的通用接口 <code>ngx_event_module_t</code>。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_str_t</span>  event_core_name <span class="token operator">=</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;event_core&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_event_module_t</span>  ngx_event_core_module_ctx <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">&amp;</span>event_core_name<span class="token punctuation">,</span> <span class="token comment">// &quot;event_core&quot;</span></span>
<span class="line">    ngx_event_core_create_conf<span class="token punctuation">,</span>            <span class="token comment">/* create configuration */</span></span>
<span class="line">    ngx_event_core_init_conf<span class="token punctuation">,</span>              <span class="token comment">/* init configuration */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 并不实现 ngx_event_actions_t，因为这个模块不真正负责网络事件驱动</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后将这个事件模块接口上下文并入整体模块信息中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_module_t</span>  ngx_event_core_module <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    NGX_MODULE_V1<span class="token punctuation">,</span></span>
<span class="line">    <span class="token operator">&amp;</span>ngx_event_core_module_ctx<span class="token punctuation">,</span>            <span class="token comment">/* module context */</span> <span class="token comment">// 事件模块通用接口</span></span>
<span class="line">    ngx_event_core_commands<span class="token punctuation">,</span>               <span class="token comment">/* module directives */</span> <span class="token comment">// 该模块感兴趣的配置项</span></span>
<span class="line">    NGX_EVENT_MODULE<span class="token punctuation">,</span>                      <span class="token comment">/* module type */</span> <span class="token comment">// 模块类型为事件模块</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                  <span class="token comment">/* init master */</span></span>
<span class="line">    ngx_event_module_init<span class="token punctuation">,</span>                 <span class="token comment">/* init module */</span></span>
<span class="line">    ngx_event_process_init<span class="token punctuation">,</span>                <span class="token comment">/* init process */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                  <span class="token comment">/* init thread */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                  <span class="token comment">/* exit thread */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                  <span class="token comment">/* exit process */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                  <span class="token comment">/* exit master */</span></span>
<span class="line">    NGX_MODULE_V1_PADDING</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Nginx 启动过程中，还没有 <code>fork()</code> 出 worker 子进程时，调用 <code>ngx_event_module_init()</code> 进行一些初始化工作；在 worker 子进程生成后，每个子进程都会调用 <code>ngx_event_process_init()</code> 函数后进入工作循环。<code>ngx_event_process_init()</code> 函数干了很多事情：</p><ol><li>确认 Nginx 使用了 master 模式，且 worker 进程数量大于 1，打开负载均衡锁</li><li>如果不满足条件，则关闭负载均衡锁 (标志位)</li><li>初始化红黑树实现的定时器</li><li>在指定使用的事件驱动模块中，调用事件模块通用接口中的 <code>init()</code> 进行这个模块的初始化</li><li>设置更新系统事件的回调</li><li>如果使用 EPOLL，则预分配句柄</li><li>预分配 <code>ngx_conntection_t</code> 数组作为连接池</li><li>预分配 <code>ngx_event_t</code> 数组作为读事件池</li><li>预分配 <code>ngx_event_t</code> 数组作为写事件池</li><li>将读写事件设置到对应的连接池中</li><li>设置 <code>ngx_cycle_t</code> 中的空闲连接链表</li><li>为所有 <code>ngx_listening_t</code> 对象中的 <code>connection</code> 成员分配连接，设置读事件处理函数为 <code>ngx_event_accept()</code></li><li>将所有 <code>ngx_listening_t</code> 对象的读事件添加到事件驱动模块中 (比如加入 EPOLL 文件系统)</li></ol><hr><h2 id="_9-6-epoll-事件驱动模块" tabindex="-1"><a class="header-anchor" href="#_9-6-epoll-事件驱动模块"><span>9.6 EPOLL 事件驱动模块</span></a></h2><h3 id="_9-6-1-epoll-的原理" tabindex="-1"><a class="header-anchor" href="#_9-6-1-epoll-的原理"><span>9.6.1 EPOLL 的原理</span></a></h3><p>EPOLL 适用的典型场景：大量用户 (1M) 与一个进程保持着 TCP 连接，每个时刻只有几百个 TCP 连接是活跃的 (可以不阻塞读取数据)。那么进程要将这 1M 个连接告诉 OS，由 OS 负责查询哪些连接是活跃的。在 Linux kernel 2.4 之前，SELECT 和 POLL 两个事件驱动方式都是这么做的。</p><p>由于这 1M 个连接大部分都是不活跃的，因此每次将 1M 个连接通过系统调用传递给 OS 非常低效！EPOLL 在内核中申请了一个简易的文件系统。每次只需创建一个 EPOLL 对象，初始化一个文件系统，然后向文件系统中添加或删除连接即可。EPOLL 的效率非常高，因为：</p><ul><li>调用 EPOLL 时不再需要传递 1M 个连接</li><li>内核也不需要全量遍历所有连接来找出其中的活跃连接</li></ul><p>进程调用 <code>epoll_create()</code> 函数时，内核会创建一个 <code>eventpoll</code> 结构体。其中两个数据结构非常重要：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">eventpoll</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> rbr<span class="token punctuation">;</span> <span class="token comment">// 红黑树根结点，红黑树中保存了所有监控的事件</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> rdllist<span class="token punctuation">;</span> <span class="token comment">// 将要返回给用户的 (满足条件的) 事件</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体开辟于内核中，当用户使用 <code>epoll_ctl()</code> 函数向该结构体中添加事件时，都会被加入到结构体的红黑树中。因此增删改的效率很高，重复添加的事件也能被快速识别。所有添加的事件都会与 <strong>设备驱动程序</strong> (如网卡驱动程序) 建立回调关系，在相应事件发生时触发回调。在回调中，会把相应事件放到 <code>rdllist</code> 链表中。在用户调用 <code>epoll_wait()</code> 查询事件时，只需要检查 <code>rdllist</code> 链表上是否存在事件，并将链表上的事件复制到用户态内存中。EPOLL 可以轻易处理百万级别的并发连接。</p><h3 id="_9-6-3-ngx-epoll-module-模块的实现" tabindex="-1"><a class="header-anchor" href="#_9-6-3-ngx-epoll-module-模块的实现"><span>9.6.3 <code>ngx_epoll_module</code> 模块的实现</span></a></h3><p>EPOLL 模块感兴趣的配置项：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_command_t</span>  ngx_epoll_commands<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// epoll_wait() 时最多可以返回的事件数</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_TAKE1<span class="token punctuation">,</span></span>
<span class="line">      ngx_conf_set_num_slot<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token class-name">ngx_epoll_conf_t</span><span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;worker_aio_requests&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 初始化分配的异步 I/O 事件个数</span></span>
<span class="line">      NGX_EVENT_CONF<span class="token operator">|</span>NGX_CONF_TAKE1<span class="token punctuation">,</span></span>
<span class="line">      ngx_conf_set_num_slot<span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token class-name">ngx_epoll_conf_t</span><span class="token punctuation">,</span> aio_requests<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">      ngx_null_command</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模块中对应的存储配置项的结构体：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>  events<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>  aio_requests<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_epoll_conf_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为一个事件模块，这个模块自然需要实现事件模块的通用接口：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_str_t</span>      epoll_name <span class="token operator">=</span> <span class="token function">ngx_string</span><span class="token punctuation">(</span><span class="token string">&quot;epoll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_event_module_t</span>  ngx_epoll_module_ctx <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">&amp;</span>epoll_name<span class="token punctuation">,</span></span>
<span class="line">    ngx_epoll_create_conf<span class="token punctuation">,</span>               <span class="token comment">/* create configuration */</span></span>
<span class="line">    ngx_epoll_init_conf<span class="token punctuation">,</span>                 <span class="token comment">/* init configuration */</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        ngx_epoll_add_event<span class="token punctuation">,</span>             <span class="token comment">/* add an event */</span></span>
<span class="line">        ngx_epoll_del_event<span class="token punctuation">,</span>             <span class="token comment">/* delete an event */</span></span>
<span class="line">        ngx_epoll_add_event<span class="token punctuation">,</span>             <span class="token comment">/* enable an event */</span></span>
<span class="line">        ngx_epoll_del_event<span class="token punctuation">,</span>             <span class="token comment">/* disable an event */</span></span>
<span class="line">        ngx_epoll_add_connection<span class="token punctuation">,</span>        <span class="token comment">/* add an connection */</span></span>
<span class="line">        ngx_epoll_del_connection<span class="token punctuation">,</span>        <span class="token comment">/* delete an connection */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_EVENTFD<span class="token punctuation">)</span></span></span></span>
<span class="line">        ngx_epoll_notify<span class="token punctuation">,</span>                <span class="token comment">/* trigger a notify */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">        <span class="token constant">NULL</span><span class="token punctuation">,</span>                            <span class="token comment">/* trigger a notify */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">        ngx_epoll_process_events<span class="token punctuation">,</span>        <span class="token comment">/* process the events */</span></span>
<span class="line">        ngx_epoll_init<span class="token punctuation">,</span>                  <span class="token comment">/* init the events */</span></span>
<span class="line">        ngx_epoll_done<span class="token punctuation">,</span>                  <span class="token comment">/* done the events */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>ngx_epoll_create_conf()</code> 和 <code>ngx_epoll_init_conf()</code> 仅为了解析配置项。<code>ngx_epoll_init()</code> 函数主要会做两件事：</p><ol><li>调用 <code>epoll_create()</code> 创建在内核中创建 EPOLL 结构体</li><li>创建 <code>event_list</code> 数组，用于 <code>epoll_wait()</code> 时存放就绪的事件</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_epoll_init</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">,</span> <span class="token class-name">ngx_msec_t</span> timer<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_epoll_conf_t</span>  <span class="token operator">*</span>epcf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 取得已经解析完毕的配置项</span></span>
<span class="line">    epcf <span class="token operator">=</span> <span class="token function">ngx_event_get_conf</span><span class="token punctuation">(</span>cycle<span class="token operator">-&gt;</span>conf_ctx<span class="token punctuation">,</span> ngx_epoll_module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ep <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调用 epoll_create()</span></span>
<span class="line">        ep <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span>cycle<span class="token operator">-&gt;</span>connection_n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ep <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;epoll_create() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_EVENTFD<span class="token punctuation">)</span></span></span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_epoll_notify_init</span><span class="token punctuation">(</span>cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            ngx_epoll_module_ctx<span class="token punctuation">.</span>actions<span class="token punctuation">.</span>notify <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_FILE_AIO<span class="token punctuation">)</span></span></span></span>
<span class="line">        <span class="token function">ngx_epoll_aio_init</span><span class="token punctuation">(</span>cycle<span class="token punctuation">,</span> epcf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_EPOLLRDHUP<span class="token punctuation">)</span></span></span></span>
<span class="line">        <span class="token function">ngx_epoll_test_rdhup</span><span class="token punctuation">(</span>cycle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nevents <span class="token operator">&lt;</span> epcf<span class="token operator">-&gt;</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>event_list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_free</span><span class="token punctuation">(</span>event_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 根据配置项中的最大返回事件数，分配 event_list 数组</span></span>
<span class="line">        event_list <span class="token operator">=</span> <span class="token function">ngx_alloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span><span class="token punctuation">)</span> <span class="token operator">*</span> epcf<span class="token operator">-&gt;</span>events<span class="token punctuation">,</span></span>
<span class="line">                               cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>event_list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    nevents <span class="token operator">=</span> epcf<span class="token operator">-&gt;</span>events<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ngx_io <span class="token operator">=</span> ngx_os_io<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ngx_event_actions <span class="token operator">=</span> ngx_epoll_module_ctx<span class="token punctuation">.</span>actions<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_CLEAR_EVENT<span class="token punctuation">)</span></span></span></span>
<span class="line">    ngx_event_flags <span class="token operator">=</span> NGX_USE_CLEAR_EVENT</span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    ngx_event_flags <span class="token operator">=</span> NGX_USE_LEVEL_EVENT</span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">                      <span class="token operator">|</span>NGX_USE_GREEDY_EVENT</span>
<span class="line">                      <span class="token operator">|</span>NGX_USE_EPOLL_EVENT<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从通用接口的角度来看，EPOLL 不存在 enable 一个事件或 disable 一个事件。因此 enable 和 add 接口都是由 <code>ngx_epoll_add_event()</code> 实现的，disable 和 del 接口都是由 <code>ngx_epoll_del_event()</code> 实现的。这两个函数分别用于向内核中注册或解除注册事件。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_epoll_add_event</span><span class="token punctuation">(</span><span class="token class-name">ngx_event_t</span> <span class="token operator">*</span>ev<span class="token punctuation">,</span> <span class="token class-name">ngx_int_t</span> event<span class="token punctuation">,</span> <span class="token class-name">ngx_uint_t</span> flags<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span>                  op<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uint32_t</span>             events<span class="token punctuation">,</span> prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_event_t</span>         <span class="token operator">*</span>e<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>    <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span>   ee<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    c <span class="token operator">=</span> ev<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    events <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> event<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> NGX_READ_EVENT<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e <span class="token operator">=</span> c<span class="token operator">-&gt;</span>write<span class="token punctuation">;</span></span>
<span class="line">        prev <span class="token operator">=</span> EPOLLOUT<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_READ_EVENT <span class="token operator">!=</span> EPOLLIN<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">)</span></span></span></span>
<span class="line">        events <span class="token operator">=</span> EPOLLIN<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span> <span class="token comment">// 读事件的触发标志</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        e <span class="token operator">=</span> c<span class="token operator">-&gt;</span>read<span class="token punctuation">;</span></span>
<span class="line">        prev <span class="token operator">=</span> EPOLLIN<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_WRITE_EVENT <span class="token operator">!=</span> EPOLLOUT<span class="token punctuation">)</span></span></span></span>
<span class="line">        events <span class="token operator">=</span> EPOLLOUT<span class="token punctuation">;</span> <span class="token comment">// 写事件的触发标志</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 确定到底是添加事件还是修改事件</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        op <span class="token operator">=</span> EPOLL_CTL_MOD<span class="token punctuation">;</span></span>
<span class="line">        events <span class="token operator">|=</span> prev<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        op <span class="token operator">=</span> EPOLL_CTL_ADD<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_EPOLLEXCLUSIVE <span class="token operator">&amp;&amp;</span> NGX_HAVE_EPOLLRDHUP<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NGX_EXCLUSIVE_EVENT<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        events <span class="token operator">&amp;=</span> <span class="token operator">~</span>EPOLLRDHUP<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    ee<span class="token punctuation">.</span>events <span class="token operator">=</span> events <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> flags<span class="token punctuation">;</span></span>
<span class="line">    ee<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> c <span class="token operator">|</span> ev<span class="token operator">-&gt;</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug3</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;epoll add event: fd:%d op:%d ev:%08XD&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                   c<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> op<span class="token punctuation">,</span> ee<span class="token punctuation">.</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调用 epoll_ctl 向内核中添加事件或修改事件</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> op<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ee<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;epoll_ctl(%d, %d) failed&quot;</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 当前事件活跃</span></span>
<span class="line">    ev<span class="token operator">-&gt;</span>active <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span></span>
<span class="line">    ev<span class="token operator">-&gt;</span>oneshot <span class="token operator">=</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NGX_ONESHOT_EVENT<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，<code>ngx_epoll_add_connection()</code> 和 <code>ngx_epoll_del_connection()</code> 也与上述函数类似。上述函数只是单独添加某个连接的读或写事件，而 <code>ngx_epoll_add_connection()</code> 是添加整个连接 (即同时添加读和写事件)，具体实现方式类似。</p><p><code>ngx_epoll_process_events()</code> 函数实现了收集、分发事件的接口：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_epoll_process_events</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">,</span> <span class="token class-name">ngx_msec_t</span> timer<span class="token punctuation">,</span> <span class="token class-name">ngx_uint_t</span> flags<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span>                events<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uint32_t</span>           revents<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>          instance<span class="token punctuation">,</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>         level<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_err_t</span>          err<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_event_t</span>       <span class="token operator">*</span>rev<span class="token punctuation">,</span> <span class="token operator">*</span>wev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_queue_t</span>       <span class="token operator">*</span>queue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>  <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* NGX_TIMER_INFINITE == INFTIM */</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;epoll timer: %M&quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调用 epoll_wait() 从内核中收集就绪事件</span></span>
<span class="line">    events <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> event_list<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> nevents<span class="token punctuation">,</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    err <span class="token operator">=</span> <span class="token punctuation">(</span>events <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> ngx_errno <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 更新时间</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NGX_UPDATE_TIME <span class="token operator">||</span> ngx_event_timer_alarm<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_time_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> NGX_EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>ngx_event_timer_alarm<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                ngx_event_timer_alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            level <span class="token operator">=</span> NGX_LOG_INFO<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            level <span class="token operator">=</span> NGX_LOG_ALERT<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token string">&quot;epoll_wait() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 没有就绪事件</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">!=</span> NGX_TIMER_INFINITE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;epoll_wait() returned no events without timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 开始遍历内核返回的所有事件</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> events<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        c <span class="token operator">=</span> event_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> c <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_connection_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> c <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 读事件</span></span>
<span class="line">        rev <span class="token operator">=</span> c<span class="token operator">-&gt;</span>read<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 读事件是否过期</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> rev<span class="token operator">-&gt;</span>instance <span class="token operator">!=</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">/*</span>
<span class="line">             * the stale event from a file descriptor</span>
<span class="line">             * that was just closed in this iteration</span>
<span class="line">             */</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                           <span class="token string">&quot;epoll: stale event %p&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获得事件类型</span></span>
<span class="line">        revents <span class="token operator">=</span> event_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_log_debug3</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                       <span class="token string">&quot;epoll: fd:%d ev:%04XD d:%p&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                       c<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> revents<span class="token punctuation">,</span> event_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>revents <span class="token operator">&amp;</span> <span class="token punctuation">(</span>EPOLLERR<span class="token operator">|</span>EPOLLHUP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                           <span class="token string">&quot;epoll_wait() error on fd:%d ev:%04XD&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                           c<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> revents<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">/*</span>
<span class="line">             * if the error events were returned, add EPOLLIN and EPOLLOUT</span>
<span class="line">             * to handle the events at least in one active handler</span>
<span class="line">             */</span></span>
<span class="line"></span>
<span class="line">            revents <span class="token operator">|=</span> EPOLLIN<span class="token operator">|</span>EPOLLOUT<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>revents <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>EPOLLIN<span class="token operator">|</span>EPOLLOUT<span class="token operator">|</span>EPOLLERR<span class="token operator">|</span>EPOLLHUP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;strange epoll_wait() events fd:%d ev:%04XD&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                          c<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> revents<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 事件是读事件，而且活跃</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>revents <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rev<span class="token operator">-&gt;</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_EPOLLRDHUP<span class="token punctuation">)</span></span></span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>revents <span class="token operator">&amp;</span> EPOLLRDHUP<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                rev<span class="token operator">-&gt;</span>pending_eof <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">            rev<span class="token operator">-&gt;</span>ready <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            rev<span class="token operator">-&gt;</span>available <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NGX_POST_EVENTS<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 延后处理事件</span></span>
<span class="line">                queue <span class="token operator">=</span> rev<span class="token operator">-&gt;</span>accept <span class="token operator">?</span> <span class="token operator">&amp;</span>ngx_posted_accept_events</span>
<span class="line">                                    <span class="token operator">:</span> <span class="token operator">&amp;</span>ngx_posted_events<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">ngx_post_event</span><span class="token punctuation">(</span>rev<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 立刻调用读事件的回调函数处理事件</span></span>
<span class="line">                rev<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 写事件</span></span>
<span class="line">        wev <span class="token operator">=</span> c<span class="token operator">-&gt;</span>write<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>revents <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> wev<span class="token operator">-&gt;</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 写事件过期</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> wev<span class="token operator">-&gt;</span>instance <span class="token operator">!=</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">/*</span>
<span class="line">                 * the stale event from a file descriptor</span>
<span class="line">                 * that was just closed in this iteration</span>
<span class="line">                 */</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                               <span class="token string">&quot;epoll: stale event %p&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            wev<span class="token operator">-&gt;</span>ready <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_THREADS<span class="token punctuation">)</span></span></span></span>
<span class="line">            wev<span class="token operator">-&gt;</span>complete <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NGX_POST_EVENTS<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 延后处理写事件</span></span>
<span class="line">                <span class="token function">ngx_post_event</span><span class="token punctuation">(</span>wev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ngx_posted_events<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 调用写事件的回调函数处理事件</span></span>
<span class="line">                wev<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>wev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，上述函数向内核收集了当前已就绪的所有事件，对于不需要延后处理的事件，立刻调用其回调函数。这里相当于实现了 <strong>事件分发</strong> 的工作。因此每一个回调函数不能导致进程休眠或占用太多事件，否则将不能及时处理其它事件。</p><p>什么是过期事件？比如在处理第一个事件时，由于做了一些操作导致第三个事件无效了。为了处理这个问题，需要通过 <code>instance</code> 标志位来标记是否过期。当连接每次从连接池中取出时，<code>instance</code> 标志位将会被取反。</p><p><code>ngx_epoll_done()</code> 函数在 Nginx 退出服务时会被调用。主要工作：</p><ol><li>关闭 EPOLL 描述符 (回收内核中的 EPOLL 内存)</li><li>释放 <code>event_list</code> 数组</li></ol><p>以上，是 <code>ngx_epoll_module</code> 模块的事件模块上下文中的所有的函数实现。由此，整个模块的定义就显而易见了：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_module_t</span>  ngx_epoll_module <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    NGX_MODULE_V1<span class="token punctuation">,</span></span>
<span class="line">    <span class="token operator">&amp;</span>ngx_epoll_module_ctx<span class="token punctuation">,</span>               <span class="token comment">/* module context */</span></span>
<span class="line">    ngx_epoll_commands<span class="token punctuation">,</span>                  <span class="token comment">/* module directives */</span></span>
<span class="line">    NGX_EVENT_MODULE<span class="token punctuation">,</span>                    <span class="token comment">/* module type */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                <span class="token comment">/* init master */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                <span class="token comment">/* init module */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                <span class="token comment">/* init process */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                <span class="token comment">/* init thread */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                <span class="token comment">/* exit thread */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                <span class="token comment">/* exit process */</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span>                                <span class="token comment">/* exit master */</span></span>
<span class="line">    NGX_MODULE_V1_PADDING</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67)]))}const o=s(t,[["render",l],["__file","Chapter 9.4-9.6 - 事件驱动模块与 EPOLL.html.vue"]]),u=JSON.parse('{"path":"/understanding-nginx-notes/Part%203%20-%20%E6%B7%B1%E5%85%A5%20Nginx/Chapter%209.4-9.6%20-%20%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97%E4%B8%8E%20EPOLL.html","title":"Chapter 9.4-9.6 - 事件驱动模块与 EPOLL","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"9.4 事件核心模块","slug":"_9-4-事件核心模块","link":"#_9-4-事件核心模块","children":[{"level":3,"title":"9.4.1 管理所有事件模块的配置项","slug":"_9-4-1-管理所有事件模块的配置项","link":"#_9-4-1-管理所有事件模块的配置项","children":[]},{"level":3,"title":"9.4.2 管理事件模块","slug":"_9-4-2-管理事件模块","link":"#_9-4-2-管理事件模块","children":[]}]},{"level":2,"title":"9.5 核心事件模块","slug":"_9-5-核心事件模块","link":"#_9-5-核心事件模块","children":[]},{"level":2,"title":"9.6 EPOLL 事件驱动模块","slug":"_9-6-epoll-事件驱动模块","link":"#_9-6-epoll-事件驱动模块","children":[{"level":3,"title":"9.6.1 EPOLL 的原理","slug":"_9-6-1-epoll-的原理","link":"#_9-6-1-epoll-的原理","children":[]},{"level":3,"title":"9.6.3 ngx_epoll_module 模块的实现","slug":"_9-6-3-ngx-epoll-module-模块的实现","link":"#_9-6-3-ngx-epoll-module-模块的实现","children":[]}]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 3 - 深入 Nginx/Chapter 9.4-9.6 - 事件驱动模块与 EPOLL.md"}');export{o as comp,u as data};
