import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-3-bitmap-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-3-bitmap-c-程序"><span>Chapter 12.3 - bitmap.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 03 14:46</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-3-bitmap-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-3-bitmap-c-程序"><span>12.3 bitmap.c 程序</span></a></h2><p>根据文件系统中 <strong>逻辑块</strong> 和 <strong>inode</strong> 的使用情况</p><p>对逻辑块和 inode 的 bitmap 进行 bit 位的占用 / 释放操作</p><ul><li><code>free_block()</code>：释放指定设备 dev 上的逻辑块 block <ul><li>在高速缓冲中查找，若此块已在高速缓冲中，则释放</li><li>计算逻辑块号，在逻辑块 bitmap 中将对应的 bit 位复位</li><li>在包含逻辑块 bitmap 的缓冲区中，设置该缓冲块的已修改标志</li></ul></li><li><code>new_block()</code>：向设备 dev 申请一个逻辑块，返回逻辑块号 <ul><li>对 dev 的逻辑块 bitmap 进行搜索，寻找首个为 0 的 bit 位</li><li>置 1 占用该逻辑块，将包含该 bit 位的逻辑块 bitmap 所在缓冲块的已修改标志置位</li><li>在高速缓冲区中申请相应的缓冲块，将该缓冲块清零</li><li>设置缓冲块的已更新和已修改标志，释放该缓冲块</li></ul></li><li><code>free_inode()</code>：释放指定的 inode，复位 inode bitmap 的对应 bit 位</li><li><code>new_inode()</code>：为设备 dev 建立一个新的 inode <ul><li>从内存 inode 表中获取一个空闲表项</li><li>从 inode bitmap 中找到一个空闲的 inode</li></ul></li></ul><h3 id="_12-3-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-3-2-代码注释"><span>12.3.2 代码注释</span></a></h3><h4 id="clear-block-addr-将指定地址处-1024b-的内存清零" tabindex="-1"><a class="header-anchor" href="#clear-block-addr-将指定地址处-1024b-的内存清零"><span>clear_block(addr) - 将指定地址处 1024B 的内存清零</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clear_block</span><span class="token expression"><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;cld\\n\\t&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">        <span class="token string">&quot;rep\\n\\t&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">        <span class="token string">&quot;stosl&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">        <span class="token expression"><span class="token operator">::</span></span><span class="token string">&quot;a&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;c&quot;</span><span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;D&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span></span><span class="token string">&quot;cx&quot;</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token string">&quot;di&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set-bit-nr-addr-把指定地址开始的第-nr-个-bit-置位" tabindex="-1"><a class="header-anchor" href="#set-bit-nr-addr-把指定地址开始的第-nr-个-bit-置位"><span>set_bit(nr, addr) - 把指定地址开始的第 nr 个 bit 置位</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">set_bit</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">,</span>addr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token keyword">register</span> <span class="token keyword">int</span> res <span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;ax&quot;</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression">__asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span><span class="token string">&quot;btsl %2,%3\\n\\tsetb %%al&quot;</span><span class="token expression"><span class="token operator">:</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token string">&quot;=a&quot;</span><span class="token expression"><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">:</span></span><span class="token string">&quot;&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;r&quot;</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;m&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression">res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="clear-bit-nr-addr-复位指定地址开始的第-nr-个-bit" tabindex="-1"><a class="header-anchor" href="#clear-bit-nr-addr-复位指定地址开始的第-nr-个-bit"><span>clear_bit(nr, addr) - 复位指定地址开始的第 nr 个 bit</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clear_bit</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">,</span>addr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token keyword">register</span> <span class="token keyword">int</span> res <span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;ax&quot;</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression">__asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span><span class="token string">&quot;btrl %2,%3\\n\\tsetnb %%al&quot;</span><span class="token expression"><span class="token operator">:</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token string">&quot;=a&quot;</span><span class="token expression"><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">:</span></span><span class="token string">&quot;&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;r&quot;</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">&quot;m&quot;</span><span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression">res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="find-first-zero-addr-从-addr-开始寻找第-1-个-0-值-bit-位" tabindex="-1"><a class="header-anchor" href="#find-first-zero-addr-从-addr-开始寻找第-1-个-0-值-bit-位"><span>find_first_zero(addr) - 从 addr 开始寻找第 1 个 0 值 bit 位</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">find_first_zero</span><span class="token expression"><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token keyword">int</span> __res<span class="token punctuation">;</span></span></span></span>
<span class="line"><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;cld\\n&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;l:\\tlodsl\\n\\t&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;notl %%eax\\n\\t&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;bsfl %%eax,%%edx\\n\\t&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;je 2f\\n\\t&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;addl %%edx,%%ecx\\n\\t&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;jmp 3f\\n&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;2:\\taddl $32,%%ecx\\n\\t&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;cmpl $8192,%%ecx\\n\\t&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;jl 1b\\n&quot;</span> \\</span>
<span class="line">        <span class="token string">&quot;3:&quot;</span> \\</span>
<span class="line">        <span class="token operator">:</span><span class="token string">&quot;=c&quot;</span><span class="token punctuation">(</span>__res<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;ax&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;dx&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;si&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \\</span>
<span class="line">__res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="free-block-释放逻辑块" tabindex="-1"><a class="header-anchor" href="#free-block-释放逻辑块"><span>free_block() - 释放逻辑块</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">free_block</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 取 super block 的信息</span></span>
<span class="line">    <span class="token comment">// 数据区开始块号、逻辑块总数信息</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// super block 不存在</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to free block on nonexistent device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;</span> sb<span class="token operator">-&gt;</span>s_firstdatazone <span class="token operator">||</span> b <span class="token operator">&gt;=</span> sb<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 逻辑块号小于盘上数据区的第 1 个逻辑块号</span></span>
<span class="line">        <span class="token comment">// 逻辑块号大于设备上总逻辑块数</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to free block not in datazone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">get_hash_table</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// hash 表中存在该块数据</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 该块还有人用</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_count<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// b_count == 1，释放</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// block 转换为从数据区开始算起的逻辑块号 (从 1 开始)</span></span>
<span class="line">    block <span class="token operator">-=</span> sb<span class="token operator">-&gt;</span>s_firstdatazone <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">clear_bit</span><span class="token punctuation">(</span>block <span class="token operator">&amp;</span> <span class="token number">8191</span><span class="token punctuation">,</span> sb<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>block<span class="token operator">/</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// block &amp; 8191 得到 block 在 bitmap 当前块中偏移的位置</span></span>
<span class="line">        <span class="token comment">// block / 8192 得到 block 在 bitmap 的哪个块上</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;block (%04x:%d) &quot;</span><span class="token punctuation">,</span> dev<span class="token punctuation">,</span> block<span class="token operator">+</span>sb<span class="token operator">-&gt;</span>firstdatazone <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;free_block: bit already cleared\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 逻辑块 bitmap 所在缓冲块的已修改标志置位</span></span>
<span class="line">    sb<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>block<span class="token operator">/</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="new-block-申请逻辑块" tabindex="-1"><a class="header-anchor" href="#new-block-申请逻辑块"><span>new_block() - 申请逻辑块</span></a></h4><p>在逻辑块 bitmap 中寻找第一个 0 值 bit 位 (空闲逻辑块)，占用该逻辑块，为该逻辑块在缓冲区中取得一块缓冲块。将缓冲块清零，并设置已更新和已修改标志，返回逻辑块号。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">new_block</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 获取 super block</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to get new block from nonexistant device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 扫描 FS 的 8 个逻辑块 bitmap</span></span>
<span class="line">    <span class="token comment">// 寻找首个 0 值 bit - 寻找空闲逻辑块</span></span>
<span class="line">    j <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh <span class="token operator">=</span> sb<span class="token operator">-&gt;</span>s_zmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 放置逻辑块 bitmap 的缓冲区</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token function">find_first_zero</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8192</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">8</span> <span class="token operator">||</span> <span class="token operator">!</span>bh <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">8192</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 没有找到空闲逻辑块</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">set_bit</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;new_block: bit already set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑块 bitmap 所在缓冲区被修改</span></span>
<span class="line">    </span>
<span class="line">    j <span class="token operator">+=</span> i <span class="token operator">*</span> <span class="token number">8192</span> <span class="token operator">+</span> sb<span class="token operator">-&gt;</span>s_firstdatazone <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> sb<span class="token operator">-&gt;</span>s_nzones<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 新逻辑块号超出设备上的总逻辑块数</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 为该逻辑块分配高速缓冲块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;new_block: cannot get block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 该缓冲块块已被引用</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;new block: count is != 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">clear_block</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空缓冲块的数据</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲块</span></span>
<span class="line">    <span class="token keyword">return</span> j<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="free-inode-释放-inode" tabindex="-1"><a class="header-anchor" href="#free-inode-释放-inode"><span>free_inode() - 释放 inode</span></a></h4><p>判断给定 inode 的有效性和可释放型，若 inode 正在被使用，则不能被释放。利用超级块信息对 inode bitmap 进行操作，并清空 inode 结构。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">free_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// inode 为空</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// inode 未被使用</span></span>
<span class="line">        <span class="token comment">// 清空 inode 结构</span></span>
<span class="line">        <span class="token function">memset</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// inode 正被其它结构使用</span></span>
<span class="line">        <span class="token comment">// 内核有问题，停机</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;trying to free inode with count=%d\\n&quot;</span><span class="token punctuation">,</span> inode_i_count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;free_inode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 文件链接数不为 0</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to free inode with links&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 取得所在设备的超级块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 超级块不存在</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to free inode on nonexistent device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> inode<span class="token operator">-&gt;</span>i_num <span class="token operator">&gt;</span> sb<span class="token operator">-&gt;</span>s_ninodes<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// inode 编号不合法</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trying to free inode 0 or nonexistant inode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> sb<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>inode<span class="token operator">-&gt;</span>i_num <span class="token operator">&gt;&gt;</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// inode-&gt;i_num / 8192</span></span>
<span class="line">        <span class="token comment">// inode 所在的 bitmap 不存在</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;nonexistent imap in superblock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// bh 指向 inode bitmap 缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">clear_bit</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_num <span class="token operator">&amp;</span> <span class="token number">8191</span><span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;free_inode: bit already cleared.\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// inode bitmap 缓冲区已被修改</span></span>
<span class="line">    <span class="token function">memset</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空 inode 结构</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="new-inode-申请-inode" tabindex="-1"><a class="header-anchor" href="#new-inode-申请-inode"><span>new_inode() - 申请 inode</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">new_inode</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 从内存 inode 表中获取一个空闲表项</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">get_empty_inode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;new_inode with unknown device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 扫描包含 inode bitmap 的 8 个逻辑块，寻找空闲 bit</span></span>
<span class="line">    j <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh <span class="token operator">=</span> sb<span class="token operator">-&gt;</span>s_imap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token function">find_first_zero</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8192</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">8192</span> <span class="token operator">||</span> j <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">8192</span> <span class="token operator">&gt;</span> sb<span class="token operator">-&gt;</span>s_ninodes<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// bitmap 所在的缓冲块无效，或 inode 超出范围</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放回申请的 inode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// j 为可使用的 inode 节点号</span></span>
<span class="line">    <span class="token comment">// bh 为对应 inode 的 bitmap 缓冲区</span></span>
<span class="line">    <span class="token comment">// 在 bitmap 中占用该 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">set_bit</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;new_inode: bit already set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// inode bitmap 所在缓冲块已修改标志置位</span></span>
<span class="line">    </span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 引用计数</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_nlinks <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 文件链接数</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">=</span> dev<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_uid <span class="token operator">=</span> current<span class="token operator">-&gt;</span>euid<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_gid <span class="token operator">=</span> current<span class="token operator">-&gt;</span>egid<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_num <span class="token operator">=</span> j <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">8192</span><span class="token punctuation">;</span> <span class="token comment">// inode 号</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>程序是无法对磁盘上的文件系统进行 <strong>直接操作</strong> 的，必须要通过 <strong>缓冲区管理程序</strong> 进行。所以，如果要申请 inode 或逻辑块，就必须对在缓冲区中的 bitmap 映像进行操作，还要在缓冲区中分配新磁盘块的缓冲区并清零，再通过缓冲区同步机制写回磁盘。同样，在释放过程中，也要对缓冲区中的 bitmap 映像进行操作，还要清除缓冲区中已缓存的磁盘块。</p>`,31)]))}const i=s(e,[["render",o],["__file","Chapter 12.3 - bitmap.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.3%20-%20bitmap.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.3 - bitmap.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.3 bitmap.c 程序","slug":"_12-3-bitmap-c-程序","link":"#_12-3-bitmap-c-程序","children":[{"level":3,"title":"12.3.2 代码注释","slug":"_12-3-2-代码注释","link":"#_12-3-2-代码注释","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.3 - bitmap.c 程序.md"}');export{i as comp,u as data};
