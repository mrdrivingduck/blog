import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="c-stl-multimap" tabindex="-1"><a class="header-anchor" href="#c-stl-multimap"><span>C++ STL multimap</span></a></h1><p>Created by : Mr Dk.</p><p>2018 / 09 / 15 20:16</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="feature" tabindex="-1"><a class="header-anchor" href="#feature"><span>Feature</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span>                                   <span class="token comment">// multimap::key_type</span></span>
<span class="line">           <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>                                     <span class="token comment">// multimap::mapped_type</span></span>
<span class="line">           <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span>                   <span class="token comment">// multimap::key_compare</span></span>
<span class="line">           <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>  <span class="token comment">// multimap::allocator_type</span></span>
<span class="line">           <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">multimap</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multimap 提供 key - value 的映射。</p><ul><li>key 必须能够被比较，默认使用 <code>&lt;</code> 运算符进行比较</li><li>若 key 为自定义类型，则需要重载 <code>&lt;</code> 运算符</li><li>key 不会重复出现，value 可以重复出现</li><li>根据 key 的大小排序，默认从小到大</li></ul><p>通过 key 快速查找 value，key 可被修改，value 不可被修改。底层由 <strong>红黑树</strong> 实现。插入、删除操作后，其余迭代器 <strong>不会失效</strong>。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// using std::multimap;</span></span>
<span class="line"><span class="token comment">// using std::pair;</span></span>
<span class="line"><span class="token comment">// using std::make_pair;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span> multimap<span class="token punctuation">;</span> <span class="token comment">// Empty container (default)</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span> <span class="token function">multimap</span><span class="token punctuation">(</span>another_map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Copy constructor</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span> <span class="token function">multimap</span><span class="token punctuation">(</span>another_map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> another_map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Range constructor</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="operator" tabindex="-1"><a class="header-anchor" href="#operator"><span>Operator <code>=</code></span></a></h2><p><strong>Copy</strong> a container.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span> A<span class="token punctuation">;</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span> B<span class="token punctuation">;</span></span>
<span class="line">A <span class="token operator">=</span> B<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iterators" tabindex="-1"><a class="header-anchor" href="#iterators"><span>Iterators</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter_begin <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向第一个元素的迭代器</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter_end <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向最后一个元素的下一个位置的迭代器</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>reverse_iterator iter_rbegin <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向最后一个元素的迭代器</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>reverse_iterator iter_rend <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向第一个元素的前一个位置的迭代器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="capacity" tabindex="-1"><a class="header-anchor" href="#capacity"><span>Capacity</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 返回容器是否为空</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 返回容器中的元素个数</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> multimap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 返回容器可容纳的最大容量</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> multimap<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modification" tabindex="-1"><a class="header-anchor" href="#modification"><span>Modification</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">multimap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 删除</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">multimap<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// 删除单个元素</span></span>
<span class="line">multimap<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 删除 key 的所有元素</span></span>
<span class="line">multimap<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multimap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 删除范围内的元素</span></span>
<span class="line">multimap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">// 删除全部元素</span></span>
<span class="line"></span>
<span class="line">multimap<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>another_map<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 交换两个容器中的内容</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="search" tabindex="-1"><a class="header-anchor" href="#search"><span>Search</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// find() - 返回第一次出现 key 的迭代器</span></span>
<span class="line">multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">==</span> multimap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// NOT FOUND</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// count() - 返回 key 出现的次数</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> multimap<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * lower_bound() - 返回指向第一个不小于 key 的元素的迭代器 （&gt;=）</span>
<span class="line"> * upper_bound() - 返回指向第一个大于 key 的元素的迭代器 （&gt;）</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">typedef</span> multimap<span class="token operator">&lt;</span>key_Type<span class="token punctuation">,</span> value_Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator Iter<span class="token punctuation">;</span></span>
<span class="line">Iter low <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Iter high <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * equal_range() - 返回指向 key 的首尾范围的迭代器</span>
<span class="line"> * 返回形式为 pair -</span>
<span class="line"> *     第一个成员为 lower_bound() 的结果</span>
<span class="line"> *     第二个成员为 upper_bound() 的结果</span>
<span class="line"> *     [&#39;&gt;=&#39;, &#39;&gt;&#39;) 等价于 &#39;=&#39;</span>
<span class="line"> */</span></span>
<span class="line">pair<span class="token operator">&lt;</span>Iter<span class="token punctuation">,</span> Iter<span class="token operator">&gt;</span> range <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>Iter iter <span class="token operator">=</span> range<span class="token punctuation">.</span>first<span class="token punctuation">;</span> iter <span class="token operator">!=</span> range<span class="token punctuation">.</span>second<span class="token punctuation">;</span> iter<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="http://www.cplusplus.com/reference/map/multimap/" target="_blank" rel="noopener noreferrer">CPlusPlus.com - std::multimap</a></li></ul>`,26)]))}const i=s(t,[["render",l],["__file","C__ STL multimap.html.vue"]]),u=JSON.parse('{"path":"/notes/C__/C__%20STL%20multimap.html","title":"C++ STL multimap","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Feature","slug":"feature","link":"#feature","children":[]},{"level":2,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]},{"level":2,"title":"Operator =","slug":"operator","link":"#operator","children":[]},{"level":2,"title":"Iterators","slug":"iterators","link":"#iterators","children":[]},{"level":2,"title":"Capacity","slug":"capacity","link":"#capacity","children":[]},{"level":2,"title":"Modification","slug":"modification","link":"#modification","children":[]},{"level":2,"title":"Search","slug":"search","link":"#search","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ STL multimap.md"}');export{i as comp,u as data};
