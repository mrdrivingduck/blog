import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-5-3-map-multimap" tabindex="-1"><a class="header-anchor" href="#chapter-5-3-map-multimap"><span>Chapter 5.3 - map &amp; multimap</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 06 17:22</p><p>Nanjing, Jiangsu, China</p><hr><p>map 的特性是，所有元素都根据元素的 key 值自动被排序。map 的所有元素都是 <strong>pair</strong> (key + value)。map 不允许两个元素有相同的 key 值。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>less<span class="token operator">&lt;</span>_Key<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 默认使用 &lt; 比较 key</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token comment">// 默认使用 alloc 分配器</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">map</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>multimap 允许两个元素有相同的 key。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>less<span class="token operator">&lt;</span>_Key<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">multimap</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pair" tabindex="-1"><a class="header-anchor" href="#pair"><span>Pair</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_T2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">pair</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _T1 first_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _T2 second_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _T1 first<span class="token punctuation">;</span>  <span class="token comment">// key</span></span>
<span class="line">  _T2 second<span class="token punctuation">;</span> <span class="token comment">// value</span></span>
<span class="line">  <span class="token function">pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token function">_T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token function">_T2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">pair</span><span class="token punctuation">(</span><span class="token keyword">const</span> _T1<span class="token operator">&amp;</span> __a<span class="token punctuation">,</span> <span class="token keyword">const</span> _T2<span class="token operator">&amp;</span> __b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">first</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">second</span><span class="token punctuation">(</span>__b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">map</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// requirements:</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Assignable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Compare<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> _Key<span class="token punctuation">,</span> _Key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// typedefs:</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 类内类型定义</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Key                  key_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp                   data_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp                   mapped_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">const</span> _Key<span class="token punctuation">,</span> _Tp<span class="token operator">&gt;</span> value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Compare              key_compare<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 定义用于比较 value 相对大小的仿函数，重载了该类的 () 运算符</span></span>
<span class="line">  <span class="token comment">// 使用与泛型参数 (用于比较 key 的仿函数) 相同的仿函数比较 value</span></span>
<span class="line">  <span class="token keyword">class</span> <span class="token class-name">value_compare</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">value_type</span><span class="token punctuation">,</span> <span class="token class-name">value_type</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">map</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token operator">:</span></span>
<span class="line">    _Compare comp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">value_compare</span><span class="token punctuation">(</span>_Compare __c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">comp</span><span class="token punctuation">(</span>__c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">comp</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>first<span class="token punctuation">,</span> __y<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Rb_tree<span class="token operator">&lt;</span>key_type<span class="token punctuation">,</span> value_type<span class="token punctuation">,</span> <span class="token comment">// 红黑树的类型定义</span></span>
<span class="line">                   _Select1st<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span><span class="token punctuation">,</span> key_compare<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _Rep_type<span class="token punctuation">;</span></span>
<span class="line">  _Rep_type _M_t<span class="token punctuation">;</span>  <span class="token comment">// red-black tree representing map</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，红黑树的定义里，key 的类型是来自于模板参数，value 的类型为模板参数 key 和 value 组成的 pair。key 比较函数来自于模板参数。<code>KeyOfValue</code> 仿函数的功能是从红黑树的 value 类型 pair 中取出 pair 的 key：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Pair</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Select1st</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Pair</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> _Pair<span class="token double-colon punctuation">::</span><span class="token class-name">first_type</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Pair</span><span class="token double-colon punctuation">::</span>first_type<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Pair<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> __x<span class="token punctuation">.</span>first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="compare" tabindex="-1"><a class="header-anchor" href="#compare"><span>Compare</span></a></h2><p>类内封装了一个用于比较 key 的仿函数，重载了该类的 <code>()</code> 运算符：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">value_compare</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">value_type</span><span class="token punctuation">,</span> <span class="token class-name">value_type</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">map</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token operator">:</span></span>
<span class="line">    _Compare comp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">value_compare</span><span class="token punctuation">(</span>_Compare __c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">comp</span><span class="token punctuation">(</span>__c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">comp</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>first<span class="token punctuation">,</span> __y<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h2><p>构造函数初始化红黑树：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span><span class="token function">_Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">explicit</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__comp<span class="token punctuation">,</span> __a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span><span class="token function">_Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__comp<span class="token punctuation">,</span> __a<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">map</span><span class="token punctuation">(</span>const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span><span class="token function">_Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">map</span><span class="token punctuation">(</span>const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__comp<span class="token punctuation">,</span> __a<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="accessors" tabindex="-1"><a class="header-anchor" href="#accessors"><span>Accessors</span></a></h2><p>直接转而调用红黑树的函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">key_compare <span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">value_compare <span class="token function">value_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">value_compare</span><span class="token punctuation">(</span>_M_t<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">_Tp<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 重载 [] 运算符</span></span>
<span class="line">    iterator __i <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>__k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一个大于等于指定 key 的结点</span></span>
<span class="line">    <span class="token comment">// __i-&gt;first is greater than or equivalent to __k.</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__k<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        __i <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> <span class="token function">value_type</span><span class="token punctuation">(</span>__k<span class="token punctuation">,</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key 不存在，则插入新结点</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">// 返回 key 结点对应 value 的左值引用：map[key] = value;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>_M_t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h2><p>不允许元素的 key 重复，因此调用红黑树的 <code>insert_unique()</code>；如果是 multimap，那么调用 <code>insert_equal()</code>。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">insert</span><span class="token punctuation">(</span>iterator position<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="erase" tabindex="-1"><a class="header-anchor" href="#erase"><span>Erase</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>__position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="search" tabindex="-1"><a class="header-anchor" href="#search"><span>Search</span></a></h2><p>由于红黑树的有序性，因此可以使用二分查找：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token operator">==</span> _M_t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">&gt;</span> <span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span>const_iterator<span class="token operator">&gt;</span> <span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="operator-overload" tabindex="-1"><a class="header-anchor" href="#operator-overload"><span>Operator Overload</span></a></h2><p>借用红黑树的运算符实现重载：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> map<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token keyword">const</span> map<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_t <span class="token operator">==</span> __y<span class="token punctuation">.</span>_M_t<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> map<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token keyword">const</span> map<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Tp<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_t <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>_M_t<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)]))}const i=s(e,[["render",o],["__file","Chapter 5.4 - map _ multimap.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%205%20-%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%205.4%20-%20map%20_%20multimap.html","title":"Chapter 5.3 - map & multimap","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Pair","slug":"pair","link":"#pair","children":[]},{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Compare","slug":"compare","link":"#compare","children":[]},{"level":2,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]},{"level":2,"title":"Accessors","slug":"accessors","link":"#accessors","children":[]},{"level":2,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":2,"title":"Erase","slug":"erase","link":"#erase","children":[]},{"level":2,"title":"Search","slug":"search","link":"#search","children":[]},{"level":2,"title":"Operator Overload","slug":"operator-overload","link":"#operator-overload","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 5 - 关联式容器/Chapter 5.4 - map & multimap.md"}');export{i as comp,u as data};
