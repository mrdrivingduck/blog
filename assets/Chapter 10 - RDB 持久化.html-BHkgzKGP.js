import{_ as a,c as e,a as n,o as l}from"./app-7eKjwDat.js";const i={};function c(t,s){return l(),e("div",null,s[0]||(s[0]=[n(`<h1 id="chapter-10-rdb-持久化" tabindex="-1"><a class="header-anchor" href="#chapter-10-rdb-持久化"><span>Chapter 10 - RDB 持久化</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 03 10:14</p><p>Nanjing, Jiangsu, China</p><hr><p>RDB 持久化功能可以将 Redis 内存中的数据库状态保存到磁盘中。具体做法是生成一个压缩的二进制 RDB 格式文件，通过这个文件，可以还原当时的数据库状态。</p><h2 id="save-and-bgsave" tabindex="-1"><a class="header-anchor" href="#save-and-bgsave"><span>SAVE and BGSAVE</span></a></h2><p><code>SAVE</code> 和 <code>BGSAVE</code> 两条命令都可以用于生成 RDB 文件：</p><ul><li><code>SAVE</code> 阻塞 Redis 服务器进程，直到 RDB 文件创建完毕，期间服务器无法处理任何请求</li><li><code>BGSAVE</code> 创建了一个子进程负责 RDB 文件的写入，服务器进程继续处理请求 <ul><li>期间 <code>SAVE</code> / <code>BGSAVE</code> / <code>GBREWRITEAOF</code> 命令会被拒绝，防止产生竞争条件</li></ul></li></ul><p>由于 AOF 持久化的频率比 RDB 高，因此只有 AOF 持久化功能关闭时，服务器才使用 RDF 文件来还原数据库状态。</p><h2 id="automatic-saving" tabindex="-1"><a class="header-anchor" href="#automatic-saving"><span>Automatic Saving</span></a></h2><p>Redis 允许用户通过设置服务器的 <code>save</code> 选项，让服务器每隔一段时间自动执行一次 <code>BGSAVE</code>。<code>save</code> 属性中可以设置保存多个条件，只要有一个条件被满足，服务器就会执行 <code>BGSAVE</code> 命令。默认的条件如下，含义为 xxx 秒内对数据库进行了 xxx 次修改后触发：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">save 900 1</span>
<span class="line">save 300 10</span>
<span class="line">save 60 10000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些条件保存在 <code>redisServer</code> 结构体中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">saveparam</span> <span class="token operator">*</span>saveparams<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体数组中的每个元素保存了一个 <code>save</code> 选项的条件：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">saveparam</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">time_t</span> seconds<span class="token punctuation">;</span> <span class="token comment">// 秒数</span></span>
<span class="line">    <span class="token keyword">int</span> changes<span class="token punctuation">;</span> <span class="token comment">// 修改次数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，服务器还维护以下两个相关属性：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token keyword">long</span> dirty<span class="token punctuation">;</span> <span class="token comment">// 修改计数器，每修改一次 +1</span></span>
<span class="line">    <span class="token class-name">time_t</span> lastsave<span class="token punctuation">;</span> <span class="token comment">// 上次进行持久化操作的时间</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis 服务器的周期性操作函数默认 100ms 执行一次，会对 <code>save</code> 选项下的每一个条件进行检查：</p><ul><li>计算当前时间与 <code>lastsave</code> 的时间差</li><li>计算在一定的时间间隔内，Redis 修改次数是否满足条件</li><li>如果满足条件，那么执行 <code>BGSAVE</code>，<code>dirty</code> 计数器被重置为 0</li></ul><h2 id="rdb-文件结构" tabindex="-1"><a class="header-anchor" href="#rdb-文件结构"><span>RDB 文件结构</span></a></h2><p>完整的 RDB 文件包含以下部分：</p><ul><li>REDIS (magic value)</li><li>db_version (RDB 第六版)</li><li>databases - 每一个非空数据库</li><li>EOF - RDB 正文内容结束</li><li>check_sum - 对前四个部分计算得到的校验和</li></ul><p>其中，每一个非空数据库的文件结构：</p><ul><li>SELECTDB (magic value)</li><li>db_number - 数据库编号</li><li>key_value_pairs</li></ul><p>而每个 <code>key_value_pairs</code> 的结构：</p><ul><li>不带过期时间： <ul><li>TYPE (magic value)</li><li>key</li><li>value</li></ul></li><li>带有过期时间： <ul><li>EXPIRETIME_MS (magic value)</li><li>ms - 毫秒 UNIX 时间戳</li><li>TYPE (magic value)</li><li>key</li><li>value</li></ul></li></ul><blockquote><p>其中，<code>TYPE</code> 用于解析 value 的类型，因为 key 一定是字符串。</p></blockquote>`,29)]))}const d=a(i,[["render",c],["__file","Chapter 10 - RDB 持久化.html.vue"]]),o=JSON.parse('{"path":"/redis-implementation-notes/Part%202%20-%20%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0/Chapter%2010%20-%20RDB%20%E6%8C%81%E4%B9%85%E5%8C%96.html","title":"Chapter 10 - RDB 持久化","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"SAVE and BGSAVE","slug":"save-and-bgsave","link":"#save-and-bgsave","children":[]},{"level":2,"title":"Automatic Saving","slug":"automatic-saving","link":"#automatic-saving","children":[]},{"level":2,"title":"RDB 文件结构","slug":"rdb-文件结构","link":"#rdb-文件结构","children":[]}],"git":{},"filePathRelative":"redis-implementation-notes/Part 2 - 单机数据库的实现/Chapter 10 - RDB 持久化.md"}');export{d as comp,o as data};
