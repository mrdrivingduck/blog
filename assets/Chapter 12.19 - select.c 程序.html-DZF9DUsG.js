import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-19-select-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-19-select-c-程序"><span>Chapter 12.19 - select.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 13 10:58</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-19-select-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-19-select-c-程序"><span>12.19 select.c 程序</span></a></h2><h3 id="_12-19-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-19-1-功能描述"><span>12.19.1 功能描述</span></a></h3><p>时隔数月终于来补全这个程序了。起因是昨天上了一节有关 I/O 多路复用的网课，里面详细介绍了 SELECT、POLL、EPOLL 三个系统调用的演进过程和实现原理。在 Linux 0.12 内核中应该只实现了 SELECT。</p><p>对于这个问题的大致理解，要从一个服务器程序的最初始版本说起。根据以前网络课写的 demo，服务端需要初始化一个 server socket，然后开始在一个死循环中监听端口，代码阻塞在 <code>accept()</code> 处。当一个客户端连接到来时，<code>accept()</code> 返回新建立的 socket 连接的文件描述符，之后可以用一个子进程或子线程来处理这个连接的读写，而读写也是阻塞的。这就是传统的 BIO - 每个线程对应一个连接。这种方式可以建立很多个连接，但是由于线程建立过多，无论是内存还是 CPU 时间都会浪费在这么多的线程上。之所以要建立这么多线程，主要原因在于 <code>accept()</code> 和 <code>read()</code> / <code>write()</code> 的 <strong>阻塞性</strong>。如果系统能够提供非阻塞的系统调用，就能解决 BIO 的问题。</p><p>Linux 的系统调用提供了 <strong>非阻塞</strong> 的 <code>accept()</code>。在调用 <code>accept()</code> 之后，会立刻返回，但是可以根据返回值是否为 <code>-1</code>，来判断是否有新的连接出现。同时，<code>read()</code> 和 <code>write()</code> 也可以设置为 <strong>非阻塞</strong> 模式。服务器在接收到客户端之后，将 socket fd 维护成一个链表，并在每轮循环中遍历这个链表，对每一个 fd 都调用 <code>read()</code> 读取数据。由于系统调用全部非阻塞，因此每一轮循环都能快速返回，不再需要建立多个线程了。</p><p>带来的问题的是，每轮循环中，对每一个 fd 调用 <code>read()</code>，但实际上大部分连接都没有新数据进来。这样相当于做了大量的 <strong>无效的系统调用</strong>，很多时间被浪费在了 <strong>用户态和内核态的切换</strong> 上。相当于在用户空间通过系统调用循环遍历内核空间的数据结构。可否通过一个系统调用，在用户空间一次性查询多个 fd 的状态呢？这就是多路复用器的概念。其中，SELECT 就是一个多路复用器。用户空间将想要查询 I/O 状态和相应事件 (可读/可写/可接受连接) 的文件描述符的 <strong>集合</strong> 告诉内核，由内核来对这些 fd 的状态进行查询，并向用户空间返回已经就绪的 fd 集合。这样显著减少了系统调用的次数。</p><p><code>select()</code> 系统调用实现了这样的功能。它可以使内核同时检测用户提供的多个文件描述符。如果文件描述符的状态没有发生变化，那么就让进程进入睡眠状态；如果其中几个描述符已准备好被访问，则函数返回用户空间，告诉进程哪几个 fd 已经准备好。</p><p>POLL 与 SELECT 是一类多路复用器，但是 POLL 对 fd 的个数没有限制。这类多路复用器的劣势在于，用户空间需要反复将 fd 集合作为系统调用参数送入内核，内核不保存每一次调用的 fd 集合，因此内核需要遍历内核中所有的 fd。这就是 EPOLL 需要解决的问题。</p><p>SELECT 系统调用的原型：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>readfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>writefds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>exceptfds<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>width</code> 是之后三个参数中，给出的数值最大的 fd 的值 + 1，用于让内核只在指定的范围内遍历所有 fd。比如给了 <code>10</code>，那么内核只需要遍历内核中前 10 个 fd 就够了。之后三个参数分别是用户空间关心的 fd 状态集合</p><ul><li>可读 fd 集合</li><li>可写 fd 集合</li><li>异常 fd 集合</li></ul><p><code>fd_set</code> 变量实际上是一个无符号的 <code>long</code> 类型，其中每一位分别代表一个 fd，与 bitmap 类似。定义了四个宏操作描述符集合：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FD_ZERO</span><span class="token expression"><span class="token punctuation">(</span>fdsetp<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>fdsetp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">// 所有比特位清零</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FD_SET</span><span class="token expression"><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> fdsetp<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>fdsetp<span class="token punctuation">)</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// 置位集合中的某个比特</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FD_CLR</span><span class="token expression"><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> fdsetp<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>fdsetp<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// 复位集合中的某个比特</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FD_ISSET</span><span class="token expression"><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> fdsetp<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>fdsetp<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> fd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> </span><span class="token comment">// 测试指定描述符对应的比特位</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后的 <code>timeout</code> 是一个超时参数，描述进程在任一描述符准备好之前，愿意等待的最长时间。因为 <code>select()</code> 本身是阻塞的，如果不设置这个超时时间 (<code>NULL</code>)，该函数将永远阻塞下去，直到有 fd 就绪。如果用户空间设置了这个超时时间，那么 <code>select()</code> 将在超时后返回：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> tv_sec<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">long</span> tc_usec<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>select()</code> 会检查各个 fd 集合中 fd 的有效性，然后依次对每个 fd 进行检查。如果至少有任何一个描述符已经准备好，函数就立刻返回；否则就调用 <code>add_wait()</code> 函数把当前任务插入等待队列中并进入睡眠。</p><p><code>select()</code> 返回后，三个 fd 集合中仍然置位的 fd 就是目前就绪的 id。</p><h3 id="_12-19-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-19-2-代码注释"><span>12.19.2 代码注释</span></a></h3><h4 id="等待表" tabindex="-1"><a class="header-anchor" href="#等待表"><span>等待表</span></a></h4><p>用于保存所有等待 fd 的睡眠中进程。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>old_task<span class="token punctuation">;</span></span>
<span class="line">    sturct task_struct <span class="token operator">*</span><span class="token operator">*</span>wait_address<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> wait_entry<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> nr<span class="token punctuation">;</span></span>
<span class="line">    wait_entry entry<span class="token punctuation">[</span>NR_OPEN <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> select_table<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="add-wait" tabindex="-1"><a class="header-anchor" href="#add-wait"><span>add_wait()</span></a></h4><p>将未准备好的描述符的等待队列指针加入到等待表中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add_wait</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>wait_address<span class="token punctuation">,</span> select_table <span class="token operator">*</span>p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wait_address<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 检查 fd 是否已经有对应的等待队列，如果有则立刻返回</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> p<span class="token operator">-&gt;</span>nr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>entry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wait_address <span class="token operator">==</span> wait_address<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将当前任务插入等待队列的头部，并保存原有等待队列的指针</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>entry<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>wait_address <span class="token operator">=</span> wait_address<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>entry<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>nr<span class="token punctuation">]</span><span class="token punctuation">.</span>old_task <span class="token operator">=</span> <span class="token operator">*</span>wait_address<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>wait_address <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>nr<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="free-wait" tabindex="-1"><a class="header-anchor" href="#free-wait"><span>free_wait()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">free_wait</span><span class="token punctuation">(</span>select_table <span class="token operator">*</span>p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>tpp<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token operator">-&gt;</span>nr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tpp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>entry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wait_address<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 等待队列头指针不指向当前进程</span></span>
<span class="line">        <span class="token comment">// 则需要先唤醒之前的进程，等待这些进程唤醒当前进程</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>tpp <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>tpp <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token operator">*</span>tpp<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 唤醒队列中的后续进程</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>tpp<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;free_wait: NULL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>tpp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>entry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>old_task<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>tpp<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    p<span class="token operator">-&gt;</span>nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-select" tabindex="-1"><a class="header-anchor" href="#do-select"><span>do_select()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">do_select</span><span class="token punctuation">(</span>fd_set in<span class="token punctuation">,</span> fd_set out<span class="token punctuation">,</span> fd_set ex<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>inp<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>outp<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>exp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> count<span class="token punctuation">;</span></span>
<span class="line">    select_table wait_table<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    fd_set mask<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    mask <span class="token operator">=</span> in <span class="token operator">|</span> out <span class="token operator">|</span> ex<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_OPEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> mask <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 当前描述符不在感兴趣的描述符集合中</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 文件未打开</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">=</span>EBADF<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 文件 inode 指针为空</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 管道文件描述符</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 字符设备文件</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// FIFO</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_SIFIFO</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 其余都是无效描述符</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    wait_table<span class="token punctuation">.</span>nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>inp <span class="token operator">=</span> <span class="token operator">*</span>outp <span class="token operator">=</span> <span class="token operator">*</span>exp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    mask <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_OPEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> mask <span class="token operator">+=</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> in<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 此时判断的 fd 在读操作 fd 集合中</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_in</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_table<span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token operator">*</span>inp <span class="token operator">|=</span> mask<span class="token punctuation">;</span></span>
<span class="line">                count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> out<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 此时判断的 fd 在写操作 fd 集合中</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_in</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_table<span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token operator">*</span>outp <span class="token operator">|=</span> mask<span class="token punctuation">;</span></span>
<span class="line">                count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> ex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 此时判断的 fd 在异常 fd 集合中</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_ex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_table<span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token operator">*</span>exp <span class="token operator">|=</span> mask<span class="token punctuation">;</span></span>
<span class="line">                count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 进程没有收到非阻塞信号</span></span>
<span class="line">    <span class="token comment">// select 还未超时</span></span>
<span class="line">    <span class="token comment">// 还没有任何准备好的 fd</span></span>
<span class="line">    <span class="token comment">// 则进程进入可中断睡眠状态进行等待</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token punctuation">(</span>wait_table<span class="token punctuation">.</span>nr <span class="token operator">||</span> current<span class="token operator">-&gt;</span>timeout<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">free_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_table<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 返回</span></span>
<span class="line">    <span class="token function">free_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_table<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> count<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-select" tabindex="-1"><a class="header-anchor" href="#sys-select"><span>sys_select()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_select</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    fd_set res_in<span class="token punctuation">,</span> in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>inp<span class="token punctuation">;</span></span>
<span class="line">    fd_set res_out<span class="token punctuation">,</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>outp<span class="token punctuation">;</span></span>
<span class="line">    fd_set red_ex<span class="token punctuation">,</span> ex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>exp<span class="token punctuation">;</span></span>
<span class="line">    fd_set mask<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>tvp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 从用户数据区把参数隔离复制到局部变量中</span></span>
<span class="line">    mask <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>buffer<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    inp <span class="token operator">=</span> <span class="token punctuation">(</span>fd_set <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>buffer<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    outp <span class="token operator">=</span> <span class="token punctuation">(</span>fd_set <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>buffer<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    exp <span class="token operator">=</span> <span class="token punctuation">(</span>fd_set <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>buffer<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    tvp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span></span>
<span class="line">        in <span class="token operator">=</span> mask <span class="token operator">&amp;</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>outp<span class="token punctuation">)</span></span>
<span class="line">        out <span class="token operator">=</span> mask <span class="token operator">&amp;</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>outp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span></span>
<span class="line">        ex <span class="token operator">=</span> mask <span class="token operator">&amp;</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 尝试从时间结构中取出 timeout</span></span>
<span class="line">    timeout <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>tvp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        timeout <span class="token operator">=</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tvp<span class="token operator">-&gt;</span>tv_usec<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token operator">/</span>HZ<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        timeout <span class="token operator">+=</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tvp<span class="token operator">-&gt;</span>tv_sec<span class="token punctuation">)</span> <span class="token operator">*</span> HZ<span class="token punctuation">;</span></span>
<span class="line">        timeout <span class="token operator">+=</span> jiffies<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 避免竞争条件，关中断</span></span>
<span class="line">    <span class="token comment">// 递减等待时间</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    i <span class="token operator">=</span> <span class="token function">do_select</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token operator">&amp;</span>res_in<span class="token punctuation">,</span> <span class="token operator">&amp;</span>res_out<span class="token punctuation">,</span> <span class="token operator">&amp;</span>res_ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>timeout <span class="token operator">&gt;</span> jiffies<span class="token punctuation">)</span></span>
<span class="line">        timeout <span class="token operator">=</span> current<span class="token operator">-&gt;</span>timeout <span class="token operator">-</span> jiffies<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 向用户空间复制参数</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 可读 fd 集合</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">verify_area</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span>res_in<span class="token punctuation">,</span> inp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 可写 fd 集合</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>outp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">verify_area</span><span class="token punctuation">(</span>outp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span>res_out<span class="token punctuation">,</span> outp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 异常 fd 集合</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">verify_area</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span>res_exp<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 剩余超时时间</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>tvp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">verify_area</span><span class="token punctuation">(</span>tvp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>tvp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span>timeout<span class="token operator">/</span>HZ<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tvp<span class="token operator">-&gt;</span>tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        timeout <span class="token operator">%=</span> HZ<span class="token punctuation">;</span></span>
<span class="line">        timeout <span class="token operator">*=</span> <span class="token punctuation">(</span><span class="token number">1000000</span> <span class="token operator">/</span> HZ<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">put_fs_long</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tvp<span class="token operator">-&gt;</span>tv_usec<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 没有已准备好的描述符</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 返回已经就绪的 fd 个数</span></span>
<span class="line">    <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)]))}const i=s(e,[["render",o],["__file","Chapter 12.19 - select.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.19%20-%20select.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.19 - select.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.19 select.c 程序","slug":"_12-19-select-c-程序","link":"#_12-19-select-c-程序","children":[{"level":3,"title":"12.19.1 功能描述","slug":"_12-19-1-功能描述","link":"#_12-19-1-功能描述","children":[]},{"level":3,"title":"12.19.2 代码注释","slug":"_12-19-2-代码注释","link":"#_12-19-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.19 - select.c 程序.md"}');export{i as comp,u as data};
