import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const l="/blog/assets/ngx-list-t-CsA0dZei.png",t="/blog/assets/ngx-hash-t-Ck3B1DE6.png",c={};function i(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="chapter-7-nginx-提供的高级数据结构" tabindex="-1"><a class="header-anchor" href="#chapter-7-nginx-提供的高级数据结构"><span>Chapter 7 - Nginx 提供的高级数据结构</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 07 / 18 15:51</p><p>Nanjing, Jiangsu, China</p><hr><p>这里记录了一些 Nginx 中数据结构的定义和封装。Nginx 对内存分配比较吝啬，以保证高并发，因此这些数据结构天生尽可能较少地占用内存。</p><h2 id="_7-1-整型的封装" tabindex="-1"><a class="header-anchor" href="#_7-1-整型的封装"><span>7.1 整型的封装</span></a></h2><p>Nginx 用 <code>ngx_int_t</code> 封装 <code>int</code>，使用 <code>ngx_uint_t</code> 封装 <code>unsigned int</code>。</p><h2 id="_7-2-字符串的封装" tabindex="-1"><a class="header-anchor" href="#_7-2-字符串的封装"><span>7.2 字符串的封装</span></a></h2><p>在 Nginx 中，将字符串封装为 <code>ngx_str_t</code>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">size_t</span> len<span class="token punctuation">;</span></span>
<span class="line">    u_char <span class="token operator">*</span>data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_str_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>data</code> 指针指向字符串的起始地址，但是字符串不一定以 <code>\\0</code> 结尾，所以如果把它当作普通字符串使用都将会导致内存越界。因此需要配合长度 <code>len</code> 来使用。</p><h2 id="_7-3-单向链表的封装" tabindex="-1"><a class="header-anchor" href="#_7-3-单向链表的封装"><span>7.3 单向链表的封装</span></a></h2><p><code>ngx_list_t</code> 在 Nginx 中使用得很频繁，比如用于存储 HTTP header。其定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_list_part_s</span> <span class="token class-name">ngx_list_part_t</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_list_part_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>elts<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span> nelts<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_list_part_t</span> <span class="token operator">*</span>next<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_list_part_t</span> <span class="token operator">*</span>last<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_list_part_t</span> part<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span> nalloc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_pool_t</span> <span class="token operator">*</span>pool<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_list_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体实现形式是由一个个链表元素 <code>ngx_list_part_s</code> 组成的链表 <code>ngx_list_t</code>。其中，每个链表元素中又维护着一段连续的内存 (数组)。这段内存的长度由实际存储元素的大小 <code>size</code> 与每个链表元素中可容纳的实际存储元素的个数 <code>nalloc</code> 决定 (相乘)。整个链表所占用的内存由 <code>ngx_pool_t</code> 类型的内存池分配，通常都是连续的内存。内存组织形式如下图：</p><img src="`+l+`" alt="ngx-list-t" style="zoom:33%;"><p>这种设计的优势：</p><ul><li>链表中存储的元素比较灵活 (因为 <code>size</code> 可以在链表创建时任意指定)</li><li>...?</li></ul><p>创建链表时，需要在参数中传入内存池对象指针。</p><ul><li><code>ngx_list_create()</code> - 创建新的链表</li><li><code>ngx_list_init()</code> - 初始化一个已有链表</li><li><code>ngx_list_push()</code> - 添加新的元素</li><li>遍历链表不需要特定接口，可以直接根据上图中的数据结构完成</li></ul><h2 id="_7-4-双向链表" tabindex="-1"><a class="header-anchor" href="#_7-4-双向链表"><span>7.4 双向链表</span></a></h2><p>链表的优势在于，能够高效执行 <strong>插入、删除、合并</strong> 的操作。因为只需要修改指针的指向即可，很适合频繁修改容器的场合。Nginx 中的 <code>ngx_queue_t</code> 双向链表有以下特性：</p><ul><li>实现了排序</li><li>不负责链表元素所占内存的分配</li><li>支持两个链表的合并</li></ul><p>双向链表的实现只使用了一个数据结构：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_queue_s</span> <span class="token class-name">ngx_queue_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_queue_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_queue_t</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_queue_t</span> <span class="token operator">*</span>next<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用时，把这个结构体放到链表元素结构体中作为一个 field 即可。对于每个链表元素来说，空间上只增加了两个指针的内存。在向链表中添加、删除元素时，实际上都是对链表元素结构体中的 <code>ngx_queue_t</code> 结构体进行修改。</p><p>在链表元素结构体中，<code>ngx_queue_t</code> 可以在任意一个位置上。通过一个函数，可以获得 <code>ngx_queue_t</code> 结构体在包含其本身的结构体中的偏移。这可以用于自行实现双向链表的排序函数：排序函数接收两个 <code>ngx_queue_t</code> 结构体作为参数，返回一个 <code>ngx_int_t</code> 类型的结果。</p><p>通常双向链表初始化时，需要一个独立的 <code>ngx_queue_t</code> 作为链表容器结点 (或表头结点)。</p><p>由于双向链表的排序算法使用的是插入排序，因此不适合为庞大的数据排序。</p><h2 id="_7-5-动态数组" tabindex="-1"><a class="header-anchor" href="#_7-5-动态数组"><span>7.5 动态数组</span></a></h2><p>与 C++ STL 中的 vector 类似，<code>ngx_array_t</code> 是一个顺序容器，以数组的形式存储元素，并支持到达数组容量上限时动态改变数组大小。数组的优势在于访问速度 (常量级时间复杂度)，但其大小直接决定了消耗的内存。当数组大小无法确定时，动态数组就有了用武之地。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_array_s</span> <span class="token class-name">ngx_array_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_array_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>elts<span class="token punctuation">;</span> <span class="token comment">// 数组首地址</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span> nelts<span class="token punctuation">;</span> <span class="token comment">// 数组中已有元素个数</span></span>
<span class="line">    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span> <span class="token comment">// 数组元素占用内存的大小</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span> nalloc<span class="token punctuation">;</span> <span class="token comment">// 数组容量</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_pool_t</span> <span class="token operator">*</span>pool<span class="token punctuation">;</span> <span class="token comment">// 内存池</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向动态数组中添加新元素时，最好调用 <code>ngx_array_push()</code> 或 <code>ngx_array_push_n()</code> 函数，它们会在到达数组预分配容量上限时自动扩容。每次扩容受制于以下两种情况：</p><ol><li>如果内存池中剩余空间大于等于本次需要新增的空间 (1 或 n)，那么直接扩充 (1 或 n)</li><li>如果内存池剩余空间小于本次需要新增的空间 <ul><li>对 <code>ngx_array_push()</code> 来说，会将原先的数组扩容一倍</li><li>对 <code>ngx_array_push_n()</code> 来说 <ul><li>如果 n 小于原先数组的容量，那么扩容一倍</li><li>如果 n 大于原先数组的容量，那么扩容到 2 * n 的容量</li></ul></li></ul></li></ol><p>这里体现了 Nginx 预估用户行为的设计思想。另外，对于内存池中的剩余空间不够的扩容，新扩容的动态数组将位于新的内存块上，这里牵扯到数据的复制，可能会耗时较长。</p><h2 id="_7-6-红黑树" tabindex="-1"><a class="header-anchor" href="#_7-6-红黑树"><span>7.6 红黑树</span></a></h2><p>顺序容器的检索效率较差。当需要容器的检索速度很快，或支持 <strong>范围查询</strong> 时，<code>ngx_rbtree_t</code> 红黑树是一个不错的选择。红黑树是一棵 <strong>自平衡的二叉查找树</strong>，拥有以下特性：</p><ol><li>结点是红色或黑色的</li><li>根结点是黑色</li><li>所有叶子结点都是黑色的</li><li>每个红色结点的两个子结点都是黑色的</li><li>任一结点到每个叶子结点的所有简单路径上都包含数量相同的黑色结点</li></ol><p>因此红黑树具有关键性质：从根结点出发，到达叶子结点的最长路径，不超过最短路径的两倍。</p><p>Nginx 中红黑树结点的定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token class-name">ngx_uint_t</span> <span class="token class-name">gnx_rbtree_key_t</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_rbtree_node_s</span> <span class="token class-name">ngx_rbtree_node_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_rbtree_node_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_rbtree_key_t</span> key<span class="token punctuation">;</span> <span class="token comment">// 红黑树的 key</span></span>
<span class="line">    <span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>left<span class="token punctuation">;</span> <span class="token comment">// 左子树</span></span>
<span class="line">    <span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>right<span class="token punctuation">;</span> <span class="token comment">// 右子树</span></span>
<span class="line">    <span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span> <span class="token comment">// 父结点</span></span>
<span class="line">    u_char color<span class="token punctuation">;</span> <span class="token comment">// 红/黑</span></span>
<span class="line">    u_char data<span class="token punctuation">;</span> <span class="token comment">// 1 字节数据，很少使用</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要使用红黑树，一般会把这个结构体放到自定义结构体的第一个成员中，这样该结构体就成为了一个红黑树结点。这样方便用 <strong>强制类型转换</strong> 直接把自定义结构体直接转换到红黑树结构体。</p><p>其中，<code>key</code> 用于实现红黑树结点的排序。由于红黑树是一个通用数据结构，很多场合下允许不同的结点具有相同的 key。因此，在具体使用时，<code>key</code> 相同的结点是被 <strong>新增</strong> 还是 <strong>替换</strong> 由 <strong>向红黑树添加元素的函数指针</strong> <code>insert</code> 决定。以下是红黑树的容器定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_rbtree_s</span> <span class="token class-name">ngx_rbtree_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>ngx_rbtree_insert_pt<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>sentinel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_rbtree_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>root<span class="token punctuation">;</span> <span class="token comment">// 根节点</span></span>
<span class="line">    <span class="token class-name">ngx_rbtree_node_t</span> <span class="token operator">*</span>sentinel<span class="token punctuation">;</span> <span class="token comment">// 指向 NIL</span></span>
<span class="line">    ngx_rbtree_insert_pt insert<span class="token punctuation">;</span> <span class="token comment">// 添加元素的函数指针</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nginx 已经帮用户实现了三种添加元素的函数：</p><ul><li><p><code>ngx_rbtree_insert_value()</code> - 向红黑树中添加数据结点，每个结点的 key 必须唯一</p></li><li><p><code>ngx_rbtree_insert_timer_value()</code> - 向红黑树中添加结点，每个结点的 key 表示时间或时间差</p></li><li><p><code>ngx_str_rbtree_insert_value()</code> - 第一排序依据依然为 key，第二排序依据为结点字符串，因此结点结构体必须为：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_rbtree_node_t</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span> str<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_str_node_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>另外，自行定义添加元素的函数 <code>insert()</code> 也很简单，其处理的主要问题就是当 key 相同时，以何种标准来确定红黑树结点的唯一性。</p><h2 id="_7-7-基数树" tabindex="-1"><a class="header-anchor" href="#_7-7-基数树"><span>7.7 基数树</span></a></h2><p>基数树也是一种二叉查找树，要求每个结点都以 32-bit 整型数作为结点的唯一标识，按整型数的二进制位来建树。从最高位开始，遇到 0 进入左子树，遇到 1 进入右子树。因此 <code>ngx_radix_tree_t</code> 的最大深度为 32。为了减少树的高度，基数树引入了掩码的概念，用 0 将整型数的低位掩盖，只留下高位用于建树。掩码中 1 的个数决定了树的深度。</p><p>基数树的优点是操作速度快 (检索、插入、删除、范围查询)，但不需要进行旋转自平衡 (因为树高是确定的)。</p><p>基数树的内存与用户自定义的内存分离，因此需要负责分配每个树结点的内存：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_radix_node_s</span> <span class="token class-name">ngx_radix_node_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_radix_node_s</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_radix_node_t</span> <span class="token operator">*</span>right<span class="token punctuation">;</span> <span class="token comment">// 右子树</span></span>
<span class="line">    <span class="token class-name">ngx_radix_node_t</span> <span class="token operator">*</span>left<span class="token punctuation">;</span> <span class="token comment">// 左子树</span></span>
<span class="line">    <span class="token class-name">ngx_radix_node_t</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span> <span class="token comment">// 父结点</span></span>
<span class="line">    <span class="token class-name">uintptr_t</span> value<span class="token punctuation">;</span> <span class="token comment">// 指向用户定义的数据结构</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由基数树容器来管理所有的树结点内存：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_radix_node_t</span> <span class="token operator">*</span>root<span class="token punctuation">;</span> <span class="token comment">// 根结点</span></span>
<span class="line">    <span class="token class-name">ngx_pool_t</span> <span class="token operator">*</span>pool<span class="token punctuation">;</span> <span class="token comment">// 内存池</span></span>
<span class="line">    <span class="token class-name">ngx_redix_node_t</span> <span class="token operator">*</span>free<span class="token punctuation">;</span> <span class="token comment">// 已分配但未使用的空闲结点单链表</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>start<span class="token punctuation">;</span> <span class="token comment">// 已分配内存中还未使用的内存首地址</span></span>
<span class="line">    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span> <span class="token comment">// 已分配内存中还未使用的内存大小</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在分配内存时，优先从 <code>free</code> 中寻找已经分配的内存，如果没有，再从 <code>pool</code> 中分配新的结点。</p><h2 id="_7-8-支持通配符的散列表" tabindex="-1"><a class="header-anchor" href="#_7-8-支持通配符的散列表"><span>7.8 支持通配符的散列表</span></a></h2><p>Hash 表的理论检索、插入复杂度为 O(1)。在 Nginx 中，各种 hash 表的 key 以 <strong>字符串</strong> 为主。Nginx 封装了 hash 表容器，以支持主机名称的前通配符和后通配符。</p><p>既然是 hash 表就一定会有碰撞，解决碰撞的方式有很多种。Nginx 采用 <em>开放寻址法</em>，如果发现冲突，则依次检查其后的每一个槽，直到找到一个空槽来存放这个元素。每一个槽的结构定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span> <span class="token comment">// 指向用户定义的数据</span></span>
<span class="line">    u_short len<span class="token punctuation">;</span> <span class="token comment">// 元素 key 长度</span></span>
<span class="line">    u_char name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元素 key 首地址</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_hash_elt_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，一个槽的实际大小并不等于上述结构体的大小，因为 key 的长度是可变的。其实际大小是在初始化 hash 表时决定的：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_hash_elt_t</span> <span class="token operator">*</span><span class="token operator">*</span>buckets<span class="token punctuation">;</span> <span class="token comment">// 指向第一个槽的首地址</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span> size<span class="token punctuation">;</span> <span class="token comment">// 槽的总数</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_hash_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其内存示意图如下：</p><img src="`+t+`" alt="ngx-hash-t" style="zoom:33%;"><p>Nginx 定义了计算 hash 值的函数指针，允许用户自行实现通过 key 计算出 hash 值的行为。传入的参数为 key 的首地址与长度，返回值为 <code>ngx_uint_t</code> 类型的 hash 值。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token class-name">ngx_uint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>ngx_hash_key_pt<span class="token punctuation">)</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Nginx 自身提供了两种基本的 hash 计算方法，假定了 key 是字符串：</p><ul><li><code>ngx_hash_key</code> - 使用 <a href="https://zhuanlan.zhihu.com/p/25855753" target="_blank" rel="noopener noreferrer"><em>BKDR</em></a> 算法将任意长度的字符串映射为整型</li><li><code>ngx_hash_key_lc</code> - 将字符串全部转换为小写，再使用 BKDR 算法</li></ul><h3 id="_7-8-1-支持通配符" tabindex="-1"><a class="header-anchor" href="#_7-8-1-支持通配符"><span>7.8.1 支持通配符</span></a></h3><p>Nginx 中，hash 表的 key 经常是 URI 域名，有的域名中包含前置或后置的通配符。Nginx 会将域名中去除通配符后的字符串保存在专门的前置或后置通配符的 hash 表中，并使用专门的方法检索前置或后置通配符。</p><ul><li>对 <code>www.test.*</code>，后置通配符 hash 表中存储的 key 为 <code>www.test.</code></li><li>对 <code>*.test.com</code>，前置通配符 hash 表中存储的 key 为 <code>com.test.</code></li></ul><p>Nginx 中对普通的 hash 表做了一层简单的封装，以支持前置或后置通配符：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_hash_t</span> hash<span class="token punctuation">;</span> <span class="token comment">// 基本 hash 表</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span> <span class="token comment">// 指向用户数据</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_hash_wildcard_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Nginx 对于主机域名通配符的支持规则相对应，Nginx 实现的通配符 hash 表的定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_hash_t</span> hash<span class="token punctuation">;</span> <span class="token comment">// 精确匹配主机名的 hash 表</span></span>
<span class="line">    <span class="token class-name">ngx_hash_wildcard_t</span> <span class="token operator">*</span>wc_head<span class="token punctuation">;</span> <span class="token comment">// 匹配前置通配符的 hash 表</span></span>
<span class="line">    <span class="token class-name">ngx_hash_wildcard_t</span> <span class="token operator">*</span>wc_tail<span class="token punctuation">;</span> <span class="token comment">// 匹配后置通配符的 hash 表</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_hash_combined_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，用了三个 hash 表来保存所有的主机名。在查询元素时，会依次按照从上到下的顺序查询 hash 表。因此，当一个 key 同时匹配三个 hash 表时，一定会返回精确匹配的 hash 表中的元素。三个 hash 表本身由动态数组实现。</p>`,76)]))}const r=n(c,[["render",i],["__file","Chapter 7 - Nginx 提供的高级数据结构.html.vue"]]),u=JSON.parse('{"path":"/understanding-nginx-notes/Part%202%20-%20%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%20HTTP%20%E6%A8%A1%E5%9D%97/Chapter%207%20-%20Nginx%20%E6%8F%90%E4%BE%9B%E7%9A%84%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"Chapter 7 - Nginx 提供的高级数据结构","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"7.1 整型的封装","slug":"_7-1-整型的封装","link":"#_7-1-整型的封装","children":[]},{"level":2,"title":"7.2 字符串的封装","slug":"_7-2-字符串的封装","link":"#_7-2-字符串的封装","children":[]},{"level":2,"title":"7.3 单向链表的封装","slug":"_7-3-单向链表的封装","link":"#_7-3-单向链表的封装","children":[]},{"level":2,"title":"7.4 双向链表","slug":"_7-4-双向链表","link":"#_7-4-双向链表","children":[]},{"level":2,"title":"7.5 动态数组","slug":"_7-5-动态数组","link":"#_7-5-动态数组","children":[]},{"level":2,"title":"7.6 红黑树","slug":"_7-6-红黑树","link":"#_7-6-红黑树","children":[]},{"level":2,"title":"7.7 基数树","slug":"_7-7-基数树","link":"#_7-7-基数树","children":[]},{"level":2,"title":"7.8 支持通配符的散列表","slug":"_7-8-支持通配符的散列表","link":"#_7-8-支持通配符的散列表","children":[{"level":3,"title":"7.8.1 支持通配符","slug":"_7-8-1-支持通配符","link":"#_7-8-1-支持通配符","children":[]}]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 2 - 如何编写 HTTP 模块/Chapter 7 - Nginx 提供的高级数据结构.md"}');export{r as comp,u as data};
