import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="postgresql-spinlock" tabindex="-1"><a class="header-anchor" href="#postgresql-spinlock"><span>PostgreSQL - Spinlock</span></a></h1><p>Created by: Mr Dk.</p><p>2023 / 10 / 04 15:44</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>Background</span></a></h2><p>在各类基础软件和编程语言中，<a href="https://en.wikipedia.org/wiki/Spinlock" target="_blank" rel="noopener noreferrer">自旋锁（Spinlock）</a>是一个常用的组件。自旋锁的基础语义是 <strong>忙等</strong>：当进程/线程在获取该锁时，如果发现锁正被占用，那么将会循环测试锁是否已经可用，直到成功获取锁，CPU 在这段时间内没有做任何有意义的工作；而不是让出 CPU，引发上下文切换，使 CPU 能够执行其它进程/线程。</p><p>从语义出发，自旋锁适用于等待获取锁的自旋开销低于进程调度和上下文切换的场景中。基于自旋锁的使用场景，一方面需要软件设计者谨慎评估在自己设计的软件中对这把锁的争抢程度和持有时间是否乐观，理论上不应让等待自旋锁可用的空转开销超过进程调度和上下文切换的开销，锁持有时间也不宜过久；另一方面，需要基于 CPU 架构选择最为高效的自旋锁实现方式，这通常需要使用到由硬件支持的机器指令。</p><p>PostgreSQL 中也有自旋锁基础设施，供内核代码的各模块使用。自旋锁在实现上是否合理高效直接影响到 PostgreSQL 的整体性能。PostgreSQL 的自旋锁代码分为 CPU 架构无关（位于 <code>spin.c</code> / <code>spin.h</code>）和 CPU 架构相关（位于 <code>s_lock.c</code> / <code>s_lock.h</code>）两部分。与 CPU 架构无关的代码是较上层的抽象，保证自旋锁代码的跨平台统一性和可移植性；与 CPU 架构相关的代码则是具体 ISA 的内联汇编指令，保证自旋锁的高效性。</p><p>本文基于 PostgreSQL <code>master</code> 分支（PostgreSQL 17 under devel）当前的 <code>HEAD</code> 版本分析自旋锁的实现，特别是在 <a href="https://en.wikipedia.org/wiki/X86-64" target="_blank" rel="noopener noreferrer">x86_64</a> 和 <a href="https://en.wikipedia.org/wiki/AArch64" target="_blank" rel="noopener noreferrer">AArch64</a> 两种常见服务器 CPU 架构上的实现：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">commit b1a8dc846da4d96d903dcb5733f68a1e02d82a23</span>
<span class="line">Author: Andres Freund &lt;andres@anarazel.de&gt;</span>
<span class="line">Date:   Sat Sep 30 12:10:15 2023 -0700</span>
<span class="line"></span>
<span class="line">    meson: macos: Correct -exported_symbols_list syntax for Sonoma compat</span>
<span class="line"></span>
<span class="line">    -exported_symbols_list=... works on Ventura and earlier, but not on</span>
<span class="line">    Sonoma. The easiest way to fix it is to -Wl,-exported_symbols_list,@0@ which</span>
<span class="line">    actually seems more appropriate anyway, it&#39;s obviously a linker argument. It</span>
<span class="line">    is easier to use the -Wl,, syntax than passing multiple arguments, due to the</span>
<span class="line">    way the export_fmt is used (a single string that&#39;s formatted), but if it turns</span>
<span class="line">    out to be necessary, we can go for multiple arguments as well.</span>
<span class="line"></span>
<span class="line">    Reviewed-by: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;</span>
<span class="line">    Discussion: https://postgr.es/m/20230928222248.jw6s7yktpfsfczha@alap3.anarazel.de</span>
<span class="line">    Backpatch: 16-, where the meson based buildsystem was added</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api-level" tabindex="-1"><a class="header-anchor" href="#api-level"><span>API Level</span></a></h2><h3 id="hardware-independent-api" tabindex="-1"><a class="header-anchor" href="#hardware-independent-api"><span>Hardware Independent API</span></a></h3><p>PostgreSQL 提供了以下自旋锁 API 供内核其它模块使用。这些 API 是 CPU 架构无关的，其语义分别为：</p><ul><li><code>SpinLockInit</code>：初始化自旋锁到未锁定的状态</li><li><code>SpinLockAcquire</code>：获取自旋锁，如果发生锁冲突则等待；如果在一定时间内（约一分钟）还是无法获取锁，那么使程序 <code>abort()</code></li><li><code>SpinLockRelease</code>：释放之前已经获取到的自旋锁</li><li><code>SpinLockFree</code>：测试当前锁状态是否可用，不改变锁的状态</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">SpinLockInit</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">SpinLockAcquire</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">SpinLockRelease</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bool <span class="token function">SpinLockFree</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些 API 以宏定义的形式实现：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SpinLockInit</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>  <span class="token function">S_INIT_LOCK</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SpinLockAcquire</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token function">S_LOCK</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SpinLockRelease</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token function">S_UNLOCK</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SpinLockFree</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>  <span class="token function">S_LOCK_FREE</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hardware-dependent-api" tabindex="-1"><a class="header-anchor" href="#hardware-dependent-api"><span>Hardware Dependent API</span></a></h3><p>上述宏定义由更底层与 CPU 架构相关的 API 实现。每种 CPU 架构都需要分别实现以下五个 API，前四个 API 的语义如前所述一致，<code>SPIN_DELAY</code> 的语义为：在自旋锁等待循环中的延时操作。这意味着 PostgreSQL 的自旋锁并不会一直傻了吧唧地自旋。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">S_INIT_LOCK</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">S_LOCK</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">S_UNLOCK</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bool <span class="token function">S_LOCK_FREE</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">SPIN_DELAY</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些 API 本身需要确保编译器不会把获取锁、访问临界区、释放锁三个步骤进行指令重排序。</p><p>函数参数中的 <code>slock_t</code> 数据类型也需要根据具体的 CPU 架构而被分别重定义，这意味着在每种 CPU 架构上自旋锁的数据类型可能是不一样的。</p><h3 id="test-and-set-api" tabindex="-1"><a class="header-anchor" href="#test-and-set-api"><span>Test And Set API</span></a></h3><p>在上述五个 API 中，<code>S_LOCK</code> 是执行频率最高、执行时间最长的，因此最需要通过硬件来进行高效实现。绝大部分 CPU 架构都提供了 TAS（Test And Set）硬件指令，所以 PostgreSQL 又抽象出了一层 API 用于实现 <code>S_LOCK</code>，其语义分别为：</p><ul><li><code>TAS</code>：原子地获取锁，立刻返回；返回 0 表示成功，返回非 0 表示失败</li><li><code>TAS_SPIN</code>：原子地获取锁，默认情况下与 <code>TAS</code> 相同，但被用于等待之前已经发生争用的锁</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">TAS</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">TAS_SPIN</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>S_LOCK</code> 具体如何使用 <code>TAS</code> 和 <code>TAS_SPIN</code> 因具体的 CPU 架构而异。在部分 CPU 架构上，先轮询锁的可用性，仅当锁空闲时再重试加锁，会有更好的性能。</p><h2 id="default-implementation" tabindex="-1"><a class="header-anchor" href="#default-implementation"><span>Default Implementation</span></a></h2><p>对于上述七个与 CPU 架构相关的 API，PostgreSQL 分别提供了一种默认实现。如果某种 CPU 架构在默认实现中就可以正确且高效地运转，那么就不需再做任何适配；否则，可以为某种特定的 CPU 架构重写相应的 API，覆盖默认的实现。</p><h3 id="lock-initialization" tabindex="-1"><a class="header-anchor" href="#lock-initialization"><span>Lock Initialization</span></a></h3><p>初始化锁的默认实现复用了释放锁操作的默认实现，因为两者都是将自旋锁恢复到默认的未锁定状态：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>S_INIT_LOCK<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_INIT_LOCK</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>   <span class="token function">S_UNLOCK</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* S_INIT_LOCK */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lock-acquire" tabindex="-1"><a class="header-anchor" href="#lock-acquire"><span>Lock Acquire</span></a></h3><p>加锁操作 <code>S_LOCK</code> 的默认实现是通过 <code>TAS</code> 宏判断锁的可用性，如果可用，则调用与 CPU 架构无关的 <code>s_lock()</code> 函数试图加锁，否则直接返回失败：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * Default Definitions - override these above as needed.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>S_LOCK<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_LOCK</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">(</span><span class="token function">TAS</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">s_lock</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* S_LOCK */</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Platform-independent out-of-line support routines</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">s_lock</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>s_lock()</code> 会循环使用 <code>TAS_SPIN</code> 宏试图获取锁，如果锁获取失败，则会进行延时等待：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * s_lock(lock) - platform-independent portion of waiting for a spinlock.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">int</span></span>
<span class="line"><span class="token function">s_lock</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>func<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    SpinDelayStatus delayStatus<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">init_spin_delay</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delayStatus<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">TAS_SPIN</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">perform_spin_delay</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delayStatus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">finish_spin_delay</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delayStatus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> delayStatus<span class="token punctuation">.</span>delays<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的延时等待策略是什么呢？首先通过 <code>SPIN_DELAY</code> 宏进行硬件层面的延时，然后统计目前已经自旋的次数：如果自旋次数达到一定阈值时，就需要从 1ms 开始调用 <code>pg_usleep</code> 使进程开始睡眠，并逐渐随机延长睡眠时间；当睡眠时间超过 1s 时，又重新回到 1ms；当自旋次数超过更大的阈值时，直接 PANIC 退出。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MIN_SPINS_PER_DELAY</span> <span class="token expression"><span class="token number">10</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SPINS_PER_DELAY</span> <span class="token expression"><span class="token number">1000</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_DELAYS</span>          <span class="token expression"><span class="token number">1000</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MIN_DELAY_USEC</span>      <span class="token expression"><span class="token number">1000L</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_DELAY_USEC</span>      <span class="token expression"><span class="token number">1000000L</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Wait while spinning on a contended spinlock.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">perform_spin_delay</span><span class="token punctuation">(</span>SpinDelayStatus <span class="token operator">*</span>status<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* CPU-specific delay each time through the loop */</span></span>
<span class="line">    <span class="token function">SPIN_DELAY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Block the process every spins_per_delay tries */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token punctuation">(</span>status<span class="token operator">-&gt;</span>spins<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> spins_per_delay<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token punctuation">(</span>status<span class="token operator">-&gt;</span>delays<span class="token punctuation">)</span> <span class="token operator">&gt;</span> NUM_DELAYS<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">s_lock_stuck</span><span class="token punctuation">(</span>status<span class="token operator">-&gt;</span>file<span class="token punctuation">,</span> status<span class="token operator">-&gt;</span>line<span class="token punctuation">,</span> status<span class="token operator">-&gt;</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token operator">-&gt;</span>cur_delay <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">/* first time to delay? */</span></span>
<span class="line">            status<span class="token operator">-&gt;</span>cur_delay <span class="token operator">=</span> MIN_DELAY_USEC<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">         * Once we start sleeping, the overhead of reporting a wait event is</span>
<span class="line">         * justified. Actively spinning easily stands out in profilers, but</span>
<span class="line">         * sleeping with an exponential backoff is harder to spot...</span>
<span class="line">         *</span>
<span class="line">         * We might want to report something more granular at some point, but</span>
<span class="line">         * this is better than nothing.</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token function">pgstat_report_wait_start</span><span class="token punctuation">(</span>WAIT_EVENT_SPIN_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">pg_usleep</span><span class="token punctuation">(</span>status<span class="token operator">-&gt;</span>cur_delay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">pgstat_report_wait_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>S_LOCK_TEST<span class="token punctuation">)</span></span></span></span>
<span class="line">        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* increase delay by a random fraction between 1X and 2X */</span></span>
<span class="line">        status<span class="token operator">-&gt;</span>cur_delay <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>status<span class="token operator">-&gt;</span>cur_delay <span class="token operator">*</span></span>
<span class="line">                                    <span class="token function">pg_prng_double</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pg_global_prng_state<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/* wrap back to minimum delay when max is exceeded */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token operator">-&gt;</span>cur_delay <span class="token operator">&gt;</span> MAX_DELAY_USEC<span class="token punctuation">)</span></span>
<span class="line">            status<span class="token operator">-&gt;</span>cur_delay <span class="token operator">=</span> MIN_DELAY_USEC<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        status<span class="token operator">-&gt;</span>spins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="check-lock-free" tabindex="-1"><a class="header-anchor" href="#check-lock-free"><span>Check Lock Free</span></a></h3><p>判断锁可用性操作的默认实现是直接判断锁变量是否为 <code>0</code>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>S_LOCK_FREE<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_LOCK_FREE</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* S_LOCK_FREE */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lock-release" tabindex="-1"><a class="header-anchor" href="#lock-release"><span>Lock Release</span></a></h3><p>释放锁操作的默认实现是直接把锁变量清零：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>S_UNLOCK<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Our default implementation of S_UNLOCK is essentially *(lock) = 0.  This</span>
<span class="line"> * is unsafe if the platform can reorder a memory access (either load or</span>
<span class="line"> * store) after a following store; platforms where this is possible must</span>
<span class="line"> * define their own S_UNLOCK.  But CPU reordering is not the only concern:</span>
<span class="line"> * if we simply defined S_UNLOCK() as an inline macro, the compiler might</span>
<span class="line"> * reorder instructions from inside the critical section to occur after the</span>
<span class="line"> * lock release.  Since the compiler probably can&#39;t know what the external</span>
<span class="line"> * function s_unlock is doing, putting the same logic there should be adequate.</span>
<span class="line"> * A sufficiently-smart globally optimizing compiler could break that</span>
<span class="line"> * assumption, though, and the cost of a function call for every spinlock</span>
<span class="line"> * release may hurt performance significantly, so we use this implementation</span>
<span class="line"> * only for platforms where we don&#39;t know of a suitable intrinsic.  For the</span>
<span class="line"> * most part, those are relatively obscure platform/compiler combinations to</span>
<span class="line"> * which the PostgreSQL project does not have access.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_DEFAULT_S_UNLOCK</span></span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">s_unlock</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_UNLOCK</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>      <span class="token function">s_unlock</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* S_UNLOCK */</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">USE_DEFAULT_S_UNLOCK</span></span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">s_unlock</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TAS_ACTIVE_WORD</span></span></span>
<span class="line">    <span class="token comment">/* HP&#39;s PA-RISC */</span></span>
<span class="line">    <span class="token operator">*</span><span class="token function">TAS_ACTIVE_WORD</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    <span class="token operator">*</span>lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spin-delay" tabindex="-1"><a class="header-anchor" href="#spin-delay"><span>Spin Delay</span></a></h3><p>CPU 层面延时自旋的默认实现为空：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>SPIN_DELAY<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SPIN_DELAY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* SPIN_DELAY */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="test-and-set" tabindex="-1"><a class="header-anchor" href="#test-and-set"><span>Test And Set</span></a></h3><p>对支持 TAS 硬件指令的 CPU 架构，<code>TAS</code> 默认将会使用相应的硬件内联汇编指令实现的 <code>tas()</code> 函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>TAS<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span>  <span class="token function">tas</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* in port/.../tas.s, or</span>
<span class="line">                                                 * s_lock.c */</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TAS</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>       <span class="token function">tas</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* TAS */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TAS_SPIN</code> 的默认实现与 <code>TAS</code> 相同：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>TAS_SPIN<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TAS_SPIN</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>  <span class="token function">TAS</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* TAS_SPIN */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implementations" tabindex="-1"><a class="header-anchor" href="#implementations"><span>Implementations</span></a></h2><h3 id="semaphores" tabindex="-1"><a class="header-anchor" href="#semaphores"><span>Semaphores</span></a></h3><p>对于不支持任何 TAS 指令的 CPU 架构，PostgreSQL 提供了使用信号量模拟的纯软件实现。这是一个纯后备的实现，因为软件实现的性能是极差的，而且现实生活中几乎找不到不支持 TAS 指令的 CPU。但分析这种后备实现有助于在不看汇编的前提下理解上述机制。信号量实现版本的宏定义如下，其中：</p><ul><li><code>slock_t</code> 类型被定义为 <code>int</code></li><li><code>S_INIT_LOCK</code> 被重写为信号量初始化函数 <code>s_init_lock_sema</code></li><li><code>TAS</code> 被重写为试图获取信号量的函数 <code>tas_sema</code></li><li><code>S_UNLOCK</code> 被重写为释放信号量的函数 <code>s_unlock_sema</code></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * Fake spinlock implementation using semaphores --- slow and prone</span>
<span class="line"> * to fall foul of kernel limits on number of semaphores, so don&#39;t use this</span>
<span class="line"> * unless you must!  The subroutines appear in spin.c.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token class-name">slock_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extern</span> bool <span class="token function">s_lock_free_sema</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">s_unlock_sema</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">s_init_lock_sema</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> bool nested<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span>  <span class="token function">tas_sema</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_LOCK_FREE</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>   <span class="token function">s_lock_free_sema</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_UNLOCK</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>   <span class="token function">s_unlock_sema</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_INIT_LOCK</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>   <span class="token function">s_init_lock_sema</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> false<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TAS</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>   <span class="token function">tas_sema</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前文所述的默认实现，由于信号量不存在硬件级别的延时操作，所以 <code>SPIN_DELAY</code> 宏展开以后将会为空；<code>TAS_SPIN</code> 与 <code>TAS</code> 完全相同；<code>S_LOCK</code> 被默认展开为：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>S_LOCK<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_LOCK</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">(</span><span class="token function">TAS</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">s_lock</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* S_LOCK */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="x86-64" tabindex="-1"><a class="header-anchor" href="#x86-64"><span>x86_64</span></a></h3><p>在 x86_64 架构下，<code>slock_t</code> 被定义为 <code>unsigned char</code> 单字节变量，<code>TAS</code> 操作可以通过硬件进行更加高效的实现：通过 <code>LOCK</code> 指令锁定北桥信号（现在似乎已经是锁定缓存了），再通过 <code>XCHGB</code> 指令原子地将 <code>1</code> 试图设置到这个单字节锁变量中。</p><p><code>TAS_SPIN</code> 被重写为首先对锁变量进行判断，仅当锁变量未被占用时才会试图通过 <code>TAS</code> 持有锁。</p><p><code>SPIN_DELAY</code> 被重写为 <code>rep; nop</code>，这两条指令与 <code>PAUSE</code> 指令等价，但可以用于更多不支持 <code>PAUSE</code> 指令的 CPU。根据 Intel 的指令集规范，建议在自旋等待循环中加入延时指令，作为对处理器的提示以提升性能：</p><blockquote><p>Improves the performance of spin-wait loops. When executing a “spin-wait loop,” a Pentium 4 or Intel Xeon processor suffers a severe performance penalty when exiting the loop because it detects a possible memory order violation. The PAUSE instruction provides a hint to the processor that the code sequence is a spin-wait loop. The processor uses this hint to avoid the memory order violation in most situations, which greatly improves processor performance. For this reason, it is recommended that a PAUSE instruction be placed in all spin-wait loops.</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__x86_64__       </span><span class="token comment">/* AMD Opteron, Intel EM64T */</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAS_TEST_AND_SET</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token class-name">slock_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TAS</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token function">tas</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * On Intel EM64T, it&#39;s a win to use a non-locking test before the xchg proper,</span>
<span class="line"> * but only when spinning.</span>
<span class="line"> *</span>
<span class="line"> * See also Implementing Scalable Atomic Locks for Multi-Core Intel(tm) EM64T</span>
<span class="line"> * and IA32, by Michael Chynoweth and Mary R. Lee. As of this writing, it is</span>
<span class="line"> * available at:</span>
<span class="line"> * http://software.intel.com/en-us/articles/implementing-scalable-atomic-locks-for-multi-core-intel-em64t-and-ia32-architectures</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TAS_SPIN</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">TAS</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> __inline__ <span class="token keyword">int</span></span>
<span class="line"><span class="token function">tas</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">slock_t</span>     _res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;   lock            \\n&quot;</span></span>
<span class="line">        <span class="token string">&quot;   xchgb   %0,%1   \\n&quot;</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;+q&quot;</span><span class="token punctuation">(</span>_res<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;+m&quot;</span><span class="token punctuation">(</span><span class="token operator">*</span>lock<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token comment">/* no inputs */</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;memory&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> _res<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SPIN_DELAY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">spin_delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> __inline__ <span class="token keyword">void</span></span>
<span class="line"><span class="token function">spin_delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Adding a PAUSE in the spin delay loop is demonstrably a no-op on</span>
<span class="line">     * Opteron, but it may be of some use on EM64T, so we keep it.</span>
<span class="line">     */</span></span>
<span class="line">    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot; rep; nop          \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* __x86_64__ */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aarch64" tabindex="-1"><a class="header-anchor" href="#aarch64"><span>AArch64</span></a></h3><p>在 ARM 架构下，<code>slock_t</code> 数据类型被定义为 <code>int</code>。<code>TAS</code> 宏被重写为使用 <a href="https://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Atomic-Builtins.html" target="_blank" rel="noopener noreferrer">GNU 内置函数</a> <code>__sync_lock_test_and_set</code> 来获取锁；相对应地，释放锁的 <code>S_UNLOCK</code> 宏也需要被重写为相应的 <code>__sync_lock_release</code>。根据 ARM 官方给出的编译器迁移和兼容性指南，在内联汇编中使用 <code>LDREX</code> / <code>STREX</code>（Load/Store Exclusive）来实现 TAS 已经过时，应当使用 GNU 内置提供的 <code>__sync*</code> 函数族。</p><p>另外，来自 AWS 团队的工程师发现在多核 ARM64 处理器（显然他用的应该是 <a href="https://en.wikipedia.org/wiki/AWS_Graviton" target="_blank" rel="noopener noreferrer">Graviton2</a>）自旋等待时使用 <code>ISB</code> 指令作为延时在高并发场景中有性能提升，因此从 <a href="https://www.postgresql.org/message-id/flat/78338F29-9D7F-4DC8-BD71-E9674CE71425%40amazon.com" target="_blank" rel="noopener noreferrer">PostgreSQL 15</a> 开始，AArch64 架构下的 <code>SPIN_DELAY</code> 被重写为使用 <code>ISB</code> 内联汇编。虽然 ARM 架构下也提供了功能类似的 <code>YIELD</code> 指令，但 <code>ISB</code> 所占用的时间及节省的功耗使其成为对标 x86_64 架构下 <code>PAUSE</code> 指令的最佳选择：</p><blockquote><p>On arm64 we have seen on several databases that ISB (instruction synchronization barrier) is better to use than yield in a spin loop. The yield instruction is a nop. The isb instruction puts the processor to sleep for some short time. isb is a good equivalent to the pause instruction on x86.</p><p>ISB SY doesn&#39;t stall for long, just saves a bit of power vs. spamming loads in a tight loop.</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * On ARM and ARM64, we use __sync_lock_test_and_set(int *, int) if available.</span>
<span class="line"> *</span>
<span class="line"> * We use the int-width variant of the builtin because it works on more chips</span>
<span class="line"> * than other widths.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__arm__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__arm<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__aarch64__<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HAVE_GCC__SYNC_INT32_TAS</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAS_TEST_AND_SET</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TAS</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token function">tas</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token class-name">slock_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> __inline__ <span class="token keyword">int</span></span>
<span class="line"><span class="token function">tas</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token class-name">slock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">__sync_lock_test_and_set</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S_UNLOCK</span><span class="token expression"><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token function">__sync_lock_release</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Using an ISB instruction to delay in spinlock loops appears beneficial on</span>
<span class="line"> * high-core-count ARM64 processors.  It seems mostly a wash for smaller gear,</span>
<span class="line"> * and ISB doesn&#39;t exist at all on pre-v7 ARM chips.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__aarch64__<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SPIN_DELAY</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">spin_delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> __inline__ <span class="token keyword">void</span></span>
<span class="line"><span class="token function">spin_delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot; isb;              \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* __aarch64__ */</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* HAVE_GCC__SYNC_INT32_TAS */</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>   <span class="token comment">/* __arm__ || __arm || __aarch64__ */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://stackoverflow.com/questions/7086220/what-does-rep-nop-mean-in-x86-assembly-is-it-the-same-as-the-pause-instru" target="_blank" rel="noopener noreferrer">stackoverflow - What does &quot;rep; nop;&quot; mean in x86 assembly? Is it the same as the &quot;pause&quot; instruction?</a></p><p><a href="https://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Atomic-Builtins.html" target="_blank" rel="noopener noreferrer">GCC - Built-in functions for atomic memory access</a></p><p><a href="https://www.postgresql.org/message-id/flat/78338F29-9D7F-4DC8-BD71-E9674CE71425%40amazon.com" target="_blank" rel="noopener noreferrer">PostgreSQL - Add spin_delay() implementation for Arm in s_lock.h</a></p><p><a href="https://stackoverflow.com/questions/70810121/why-does-hintspin-loop-use-isb-on-aarch64" target="_blank" rel="noopener noreferrer">stackoverflow - Why does hint::spin_loop use ISB on aarch64?</a></p><p><a href="https://kunpengcompute.github.io/2020/09/20/guan-yu-yuan-zi-cao-zuo-he-ruo-nei-cun-xu/" target="_blank" rel="noopener noreferrer">关于原子操作和弱内存序</a></p>`,78)]))}const i=n(t,[["render",c],["__file","PostgreSQL Spinlock.html.vue"]]),r=JSON.parse('{"path":"/notes/PostgreSQL/PostgreSQL%20Spinlock.html","title":"PostgreSQL - Spinlock","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Background","slug":"background","link":"#background","children":[]},{"level":2,"title":"API Level","slug":"api-level","link":"#api-level","children":[{"level":3,"title":"Hardware Independent API","slug":"hardware-independent-api","link":"#hardware-independent-api","children":[]},{"level":3,"title":"Hardware Dependent API","slug":"hardware-dependent-api","link":"#hardware-dependent-api","children":[]},{"level":3,"title":"Test And Set API","slug":"test-and-set-api","link":"#test-and-set-api","children":[]}]},{"level":2,"title":"Default Implementation","slug":"default-implementation","link":"#default-implementation","children":[{"level":3,"title":"Lock Initialization","slug":"lock-initialization","link":"#lock-initialization","children":[]},{"level":3,"title":"Lock Acquire","slug":"lock-acquire","link":"#lock-acquire","children":[]},{"level":3,"title":"Check Lock Free","slug":"check-lock-free","link":"#check-lock-free","children":[]},{"level":3,"title":"Lock Release","slug":"lock-release","link":"#lock-release","children":[]},{"level":3,"title":"Spin Delay","slug":"spin-delay","link":"#spin-delay","children":[]},{"level":3,"title":"Test And Set","slug":"test-and-set","link":"#test-and-set","children":[]}]},{"level":2,"title":"Implementations","slug":"implementations","link":"#implementations","children":[{"level":3,"title":"Semaphores","slug":"semaphores","link":"#semaphores","children":[]},{"level":3,"title":"x86_64","slug":"x86-64","link":"#x86-64","children":[]},{"level":3,"title":"AArch64","slug":"aarch64","link":"#aarch64","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/PostgreSQL/PostgreSQL Spinlock.md"}');export{i as comp,r as data};
