import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-5-2-rb-tree" tabindex="-1"><a class="header-anchor" href="#chapter-5-2-rb-tree"><span>Chapter 5.2 - RB-Tree</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 06 16:32</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="rb-tree-node" tabindex="-1"><a class="header-anchor" href="#rb-tree-node"><span>RB-Tree Node</span></a></h2><p>结点定义如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Rb_tree_node_base</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Rb_tree_Color_type _Color_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Rb_tree_node_base<span class="token operator">*</span> _Base_ptr<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _Color_type _M_color<span class="token punctuation">;</span>  <span class="token comment">// 结点颜色</span></span>
<span class="line">  _Base_ptr _M_parent<span class="token punctuation">;</span>   <span class="token comment">// 父结点</span></span>
<span class="line">  _Base_ptr _M_left<span class="token punctuation">;</span>     <span class="token comment">// 左结点</span></span>
<span class="line">  _Base_ptr _M_right<span class="token punctuation">;</span>    <span class="token comment">// 右结点</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> _Base_ptr <span class="token function">_S_minimum</span><span class="token punctuation">(</span>_Base_ptr __x<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__x<span class="token operator">-&gt;</span>_M_left <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> __x <span class="token operator">=</span> __x<span class="token operator">-&gt;</span>_M_left<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> _Base_ptr <span class="token function">_S_maximum</span><span class="token punctuation">(</span>_Base_ptr __x<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__x<span class="token operator">-&gt;</span>_M_right <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> __x <span class="token operator">=</span> __x<span class="token operator">-&gt;</span>_M_right<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Value</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Rb_tree_node</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Rb_tree_node_base</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Rb_tree_node<span class="token operator">&lt;</span>_Value<span class="token operator">&gt;</span><span class="token operator">*</span> _Link_type<span class="token punctuation">;</span></span>
<span class="line">  _Value _M_value_field<span class="token punctuation">;</span> <span class="token comment">// 红黑树结点</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用红黑树时，需要提供一个 <code>KeyOfValue</code> 仿函数，使得可以从 value 中获取到 key。对于 key 和 value 是同一个对象的情况 (比如说 set)，这样的仿函数被定义为：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Identity</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// key 的值就是 value 的值</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h2><p>红黑树的两个重要的插入函数：</p><ul><li><code>insert_unique()</code> - 不允许插入重复的结点，用于支持 set / map，返回值为 <code>pair&lt;iterator, bool&gt;</code>，<code>iterator</code> 指向插入位置，<code>bool</code> 表示是否插入成功</li><li><code>insert_equal()</code> - 允许插入重复的结点，用于支持 multiset / multimap，返回值为 <code>iterator</code>，指向插入位置</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Value</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_KeyOfValue</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line">pair<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Value<span class="token punctuation">,</span>_KeyOfValue<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span></span>
<span class="line">     <span class="token keyword">bool</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Value<span class="token punctuation">,</span>_KeyOfValue<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token double-colon punctuation">::</span><span class="token function">insert_unique</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Value<span class="token operator">&amp;</span> __v<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Link_type __y <span class="token operator">=</span> _M_header<span class="token punctuation">;</span></span>
<span class="line">  _Link_type __x <span class="token operator">=</span> <span class="token function">_M_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根结点</span></span>
<span class="line">  <span class="token keyword">bool</span> __comp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    __y <span class="token operator">=</span> __x<span class="token punctuation">;</span></span>
<span class="line">    __comp <span class="token operator">=</span> <span class="token function">_M_key_compare</span><span class="token punctuation">(</span><span class="token function">_KeyOfValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_S_key</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 待插入的 key 与当前结点比较 (通过 value 计算 key)</span></span>
<span class="line">    __x <span class="token operator">=</span> __comp <span class="token operator">?</span> <span class="token function">_S_left</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_S_right</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入左子树或右子树</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  iterator __j <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span>__y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入点的父结点</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__comp<span class="token punctuation">)</span> <span class="token comment">// 待插入 key &lt; 插入点 key，插入在左侧</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__j <span class="token operator">==</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 插入点父结点是最左结点</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">_M_insert</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __y<span class="token punctuation">,</span> __v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (成功) 插入</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      <span class="token operator">--</span>__j<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_M_key_compare</span><span class="token punctuation">(</span><span class="token function">_S_key</span><span class="token punctuation">(</span>__j<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_KeyOfValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 待插入 key 与已有 key 不重复</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">_M_insert</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __y<span class="token punctuation">,</span> __v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (成功) 插入</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__j<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key 重复，插入失败</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Value</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_KeyOfValue</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">typename</span> <span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Value<span class="token punctuation">,</span>_KeyOfValue<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator</span>
<span class="line"><span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Value<span class="token punctuation">,</span>_KeyOfValue<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token double-colon punctuation">::</span><span class="token function">insert_equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Value<span class="token operator">&amp;</span> __v<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Link_type __y <span class="token operator">=</span> _M_header<span class="token punctuation">;</span></span>
<span class="line">  _Link_type __x <span class="token operator">=</span> <span class="token function">_M_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根结点</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    __y <span class="token operator">=</span> __x<span class="token punctuation">;</span></span>
<span class="line">    __x <span class="token operator">=</span> <span class="token function">_M_key_compare</span><span class="token punctuation">(</span><span class="token function">_KeyOfValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_S_key</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span></span>
<span class="line">            <span class="token function">_S_left</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_S_right</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据 value 计算 key，进入左子树或右子树</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_M_insert</span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> __y<span class="token punctuation">,</span> __v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入 (肯定成功，除非结点内存分配失败)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find" tabindex="-1"><a class="header-anchor" href="#find"><span>Find</span></a></h2><p>从根结点开始搜寻是否存在某个特定的 key：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Value</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_KeyOfValue</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">typename</span> <span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Value<span class="token punctuation">,</span>_KeyOfValue<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator</span>
<span class="line"><span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Value<span class="token punctuation">,</span>_KeyOfValue<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Key<span class="token operator">&amp;</span> __k<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Link_type __y <span class="token operator">=</span> _M_header<span class="token punctuation">;</span> <span class="token comment">/* Last node which is not less than __k. */</span></span>
<span class="line">  _Link_type __x <span class="token operator">=</span> <span class="token function">_M_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Current node. */</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">_M_key_compare</span><span class="token punctuation">(</span><span class="token function">_S_key</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">,</span> __k<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      __y <span class="token operator">=</span> __x<span class="token punctuation">,</span> __x <span class="token operator">=</span> <span class="token function">_S_left</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// key 小于当前结点 key，进入左子树</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      __x <span class="token operator">=</span> <span class="token function">_S_right</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// key 大于当前结点 key，进入右子树</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  const_iterator __j <span class="token operator">=</span> <span class="token function">const_iterator</span><span class="token punctuation">(</span>__y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 最终查找位置</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>__j <span class="token operator">==</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">_M_key_compare</span><span class="token punctuation">(</span>__k<span class="token punctuation">,</span> <span class="token function">_S_key</span><span class="token punctuation">(</span>__j<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token comment">// 没找到</span></span>
<span class="line">    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> __j<span class="token punctuation">;</span> <span class="token comment">// 找到了</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const i=s(t,[["render",o],["__file","Chapter 5.2 - RB-Tree.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%205%20-%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%205.2%20-%20RB-Tree.html","title":"Chapter 5.2 - RB-Tree","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"RB-Tree Node","slug":"rb-tree-node","link":"#rb-tree-node","children":[]},{"level":2,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":2,"title":"Find","slug":"find","link":"#find","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 5 - 关联式容器/Chapter 5.2 - RB-Tree.md"}');export{i as comp,u as data};
