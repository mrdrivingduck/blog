import{_ as n,c as a,a as e,o as c}from"./app-7eKjwDat.js";const p={};function l(o,s){return c(),a("div",null,s[0]||(s[0]=[e(`<h1 id="linux-execve" tabindex="-1"><a class="header-anchor" href="#linux-execve"><span>Linux - Execve</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 08 / 21 15:37</p><p>Nanjing, Jiangsu, China</p><hr><p>Linux 中的 <code>execve()</code> 是一个系统调用，用于产生一个新进程，通常需要与 <code>fork()</code> 一起使用。进程通过调用 <code>fork()</code> 将当前进程完全复制一份 (只有 pid 不同)，然后再调用 <code>execve()</code> 将新进程的内存映像全部替换为想要执行的程序。</p><p>在大三学习 <em>操作系统</em> 课程时自行实现过一个 <a href="https://github.com/mrdrivingduck/dksh" target="_blank" rel="noopener noreferrer">shell</a>，但对于其中有一些细节还是没有太明白。</p><h2 id="关于-cd-和-pwd" tabindex="-1"><a class="header-anchor" href="#关于-cd-和-pwd"><span>关于 cd 和 pwd</span></a></h2><p>Shell 的整体设计思想很 straight-forward：使用一个进程作为 shell 主进程，当接收到命令后，从主进程 <code>fork()</code> 出一个子进程，在子进程中调用 <code>execve()</code> 执行相应的程序。子进程结束后，回到主进程，继续接收下一条命令。在子进程调用 <code>execve()</code> 之前，需要使用 <code>pipe()</code>、<code>dup2()</code> 等系统调用处理好管道、重定向等问题。</p><p>但是 <code>cd</code> 命令就很好玩。如果通过上述流程执行 <code>cd</code>，会发现并没有效果。原因其实也很简单，每个进程在其 PCB 中记录了进程的当前工作目录 (pwd)。在阅读 Linux 内核早期版本源代码时，会看到有一个 <code>pwd</code> 属性存在于 <code>task_struct</code> 结构体中。我们希望修改的是 shell 主进程的 <code>pwd</code>，而通过上述机制启动 <code>/bin/cd</code>，不管这个程序做了什么，都是在子进程中，与主进程一点关系都没有。所以只能直接在主进程中使用 <code>chdir()</code> 系统调用完成这个功能。</p><p>真正的 shell 也证实了这一点：<code>cd</code> 由 shell 直接内部支持：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ where cd</span>
<span class="line">cd: shell built-in command</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>pwd</code> 命令是获取当前进程 PCB 中的 <code>pwd</code>。虽然说有一个 <code>/bin/pwd</code> 通过 <code>fork()</code> + <code>execve()</code> 启动也能得到一个正确的结果，但是理论上来说，直接从主进程的 PCB 中得到 <code>pwd</code> 不就好了？事实上 shell 也对 <code>pwd</code> 做了内置的支持，就是这么干的，因为这样显然更快：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ where pwd</span>
<span class="line">pwd: shell built-in command</span>
<span class="line">/bin/pwd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于环境变量" tabindex="-1"><a class="header-anchor" href="#关于环境变量"><span>关于环境变量</span></a></h2><p>在自行实现 shell 时，通常会调用封装了 <code>execve()</code> 的 POSIX C 库：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>environ<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">execl</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">                <span class="token comment">/* (char  *) NULL */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">                <span class="token comment">/* (char  *) NULL */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">execle</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">                <span class="token comment">/*, (char *) NULL, char * const envp[] */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">execv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">execvpe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们之间有何区别呢？首先，可以确定的是，<code>execve()</code> 这个系统调用的参数。除了需要调用的程序所在路径以外，还有调用程序的 <strong>参数</strong> 和 <strong>环境变量</strong>。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>execl()</code>、<code>execlp()</code> 和 <code>execle()</code> 中的 <code>char *arg</code> 是未限定长度的可变参数，最终以 <code>NULL</code> 结尾。显然，这些参数最终会被处理为 <code>argv[]</code> 并传递给内核。而带有 <code>envp[]</code> 数组的函数则提供了环境变量信息。</p><p><code>execve()</code> 系统调用进入内核后，内核显然需要根据第一个参数 <code>filename</code> 打开这个文件。内核支持使用 <strong>绝对路径</strong> 或 <strong>相对路径</strong> 打开文件。而对于文件名中没有 <code>/</code> 的路径，内核显然是打不开的，<code>execve()</code> 就会失败返回。如果没有环境变量的支持，在 shell 中直接键入 <code>ls</code>，内核是找不到它的，只有键入 <code>/bin/ls</code> 或到 <code>/bin</code> 下调用 <code>./ls</code> 才行。这里就体现出了环境变量的作用。</p><p>在上述函数族中，对于没有 <code>envp[]</code> 参数的库函数，在调用函数时，会隐式将当前进程的环境变量赋值到 <code>execve()</code> 的 <code>envp[]</code> 参数中。使用 strace 工具执行 <code>ls</code> 为例：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ strace ls</span>
<span class="line">execve(&quot;/bin/ls&quot;, [&quot;ls&quot;], 0x7ffedc768f40 /* 23 vars */) = 0</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，传入了 23 个环境变量。(Shell) 进程目前已有的环境变量可以通过下面的方式查看：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ env</span>
<span class="line">USER=mrdrivingduck</span>
<span class="line">SHLVL=1</span>
<span class="line">HOME=/home/mrdrivingduck</span>
<span class="line">OLDPWD=/home/mrdrivingduck/test</span>
<span class="line">WSL_DISTRO_NAME=Ubuntu-18.04</span>
<span class="line">LOGNAME=mrdrivingduck</span>
<span class="line">WSL_INTEROP=/run/WSL/280_interop</span>
<span class="line">NAME=ZJT-SURFACEBOOK2</span>
<span class="line">_=/usr/bin/env</span>
<span class="line">TERM=xterm-256color</span>
<span class="line">PATH=/home/mrdrivingduck/.vscode-server/bin/db40434f562994116e5b21c24015a2e40b2504e6/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games</span>
<span class="line">LANG=C.UTF-8</span>
<span class="line">SHELL=/bin/zsh</span>
<span class="line">PWD=/home/mrdrivingduck/test</span>
<span class="line">HOSTTYPE=x86_64</span>
<span class="line">WSLENV=VSCODE_WSL_EXT_LOCATION/up</span>
<span class="line">ZSH=/home/mrdrivingduck/.oh-my-zsh</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 POSIX C 库函数发现 <code>filename</code> 中没有 <code>/</code>，就会到环境变量中尝试拼接出文件的绝对路径，再调用 <code>execve()</code>。做一个小小的验证：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// char *evnp[] = { &quot;aaa=1&quot;, &quot;bbb=2&quot;, NULL };</span></span>
<span class="line">    <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序使用 shell 进程的内置环境变量。用 strace 执行这个程序。给出的程序名是 <code>ls</code>，看看 shell (或者说 <code>execvp()</code> 库函数) 替我们做了些啥：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ strace ./test</span>
<span class="line">execve(&quot;./test&quot;, [&quot;./test&quot;], 0x7ffca90f0de0 /* 33 vars */) = 0</span>
<span class="line">brk(NULL)                               = 0x56142cb23000</span>
<span class="line"></span>
<span class="line">...</span>
<span class="line"></span>
<span class="line">execve(&quot;/home/mrdrivingduck/.vscode-server/bin/db40434f562994116e5b21c24015a2e40b2504e6/bin/ls&quot;, [&quot;ls&quot;], 0x7ffe5ca16dd8 /* 33 vars */) = -1 ENOENT (No such file or directory)</span>
<span class="line">execve(&quot;/usr/local/sbin/ls&quot;, [&quot;ls&quot;], 0x7ffe5ca16dd8 /* 33 vars */) = -1 ENOENT (No such file or directory)</span>
<span class="line">execve(&quot;/usr/local/bin/ls&quot;, [&quot;ls&quot;], 0x7ffe5ca16dd8 /* 33 vars */) = -1 ENOENT (No such file or directory)</span>
<span class="line">execve(&quot;/usr/sbin/ls&quot;, [&quot;ls&quot;], 0x7ffe5ca16dd8 /* 33 vars */) = -1 ENOENT (No such file or directory)</span>
<span class="line">execve(&quot;/usr/bin/ls&quot;, [&quot;ls&quot;], 0x7ffe5ca16dd8 /* 33 vars */) = -1 ENOENT (No such file or directory)</span>
<span class="line">execve(&quot;/sbin/ls&quot;, [&quot;ls&quot;], 0x7ffe5ca16dd8 /* 33 vars */) = -1 ENOENT (No such file or directory)</span>
<span class="line">execve(&quot;/bin/ls&quot;, [&quot;ls&quot;], 0x7ffe5ca16dd8 /* 33 vars */) = 0</span>
<span class="line">brk(NULL)                               = 0x556ee5f06000</span>
<span class="line"></span>
<span class="line">...</span>
<span class="line"></span>
<span class="line">fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 2), ...}) = 0</span>
<span class="line">write(1, &quot;test  test.c\\n&quot;, 13test  test.c</span>
<span class="line">)          = 13</span>
<span class="line">close(1)                                = 0</span>
<span class="line">close(2)                                = 0</span>
<span class="line">exit_group(0)                           = ?</span>
<span class="line">+++ exited with 0 +++</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Shell 首先以 <code>./test</code> 和内置环境变量执行了测试程序。之后发现 <code>ls</code> 不是一个绝对路径或相对路径，于是使用环境变量中的 <code>PATH</code> 依次拼接出了文件绝对路径，并调用 <code>execve()</code> 系统调用。显然，前几个都失败了，因为文件不存在；直到拼接为 <code>/bin/ls</code> 时，内核找到了相应的可执行文件。之后，这个程序被成功执行，打印了当前目录下的所有文件名。</p><p>然而，如果调用了带有 <code>envp[]</code> 参数的库函数，那么进程内置的环境变量将不再传递到 <code>execve()</code> 系统调用中。看看另一个测试程序：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>evnp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;aaa=1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb=2&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> evnp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的 strace 结果如下：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ strace ./test</span>
<span class="line">execve(&quot;./test&quot;, [&quot;./test&quot;], 0x7ffdee5a50d0 /* 33 vars */) = 0</span>
<span class="line">brk(NULL)                               = 0x55882ca47000</span>
<span class="line"></span>
<span class="line">...</span>
<span class="line"></span>
<span class="line">execve(&quot;ls&quot;, [&quot;ls&quot;], 0x7fff37460b70 /* 2 vars */) = -1 ENOENT (No such file or directory)</span>
<span class="line">exit_group(0)                           = ?</span>
<span class="line">+++ exited with 0 +++</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，shell 以 <strong>内置的 33 个环境变量</strong> 和 <strong>相对路径</strong> 替我执行了测试程序。在测试程序中调用 <code>execve()</code> 时，由于程序显式给出了环境变量，因此环境变量个数变为了 <strong>两个</strong>。由于环境变量中不再包含 <code>PATH</code>，因此 shell 也不知道如何将这个 <code>ls</code> 补全为一个完整的文件路径。调用了一次 <code>execve()</code> 系统调用后得到了失败结果，原因是 <code>ENOENT</code> (找不到文件或路径)。</p><p>由此可以看出，<code>envp[]</code> 参数会完全替换父进程的环境变量。如果需要使用到父进程中的一些环境变量，那么需要对 <code>envp[]</code> 的构造做一些处理工作。另外，内核只能通过绝对路径或相对路径找到文件；那么将没有 <code>/</code> 的文件名通过 <code>PATH</code> 环境变量扩展为内核能够识别的合法文件名，就是 shell (或者说是 <code>execvp()</code>) 的责任了。</p><p>另外提及一下环境变量的生命周期。环境变量分为：</p><ul><li>永久变量</li><li>临时变量</li></ul><p>永久变量被记录在配置文件中。每当 shell 启动时，会将这些变量读取到进程环境变量中；而临时性变量只能在 shell 中通过 <code>export</code> 设置，设置完毕后会立即生效，但关闭 shell 后将会失效 (易失的)。</p><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://man7.org/linux/man-pages/man2/execve.2.html" target="_blank" rel="noopener noreferrer">execve(2) — Linux manual page</a></p><p><a href="https://shapeshed.com/unix-pwd/" target="_blank" rel="noopener noreferrer">Linux and Unix pwd command tutorial with examples</a></p><p><a href="https://en.wikipedia.org/wiki/Exec_(system_call)" target="_blank" rel="noopener noreferrer">Wikipedia - exec (system call)</a></p><p><a href="https://en.wikipedia.org/wiki/Cd_(command)" target="_blank" rel="noopener noreferrer">Wikipedia - cd (command)</a></p><p><a href="https://en.wikipedia.org/wiki/Pwd" target="_blank" rel="noopener noreferrer">Wikipedia - pwd</a></p><hr>`,47)]))}const i=n(p,[["render",l],["__file","Linux execve.html.vue"]]),d=JSON.parse('{"path":"/notes/Operating%20System/Linux%20execve.html","title":"Linux - Execve","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"关于 cd 和 pwd","slug":"关于-cd-和-pwd","link":"#关于-cd-和-pwd","children":[]},{"level":2,"title":"关于环境变量","slug":"关于环境变量","link":"#关于环境变量","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Operating System/Linux execve.md"}');export{i as comp,d as data};
