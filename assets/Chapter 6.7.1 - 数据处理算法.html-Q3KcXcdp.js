import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-6-7-1-数据处理算法" tabindex="-1"><a class="header-anchor" href="#chapter-6-7-1-数据处理算法"><span>Chapter 6.7.1 - 数据处理算法</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 14 22:21</p><p>Nanjing, Jiangsu, China</p><hr><p>以下算法只包含单纯的数据移动、线性查找、计数、遍历、遍历施加操作等操作。从操作目标上来说，算法包含两种版本：</p><ul><li>在指定区间范围上 <strong>就地操作</strong></li><li>在指定区间范围上操作后，复制到另一个目标区间中 (通常来说实现上会简单些)</li></ul><p>从操作方式上来说，算法也可以分为两个版本：</p><ul><li>使用默认的方式 (<code>operator&lt;</code> 或 <code>operator==</code>) 操作数据</li><li>使用用户自定义的仿函数操作数据</li></ul><h2 id="adjacent-find" tabindex="-1"><a class="header-anchor" href="#adjacent-find"><span>adjacent_find</span></a></h2><p>找出第一组 <strong>满足条件</strong> 的相邻元素，这里的满足条件指的是：</p><ul><li>(默认) 两个相邻元素相等 (<code>operator==</code> 返回 <code>true</code>)</li><li>用户指定一个二元仿函数，操作数为一对相邻元素，函数返回 <code>true</code></li></ul><p>一次线性遍历可以实现。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">adjacent_find</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _EqualityComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span>  <span class="token comment">// 区间长度为 0，没有相邻元素，直接返回尾迭代器</span></span>
<span class="line">    <span class="token keyword">return</span> __last<span class="token punctuation">;</span></span>
<span class="line">  _ForwardIter __next <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>__next <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// first 指向前一个元素，next 指向下一个元素</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> <span class="token operator">*</span>__next<span class="token punctuation">)</span>   <span class="token comment">// 前一个元素和后一个元素相等，返回前一个元素的迭代器位置</span></span>
<span class="line">      <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">    __first <span class="token operator">=</span> __next<span class="token punctuation">;</span>          <span class="token comment">// first 指向 next，next 指向下一个元素</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __last<span class="token punctuation">;</span>  <span class="token comment">// 没找到，返回尾迭代器</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryPredicate</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">adjacent_find</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                           _BinaryPredicate __binary_pred<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 用户指定的二元仿函数</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_BinaryPredicate<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> __last<span class="token punctuation">;</span></span>
<span class="line">  _ForwardIter __next <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>__next <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__binary_pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">,</span> <span class="token operator">*</span>__next<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 二元仿函数 (参数分别为前一个元素和后一个元素) 返回 true</span></span>
<span class="line">      <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">    __first <span class="token operator">=</span> __next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __last<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-find-if" tabindex="-1"><a class="header-anchor" href="#find-find-if"><span>find / find_if</span></a></h2><p>找出区间内第一个满足条件的元素，这里的满足条件指的是：</p><ul><li>(默认) 与给定参数相等</li><li>用户指定的一元仿函数对当前元素返回 <code>true</code></li></ul><p>一次线性遍历可以实现。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _InputIter <span class="token function">find</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span></span>
<span class="line">                       input_iterator_tag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> __val<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 元素和指定值相等，跳出</span></span>
<span class="line">    <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _InputIter <span class="token function">find_if</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                          _Predicate __pred<span class="token punctuation">,</span></span>
<span class="line">                          input_iterator_tag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 用户指定的仿函数对当前元素返回 true，跳出</span></span>
<span class="line">    <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="search" tabindex="-1"><a class="header-anchor" href="#search"><span>search</span></a></h2><p>在序列一所在的区间中，查找序列二第一次出现的位置。如果序列一中不存在包含序列二的区间，那么返回序列一的尾迭代器。</p><ul><li>默认使用 <code>operator==</code> 来判断序列二的元素是否出现在序列一中</li><li>用户可以自行指定二元仿函数覆盖默认行为</li></ul><p>需要两层循环实现。外层循环遍历序列一，内层循环遍历序列二。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryPred</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter1 <span class="token function">search</span><span class="token punctuation">(</span>_ForwardIter1 __first1<span class="token punctuation">,</span> _ForwardIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                     _ForwardIter2 __first2<span class="token punctuation">,</span> _ForwardIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                     _BinaryPred  __predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用户自行提供二元仿函数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter2</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter1 <span class="token function">search</span><span class="token punctuation">(</span>_ForwardIter1 __first1<span class="token punctuation">,</span> _ForwardIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                     _ForwardIter2 __first2<span class="token punctuation">,</span> _ForwardIter2 __last2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter1<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter2<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_BINARY_OP</span><span class="token punctuation">(</span>_OP_EQUAL<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">   <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Test for empty ranges</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first1 <span class="token operator">==</span> __last1 <span class="token operator">||</span> __first2 <span class="token operator">==</span> __last2<span class="token punctuation">)</span>  <span class="token comment">// 两个序列之一为空，直接结束</span></span>
<span class="line">    <span class="token keyword">return</span> __first1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Test for a pattern of length 1.</span></span>
<span class="line">  _ForwardIter2 <span class="token function">__tmp</span><span class="token punctuation">(</span>__first2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">++</span>__tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__tmp <span class="token operator">==</span> __last2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 带寻找的序列长度为 1，那么等同于在序列中寻找单个元素</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// General case.</span></span>
<span class="line"></span>
<span class="line">  _ForwardIter2 __p1<span class="token punctuation">,</span> __p<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  __p1 <span class="token operator">=</span> __first2<span class="token punctuation">;</span> <span class="token operator">++</span>__p1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _ForwardIter1 __current <span class="token operator">=</span> __first1<span class="token punctuation">;</span>  <span class="token comment">// current 指向目前正在匹配的序列 1 位置</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 序列 1 还未匹配完</span></span>
<span class="line">    __first1 <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// first1 指向与序列 2 第一个元素匹配的位置</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__first1 <span class="token operator">==</span> __last1<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> __last1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    __p <span class="token operator">=</span> __p1<span class="token punctuation">;</span>            <span class="token comment">// p 指向序列 2 的第一个位置</span></span>
<span class="line">    __current <span class="token operator">=</span> __first1<span class="token punctuation">;</span>  <span class="token comment">// current 指向目前正在匹配的序列 1 位置</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>__current <span class="token operator">==</span> __last1<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> __last1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>__current <span class="token operator">==</span> <span class="token operator">*</span>__p<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 序列 1 与序列 2 匹配</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>__p <span class="token operator">==</span> __last2<span class="token punctuation">)</span>       <span class="token comment">// 序列 2 到头，匹配成功</span></span>
<span class="line">        <span class="token keyword">return</span> __first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>__current <span class="token operator">==</span> __last1<span class="token punctuation">)</span> <span class="token comment">// 序列 1 到头，返回序列 1 结尾的位置</span></span>
<span class="line">        <span class="token keyword">return</span> __last1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">++</span>__first1<span class="token punctuation">;</span>  <span class="token comment">// 下一个 find 区间</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __first1<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="search-n" tabindex="-1"><a class="header-anchor" href="#search-n"><span>search_n</span></a></h2><p><code>search_n()</code> 查找中连续 <code>n</code> 个元素的位置：</p><ul><li>默认使用 <code>operator==</code> 来比较序列内元素是否等于给定元素</li><li>用户可自行提供二元仿函数</li></ul><p>代码上写的是两层循环，实际上序列内元素只会被遍历一次。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Integer</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryPred</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">search_n</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                      _Integer __count<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span></span>
<span class="line">                      _BinaryPred __binary_pred<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用户自行提供二元仿函数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Integer</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">search_n</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                      _Integer __count<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _EqualityComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _EqualityComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    __first <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 找到第一个和 val 相等的位置</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      _Integer __n <span class="token operator">=</span> __count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      _ForwardIter __i <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__i<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>__i <span class="token operator">!=</span> __last <span class="token operator">&amp;&amp;</span> __n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>__i <span class="token operator">==</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">++</span>__i<span class="token punctuation">;</span>  <span class="token comment">// 寻找从该位置开始是否存在连续 count 个元素等于 val (operator== 可换为二元仿函数)</span></span>
<span class="line">        <span class="token operator">--</span>__n<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> __first<span class="token punctuation">;</span>  <span class="token comment">// 满足 count 个元素等于 val</span></span>
<span class="line">      <span class="token keyword">else</span></span>
<span class="line">        __first <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 若不满足，则寻找下一个等于 val 的元素出现的位置</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> __last<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-end" tabindex="-1"><a class="header-anchor" href="#find-end"><span>find_end</span></a></h2><p>寻找序列一所在区间中，序列二最后一次出现的位置。</p><ul><li>(默认) 使用 <code>operator==</code> 决定元素是否出现</li><li>用户可自行提供仿函数</li></ul><p>显然，需要两层循环结构来实现。如果迭代器具有 <strong>逆向移动</strong> 的功能，那么相当于在逆向上进行一次 <code>search()</code>；否则，迭代器只能从头开始寻找。所以，这里需要根据迭代器的类型做两种不同的实现。这也是 STL 中经常使用的编译器参数推导技巧。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter2</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_BinaryPredicate</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter1</span>
<span class="line"><span class="token function">find_end</span><span class="token punctuation">(</span>_ForwardIter1 __first1<span class="token punctuation">,</span> _ForwardIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">         _ForwardIter2 __first2<span class="token punctuation">,</span> _ForwardIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">         _BinaryPredicate __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用户自行提供二元仿函数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter1</span>
<span class="line"><span class="token function">find_end</span><span class="token punctuation">(</span>_ForwardIter1 __first1<span class="token punctuation">,</span> _ForwardIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">         _ForwardIter2 __first2<span class="token punctuation">,</span> _ForwardIter2 __last2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter1<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter2<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_BINARY_OP</span><span class="token punctuation">(</span>_OP_EQUAL<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">   <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__find_end</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> __last2<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token function">__ITERATOR_CATEGORY</span><span class="token punctuation">(</span>__first1<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">// 根据迭代器类型进行分派</span></span>
<span class="line">                    <span class="token function">__ITERATOR_CATEGORY</span><span class="token punctuation">(</span>__first2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单向 (前向) 迭代器版本：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// find_end, with and without an explicitly supplied comparison function.</span></span>
<span class="line"><span class="token comment">// Search [first2, last2) as a subsequence in [first1, last1), and return</span></span>
<span class="line"><span class="token comment">// the *last* possible match.  Note that find_end for bidirectional iterators</span></span>
<span class="line"><span class="token comment">// is much faster than for forward iterators.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// find_end for forward iterators.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter2</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter1 <span class="token function">__find_end</span><span class="token punctuation">(</span>_ForwardIter1 __first1<span class="token punctuation">,</span> _ForwardIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                         _ForwardIter2 __first2<span class="token punctuation">,</span> _ForwardIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                         forward_iterator_tag<span class="token punctuation">,</span> forward_iterator_tag<span class="token punctuation">)</span>  、、</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first2 <span class="token operator">==</span> __last2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> __last1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    _ForwardIter1 __result <span class="token operator">=</span> __last1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      _ForwardIter1 __new_result  <span class="token comment">// 找到序列 1 中的下一个序列 2 子区间</span></span>
<span class="line">        <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> __last2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>__new_result <span class="token operator">==</span> __last1<span class="token punctuation">)</span>  <span class="token comment">// 序列 1 到头</span></span>
<span class="line">        <span class="token keyword">return</span> __result<span class="token punctuation">;</span>            <span class="token comment">// 返回目前已经找到的最后一个有效子区间</span></span>
<span class="line">      <span class="token keyword">else</span> <span class="token punctuation">{</span>                      <span class="token comment">// 新找到的子区间有效</span></span>
<span class="line">        __result <span class="token operator">=</span> __new_result<span class="token punctuation">;</span>  <span class="token comment">// 将最后匹配的子区间更新为这个子区间</span></span>
<span class="line">        __first1 <span class="token operator">=</span> __new_result<span class="token punctuation">;</span>  <span class="token comment">// 寻找下一个可能的子区间</span></span>
<span class="line">        <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双向迭代器版本 (快很多)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// find_end for bidirectional iterators.  Requires partial specialization.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter2</span><span class="token operator">&gt;</span></span>
<span class="line">_BidirectionalIter1</span>
<span class="line"><span class="token function">__find_end</span><span class="token punctuation">(</span>_BidirectionalIter1 __first1<span class="token punctuation">,</span> _BidirectionalIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">           _BidirectionalIter2 __first2<span class="token punctuation">,</span> _BidirectionalIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">           bidirectional_iterator_tag<span class="token punctuation">,</span> bidirectional_iterator_tag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIter1<span class="token punctuation">,</span> _BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIter2<span class="token punctuation">,</span> _BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> reverse_iterator<span class="token operator">&lt;</span>_BidirectionalIter1<span class="token operator">&gt;</span> _RevIter1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> reverse_iterator<span class="token operator">&lt;</span>_BidirectionalIter2<span class="token operator">&gt;</span> _RevIter2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _RevIter1 <span class="token function">__rlast1</span><span class="token punctuation">(</span>__first1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _RevIter2 <span class="token function">__rlast2</span><span class="token punctuation">(</span>__first2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _RevIter1 __rresult <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token function">_RevIter1</span><span class="token punctuation">(</span>__last1<span class="token punctuation">)</span><span class="token punctuation">,</span> __rlast1<span class="token punctuation">,</span>   <span class="token comment">// 转换为反向迭代器，并调用 search</span></span>
<span class="line">                               <span class="token function">_RevIter2</span><span class="token punctuation">(</span>__last2<span class="token punctuation">)</span><span class="token punctuation">,</span> __rlast2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__rresult <span class="token operator">==</span> __rlast1<span class="token punctuation">)</span>  <span class="token comment">// 没找到，返回序列 1 的尾迭代器</span></span>
<span class="line">    <span class="token keyword">return</span> __last1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span>                                              <span class="token comment">// 区间找到</span></span>
<span class="line">    _BidirectionalIter1 __result <span class="token operator">=</span> __rresult<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实际上对应匹配上区间的尾部</span></span>
<span class="line">    <span class="token function">advance</span><span class="token punctuation">(</span>__result<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">distance</span><span class="token punctuation">(</span>__first2<span class="token punctuation">,</span> __last2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 区间尾部减去区间长度，就是区间开始的位置</span></span>
<span class="line">    <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-first-of" tabindex="-1"><a class="header-anchor" href="#find-first-of"><span>find_first_of</span></a></h2><p>寻找序列 1 中，第一次出现序列 2 中任意元素的位置。显然这也会是一个二层循环。</p><ul><li>(默认) 使用 <code>operator==</code> 决定元素是否出现</li><li>用户自行提供二元仿函数</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// find_first_of, with and without an explicitly supplied comparison function.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryPredicate</span><span class="token operator">&gt;</span></span>
<span class="line">_InputIter <span class="token function">find_first_of</span><span class="token punctuation">(</span>_InputIter __first1<span class="token punctuation">,</span> _InputIter __last1<span class="token punctuation">,</span></span>
<span class="line">                         _ForwardIter __first2<span class="token punctuation">,</span> _ForwardIter __last2<span class="token punctuation">,</span></span>
<span class="line">                         _BinaryPredicate __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用户提供的二元仿函数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line">_InputIter <span class="token function">find_first_of</span><span class="token punctuation">(</span>_InputIter __first1<span class="token punctuation">,</span> _InputIter __last1<span class="token punctuation">,</span></span>
<span class="line">                         _ForwardIter __first2<span class="token punctuation">,</span> _ForwardIter __last2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_BINARY_OP</span><span class="token punctuation">(</span>_OP_EQUAL<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">     <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first1 <span class="token operator">!=</span> __last1<span class="token punctuation">;</span> <span class="token operator">++</span>__first1<span class="token punctuation">)</span>  <span class="token comment">// 外层循环遍历序列 1</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>_ForwardIter __iter <span class="token operator">=</span> __first2<span class="token punctuation">;</span> __iter <span class="token operator">!=</span> __last2<span class="token punctuation">;</span> <span class="token operator">++</span>__iter<span class="token punctuation">)</span>  <span class="token comment">// 内存循环遍历序列 2</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first1 <span class="token operator">==</span> <span class="token operator">*</span>__iter<span class="token punctuation">)</span>  <span class="token comment">// 这里可被替换为用户自定义的仿函数</span></span>
<span class="line">        <span class="token keyword">return</span> __first1<span class="token punctuation">;</span>  <span class="token comment">// 找到，立刻返回</span></span>
<span class="line">  <span class="token keyword">return</span> __last1<span class="token punctuation">;</span>  <span class="token comment">// 没找到</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="count-count-if" tabindex="-1"><a class="header-anchor" href="#count-count-if"><span>count / count_if</span></a></h2><p>返回区间内与指定值相等的元素个数，泛化后用户可以提供一个一元仿函数，返回仿函数应用在元素上返回 <code>true</code> 的元素个数。遍历一次区间即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// count and count_if.  There are two version of each, one whose return type</span></span>
<span class="line"><span class="token comment">// type is void and one (present only if we have partial specialization)</span></span>
<span class="line"><span class="token comment">// whose return type is iterator_traits&lt;_InputIter&gt;::difference_type.  The</span></span>
<span class="line"><span class="token comment">// C++ standard only has the latter version, but the former, which was present</span></span>
<span class="line"><span class="token comment">// in the HP STL, is retained for backward compatibility.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">,</span></span>
<span class="line">           _Size<span class="token operator">&amp;</span> __n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _EqualityComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _EqualityComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> __value<span class="token punctuation">)</span>  <span class="token comment">// 可被替换为一元仿函数</span></span>
<span class="line">      <span class="token operator">++</span>__n<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">count_if</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span> _Predicate __pred<span class="token punctuation">,</span>  <span class="token comment">// 用户提供一元仿函数</span></span>
<span class="line">              _Size<span class="token operator">&amp;</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-each" tabindex="-1"><a class="header-anchor" href="#for-each"><span>for_each</span></a></h2><p>将仿函数施加在区间内的每一个元素身上，仿函数的返回值被忽略。由于迭代器参数只读 (Input Iterator)，仿函数不能修改区间内元素。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// for_each.  Apply a function to every element of a range.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Function</span><span class="token operator">&gt;</span></span>
<span class="line">_Function <span class="token function">for_each</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span> _Function __f<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">__f</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 仿函数返回值被忽略</span></span>
<span class="line">  <span class="token keyword">return</span> __f<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>transform</span></a></h2><p>将 (一元 / 二元) 仿函数施加在区间内的 (每一个 / 每一对) 元素身上，并将返回值输出到一个区间中。输出区间可以是输入区间，那么仿函数的参数将会被仿函数的返回值替换。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// transform</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_UnaryOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">transform</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                      _OutputIter __result<span class="token punctuation">,</span> _UnaryOperation __opr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 一元仿函数</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">,</span> <span class="token operator">++</span>__result<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token function">__opr</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_BinaryOperation</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">transform</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                      _InputIter2 __first2<span class="token punctuation">,</span> _OutputIter __result<span class="token punctuation">,</span></span>
<span class="line">                      _BinaryOperation __binary_op<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 二元仿函数</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first1 <span class="token operator">!=</span> __last1<span class="token punctuation">;</span> <span class="token operator">++</span>__first1<span class="token punctuation">,</span> <span class="token operator">++</span>__first2<span class="token punctuation">,</span> <span class="token operator">++</span>__result<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token function">__binary_op</span><span class="token punctuation">(</span><span class="token operator">*</span>__first1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generate-generate-n" tabindex="-1"><a class="header-anchor" href="#generate-generate-n"><span>generate / generate_n</span></a></h2><p>将用户提供的仿函数的运算结果赋值到区间内所有 (前 <code>n</code> 个) 元素上。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// generate and generate_n</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Generator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span> _Generator __gen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_GENERATOR_CHECK</span><span class="token punctuation">(</span>_Generator<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__first <span class="token operator">=</span> <span class="token function">__gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 赋值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Generator</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">generate_n</span><span class="token punctuation">(</span>_OutputIter __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> _Generator __gen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>__n<span class="token punctuation">,</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__first <span class="token operator">=</span> <span class="token function">__gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 赋值 (同时计数 n)</span></span>
<span class="line">  <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="max-element-min-element" tabindex="-1"><a class="header-anchor" href="#max-element-min-element"><span>max_element / min_element</span></a></h2><p>遍历序列一次，返回序列中最大或最小值的位置。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// min_element and max_element, with and without an explicitly supplied</span></span>
<span class="line"><span class="token comment">// comparison function.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">max_element</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">  _ForwardIter __result <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__result <span class="token operator">&lt;</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span>  <span class="token comment">// 大于现有最大值</span></span>
<span class="line">      __result <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">max_element</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">			 _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">min_element</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">  _ForwardIter __result <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">&lt;</span> <span class="token operator">*</span>__result<span class="token punctuation">)</span>  <span class="token comment">// 小于现有最小值</span></span>
<span class="line">      __result <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">min_element</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">			 _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="remove-remove-copy-remove-if-remove-copy-if" tabindex="-1"><a class="header-anchor" href="#remove-remove-copy-remove-if-remove-copy-if"><span>remove / remove_copy / remove_if / remove_copy_if</span></a></h2><p><code>remove_copy()</code> 移除区间内所有与给定值相等的元素，不从区间中真正删除元素，而是将结果复制到一个特定空间中。操作空间和目标空间可以是同一个。<code>remove_copy_if()</code> 使用用户自定义的一元仿函数替换 <code>operator==</code>，删除使仿函数返回 <code>true</code> 的元素。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">remove_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                        _OutputIter __result<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_BINARY_OP</span><span class="token punctuation">(</span>_OP_EQUAL<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span> _Tp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> __value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果当前元素 != 给定值</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>        <span class="token comment">// 将当前元素复制到目标位置</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span>                  <span class="token comment">// 目标位置指向下一个位置</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">remove_copy_if</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                           _OutputIter __result<span class="token punctuation">,</span> _Predicate __pred<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_UNARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Predicate<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>remove()</code> 借用了 <code>remove_copy()</code> 的实现，将结果直接覆盖在当前容器中；<code>remove_if()</code> 借用了 <code>remove_copy_if()</code> 的实现，将结果覆盖在当前容器中。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">remove</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_BINARY_OP</span><span class="token punctuation">(</span>_OP_EQUAL<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span> _Tp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CONVERTIBLE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  __first <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 找到区间内第一个删除位置</span></span>
<span class="line">  _ForwardIter __i <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __first <span class="token operator">==</span> __last <span class="token operator">?</span> __first</span>
<span class="line">                           <span class="token operator">:</span> <span class="token function">remove_copy</span><span class="token punctuation">(</span><span class="token operator">++</span>__i<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从删除位置的下一个位置开始 remove_copy()</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">remove_if</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                       _Predicate __pred<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_UNARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Predicate<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  __first <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __pred<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 find_if() 找到第一个删除位置</span></span>
<span class="line">  _ForwardIter __i <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __first <span class="token operator">==</span> __last <span class="token operator">?</span> __first</span>
<span class="line">                           <span class="token operator">:</span> <span class="token function">remove_copy_if</span><span class="token punctuation">(</span><span class="token operator">++</span>__i<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __pred<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="replace-replace-copy-replace-if-replace-copy-if" tabindex="-1"><a class="header-anchor" href="#replace-replace-copy-replace-if-replace-copy-if"><span>replace / replace_copy / replace_if / replace_copy_if</span></a></h2><p><code>replace()</code> 将区间内的特定值用新值替代，使用 <code>operator==</code> 来判断元素是否等于某个特定值；<code>replace_if()</code> 使用用户提供的一元仿函数作用在元素上是否返回 <code>true</code> 来决定是否被替换。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// replace, replace_if, replace_copy, replace_copy_if</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">replace</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __old_value<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __new_value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_BINARY_OP</span><span class="token punctuation">(</span>_OP_EQUAL<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span> _Tp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CONVERTIBLE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> __old_value<span class="token punctuation">)</span>  <span class="token comment">// 元素 == 指定旧值</span></span>
<span class="line">      <span class="token operator">*</span>__first <span class="token operator">=</span> __new_value<span class="token punctuation">;</span>     <span class="token comment">// 元素被替换为新值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">replace_if</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                _Predicate __pred<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __new_value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CONVERTIBLE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_UNARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Predicate<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 仿函数作用域元素上返回 true</span></span>
<span class="line">      <span class="token operator">*</span>__first <span class="token operator">=</span> __new_value<span class="token punctuation">;</span>  <span class="token comment">// 元素被替换为新值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下两个函数行为类似，一边将序列中的元素复制到一个目标空间中，一边将特定值替换为新值。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">replace_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                         _OutputIter __result<span class="token punctuation">,</span></span>
<span class="line">                         <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __old_value<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __new_value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_BINARY_OP</span><span class="token punctuation">(</span>_OP_EQUAL<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span> _Tp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">,</span> <span class="token operator">++</span>__result<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first <span class="token operator">==</span> __old_value <span class="token operator">?</span> __new_value <span class="token operator">:</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 复制原元素，或替换新值</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">replace_copy_if</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                            _OutputIter __result<span class="token punctuation">,</span></span>
<span class="line">                            _Predicate __pred<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __new_value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_UNARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Predicate<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">,</span> <span class="token operator">++</span>__result<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span> <span class="token operator">?</span> __new_value <span class="token operator">:</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 复制原元素，或替换新值</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reverse-reverse-copy" tabindex="-1"><a class="header-anchor" href="#reverse-reverse-copy"><span>reverse / reverse_copy</span></a></h2><p><code>reverse()</code> 将区间内的元素就地颠倒顺序；<code>reverse_copy()</code> 将区间内的元素在一个新的区间内颠倒顺序。<code>reverse_copy()</code> 的实现相对来说简单一些，通过双向迭代器依次将区间内元素从后到前复制即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">reverse_copy</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span></span>
<span class="line">                         _BidirectionalIter __last<span class="token punctuation">,</span></span>
<span class="line">                         _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIter<span class="token punctuation">,</span> _BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">--</span>__last<span class="token punctuation">;</span>             <span class="token comment">// 迭代器从后到前移动</span></span>
<span class="line">    <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__last<span class="token punctuation">;</span>  <span class="token comment">// 复制</span></span>
<span class="line">    <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于就地颠倒来说，双向迭代器和随机存取迭代器的实现方式不同：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span> _BidirectionalIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIter<span class="token punctuation">,</span> _Mutable_BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__reverse</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> <span class="token function">__ITERATOR_CATEGORY</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据迭代器类型分派</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__reverse</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span> _BidirectionalIter __last<span class="token punctuation">,</span></span>
<span class="line">               bidirectional_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 双向迭代器版本</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last <span class="token operator">||</span> __first <span class="token operator">==</span> <span class="token operator">--</span>__last<span class="token punctuation">)</span>  <span class="token comment">// 循环终止条件为首尾迭代器相同或交错</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      <span class="token function">iter_swap</span><span class="token punctuation">(</span>__first<span class="token operator">++</span><span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_RandomAccessIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">__reverse</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span> _RandomAccessIter __last<span class="token punctuation">,</span></span>
<span class="line">               random_access_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 随机存取迭代器版本</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">&lt;</span> __last<span class="token punctuation">)</span>  <span class="token comment">// 循环终止条件为迭代器相遇 (随机存取迭代器可比较)</span></span>
<span class="line">    <span class="token function">iter_swap</span><span class="token punctuation">(</span>__first<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">--</span>__last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rotate-rotate-copy" tabindex="-1"><a class="header-anchor" href="#rotate-rotate-copy"><span>rotate / rotate_copy</span></a></h2><p>将一段区间内 <code>middle</code> 之前与 <code>middle</code> 之后的元素进行颠倒，每个子区间内的元素顺序不变。</p><p><code>rotate_copy()</code> 将颠倒后的结果保存到一个目标区间中，因此实现较为简单；<code>rotate()</code> 就地交换两个子区间，实现上根据迭代器类型的不同而不同。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">rotate_copy</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __middle<span class="token punctuation">,</span></span>
<span class="line">                        _ForwardIter __last<span class="token punctuation">,</span> _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __middle<span class="token punctuation">,</span> <span class="token function">copy</span><span class="token punctuation">(</span>__middle<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 先拷贝 middle 到 last 的元素到目标区间，然后拷贝 first 到 middle 的元素到目标区间</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter <span class="token function">rotate</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __middle<span class="token punctuation">,</span></span>
<span class="line">                           _ForwardIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__rotate</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __middle<span class="token punctuation">,</span> __last<span class="token punctuation">,</span></span>
<span class="line">                  <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                  <span class="token function">__ITERATOR_CATEGORY</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据迭代器类型分派</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line">_BidirectionalIter <span class="token function">__rotate</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span></span>
<span class="line">                            _BidirectionalIter __middle<span class="token punctuation">,</span></span>
<span class="line">                            _BidirectionalIter __last<span class="token punctuation">,</span></span>
<span class="line">                            _Distance<span class="token operator">*</span><span class="token punctuation">,</span></span>
<span class="line">                            bidirectional_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 双向迭代器版本</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_BidirectionalIter<span class="token punctuation">,</span> _Mutable_BidirectionalIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __middle<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> __last<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__last  <span class="token operator">==</span> __middle<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">__reverse</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span>  __middle<span class="token punctuation">,</span> <span class="token function">bidirectional_iterator_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 颠倒 first 到 middle 之间的区间</span></span>
<span class="line">  <span class="token function">__reverse</span><span class="token punctuation">(</span>__middle<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>   <span class="token function">bidirectional_iterator_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 颠倒 middle 到 last 之间的区间</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 以下，颠倒 first 到 last 之间的区间</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __middle <span class="token operator">&amp;&amp;</span> __middle <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">swap</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">--</span>__last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __middle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__reverse</span><span class="token punctuation">(</span>__middle<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>   <span class="token function">bidirectional_iterator_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __last<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__reverse</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span>  __middle<span class="token punctuation">,</span> <span class="token function">bidirectional_iterator_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>单向迭代器和随机访问迭代器版本的代码无法消化... 😔</p></blockquote><h2 id="swap-ranges" tabindex="-1"><a class="header-anchor" href="#swap-ranges"><span>swap_ranges</span></a></h2><p>功能与 <code>rotate()</code> 类似，但是只能交换元素个数相同的区间。通过循环，交换两对迭代器指向的对应元素。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// swap_ranges</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter2</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter2 <span class="token function">swap_ranges</span><span class="token punctuation">(</span>_ForwardIter1 __first1<span class="token punctuation">,</span> _ForwardIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                          _ForwardIter2 __first2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter1<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter2<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CONVERTIBLE</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CONVERTIBLE</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first1 <span class="token operator">!=</span> __last1<span class="token punctuation">;</span> <span class="token operator">++</span>__first1<span class="token punctuation">,</span> <span class="token operator">++</span>__first2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">iter_swap</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __first2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 交换两对迭代器指向的元素</span></span>
<span class="line">  <span class="token keyword">return</span> __first2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unique-unique-copy" tabindex="-1"><a class="header-anchor" href="#unique-unique-copy"><span>unique / unique_copy</span></a></h2><p>移除 <strong>相邻的重复元素</strong>。如果想要移除所有 (包括不相邻) 的重复元素，需要先对序列排序，使所有重复元素相邻。</p><p><code>unique()</code> 返回迭代器指向新区间的尾部，迭代器之后的元素是一些保留下来的残余元素。元素是否重复默认由 <code>operator==</code> 定义，但用户可以自行提供一个二元仿函数。</p><p><code>unique_copy()</code> 将元素复制到另一个区间上，如果遇到相邻的重复元素，则只会复制一个。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _OutputIter <span class="token function">unique_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                               _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _EqualityComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__unique_copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token function">__ITERATOR_CATEGORY</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据迭代器类型分派</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">///////////////////////////////////////////////////////////////////////////</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">__unique_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                          _OutputIter __result<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  _Tp __value <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span>__result <span class="token operator">=</span> __value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>__value <span class="token operator">==</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 输出迭代器不可读</span></span>
<span class="line">      __value <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">*</span><span class="token operator">++</span>__result <span class="token operator">=</span> __value<span class="token punctuation">;</span>       <span class="token comment">// 因此需要用一个变量保存输出迭代器对应的值</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _OutputIter <span class="token function">__unique_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                                 _OutputIter __result<span class="token punctuation">,</span></span>
<span class="line">                                 output_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 输出迭代器版本</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__unique_copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">///////////////////////////////////////////////////////////////////////////</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">__unique_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                           _ForwardIter __result<span class="token punctuation">,</span> forward_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 单向迭代器版本</span></span>
<span class="line">  <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>  <span class="token comment">// 复制第一个元素</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>__result <span class="token operator">==</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 目标区间最后一个元素 != 当前元素</span></span>
<span class="line">      <span class="token operator">*</span><span class="token operator">++</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first<span class="token punctuation">;</span>      <span class="token comment">// 向目标区间复制当前元素</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>unique()</code> 直接借用了 <code>unique_copy()</code> 的实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">unique</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _EqualityComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  __first <span class="token operator">=</span> <span class="token function">adjacent_find</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">unique_copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_BinaryPredicate</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">unique</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                    _BinaryPredicate __binary_pred<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="includes" tabindex="-1"><a class="header-anchor" href="#includes"><span>includes</span></a></h2><p>判断序列一中是否包含序列二 (序列二中的每个元素都出现在序列一中)。两个序列 <strong>必须有序</strong>。根据两个序列递增 / 递减，算法使用 <code>less / </code>greater\` 仿函数进行比较。用户也可以自行提供一个用于比较的二元仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">includes</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">              _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span>  <span class="token comment">// 两个序列未到结尾</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span>      <span class="token comment">// 序列二中的元素 &lt; 序列一中的元素</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token comment">// 包含不成立</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>__first1 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span>  <span class="token comment">// 序列一中的元素 &lt; 序列二中的元素</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>                   <span class="token comment">// 序列一的下一个元素</span></span>
<span class="line">    <span class="token keyword">else</span>                            <span class="token comment">// 序列一中的元素 == 序列二中的元素</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">,</span> <span class="token operator">++</span>__first2<span class="token punctuation">;</span>       <span class="token comment">// 比较两个序列中的下一个元素</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> __first2 <span class="token operator">==</span> __last2<span class="token punctuation">;</span>  <span class="token comment">// 序列二是否已到尾部</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">includes</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">              _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>merge</span></a></h2><p>将两个排序后的区间有序合并到另一段区间中。用户可指定比较仿函数替代默认的 <code>operator&lt;</code>。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// merge, with and without an explicitly supplied comparison function.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">merge</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                  _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                  _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 两个序列没到结尾</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 序列二中的元素 &lt; 序列一中的元素</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first2<span class="token punctuation">;</span>      <span class="token comment">// 复制序列二中的元素到目标区间</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment">// 序列一中的元素 &lt;= 序列二中的元素</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span>      <span class="token comment">// 复制序列一中的元素到目标区间</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first2<span class="token punctuation">,</span> __last2<span class="token punctuation">,</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 复制序列一或序列二中的剩余元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">merge</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                  _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                  _OutputIter __result<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="partition" tabindex="-1"><a class="header-anchor" href="#partition"><span>partition</span></a></h2><p>将区间内的元素重新排列，排列依据是提供的一元仿函数作用在元素上是否返回 <code>true</code>，所有返回 <code>true</code> 的元素将排列在返回 <code>false</code> 的元素之前。该算法 <strong>不稳定</strong>。想象如果这个一元仿函数是 <code>less</code>，那么效果就是所有小于某个值的元素将会排列在所有不小于该值的元素之前 (快速排序的必要算法)。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter <span class="token function">partition</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span></span>
<span class="line">   			      _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">			      _Predicate   __pred<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_UNARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Predicate<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__partition</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __pred<span class="token punctuation">,</span> <span class="token function">__ITERATOR_CATEGORY</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据迭代器类型分派</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">__partition</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span></span>
<span class="line">		         _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">			 _Predicate   __pred<span class="token punctuation">,</span></span>
<span class="line">			 forward_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 单向迭代器版本</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _ForwardIter __next <span class="token operator">=</span> __first<span class="token punctuation">;</span>  <span class="token comment">// 第一个不满足 true 的位置</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__next <span class="token operator">!=</span> __last<span class="token punctuation">)</span>      <span class="token comment">// next 不断向后寻找可以满足 true 的元素，并交换到前面的位置</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 之后第一个满足 true 的位置</span></span>
<span class="line">      <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">,</span> <span class="token operator">*</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 交换元素</span></span>
<span class="line">      <span class="token operator">++</span>__first<span class="token punctuation">;</span>                  <span class="token comment">// first 指向下一个 (可以放置满足 true 的元素) 位置</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_BidirectionalIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Predicate</span><span class="token operator">&gt;</span></span>
<span class="line">_BidirectionalIter <span class="token function">__partition</span><span class="token punctuation">(</span>_BidirectionalIter __first<span class="token punctuation">,</span></span>
<span class="line">                               _BidirectionalIter __last<span class="token punctuation">,</span></span>
<span class="line">			       _Predicate __pred<span class="token punctuation">,</span></span>
<span class="line">			       bidirectional_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 双向迭代器版本</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// 从前开始找</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">else</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">// 元素不满足 true，跳出</span></span>
<span class="line">    <span class="token operator">--</span>__last<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// 从后开始找</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__pred</span><span class="token punctuation">(</span><span class="token operator">*</span>__last<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">--</span>__last<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">else</span>        <span class="token comment">// 元素满足 true，跳出</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iter_swap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 交换前后两个不满足条件的元素</span></span>
<span class="line">    <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>尼玛的，累死我了... 😆</p></blockquote>`,98)]))}const i=s(e,[["render",l],["__file","Chapter 6.7.1 - 数据处理算法.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.7.1%20-%20%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95.html","title":"Chapter 6.7.1 - 数据处理算法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"adjacent_find","slug":"adjacent-find","link":"#adjacent-find","children":[]},{"level":2,"title":"find / find_if","slug":"find-find-if","link":"#find-find-if","children":[]},{"level":2,"title":"search","slug":"search","link":"#search","children":[]},{"level":2,"title":"search_n","slug":"search-n","link":"#search-n","children":[]},{"level":2,"title":"find_end","slug":"find-end","link":"#find-end","children":[]},{"level":2,"title":"find_first_of","slug":"find-first-of","link":"#find-first-of","children":[]},{"level":2,"title":"count / count_if","slug":"count-count-if","link":"#count-count-if","children":[]},{"level":2,"title":"for_each","slug":"for-each","link":"#for-each","children":[]},{"level":2,"title":"transform","slug":"transform","link":"#transform","children":[]},{"level":2,"title":"generate / generate_n","slug":"generate-generate-n","link":"#generate-generate-n","children":[]},{"level":2,"title":"max_element / min_element","slug":"max-element-min-element","link":"#max-element-min-element","children":[]},{"level":2,"title":"remove / remove_copy / remove_if / remove_copy_if","slug":"remove-remove-copy-remove-if-remove-copy-if","link":"#remove-remove-copy-remove-if-remove-copy-if","children":[]},{"level":2,"title":"replace / replace_copy / replace_if / replace_copy_if","slug":"replace-replace-copy-replace-if-replace-copy-if","link":"#replace-replace-copy-replace-if-replace-copy-if","children":[]},{"level":2,"title":"reverse / reverse_copy","slug":"reverse-reverse-copy","link":"#reverse-reverse-copy","children":[]},{"level":2,"title":"rotate / rotate_copy","slug":"rotate-rotate-copy","link":"#rotate-rotate-copy","children":[]},{"level":2,"title":"swap_ranges","slug":"swap-ranges","link":"#swap-ranges","children":[]},{"level":2,"title":"unique / unique_copy","slug":"unique-unique-copy","link":"#unique-unique-copy","children":[]},{"level":2,"title":"includes","slug":"includes","link":"#includes","children":[]},{"level":2,"title":"merge","slug":"merge","link":"#merge","children":[]},{"level":2,"title":"partition","slug":"partition","link":"#partition","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.7.1 - 数据处理算法.md"}');export{i as comp,r as data};
