import{_ as a,c as i,a as n,o as t}from"./app-7eKjwDat.js";const s={};function l(c,e){return t(),i("div",null,e[0]||(e[0]=[n(`<h1 id="git-cached" tabindex="-1"><a class="header-anchor" href="#git-cached"><span>Git - Cached</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 04 / 22 16:29</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p><strong>cached</strong> 指的是 <strong>暂存区</strong>，即 Git 的三棵树中的 Index (中间那一颗)，暂存了本次将会 commit 的状态。正是因为有了 <strong>cached</strong>，运行 <code>git status</code> 时，会将工作目录中与暂存区中不一致的部分标红显示。</p><p>运行 <code>git add xxx</code> 后：</p><ul><li>将工作目录中的改动保存到暂存区中</li><li>再次运行 <code>git status</code>，工作目录与暂存区状态相同</li></ul><h2 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore"><span>.gitignore</span></a></h2><p>cached 中暂存了所有文件的状态，运行 <code>git status</code> 时，只会显示和工作目录中文件状态不一致的文件。而 <code>.gitignore</code> 文件的作用：<strong>阻止被忽略的文件从工作目录中加入暂存区</strong>。对于已经存在于暂存区中的待忽略文件，<code>.gitignore</code> 文件将会失效。</p><h2 id="clear-cache" tabindex="-1"><a class="header-anchor" href="#clear-cache"><span>Clear Cache</span></a></h2><p>如何使 <code>.gitignore</code> 文件重新生效呢？</p><ul><li>首先应当将整个暂存区清空</li><li>然后将整个工作目录重新导入暂存区</li><li>这样，需要被忽略的文件将不会被添加进暂存区</li></ul><p>清空暂存区全部文件 (该命令也可以用于从暂存区中移除某个已经暂存的文件)：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ git rm -r --cached .</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将工作目录全部导入暂存区：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ git add .</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>再查看暂存区状态，会发现 <code>.gitignore</code> 已经生效：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ git status</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,20)]))}const r=a(s,[["render",l],["__file","Git Cached.html.vue"]]),o=JSON.parse('{"path":"/notes/Git/Git%20Cached.html","title":"Git - Cached","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":".gitignore","slug":"gitignore","link":"#gitignore","children":[]},{"level":2,"title":"Clear Cache","slug":"clear-cache","link":"#clear-cache","children":[]}],"git":{},"filePathRelative":"notes/Git/Git Cached.md"}');export{r as comp,o as data};
