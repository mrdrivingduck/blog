import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-10-4-serial-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-10-4-serial-c-程序"><span>Chapter 10.4 - serial.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 26 17:18</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_10-4-serial-c-程序" tabindex="-1"><a class="header-anchor" href="#_10-4-serial-c-程序"><span>10.4 serial.c 程序</span></a></h2><h3 id="_10-4-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_10-4-1-功能描述"><span>10.4.1 功能描述</span></a></h3><p>本程序实现系统串行端口的初始化，为使用串行终端设备做好准备工作。</p><p><code>rs_init()</code> 函数：</p><ul><li>设置了默认的串行通信参数</li><li>设置串行端口的中断陷阱门</li></ul><p><code>rs_write()</code> 函数：把用于串行终端设备的写缓冲队列中的字符通过串行线路发给远端的终端设备。在文件系统中，操作字符设备文件时被调用。实际上只是开启 <strong>串行发送保持器已空中断标志</strong>，在 UART 将数据发送出去以后，允许发送中断信号。具体的发送操作在 <code>rs_io.s</code> 程序中完成。</p><h3 id="_10-4-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_10-4-2-代码注释"><span>10.4.2 代码注释</span></a></h3><h4 id="init-串行端口初始化" tabindex="-1"><a class="header-anchor" href="#init-串行端口初始化"><span>init() - 串行端口初始化</span></a></h4><p>设置指定串行端口的波特率，允许除 <strong>写保持寄存器空</strong> 以外的所有中断源。参数 <code>port</code> 为串行端口基地址：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">inb</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rs-init-初始化串行中断程序和串行接口" tabindex="-1"><a class="header-anchor" href="#rs-init-初始化串行中断程序和串行接口"><span>rs_init() - 初始化串行中断程序和串行接口</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">rs_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span> rs1_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 串口 1 的中断向量 - IRQ4</span></span>
<span class="line">    <span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span> rs2_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 串口 2 的中断向量 - IRQ3</span></span>
<span class="line">    <span class="token function">init</span><span class="token punctuation">(</span>tty_table<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">.</span>read_q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化串口 1</span></span>
<span class="line">    <span class="token function">init</span><span class="token punctuation">(</span>tty_table<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">.</span>read_q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化串口 2</span></span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许 8259A 响应 IRQ3、IRQ4</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rs-write-串行接口写函数" tabindex="-1"><a class="header-anchor" href="#rs-write-串行接口写函数"><span>rs_write() - 串行接口写函数</span></a></h4><p>该函数在 <code>tty_write()</code> 已将数据放入写缓冲队列后被调用。在该程序中，首先检查写队列是否为空，然后设置相应的中断寄存器。该函数仅开启 <strong>发送保持寄存器已空中断</strong> 的标志。以下过程由串口中断处理函数完成。</p><p>发送保持寄存器为空时，UART 就会产生中断。在中断处理程序中，取出写缓冲队列尾部的字符，输出到发送保持寄存器中。发送出去后，发送保持寄存器变空，从而再次引发中断请求，直到所有字符被发送。此时，程序重新禁止发送保持寄存器已空时发出的中断。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">rs_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关中断</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 写队列不为空</span></span>
<span class="line">        <span class="token comment">// 读取中断允许寄存器，置位允许中断标志后，写回该寄存器</span></span>
<span class="line">        <span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token operator">-&gt;</span>data<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x02</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token operator">-&gt;</span>data<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开中断</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21)]))}const i=s(e,[["render",c],["__file","Chapter 10.4 - serial.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2010%20-%20%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/Chapter%2010.4%20-%20serial.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 10.4 - serial.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"10.4 serial.c 程序","slug":"_10-4-serial-c-程序","link":"#_10-4-serial-c-程序","children":[{"level":3,"title":"10.4.1 功能描述","slug":"_10-4-1-功能描述","link":"#_10-4-1-功能描述","children":[]},{"level":3,"title":"10.4.2 代码注释","slug":"_10-4-2-代码注释","link":"#_10-4-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 10 - 字符设备驱动程序/Chapter 10.4 - serial.c 程序.md"}');export{i as comp,u as data};
