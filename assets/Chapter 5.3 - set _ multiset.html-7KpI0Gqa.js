import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-5-3-set-multiset" tabindex="-1"><a class="header-anchor" href="#chapter-5-3-set-multiset"><span>Chapter 5.3 - set &amp; multiset</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 06 16:57</p><p>Nanjing, Jiangsu, China</p><hr><p>set 的特性是，所有元素会根据元素的 key 自动排序。set 元素的 key 就是 value，并且不允许两个元素有相同的 key。另外，无法通过 set 的迭代器修改 set 的元素值：因为这将会破坏 set 的组织。</p><p>multiset 允许两个元素有相同的 key。</p><p>set 的迭代器在经历插入或删除操作后一般来说不会失效。</p><p>STL 特别提供了一组 set / multiset 的算法来进行集合操作：</p><ul><li><code>set_intersection()</code> 交集</li><li><code>set_union()</code> 并集</li><li><code>set_difference()</code> 差集</li><li><code>set_symmetric_difference()</code> 对称差集</li></ul><p>标准 STL 以 <strong>红黑树</strong> 作为 set 的底层机制。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>less<span class="token operator">&lt;</span>_Key<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 默认使用 &lt; 比较 key</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token comment">// 默认使用 alloc 分配器</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">set</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">set</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// requirements:</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Key<span class="token punctuation">,</span> _Assignable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Compare<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> _Key<span class="token punctuation">,</span> _Key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token comment">// typedefs:</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> _Key     key_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Key     value_type<span class="token punctuation">;</span> <span class="token comment">// key and value are the same</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Compare key_compare<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Compare value_compare<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Rb_tree<span class="token operator">&lt;</span>key_type<span class="token punctuation">,</span> value_type<span class="token punctuation">,</span></span>
<span class="line">                  _Identity<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span> <span class="token comment">/* KeyOfValue */</span><span class="token punctuation">,</span> key_compare<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _Rep_type<span class="token punctuation">;</span></span>
<span class="line">  _Rep_type _M_t<span class="token punctuation">;</span>  <span class="token comment">// red-black tree representing set</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span> <span class="token comment">// 只读迭代器，不可修改 key 的值</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_pointer pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_pointer const_pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_reference reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_iterator iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_iterator const_iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_reverse_iterator reverse_iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>const_reverse_iterator const_reverse_iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>size_type size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>difference_type difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>allocator_type allocator_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，红黑树的 <code>KeyOfValue</code> 仿函数被定义为 <code>identity</code>：key 即 value。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Identity</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x <span class="token comment">/* value */</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token comment">/* key */</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，基本上所有的 set 操作都转而调用红黑树的函数。</p><p>构造函数需要将 <strong>元素比较仿函数</strong> 传给红黑树：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span><span class="token function">_Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">explicit</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">,</span></span>
<span class="line">             <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__comp<span class="token punctuation">,</span> __a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span><span class="token function">_Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__comp<span class="token punctuation">,</span> __a<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">set</span><span class="token punctuation">(</span>const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span><span class="token function">_Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">set</span><span class="token punctuation">(</span>const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__comp<span class="token punctuation">,</span> __a<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元素访问函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">key_compare <span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">value_compare <span class="token function">value_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>_M_t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入函数。由于 set 不允许元素重复出现，因此在插入结点时，调用的是 <code>insert_unique()</code>。如果是 multiset，那么调用的是 <code>insert_equal()</code>。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// (从根结点开始寻找位置) 并插入元素</span></span>
<span class="line">    pair<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span> __p <span class="token operator">=</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__p<span class="token punctuation">.</span>first<span class="token punctuation">,</span> __p<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 在指定位置插入元素</span></span>
<span class="line">    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>iterator _Rep_iterator<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Rep_iterator<span class="token operator">&amp;</span><span class="token punctuation">)</span>__position<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_t<span class="token punctuation">.</span><span class="token function">insert_unique</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>iterator _Rep_iterator<span class="token punctuation">;</span></span>
<span class="line">    _M_t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Rep_iterator<span class="token operator">&amp;</span><span class="token punctuation">)</span>__position<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Rep_type</span><span class="token double-colon punctuation">::</span>iterator _Rep_iterator<span class="token punctuation">;</span></span>
<span class="line">    _M_t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Rep_iterator<span class="token operator">&amp;</span><span class="token punctuation">)</span>__first<span class="token punctuation">,</span> <span class="token punctuation">(</span>_Rep_iterator<span class="token operator">&amp;</span><span class="token punctuation">)</span>__last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_t<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找函数。由于元素有序，因此可以进行二分范围查找：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 查找确切元素</span></span>
<span class="line">size_type <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// 查找特定元素出现的个数 (只能为 0 或 1)</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token operator">==</span> _M_t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// 第一个大于等于 x 的结点</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">iterator <span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// 第一个大于 x 的结点</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">&gt;</span> <span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// 与 x 值相同的元素范围</span></span>
<span class="line">    <span class="token keyword">return</span> _M_t<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较运算符的重载直接借用了底层红黑树的运算符：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token keyword">const</span> set<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_t <span class="token operator">==</span> __y<span class="token punctuation">.</span>_M_t<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token keyword">const</span> set<span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span>_Compare<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_t <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>_M_t<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const i=s(e,[["render",o],["__file","Chapter 5.3 - set _ multiset.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%205%20-%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%205.3%20-%20set%20_%20multiset.html","title":"Chapter 5.3 - set & multiset","lang":"en-US","frontmatter":{},"headers":[],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 5 - 关联式容器/Chapter 5.3 - set & multiset.md"}');export{i as comp,u as data};
