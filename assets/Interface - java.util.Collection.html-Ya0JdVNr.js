import{_ as a,c as s,a as e,o as l}from"./app-7eKjwDat.js";const t={};function p(c,n){return l(),s("div",null,n[0]||(n[0]=[e(`<h1 id="interface-java-util-collection" tabindex="-1"><a class="header-anchor" href="#interface-java-util-collection"><span>Interface - java.util.Collection</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 11 / 03 18:04</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>E<span class="token punctuation">&gt;</span></span> the type of elements in this collection</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span>  Josh Bloch</span>
<span class="line"> * <span class="token keyword">@author</span>  Neal Gafter</span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">Set</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">List</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">Map</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">SortedSet</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">SortedMap</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">HashSet</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">TreeSet</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">ArrayList</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">LinkedList</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">Vector</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">Collections</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">Arrays</span></span></span>
<span class="line"> * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">AbstractCollection</span></span></span>
<span class="line"> * <span class="token keyword">@since</span> 1.2</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是集合的最基本的接口。集合表示了一组对象，有些集合允许存在重复的对象，有些则不行；有些集合是有序的，而有些是无序的、这个接口用于定义所有集合的通用行为，针对不同类型的集合还有子接口。</p><p>所有通用集合的实现类应当至少提供两个标准构造函数：</p><ul><li>一个空参数构造函数 - 用于创建空集合</li><li>一个同类型的单参数构造函数 - 创建一个新的具有相同元素的集合 (拷贝构造)</li></ul><p>不同类型的集合可能有不同的限制：有些集合禁止空元素；有些集合对数据类型有限制。每个集合自己决定是否实现同步。</p><h2 id="size" tabindex="-1"><a class="header-anchor" href="#size"><span>Size</span></a></h2><p>返回集合中的元素个数。如果结合中的元素多于 <code>Integer.MAX_VALUE</code>，则返回 <code>Integer.MAX_VALUE</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>顺便记录一下 code style。最近在看 alibaba 的 Java 开发手册，interface 中的函数不加 <code>public</code>。</p></blockquote><h2 id="empty" tabindex="-1"><a class="header-anchor" href="#empty"><span>Empty</span></a></h2><p>集合是否不包含元素。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="contains" tabindex="-1"><a class="header-anchor" href="#contains"><span>Contains</span></a></h2><p>返回集合中是否存在特定元素，当且仅当集合中至少有一个元素时返回 <code>true</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="iterator" tabindex="-1"><a class="header-anchor" href="#iterator"><span>Iterator</span></a></h2><p>返回遍历集合元素的迭代器。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="to-array" tabindex="-1"><a class="header-anchor" href="#to-array"><span>To Array</span></a></h2><p>返回一个包含所有元素的数组。如果集合能够保证迭代器返回元素的顺序，这个函数也需要保证相同的顺序。如果集合对象内部维护了一个数组的话，该函数返回的数组一定是一个新的拷贝。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span>Add</span></a></h2><p>如果集合被修改，返回 <code>true</code>；如果集合不允许重复并已有元素存在，返回 <code>false</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="remove" tabindex="-1"><a class="header-anchor" href="#remove"><span>Remove</span></a></h2><p>如果集合中存在一个或多个这样的元素，就删掉一个。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="contains-all" tabindex="-1"><a class="header-anchor" href="#contains-all"><span>Contains All</span></a></h2><p>如果集合中包含所有 <code>c</code> 中指定的元素，返回 <code>true</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="add-all" tabindex="-1"><a class="header-anchor" href="#add-all"><span>Add All</span></a></h2><p>将 <code>c</code> 中所有元素加入集合。如果特定结合在插入过程中被修改，那么操作状态未知 (暗示了自己不能 addAll 自己)。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="remove-all" tabindex="-1"><a class="header-anchor" href="#remove-all"><span>Remove All</span></a></h2><p>删除所有也在 <code>c</code> 中出现的元素。操作结束后，只剩下 <code>c</code> 中不出现的元素 (差集)。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="retain-all" tabindex="-1"><a class="header-anchor" href="#retain-all"><span>Retain All</span></a></h2><p>只保留也在 <code>c</code> 中出现的元素 (交集)。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="clear" tabindex="-1"><a class="header-anchor" href="#clear"><span>Clear</span></a></h2><p>清空集合。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="remove-if" tabindex="-1"><a class="header-anchor" href="#remove-if"><span>Remove If</span></a></h2><p>移除所有满足给定条件的元素。默认的实现：用迭代器迭代集合，用迭代器的 <code>Iterator.remove()</code> 移除元素。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">removeIf</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> removed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> each <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            each<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            removed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> removed<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="equals" tabindex="-1"><a class="header-anchor" href="#equals"><span>Equals</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="hash-code" tabindex="-1"><a class="header-anchor" href="#hash-code"><span>Hash Code</span></a></h2><p>返回集合的 hashcode。如果覆盖了 <code>equals()</code> 则必须覆盖 <code>hashcode()</code>。<code>c1.equals(c2)</code> 意味着 <code>c1.hashCode()==c2.hashCode()</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span>...</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Spliterators</span><span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">StreamSupport</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">StreamSupport</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个..这个是干啥的..暂时还不懂</p>`,59)]))}const o=a(t,[["render",p],["__file","Interface - java.util.Collection.html.vue"]]),r=JSON.parse('{"path":"/jdk-source-code-analysis/java.util/Interface%20-%20java.util.Collection.html","title":"Interface - java.util.Collection","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Size","slug":"size","link":"#size","children":[]},{"level":2,"title":"Empty","slug":"empty","link":"#empty","children":[]},{"level":2,"title":"Contains","slug":"contains","link":"#contains","children":[]},{"level":2,"title":"Iterator","slug":"iterator","link":"#iterator","children":[]},{"level":2,"title":"To Array","slug":"to-array","link":"#to-array","children":[]},{"level":2,"title":"Add","slug":"add","link":"#add","children":[]},{"level":2,"title":"Remove","slug":"remove","link":"#remove","children":[]},{"level":2,"title":"Contains All","slug":"contains-all","link":"#contains-all","children":[]},{"level":2,"title":"Add All","slug":"add-all","link":"#add-all","children":[]},{"level":2,"title":"Remove All","slug":"remove-all","link":"#remove-all","children":[]},{"level":2,"title":"Retain All","slug":"retain-all","link":"#retain-all","children":[]},{"level":2,"title":"Clear","slug":"clear","link":"#clear","children":[]},{"level":2,"title":"Remove If","slug":"remove-if","link":"#remove-if","children":[]},{"level":2,"title":"Equals","slug":"equals","link":"#equals","children":[]},{"level":2,"title":"Hash Code","slug":"hash-code","link":"#hash-code","children":[]},{"level":2,"title":"...","slug":"","link":"#","children":[]}],"git":{},"filePathRelative":"jdk-source-code-analysis/java.util/Interface - java.util.Collection.md"}');export{o as comp,r as data};
