import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/12-29-CwCQhUft.png",o={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-13-read-write-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-13-read-write-c-程序"><span>Chapter 12.13 - read_write.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 18 15:37</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-13-read-write-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-13-read-write-c-程序"><span>12.13 read_write.c 程序</span></a></h2><h3 id="_12-13-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-13-1-功能描述"><span>12.13.1 功能描述</span></a></h3><p>实现了文件操作的系统调用：</p><ul><li><code>read()</code></li><li><code>write()</code></li><li><code>lseek()</code>：用于设置文件读写指针</li></ul><p><code>read()</code> 和 <code>write()</code> 是之前几个文件的上层接口。在这两个函数中，判断文件的类型，并调用对应的处理函数。</p><h3 id="_12-13-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-13-2-代码注释"><span>12.13.2 代码注释</span></a></h3><h4 id="定义在前几个文件中的各设备的读写操作函数" tabindex="-1"><a class="header-anchor" href="#定义在前几个文件中的各设备的读写操作函数"><span>定义在前几个文件中的各设备的读写操作函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 字符设备</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">rw_char</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 管道设备</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">read_pipe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">write_pipe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 块设备</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">block_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">block_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 文件</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">file_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">file_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-lseek-重定位读写指针系统调用" tabindex="-1"><a class="header-anchor" href="#sys-lseek-重定位读写指针系统调用"><span>sys_lseek() - 重定位读写指针系统调用</span></a></h4><p>对于 <code>origin</code> 参数，表示偏移的起始位置，有三种选择：</p><ul><li><code>SEEK_SET</code>：0，从文件开始处</li><li><code>SEEK_CUR</code>：1，从文件当前位置</li><li><code>SEEK_END</code>：2，从文件末尾处</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_lseek</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> origin<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 参数有效性判断</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span> <span class="token comment">// 大于程序最多打开的文件数</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>file <span class="token operator">=</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token comment">// 该句柄的文件结构为空</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_inode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token comment">// 文件对应的 inode 为空</span></span>
<span class="line">        <span class="token operator">!</span><span class="token function">IS_SEEKABLE</span><span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 指针不可定位</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span> <span class="token comment">// 管道节点指针不可随意移动</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ESPIPE<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">switch</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">// 指针位于文件开始处</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">            file<span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> offset<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// 指针位于当前读写指针的位置</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_pos <span class="token operator">+</span> offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">            file<span class="token operator">-&gt;</span>pos <span class="token operator">+=</span> offset<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">// 指针位于当前文件末尾</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_inode<span class="token operator">-&gt;</span>i_size <span class="token operator">+</span> offset<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">            file<span class="token operator">-&gt;</span>f_pos <span class="token operator">=</span> tmp<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">;</span> <span class="token comment">// 返回重定位后的读写指针</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-read-读文件系统调用" tabindex="-1"><a class="header-anchor" href="#sys-read-读文件系统调用"><span>sys_read() - 读文件系统调用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 参数有效性判断</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span> <span class="token comment">// 超过程序最多打开文件数</span></span>
<span class="line">        count <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token comment">// 需要读取的字节数小于 0</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>file <span class="token operator">=</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 句柄的文件结构指针为空</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>count<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 验证存放数据的缓冲区内存限制</span></span>
<span class="line">    </span>
<span class="line">    inode <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_inode<span class="token punctuation">;</span> <span class="token comment">// 取 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 管道文件，且是读管道模式</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_mode <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">read_pipe</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 字符型设备文件</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">rw_char</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 块设备文件</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">block_read</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">S_ISREG</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 目录或普通文件</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> file<span class="token operator">-&gt;</span>f_pos <span class="token operator">&gt;</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 读取的字节数已经大于文件长度，则调整</span></span>
<span class="line">            count <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size <span class="token operator">-</span> file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 读取的字节数小于等于 0</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">file_read</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> file<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 执行到此处，则无法判断文件属性</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;(Read)inode-&gt;i_mode=%06o\\n\\r&quot;</span><span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-write-写文件系统调用" tabindex="-1"><a class="header-anchor" href="#sys-write-写文件系统调用"><span>sys_write() - 写文件系统调用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_write</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 判断参数有效性</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> NR_OPEN <span class="token operator">||</span> count <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>file <span class="token operator">=</span> current<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>count<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    inode <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_inode<span class="token punctuation">;</span> <span class="token comment">// 取文件的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_pipe<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 管道文件，且为写管道模式</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_mode <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">write_pipe</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 字符设备文件</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">rw_char</span><span class="token punctuation">(</span>WRITE<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 块设备文件</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">block_write</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>file<span class="token operator">-&gt;</span>f_pos<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 常规文件</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">file_write</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> file<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 执行到这里，则无法判断文件属性</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;(Write)inode-&gt;i_mode=%06o\\n\\r&quot;</span><span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-13-3-用户程序读写操作过程" tabindex="-1"><a class="header-anchor" href="#_12-13-3-用户程序读写操作过程"><span>12.13.3 用户程序读写操作过程</span></a></h3><p>应用程序不直接调用 Linux 系统调用，而是调用封装了系统调用的库函数，以保证程序的可移植性。对于 Linux 系统，所有的 I/O 均通过读写文件的方式完成。在读写文件之前，需要打开文件，通知 OS 将要开始的动作：</p><ul><li>OS 将检查是否具有权限进行操作</li><li>如果 ok，OS 将会向程序返回一个文件描述符，替代文件名来确定访问的文件</li><li>此时，被打开的文件的信息由 OS 维护，用户通过文件描述符来访问文件</li></ul><p>库函数中的 read 和 write：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>库函数的具体实现：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token function">_syscall3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> read<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token class-name">off_t</span> count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>_syscall3</code> 是一个宏，将被展开为：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">off_t</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> __res<span class="token punctuation">;</span></span>
<span class="line">    __asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;int &amp;0x80&quot;</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span>__res<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">(</span>__NR_read<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__res <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">int</span> __res<span class="token punctuation">;</span></span>
<span class="line">    errno <span class="token operator">=</span> <span class="token operator">-</span>__res<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 <code>__NR_read</code> (3) 为功能号，调用了 Linux 的系统调用中断。该中断在 <code>eax</code> 寄存器中返回了实际读取的字节数：如果返回的值小于 0，则表示此次读操作出错，对出错号进行取反，存入 errno 中，并返回 -1。整体函数的执行过程：</p><ul><li>判断参数有效性 <ul><li>文件描述符大于系统最多同时打开的文件数 (20)</li><li>读取字节数小于 0</li><li>该文件还没有被打开 (文件结构项指针为 NULL)</li></ul></li><li>验证存放数据的缓冲区大小是否合适，如果太小，系统会对其进行扩充 - 可能会冲毁后面的数据</li><li>获得该文件的 inode，根据其中的标志信息对文件类型进行判断 <ul><li>管道文件</li><li>字符设备文件：根据子设备号，调用字符设备驱动程序</li><li>块设备文件：调用内存高速缓冲处理程序 - 最后调用块设备驱动程序</li><li>常规文件：最后也会调用块设备驱动程序，但还需要维护内部文件表结构</li></ul></li><li>返回，库函数 <code>read()</code> 根据返回值来判断操作是否正确；若出错，则将错误号取反，并返回 -1</li></ul><p>调用层次：</p><p><img src="`+t+'" alt="12-29"></p>',34)]))}const u=s(o,[["render",c],["__file","Chapter 12.13 - read_write.c 程序.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.13%20-%20read_write.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.13 - read_write.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.13 read_write.c 程序","slug":"_12-13-read-write-c-程序","link":"#_12-13-read-write-c-程序","children":[{"level":3,"title":"12.13.1 功能描述","slug":"_12-13-1-功能描述","link":"#_12-13-1-功能描述","children":[]},{"level":3,"title":"12.13.2 代码注释","slug":"_12-13-2-代码注释","link":"#_12-13-2-代码注释","children":[]},{"level":3,"title":"12.13.3 用户程序读写操作过程","slug":"_12-13-3-用户程序读写操作过程","link":"#_12-13-3-用户程序读写操作过程","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.13 - read_write.c 程序.md"}');export{u as comp,r as data};
