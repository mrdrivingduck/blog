import{_ as n,c as a,a as e,o as l}from"./app-7eKjwDat.js";const p={};function i(t,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="xargs" tabindex="-1"><a class="header-anchor" href="#xargs"><span>xargs</span></a></h1><p>Created by : Mr Dk.</p><p>2022 / 12 / 05 01:11</p><p>Hangzhou, Zhejiang, China</p><hr><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>Background</span></a></h2><p><code>xargs</code> 用于从标准输入流中构造并执行命令。很多 Linux 程序是从标准输入流中接收输入参数的，这种程序可以作为管道的接收端，接收另一个程序输出到管道中的数据。然而有一些 Linux 程序是通过参数来接收输入的，这类程序无法作为管道的接收端。<code>xargs</code> 可以作为一个 adapter，在管道的接收端使用标准输入流接收数据，然后将数据构造为另一个 Linux 程序的参数，并执行这个程序。</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">xargs</span> <span class="token parameter variable">--help</span></span>
<span class="line">Usage: <span class="token function">xargs</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. COMMAND <span class="token punctuation">[</span>INITIAL-ARGS<span class="token punctuation">]</span><span class="token punctuation">..</span>.</span>
<span class="line">Run COMMAND with arguments INITIAL-ARGS and <span class="token function">more</span> arguments <span class="token builtin class-name">read</span> from input.</span>
<span class="line"></span>
<span class="line">Mandatory and optional arguments to long options are also</span>
<span class="line">mandatory or optional <span class="token keyword">for</span> the corresponding short option.</span>
<span class="line">  -0, <span class="token parameter variable">--null</span>                   items are separated by a null, not whitespace<span class="token punctuation">;</span></span>
<span class="line">                                 disables quote and backslash processing and</span>
<span class="line">                                 logical EOF processing</span>
<span class="line">  -a, --arg-file<span class="token operator">=</span>FILE          <span class="token builtin class-name">read</span> arguments from FILE, not standard input</span>
<span class="line">  -d, <span class="token parameter variable">--delimiter</span><span class="token operator">=</span>CHARACTER    items <span class="token keyword">in</span> input stream are separated by CHARACTER,</span>
<span class="line">                                 not by whitespace<span class="token punctuation">;</span> disables quote and backslash</span>
<span class="line">                                 processing and logical EOF processing</span>
<span class="line">  <span class="token parameter variable">-E</span> END                       <span class="token builtin class-name">set</span> logical EOF string<span class="token punctuation">;</span> <span class="token keyword">if</span> END occurs as a line</span>
<span class="line">                                 of input, the rest of the input is ignored</span>
<span class="line">                                 <span class="token punctuation">(</span>ignored <span class="token keyword">if</span> <span class="token parameter variable">-0</span> or <span class="token parameter variable">-d</span> was specified<span class="token punctuation">)</span></span>
<span class="line">  -e, --eof<span class="token punctuation">[</span><span class="token operator">=</span>END<span class="token punctuation">]</span>              equivalent to <span class="token parameter variable">-E</span> END <span class="token keyword">if</span> END is specified<span class="token punctuation">;</span></span>
<span class="line">                                 otherwise, there is no end-of-file string</span>
<span class="line">  <span class="token parameter variable">-I</span> R                         same as <span class="token parameter variable">--replace</span><span class="token operator">=</span>R</span>
<span class="line">  -i, --replace<span class="token punctuation">[</span><span class="token operator">=</span>R<span class="token punctuation">]</span>            replace R <span class="token keyword">in</span> INITIAL-ARGS with names <span class="token builtin class-name">read</span></span>
<span class="line">                                 from standard input<span class="token punctuation">;</span> <span class="token keyword">if</span> R is unspecified,</span>
<span class="line">                                 assume <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  -L, --max-lines<span class="token operator">=</span>MAX-<span class="token environment constant">LINES</span>    use at <span class="token function">most</span> MAX-<span class="token environment constant">LINES</span> non-blank input lines per</span>
<span class="line">                                 <span class="token builtin class-name">command</span> line</span>
<span class="line">  -l<span class="token punctuation">[</span>MAX-<span class="token environment constant">LINES</span><span class="token punctuation">]</span>                similar to <span class="token parameter variable">-L</span> but defaults to at <span class="token function">most</span> one non-</span>
<span class="line">                                 blank input line <span class="token keyword">if</span> MAX-<span class="token environment constant">LINES</span> is not specified</span>
<span class="line">  -n, --max-args<span class="token operator">=</span>MAX-ARGS      use at <span class="token function">most</span> MAX-ARGS arguments per <span class="token builtin class-name">command</span> line</span>
<span class="line">  -o, --open-tty               Reopen stdin as /dev/tty <span class="token keyword">in</span> the child process</span>
<span class="line">                                 before executing the <span class="token builtin class-name">command</span><span class="token punctuation">;</span> useful to run an</span>
<span class="line">                                 interactive application.</span>
<span class="line">  -P, --max-procs<span class="token operator">=</span>MAX-PROCS    run at <span class="token function">most</span> MAX-PROCS processes at a <span class="token function">time</span></span>
<span class="line">  -p, <span class="token parameter variable">--interactive</span>            prompt before running commands</span>
<span class="line">      --process-slot-var<span class="token operator">=</span>VAR   <span class="token builtin class-name">set</span> environment variable VAR <span class="token keyword">in</span> child processes</span>
<span class="line">  -r, --no-run-if-empty        <span class="token keyword">if</span> there are no arguments, <span class="token keyword">then</span> <span class="token keyword">do</span> not run COMMAND<span class="token punctuation">;</span></span>
<span class="line">                                 <span class="token keyword">if</span> this option is not given, COMMAND will be</span>
<span class="line">                                 run at least once</span>
<span class="line">  -s, --max-chars<span class="token operator">=</span>MAX-CHARS    limit length of <span class="token builtin class-name">command</span> line to MAX-CHARS</span>
<span class="line">      --show-limits            show limits on command-line length</span>
<span class="line">  -t, <span class="token parameter variable">--verbose</span>                print commands before executing them</span>
<span class="line">  -x, <span class="token parameter variable">--exit</span>                   <span class="token builtin class-name">exit</span> <span class="token keyword">if</span> the size <span class="token punctuation">(</span>see -s<span class="token punctuation">)</span> is exceeded</span>
<span class="line">      <span class="token parameter variable">--help</span>                   display this <span class="token builtin class-name">help</span> and <span class="token builtin class-name">exit</span></span>
<span class="line">      <span class="token parameter variable">--version</span>                output version information and <span class="token builtin class-name">exit</span></span>
<span class="line"></span>
<span class="line">Please see also the documentation at http://www.gnu.org/software/findutils/.</span>
<span class="line">You can report <span class="token punctuation">(</span>and track progress on fixing<span class="token punctuation">)</span> bugs <span class="token keyword">in</span> the <span class="token string">&quot;xargs&quot;</span></span>
<span class="line">program via the GNU findutils bug-reporting page at</span>
<span class="line">https://savannah.gnu.org/bugs/?group<span class="token operator">=</span>findutils or, <span class="token keyword">if</span></span>
<span class="line">you have no web access, by sending email to <span class="token operator">&lt;</span>bug-findutils@gnu.org<span class="token operator">&gt;</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数识别" tabindex="-1"><a class="header-anchor" href="#参数识别"><span>参数识别</span></a></h3><p><code>xargs</code> 默认通过标准输入流中获得的空格来分割参数。但万一输入流中的数据本身就包含空格呢？<code>-0</code> 参数可以让 <code>xargs</code> 使用输入流中的 <code>\\0</code> 字符来分割参数。假设我们有一个文件名中带空格的文件，把这个文件名通过 <code>xargs</code> 输入给 <code>rm</code> 程序，将会看到：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">ls</span></span>
<span class="line"><span class="token string">&#39;a a.txt&#39;</span></span>
<span class="line"></span>
<span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span></span>
<span class="line">rm: cannot remove <span class="token string">&#39;./a&#39;</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory</span>
<span class="line">rm: cannot remove <span class="token string">&#39;a.txt&#39;</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这说明 <code>xargs</code> 从输入流中把 <code>a</code> 识别为了一个参数，把 <code>a.txt</code> 识别为了一个参数，然后把这两个参数传给了 <code>rm</code>。显然 <code>rm</code> 找不到这两个文件。所以我们需要：</p><ol><li>使用 <code>-print0</code> 让 <code>find</code> 程序对每一条输出结果加一个 <code>\\0</code></li><li>使用 <code>-0</code> 让 <code>xargs</code> 使用 <code>\\0</code> 来识别参数</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">rm</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <code>-d</code> 参数可以自定义参数分隔字符。</p><h3 id="命令浏览" tabindex="-1"><a class="header-anchor" href="#命令浏览"><span>命令浏览</span></a></h3><p>使用 <code>-t</code> 参数可以让 <code>xargs</code> 打印将要执行的命令。以上一个例子为例，可以很容易地看出为什么执行失败了：因为 <code>rm</code> 接收了两个被拆分的参数：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token function">rm</span></span>
<span class="line"><span class="token function">rm</span> ./a a.txt</span>
<span class="line">rm: cannot remove <span class="token string">&#39;./a&#39;</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory</span>
<span class="line">rm: cannot remove <span class="token string">&#39;a.txt&#39;</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory</span>
<span class="line"></span>
<span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-0</span> <span class="token function">rm</span></span>
<span class="line"><span class="token function">rm</span> <span class="token string">&#39;./a a.txt&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手动确认执行" tabindex="-1"><a class="header-anchor" href="#手动确认执行"><span>手动确认执行</span></a></h3><p>使用 <code>-p</code> 参数可以让 <code>xargs</code> 打印将要执行的命令，并让用户手动确定后才开始执行。以上面的例子为例，只有按下回车后，命令才会被真正执行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">-0</span> <span class="token function">rm</span></span>
<span class="line"><span class="token function">rm</span> <span class="token string">&#39;./a a.txt&#39;</span> ?<span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数占位符" tabindex="-1"><a class="header-anchor" href="#参数占位符"><span>参数占位符</span></a></h3><p>如果将要执行的命令中会多次使用同一个参数该怎么做呢？以上面的例子为例，如果想要先打印文件名，再删除那个文件，就不得不引用 <code>find</code> 的输出结果两次。使用 <code>-I</code> 参数可以指定一个占位符：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token parameter variable">-I</span> % <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;echo %; rm &quot;%&quot;;&#39;</span></span>
<span class="line">./a a.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>文件名被成功打印，同时文件也被成功删除。</p><h3 id="从文件获取输入" tabindex="-1"><a class="header-anchor" href="#从文件获取输入"><span>从文件获取输入</span></a></h3><p>前面的例子全部使用标准输入流（实际上是管道）获取输入。<code>xargs</code> 也支持使用 <code>-a</code> 参数从文件中获取输入。</p><h3 id="参数个数指定" tabindex="-1"><a class="header-anchor" href="#参数个数指定"><span>参数个数指定</span></a></h3><p>当 <code>xargs</code> 获取到多个参数时，应该把这些参数一股脑灌给将要执行的命令，还是将每个参数作为后续命令的唯一参数，多次执行后续命令呢？使用 <code>-n</code> 参数来控制输入给后续命令的参数个数：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">touch</span> a b c</span>
<span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-0</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">rm</span></span>
<span class="line"><span class="token function">rm</span> ./b</span>
<span class="line"><span class="token function">rm</span> ./a</span>
<span class="line"><span class="token function">rm</span> ./c</span>
<span class="line"></span>
<span class="line">$ <span class="token function">touch</span> a b c</span>
<span class="line">$ <span class="token function">find</span> ./ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-0</span> <span class="token function">rm</span></span>
<span class="line"><span class="token function">rm</span> ./b ./a ./c</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://shapeshed.com/unix-xargs/" target="_blank" rel="noopener noreferrer">Linux and Unix xargs command tutorial with examples</a></p><p><a href="https://man7.org/linux/man-pages/man1/xargs.1.html" target="_blank" rel="noopener noreferrer">xargs(1) — Linux manual page</a></p><p><a href="https://phoenixnap.com/kb/xargs-command" target="_blank" rel="noopener noreferrer">How to Use the Linux xargs Command</a></p>`,35)]))}const r=n(p,[["render",i],["__file","xargs.html.vue"]]),o=JSON.parse('{"path":"/notes/Linux/xargs.html","title":"xargs","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Background","slug":"background","link":"#background","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[{"level":3,"title":"参数识别","slug":"参数识别","link":"#参数识别","children":[]},{"level":3,"title":"命令浏览","slug":"命令浏览","link":"#命令浏览","children":[]},{"level":3,"title":"手动确认执行","slug":"手动确认执行","link":"#手动确认执行","children":[]},{"level":3,"title":"参数占位符","slug":"参数占位符","link":"#参数占位符","children":[]},{"level":3,"title":"从文件获取输入","slug":"从文件获取输入","link":"#从文件获取输入","children":[]},{"level":3,"title":"参数个数指定","slug":"参数个数指定","link":"#参数个数指定","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Linux/xargs.md"}');export{r as comp,o as data};
