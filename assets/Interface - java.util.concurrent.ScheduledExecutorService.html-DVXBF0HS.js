import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="interface-java-util-concurrent-scheduledexecutorservice" tabindex="-1"><a class="header-anchor" href="#interface-java-util-concurrent-scheduledexecutorservice"><span>Interface - java.util.concurrent.ScheduledExecutorService</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 02 / 16 🧧 15:48</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><p>该接口扩展了 <code>ExecutorService</code> 接口，使任务可以被调度至 <strong>稍后执行</strong>，或 <strong>周期性执行</strong>。其中定义的 <code>schedule()</code> 函数能够指定在任意延时后执行任务，而 <code>scheduleAtFixedRate()</code> 函数指定以固定的周期执行任务。对于父类接口中定义的 <code>execute()</code> 等相当于以零延时 (立刻) 执行任务。</p><p>所有的调度函数参数接收的都是 <strong>相对时间</strong>，而不是绝对时间。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * An <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ExecutorService</span></span><span class="token punctuation">}</span> that can schedule commands to run after a given</span>
<span class="line"> * delay, or to execute periodically.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">schedule</span></span><span class="token punctuation">}</span> methods create tasks with various delays</span>
<span class="line"> * and return a task object that can be used to cancel or check</span>
<span class="line"> * execution. The <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">scheduleAtFixedRate</span></span><span class="token punctuation">}</span> and</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">scheduleWithFixedDelay</span></span><span class="token punctuation">}</span> methods create and execute tasks</span>
<span class="line"> * that run periodically until cancelled.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Commands submitted using the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Executor</span><span class="token punctuation">#</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>
<span class="line"> * and <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ExecutorService</span></span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">submit</span></span><span class="token punctuation">}</span> methods are scheduled</span>
<span class="line"> * with a requested delay of zero. Zero and negative delays (but not</span>
<span class="line"> * periods) are also allowed in <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">schedule</span></span><span class="token punctuation">}</span> methods, and are</span>
<span class="line"> * treated as requests for immediate execution.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>All <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">schedule</span></span><span class="token punctuation">}</span> methods accept <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>relative<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> delays and</span>
<span class="line"> * periods as arguments, not absolute times or dates. It is a simple</span>
<span class="line"> * matter to transform an absolute time represented as a <span class="token punctuation">{</span><span class="token keyword">@link</span></span>
<span class="line"> * <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">}</span> to the required form. For example, to schedule at</span>
<span class="line"> * a certain future <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">date</span></span><span class="token punctuation">}</span>, you can use: <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span></span></span>
<span class="line"> * <span class="token code language-java">date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>. Beware however that expiration of a</span>
<span class="line"> * relative delay need not coincide with the current <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Date</span></span></span><span class="token punctuation">}</span> at</span>
<span class="line"> * which the task is enabled due to network time synchronization</span>
<span class="line"> * protocols, clock drift, or other factors.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Executors</span></span><span class="token punctuation">}</span> class provides convenient factory methods for</span>
<span class="line"> * the ScheduledExecutorService implementations provided in this package.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Usage Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * Here is a class with a method that sets up a ScheduledExecutorService</span>
<span class="line"> * to beep every ten seconds for an hour:</span>
<span class="line"> *</span>
<span class="line"> *  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span></span>
<span class="line"> <span class="token code-section">* <span class="token code language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token keyword">class</span> <span class="token class-name">BeeperControl</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduler <span class="token operator">=</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *</span>
<span class="line"> *   <span class="token code language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beepForAnHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token keyword">final</span> <span class="token class-name">Runnable</span> beeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;beep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token keyword">final</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beeperHandle <span class="token operator">=</span></span></span>
<span class="line"> *       <span class="token code language-java">scheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>beeper<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *     <span class="token code language-java">scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
<span class="line"> *       <span class="token code language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> beeperHandle<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>
<span class="line"> *     <span class="token code language-java"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"> *   <span class="token code language-java"><span class="token punctuation">}</span></span></span>
<span class="line"> * <span class="token code language-java"><span class="token punctuation">}</span></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@since</span> 1.5</span>
<span class="line"> * <span class="token keyword">@author</span> Doug Lea</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="schedule" tabindex="-1"><a class="header-anchor" href="#schedule"><span>Schedule</span></a></h2><p>在指定的延时后创建并执行任务。返回一个用于查询状态或停止执行的 <code>Future</code> 对象。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Creates and executes a one-shot action that becomes enabled</span>
<span class="line"> * after the given delay.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">command</span> the task to execute</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">delay</span> the time from now to delay execution</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the delay parameter</span>
<span class="line"> * <span class="token keyword">@return</span> a ScheduledFuture representing pending completion of</span>
<span class="line"> *         the task and whose <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> method will return</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> upon completion</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if command is null</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span></span>
<span class="line">                                   <span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Creates and executes a ScheduledFuture that becomes enabled after the</span>
<span class="line"> * given delay.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">callable</span> the function to execute</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">delay</span> the time from now to delay execution</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the delay parameter</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> the type of the callable&#39;s result</span>
<span class="line"> * <span class="token keyword">@return</span> a ScheduledFuture that can be used to extract result or cancel</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if callable is null</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">,</span></span>
<span class="line">                                       <span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="schedule-at-fixed-rate" tabindex="-1"><a class="header-anchor" href="#schedule-at-fixed-rate"><span>Schedule at Fixed Rate</span></a></h2><p>任务将在一段 <strong>初始延时</strong> 之后，以固定的周期被启动执行。任务只能通过取消或关闭执行器的方式终结。如果任务的执行超过了执行周期，随后的任务将会暂缓开始，而不会并发执行。</p><p>注意，下一个任务的启动时间只和任务的执行周期有关，与任务执行期间耗费的时间无关。这里的 <strong>周期</strong> 指的是 <strong>前一个任务的开始时刻</strong> 到 <strong>下一个任务的开始时刻</strong> 的时间差。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Creates and executes a periodic action that becomes enabled first</span>
<span class="line"> * after the given initial delay, and subsequently with the given</span>
<span class="line"> * period; that is executions will commence after</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">initialDelay</span></span><span class="token punctuation">}</span> then <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">initialDelay<span class="token operator">+</span>period</span></span><span class="token punctuation">}</span>, then</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">initialDelay <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> period</span></span><span class="token punctuation">}</span>, and so on.</span>
<span class="line"> * If any execution of the task</span>
<span class="line"> * encounters an exception, subsequent executions are suppressed.</span>
<span class="line"> * Otherwise, the task will only terminate via cancellation or</span>
<span class="line"> * termination of the executor.  If any execution of this task</span>
<span class="line"> * takes longer than its period, then subsequent executions</span>
<span class="line"> * may start late, but will not concurrently execute.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">command</span> the task to execute</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">initialDelay</span> the time to delay first execution</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">period</span> the period between successive executions</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the initialDelay and period parameters</span>
<span class="line"> * <span class="token keyword">@return</span> a ScheduledFuture representing pending completion of</span>
<span class="line"> *         the task, and whose <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> method will throw an</span>
<span class="line"> *         exception upon cancellation</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if command is null</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if period less than or equal to zero</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span></span>
<span class="line">                                              <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span></span>
<span class="line">                                              <span class="token keyword">long</span> period<span class="token punctuation">,</span></span>
<span class="line">                                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="schedule-with-fixed-delay" tabindex="-1"><a class="header-anchor" href="#schedule-with-fixed-delay"><span>Schedule with Fixed Delay</span></a></h2><p>任务将在一段 <strong>初始延时</strong> 之后，以固定的 <strong>间隔</strong> 被执行。间隔的具体含义是 <strong>前一个任务的结束时刻</strong> 到 <strong>下一个任务的开始时刻</strong> 之间的时间差。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Creates and executes a periodic action that becomes enabled first</span>
<span class="line"> * after the given initial delay, and subsequently with the</span>
<span class="line"> * given delay between the termination of one execution and the</span>
<span class="line"> * commencement of the next.  If any execution of the task</span>
<span class="line"> * encounters an exception, subsequent executions are suppressed.</span>
<span class="line"> * Otherwise, the task will only terminate via cancellation or</span>
<span class="line"> * termination of the executor.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">command</span> the task to execute</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">initialDelay</span> the time to delay first execution</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">delay</span> the delay between the termination of one</span>
<span class="line"> * execution and the commencement of the next</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the initialDelay and delay parameters</span>
<span class="line"> * <span class="token keyword">@return</span> a ScheduledFuture representing pending completion of</span>
<span class="line"> *         the task, and whose <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> method will throw an</span>
<span class="line"> *         exception upon cancellation</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be</span>
<span class="line"> *         scheduled for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if command is null</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if delay less than or equal to zero</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span></span>
<span class="line">                                                 <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span></span>
<span class="line">                                                 <span class="token keyword">long</span> delay<span class="token punctuation">,</span></span>
<span class="line">                                                 <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,20)]))}const i=s(t,[["render",l],["__file","Interface - java.util.concurrent.ScheduledExecutorService.html.vue"]]),u=JSON.parse('{"path":"/jdk-source-code-analysis/java.util.concurrent/Interface%20-%20java.util.concurrent.ScheduledExecutorService.html","title":"Interface - java.util.concurrent.ScheduledExecutorService","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Schedule","slug":"schedule","link":"#schedule","children":[]},{"level":2,"title":"Schedule at Fixed Rate","slug":"schedule-at-fixed-rate","link":"#schedule-at-fixed-rate","children":[]},{"level":2,"title":"Schedule with Fixed Delay","slug":"schedule-with-fixed-delay","link":"#schedule-with-fixed-delay","children":[]}],"git":{},"filePathRelative":"jdk-source-code-analysis/java.util.concurrent/Interface - java.util.concurrent.ScheduledExecutorService.md"}');export{i as comp,u as data};
