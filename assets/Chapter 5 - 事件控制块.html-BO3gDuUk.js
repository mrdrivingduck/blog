import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="chapter-5-事件控制块" tabindex="-1"><a class="header-anchor" href="#chapter-5-事件控制块"><span>Chapter 5 - 事件控制块</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 11 / 19 22:34</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_5-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_5-1-基本概念"><span>5.1 基本概念</span></a></h2><p>事件通信方法的实现方式 - 事件控制块 (Event Control Blocks, ECB)。任务或中断服务子程序可以通过 ECB 向别的任务发送信号：</p><ul><li>信号量</li><li>互斥信号量</li><li>消息邮箱</li><li>消息队列</li><li>事件标志组</li></ul><p>ECB 是各种事件的基础性数据结构，是这些信号的 metadata：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">os_event</span> <span class="token punctuation">{</span></span>
<span class="line">    INT8U    OSEventType<span class="token punctuation">;</span>                    <span class="token comment">/* Type of event control block (see OS_EVENT_TYPE_xxxx)    */</span></span>
<span class="line">    <span class="token keyword">void</span>    <span class="token operator">*</span>OSEventPtr<span class="token punctuation">;</span>                     <span class="token comment">/* Pointer to message or queue structure                   */</span></span>
<span class="line">    INT16U   OSEventCnt<span class="token punctuation">;</span>                     <span class="token comment">/* Semaphore Count (not used if other EVENT type)          */</span></span>
<span class="line">    OS_PRIO  OSEventGrp<span class="token punctuation">;</span>                     <span class="token comment">/* Group corresponding to tasks waiting for event to occur */</span></span>
<span class="line">    OS_PRIO  OSEventTbl<span class="token punctuation">[</span>OS_EVENT_TBL_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* List of tasks waiting for event to occur                */</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_EVENT_NAME_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    INT8U   <span class="token operator">*</span>OSEventName<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token punctuation">}</span> OS_EVENT<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>OSEventType</code> 指明事件的类型 <ul><li><code>OS_EVENT_SEM</code>：信号量</li><li><code>OS_EVENT_MUTEX</code>：互斥信号量</li><li><code>OS_EVENT_TYPE_MBOX</code>：邮箱</li><li><code>OS_EVENT_TYPE_Q</code>：消息队列</li></ul></li><li><code>OSEventPtr</code> 指向对应的邮箱或队列</li><li><code>OSEventCnt</code> 指明事件是信号量时的个数</li><li><code>OSEventGrp</code> 和 <code>OSEventTbl</code> 指明所有等待该事件的任务 <ul><li>与就绪表的实现方式一致</li></ul></li></ul><h2 id="_5-2-将任务置于等待事件的任务列表中" tabindex="-1"><a class="header-anchor" href="#_5-2-将任务置于等待事件的任务列表中"><span>5.2 将任务置于等待事件的任务列表中</span></a></h2><p>与就绪表中的操作类似</p><ul><li><code>OSEventGrp</code> 的每一位代表 8 个任务</li><li><code>OSEventTbl</code> 指明了 64 个任务哪个处在等待状态</li></ul><p>用于快速获得优先级最高的等待任务。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">|=</span> OSMapTbl<span class="token punctuation">[</span>prio <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>prio <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|=</span> OSMapTbl<span class="token punctuation">[</span>prio <span class="token operator">&amp;</span> <span class="token number">0x07</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-从等待事件的任务列表中删除任务" tabindex="-1"><a class="header-anchor" href="#_5-3-从等待事件的任务列表中删除任务"><span>5.3 从等待事件的任务列表中删除任务</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>prio <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>OSMapTbl<span class="token punctuation">[</span>prio <span class="token operator">&amp;</span> <span class="token number">0x07</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">&amp;=</span> <span class="token operator">~</span>OSMapTbl<span class="token punctuation">[</span>prio <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-4-在等待事件的任务列表中查找优先级最高的任务" tabindex="-1"><a class="header-anchor" href="#_5-4-在等待事件的任务列表中查找优先级最高的任务"><span>5.4 在等待事件的任务列表中查找优先级最高的任务</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">y <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span>pevent<span class="token operator">-&gt;</span>OSEventGrp<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span>pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">prio <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-5-空闲事件控制块链表" tabindex="-1"><a class="header-anchor" href="#_5-5-空闲事件控制块链表"><span>5.5 空闲事件控制块链表</span></a></h2><p>在调用 <code>OSInit()</code> 时，所有的 ECB 被串成一个空闲链表。<code>OSEventFreeList</code> 指针总指向第一个空闲 ECB。建立事件时，就从链表中取下一个空闲 ECB 并进行初始化；删除事件后，ECB 被放回空闲链表中。空闲 ECB 的总数在编译前定义。</p><h2 id="_5-6-初始化一个-ecb-os-eventwaitlistinit-函数" tabindex="-1"><a class="header-anchor" href="#_5-6-初始化一个-ecb-os-eventwaitlistinit-函数"><span>5.6 初始化一个 ECB - OS_EventWaitListInit() 函数</span></a></h2><p>当建立任意一种事件时，对应的建立函数都要调该函数，对 ECB 中的等待任务列表进行初始化。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                 INITIALIZE EVENT CONTROL BLOCK&#39;S WAIT LIST</span>
<span class="line">*</span>
<span class="line">* Description: This function is called by other uC/OS-II services to initialize the event wait list.</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent    is a pointer to the event control block allocated to the event.</span>
<span class="line">*</span>
<span class="line">* Returns    : none</span>
<span class="line">*</span>
<span class="line">* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>OS_EVENT_EN<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">OS_EventWaitListInit</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span>pevent<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    INT8U  i<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span>                     <span class="token comment">/* No task waiting on event                           */</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> OS_EVENT_TBL_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为避免 for 循环而增加开销，这部分代码也可以由条件编译实现 😂（之后还会有很多这样的方法）。</p><h2 id="_5-7-使一个任务脱离等待进入就绪-os-eventtaskrdy-函数" tabindex="-1"><a class="header-anchor" href="#_5-7-使一个任务脱离等待进入就绪-os-eventtaskrdy-函数"><span>5.7 使一个任务脱离等待进入就绪 - OS_EventTaskRdy() 函数</span></a></h2><p>事件发生后，等待任务列表中，优先级最高的任务得到这个事件，从而脱离等待进入就绪状态。</p><p>原理：</p><ul><li>从等待任务列表中查找优先级最高的任务，从中清除</li><li>将 TCB 中的延时变量清零 (等待事件可以设定超时时间)</li><li>将 TCB 中指向 ECB 的指针置 <code>NULL</code> (任务不再等待该事件发生)</li><li>可能还要将事件中的消息放到 TCB 中 (比如邮箱)</li><li>用位掩码将 TCB 中的 <code>OSTCBStat</code> 位清零</li><li>判断最高优先级任务的挂起条件 <ul><li>如果是因为等待该事件而挂起，则插入就绪表</li><li>(任务可能还因为其它条件挂起，因此也不一定进入就绪状态)</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                             MAKE TASK READY TO RUN BASED ON EVENT OCCURING</span>
<span class="line">*</span>
<span class="line">* Description: This function is called by other uC/OS-II services and is used to ready a task that was</span>
<span class="line">*              waiting for an event to occur.</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent      is a pointer to the event control block corresponding to the event.</span>
<span class="line">*</span>
<span class="line">*              pmsg        is a pointer to a message.  This pointer is used by message oriented services</span>
<span class="line">*                          such as MAILBOXEs and QUEUEs.  The pointer is not used when called by other</span>
<span class="line">*                          service functions.</span>
<span class="line">*</span>
<span class="line">*              msk         is a mask that is used to clear the status byte of the TCB.  For example,</span>
<span class="line">*                          OSSemPost() will pass OS_STAT_SEM, OSMboxPost() will pass OS_STAT_MBOX etc.</span>
<span class="line">*</span>
<span class="line">*              pend_stat   is used to indicate the readied task&#39;s pending status:</span>
<span class="line">*</span>
<span class="line">*                          OS_STAT_PEND_OK      Task ready due to a post (or delete), not a timeout or</span>
<span class="line">*                                               an abort.</span>
<span class="line">*                          OS_STAT_PEND_ABORT   Task ready due to an abort.</span>
<span class="line">*</span>
<span class="line">* Returns    : none</span>
<span class="line">*</span>
<span class="line">* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>OS_EVENT_EN<span class="token punctuation">)</span></span></span></span>
<span class="line">INT8U  <span class="token function">OS_EventTaskRdy</span> <span class="token punctuation">(</span>OS_EVENT  <span class="token operator">*</span>pevent<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token keyword">void</span>      <span class="token operator">*</span>pmsg<span class="token punctuation">,</span></span>
<span class="line">                        INT8U      msk<span class="token punctuation">,</span></span>
<span class="line">                        INT8U      pend_stat<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    OS_TCB   <span class="token operator">*</span>ptcb<span class="token punctuation">;</span></span>
<span class="line">    INT8U     y<span class="token punctuation">;</span></span>
<span class="line">    INT8U     x<span class="token punctuation">;</span></span>
<span class="line">    INT8U     prio<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_LOWEST_PRIO <span class="token operator">&gt;</span> <span class="token number">63u</span></span></span></span>
<span class="line">    OS_PRIO  <span class="token operator">*</span>ptbl<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_LOWEST_PRIO <span class="token operator">&lt;=</span> <span class="token number">63u</span></span></span></span>
<span class="line">    y    <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span>pevent<span class="token operator">-&gt;</span>OSEventGrp<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">/* Find HPT waiting for message                */</span></span>
<span class="line">    x    <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span>pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    prio <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">3u</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">/* Find priority of task getting the msg       */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">&amp;</span> <span class="token number">0xFFu</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">/* Find HPT waiting for message                */</span></span>
<span class="line">        y <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span> pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">&amp;</span> <span class="token number">0xFFu</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        y <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span><span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFu</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8u</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    ptbl <span class="token operator">=</span> <span class="token operator">&amp;</span>pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>ptbl <span class="token operator">&amp;</span> <span class="token number">0xFFu</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span><span class="token operator">*</span>ptbl <span class="token operator">&amp;</span> <span class="token number">0xFFu</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        x <span class="token operator">=</span> OSUnMapTbl<span class="token punctuation">[</span><span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>ptbl <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFu</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8u</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    prio <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">4u</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">/* Find priority of task getting the msg       */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    ptcb                  <span class="token operator">=</span>  OSTCBPrioTbl<span class="token punctuation">[</span>prio<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/* Point to this task&#39;s OS_TCB                 */</span></span>
<span class="line">    ptcb<span class="token operator">-&gt;</span>OSTCBDly        <span class="token operator">=</span>  <span class="token number">0u</span><span class="token punctuation">;</span>                        <span class="token comment">/* Prevent OSTimeTick() from readying task     */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>OS_Q_EN <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>OS_MAX_QS <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>OS_MBOX_EN <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span></span></span></span>
<span class="line">    ptcb<span class="token operator">-&gt;</span>OSTCBMsg        <span class="token operator">=</span>  pmsg<span class="token punctuation">;</span>                      <span class="token comment">/* Send message directly to waiting task       */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    pmsg                  <span class="token operator">=</span>  pmsg<span class="token punctuation">;</span>                      <span class="token comment">/* Prevent compiler warning if not used        */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    ptcb<span class="token operator">-&gt;</span>OSTCBStat      <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token operator">~</span>msk<span class="token punctuation">;</span>                <span class="token comment">/* Clear bit associated with event type        */</span></span>
<span class="line">    ptcb<span class="token operator">-&gt;</span>OSTCBStatPend   <span class="token operator">=</span>  pend_stat<span class="token punctuation">;</span>                 <span class="token comment">/* Set pend status of post or abort            */</span></span>
<span class="line">                                                        <span class="token comment">/* See if task is ready (could be susp&#39;d)      */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ptcb<span class="token operator">-&gt;</span>OSTCBStat <span class="token operator">&amp;</span>   OS_STAT_SUSPEND<span class="token punctuation">)</span> <span class="token operator">==</span> OS_STAT_RDY<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        OSRdyGrp         <span class="token operator">|=</span>  ptcb<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span>           <span class="token comment">/* Put task in the ready to run list           */</span></span>
<span class="line">        OSRdyTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span>      <span class="token operator">|=</span>  ptcb<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">OS_EventTaskRemove</span><span class="token punctuation">(</span>ptcb<span class="token punctuation">,</span> pevent<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">/* Remove this task from event   wait list     */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>OS_EVENT_MULTI_EN <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptcb<span class="token operator">-&gt;</span>OSTCBEventMultiPtr <span class="token operator">!=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">/* Remove this task from events&#39; wait lists    */</span></span>
<span class="line">        <span class="token function">OS_EventTaskRemoveMulti</span><span class="token punctuation">(</span>ptcb<span class="token punctuation">,</span> ptcb<span class="token operator">-&gt;</span>OSTCBEventMultiPtr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ptcb<span class="token operator">-&gt;</span>OSTCBEventPtr       <span class="token operator">=</span> <span class="token punctuation">(</span>OS_EVENT  <span class="token operator">*</span><span class="token punctuation">)</span>pevent<span class="token punctuation">;</span><span class="token comment">/* Return event as first multi-pend event ready*/</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>prio<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-8-使一个任务进入等待事件发生状态-os-eventtaskwait-函数" tabindex="-1"><a class="header-anchor" href="#_5-8-使一个任务进入等待事件发生状态-os-eventtaskwait-函数"><span>5.8 使一个任务进入等待事件发生状态 - OS_EventTaskWait() 函数</span></a></h2><p>某个任务要等待某个事件发生时被调用</p><ul><li>将任务从就绪表中删除</li><li>放到对应 ECB 的等待任务列表中</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                   MAKE TASK WAIT FOR EVENT TO OCCUR</span>
<span class="line">*</span>
<span class="line">* Description: This function is called by other uC/OS-II services to suspend a task because an event has</span>
<span class="line">*              not occurred.</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent   is a pointer to the event control block for which the task will be waiting for.</span>
<span class="line">*</span>
<span class="line">* Returns    : none</span>
<span class="line">*</span>
<span class="line">* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>OS_EVENT_EN<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">OS_EventTaskWait</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span>pevent<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    INT8U  y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBEventPtr               <span class="token operator">=</span> pevent<span class="token punctuation">;</span>                 <span class="token comment">/* Store ptr to ECB in TCB         */</span></span>
<span class="line"></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">]</span> <span class="token operator">|=</span> OSTCBCur<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">;</span>    <span class="token comment">/* Put task in waiting list        */</span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventGrp                   <span class="token operator">|=</span> OSTCBCur<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    y             <span class="token operator">=</span>  OSTCBCur<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">;</span>            <span class="token comment">/* Task no longer ready                              */</span></span>
<span class="line">    OSRdyTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span>  <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token operator">~</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSRdyTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment">/* Clear event grp bit if this was only task pending */</span></span>
<span class="line">        OSRdyGrp <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token operator">~</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-9-由于等待超时而将任务置为就绪态-os-eventto-函数" tabindex="-1"><a class="header-anchor" href="#_5-9-由于等待超时而将任务置为就绪态-os-eventto-函数"><span>5.9 由于等待超时而将任务置为就绪态 - OS_EventTO() 函数</span></a></h2><p>在预先设定的时间内，事件没有发生，任务的状态会被重新设置为就绪。</p><ul><li>将任务从等待列表中删除</li><li>将任务设置为就绪状态</li><li>从 TCB 中删除指向 ECB 的指针</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/* no source code ??? */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_EVENT_EN <span class="token operator">&gt;</span> <span class="token number">0</span></span></span></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">OS_EventTO</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span>pevent<span class="token punctuation">)</span> reentrant</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">&amp;=</span> <span class="token operator">~</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBStat <span class="token operator">=</span> OS_STAT_RDY<span class="token punctuation">;</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBEventPtr <span class="token operator">=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>这一章中的函数会被接下来几章中不同事件的具体实现所调用。</p>`,42)]))}const c=s(t,[["render",l],["__file","Chapter 5 - 事件控制块.html.vue"]]),r=JSON.parse('{"path":"/uc-os-ii-code-notes/Chapter%205%20-%20%E4%BA%8B%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%9D%97.html","title":"Chapter 5 - 事件控制块","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"5.1 基本概念","slug":"_5-1-基本概念","link":"#_5-1-基本概念","children":[]},{"level":2,"title":"5.2 将任务置于等待事件的任务列表中","slug":"_5-2-将任务置于等待事件的任务列表中","link":"#_5-2-将任务置于等待事件的任务列表中","children":[]},{"level":2,"title":"5.3 从等待事件的任务列表中删除任务","slug":"_5-3-从等待事件的任务列表中删除任务","link":"#_5-3-从等待事件的任务列表中删除任务","children":[]},{"level":2,"title":"5.4 在等待事件的任务列表中查找优先级最高的任务","slug":"_5-4-在等待事件的任务列表中查找优先级最高的任务","link":"#_5-4-在等待事件的任务列表中查找优先级最高的任务","children":[]},{"level":2,"title":"5.5 空闲事件控制块链表","slug":"_5-5-空闲事件控制块链表","link":"#_5-5-空闲事件控制块链表","children":[]},{"level":2,"title":"5.6 初始化一个 ECB - OS_EventWaitListInit() 函数","slug":"_5-6-初始化一个-ecb-os-eventwaitlistinit-函数","link":"#_5-6-初始化一个-ecb-os-eventwaitlistinit-函数","children":[]},{"level":2,"title":"5.7 使一个任务脱离等待进入就绪 - OS_EventTaskRdy() 函数","slug":"_5-7-使一个任务脱离等待进入就绪-os-eventtaskrdy-函数","link":"#_5-7-使一个任务脱离等待进入就绪-os-eventtaskrdy-函数","children":[]},{"level":2,"title":"5.8 使一个任务进入等待事件发生状态 - OS_EventTaskWait() 函数","slug":"_5-8-使一个任务进入等待事件发生状态-os-eventtaskwait-函数","link":"#_5-8-使一个任务进入等待事件发生状态-os-eventtaskwait-函数","children":[]},{"level":2,"title":"5.9 由于等待超时而将任务置为就绪态 - OS_EventTO() 函数","slug":"_5-9-由于等待超时而将任务置为就绪态-os-eventto-函数","link":"#_5-9-由于等待超时而将任务置为就绪态-os-eventto-函数","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"uc-os-ii-code-notes/Chapter 5 - 事件控制块.md"}');export{c as comp,r as data};
