import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-10-7-tty-ioctl-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-10-7-tty-ioctl-c-程序"><span>Chapter 10.7 - tty_ioctl.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 27 14:05</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_10-7-tty-ioctl-c-程序" tabindex="-1"><a class="header-anchor" href="#_10-7-tty-ioctl-c-程序"><span>10.7 tty_ioctl.c 程序</span></a></h2><h3 id="_10-7-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_10-7-1-功能描述"><span>10.7.1 功能描述</span></a></h3><p>实现了函数 <code>tty_ioctl()</code>，用于字符设备的控制操作。程序可以通过该函数修改指定终端 termios 结构体中的设置标志。该函数将由输入输出控制系统调用 <code>sys_ioctl()</code> 调用，用于实现基于 <strong>文件系统</strong> 的统一设备访问接口。一般用户程序不会直接使用 <code>sys_ioctl()</code>，而是：</p><ul><li>使用库函数中的封装函数</li><li>使用 <code>ioctl()</code> 库函数</li></ul><h3 id="_10-7-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_10-7-2-代码注释"><span>10.7.2 代码注释</span></a></h3><h4 id="change-speed-修改传输波特率" tabindex="-1"><a class="header-anchor" href="#change-speed-修改传输波特率"><span>change_speed() - 修改传输波特率</span></a></h4><p>首先定义了串行端口使用的 <strong>波特率因子数组</strong>。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> quotient<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2304</span><span class="token punctuation">,</span> <span class="token number">1536</span><span class="token punctuation">,</span> <span class="token number">1047</span><span class="token punctuation">,</span> <span class="token number">857</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">768</span><span class="token punctuation">,</span> <span class="token number">576</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在除数锁存标志 DLAB 置位的情况下，对串口的两个端口分别写入波特率因子的低字节和高字节。写完后复位 DLAB 位。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change_speed</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port<span class="token punctuation">,</span> quot<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>port <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>read_q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 不是串行终端，退出</span></span>
<span class="line">        <span class="token comment">// 串行终端的 tty 结构读队列的 data 字段存放着串行端口的基址</span></span>
<span class="line">        <span class="token comment">// 一般控制台终端的该字段为 0</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    quot <span class="token operator">=</span> quotient<span class="token punctuation">[</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cflag <span class="token operator">&amp;</span> CBAUD<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// DLAB 置位</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>quot <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 波特率因子低字节</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>quot <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 波特率因子高字节</span></span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// DLAB 复位</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="flush-刷新-tty-缓冲队列" tabindex="-1"><a class="header-anchor" href="#flush-刷新-tty-缓冲队列"><span>flush() - 刷新 tty 缓冲队列</span></a></h4><p>令缓冲队列的头指针等于尾指针，从而清空缓冲区。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    queue<span class="token operator">-&gt;</span>head <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>tail<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-termios-set-termios-读取-设置终端-termios-结构信息" tabindex="-1"><a class="header-anchor" href="#get-termios-set-termios-读取-设置终端-termios-结构信息"><span>get_termios() / set_termios() - 读取/设置终端 termios 结构信息</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_termios</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span> termios<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>termios<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>termios<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>termios<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termios <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">set_termios</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span> termios<span class="token punctuation">,</span> <span class="token keyword">int</span> channel<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> retsig<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">==</span> channel<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 试图设置终端状态，但终端不在前台</span></span>
<span class="line">        <span class="token comment">// 发送 SIGTTOU 信号</span></span>
<span class="line">        retsig <span class="token operator">=</span> <span class="token function">tty_signal</span><span class="token punctuation">(</span>SIGTTOU<span class="token punctuation">,</span> tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>retsig <span class="token operator">==</span> <span class="token operator">-</span>ERESTARTSYS <span class="token operator">||</span> retig <span class="token operator">==</span> <span class="token operator">-</span>EINTR<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> retsig<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termios<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termios<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">change_speed</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改波特率</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-termio-set-termios-读取-设置终端-termio-结构信息" tabindex="-1"><a class="header-anchor" href="#get-termio-set-termios-读取-设置终端-termio-结构信息"><span>get_termio() / set_termios() - 读取/设置终端 termio 结构信息</span></a></h4><p>termio 结构与 termios 基本相同，但标志集的数据类型不同。所以要经过类型转换。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_termio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span> termio<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">termio</span> tmp_termio<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">verify_area</span><span class="token punctuation">(</span>termio<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>termio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    tmp_termio<span class="token punctuation">.</span>c_iflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_iflag<span class="token punctuation">;</span></span>
<span class="line">    tmp_termio<span class="token punctuation">.</span>c_oflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_oflag<span class="token punctuation">;</span></span>
<span class="line">    tmp_termio<span class="token punctuation">.</span>c_cflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cflag<span class="token punctuation">;</span></span>
<span class="line">    tmp_termio<span class="token punctuation">.</span>c_lflag <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_lflag<span class="token punctuation">;</span></span>
<span class="line">    tmp_termio<span class="token punctuation">.</span>c_line <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_line<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        tmp_termio<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>termio<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tmp_termio<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termio<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">set_termio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span> termio<span class="token punctuation">,</span> <span class="token keyword">int</span> channel<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> retsig<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">termio</span> tmp_termio<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">==</span> channel<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 当前进程不在前台</span></span>
<span class="line">        <span class="token comment">// 发送 SIGTTOU 信号让使用终端的进程先暂时停止执行</span></span>
<span class="line">        retsig <span class="token operator">=</span> <span class="token function">tty_signal</span><span class="token punctuation">(</span>SIGTTOU<span class="token punctuation">,</span> tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>retsig <span class="token operator">==</span> <span class="token operator">-</span>ERESTARTSYS <span class="token operator">||</span> retsig <span class="token operator">==</span> <span class="token operator">-</span>EINTR<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> retsig<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>termio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tmp_termio<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>termio<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_iflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_iflag<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_oflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_oflag<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_cflag<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_lflag <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_lflag<span class="token punctuation">;</span></span>
<span class="line">    tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_line <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_line<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_termio<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">change_speed</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tty-ioctl-tty-终端设备输入输出控制函数" tabindex="-1"><a class="header-anchor" href="#tty-ioctl-tty-终端设备输入输出控制函数"><span>tty_ioctl() - tty 终端设备输入输出控制函数</span></a></h4><blockquote><p>似乎与标准的 <code>ioctl()</code> 函数的参数相同：</p><ul><li><code>int dev</code>：设备号</li><li><code>int cmd</code>：命令号</li><li><code>int arg</code>：操作参数的指针</li></ul></blockquote><p>该函数首先根据参数中的设备号找出对应终端的 tty 结构，然后根据控制命令 cmd 分别进行处理。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">tty_ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">int</span> ary<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> pgrp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 控制终端</span></span>
<span class="line">        dev <span class="token operator">=</span> current<span class="token operator">-&gt;</span>tty<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;tty_ioctl: dev&lt;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">        <span class="token comment">// 子设备号</span></span>
<span class="line">        dev <span class="token operator">=</span> <span class="token function">MINOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// dev == 0，正在使用前台终端</span></span>
<span class="line">    <span class="token comment">// 直接使用终端号 fg_console</span></span>
<span class="line">    <span class="token comment">// dev &gt; 0 - 虚拟终端 或 串行终端/伪终端</span></span>
<span class="line">    tty <span class="token operator">=</span> tty_table <span class="token operator">+</span> <span class="token punctuation">(</span>dev <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dev <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">?</span> dev<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dev<span class="token punctuation">)</span> <span class="token operator">:</span> fg_console<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> TCGETS<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 取终端 termios 结构体信息</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">get_termios</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TCSETSF<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 设置 termios 结构体之前，清空读队列</span></span>
<span class="line">            <span class="token function">flush</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续执行</span></span>
<span class="line">        <span class="token keyword">case</span> TCSETWS<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 等待写队列中的数据处理完毕</span></span>
<span class="line">            <span class="token function">wait_until_sent</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续执行</span></span>
<span class="line">        <span class="token keyword">case</span> TCSETS<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 设置终端 termios 结构体</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">set_termios</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TCGETA<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 取终端的 termio 结构体</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">get_termio</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TCSETAF<span class="token operator">:</span></span>
<span class="line">            <span class="token function">flush</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续执行</span></span>
<span class="line">        <span class="token keyword">case</span> TCSETAW<span class="token operator">:</span></span>
<span class="line">            <span class="token function">wait_until_sent</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续执行</span></span>
<span class="line">        <span class="token keyword">case</span> TCSETA<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 设置终端的 termio 结构体</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">set_termio</span><span class="token punctuation">(</span>tty<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">termio</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TCSBRK<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 参数为 0，等待写队列处理完毕，并发送 break</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">wait_until_sent</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">send_break</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TCXONC<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 开始/停止流控制</span></span>
<span class="line">            <span class="token keyword">switch</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">case</span> TCOOFF<span class="token operator">:</span></span>
<span class="line">                    <span class="token comment">// 挂起输出</span></span>
<span class="line">                    tty<span class="token operator">-&gt;</span>stopped <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 停止终端输出</span></span>
<span class="line">                    tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写缓冲队列输出</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">case</span> TCOON<span class="token operator">:</span></span>
<span class="line">                    <span class="token comment">// 恢复挂起的输出</span></span>
<span class="line">                    tty<span class="token operator">-&gt;</span>stopped <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 恢复终端输出</span></span>
<span class="line">                    tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">case</span> TCIOFF<span class="token operator">:</span></span>
<span class="line">                    <span class="token comment">// 终端停止输入</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STOP_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token comment">// 放入 STOP 字符</span></span>
<span class="line">                        <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token function">STOP_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">case</span> TCION<span class="token operator">:</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">START_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token function">START_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>INVAL<span class="token punctuation">;</span> <span class="token comment">// 未实现</span></span>
<span class="line">        <span class="token keyword">case</span> TCFLSH<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 刷新队列</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">flush</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">flush</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">flush</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">flush</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCEXCL<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">// 未实现</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCNXCL<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">// 未实现</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCSCTTY<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">// 未实现</span></span>
<span class="line">        <span class="token keyword">case</span> TSICGPGRP<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 读取前台进程组号</span></span>
<span class="line">            <span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">put_fs_long</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCSPGRP<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 设置终端进程组号</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">!=</span> dev<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                <span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>session <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 进程必须有控制终端</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>ENOTTY<span class="token punctuation">;</span></span>
<span class="line">            pgrp <span class="token operator">=</span> <span class="token function">get_fs_long</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>pgrp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 无效组号</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">session_of_pgrp</span><span class="token punctuation">(</span>pgrp<span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>session<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 会话与当前会话不同</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">            tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">=</span> pgrp<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCOUTQ<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 返回写队列中还未送出的字符数</span></span>
<span class="line">            <span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token function">CHARS</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCINQ<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 返回辅助队列中还未读取的字符数</span></span>
<span class="line">            <span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">put_fs_long</span><span class="token punctuation">(</span><span class="token function">CHARS</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCSTI<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 模拟终端输入操作</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">// 未实现</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCGWINSZ<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 读取终端设备的窗口大小信息</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">// 未实现</span></span>
<span class="line">        <span class="token keyword">case</span> TIOCSWINSZ<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 设置终端设备的窗口大小信息</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span> <span class="token comment">// 未实现</span></span>
<span class="line">        <span class="token comment">// case ... 都未实现</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)]))}const i=s(e,[["render",o],["__file","Chapter 10.7 - tty_ioctl.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2010%20-%20%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/Chapter%2010.7%20-%20tty_ioctl.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 10.7 - tty_ioctl.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"10.7 tty_ioctl.c 程序","slug":"_10-7-tty-ioctl-c-程序","link":"#_10-7-tty-ioctl-c-程序","children":[{"level":3,"title":"10.7.1 功能描述","slug":"_10-7-1-功能描述","link":"#_10-7-1-功能描述","children":[]},{"level":3,"title":"10.7.2 代码注释","slug":"_10-7-2-代码注释","link":"#_10-7-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 10 - 字符设备驱动程序/Chapter 10.7 - tty_ioctl.c 程序.md"}');export{i as comp,u as data};
