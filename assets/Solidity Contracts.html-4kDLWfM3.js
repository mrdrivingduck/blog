import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="solidity-contracts" tabindex="-1"><a class="header-anchor" href="#solidity-contracts"><span>Solidity - Contracts</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 02 / 26 12:56</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="creating-contracts" tabindex="-1"><a class="header-anchor" href="#creating-contracts"><span>Creating Contracts</span></a></h2><p>Contract 可以在 Solidity 外部或内部内创建。当创建时，contract 的构造函数将会被调用一次。Solidity 中只允许有一个构造函数 - 重载是不允许的。</p><h2 id="visibility-and-getters" tabindex="-1"><a class="header-anchor" href="#visibility-and-getters"><span>Visibility and Getters</span></a></h2><p>Solidity 识别两种类型的函数调用 - 一种使用 EVM call (message call)，一种不使用。</p><p>函数可被声明为 <code>external</code> <code>public</code> <code>internal</code> <code>private</code> - 默认的是 <code>public</code>；而状态变量中 <code>external</code> 是不可能的，默认的是 <code>internal</code>。</p><ul><li><code>external</code> - 函数只能在外部被调用，不能在内部被调用 (但是 <code>this.f()</code> 可以，因为这是外部调用)</li><li><code>public</code> - 函数可以在外部或内部被调用；对于变量，一个 getter 函数将会自动生成</li><li><code>internal</code> - 函数或变量只能在当前 contract 中或从当前 contract 中衍生的 contract 中访问</li><li><code>private</code> - 只能从当前 contract 中访问</li></ul><h3 id="getter-functions" tabindex="-1"><a class="header-anchor" href="#getter-functions"><span>Getter Functions</span></a></h3><p>编译器自动为所有 <code>public</code> 状态变量生成一个 getter 函数。该函数不接收任何参数，只会将当前的状态变量值返回。Getter 函数的可见性为 <code>external</code>。</p><hr><h2 id="function-modifiers" tabindex="-1"><a class="header-anchor" href="#function-modifiers"><span>Function Modifiers</span></a></h2><p>用于改变函数的行为，并且可以被继承和重写。用 <code>_</code> 来代替程序原本的行为。</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.11</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">owned</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token builtin">address</span> owner<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// This contract only defines a modifier but does not use</span></span>
<span class="line">    <span class="token comment">// it - it will be used in derived contracts.</span></span>
<span class="line">    <span class="token comment">// The function body is inserted where the special symbol</span></span>
<span class="line">    <span class="token comment">// &quot;_;&quot; in the definition of a modifier appears.</span></span>
<span class="line">    <span class="token comment">// This means that if the owner calls this function, the</span></span>
<span class="line">    <span class="token comment">// function is executed and otherwise, an exception is</span></span>
<span class="line">    <span class="token comment">// thrown.</span></span>
<span class="line">    <span class="token keyword">modifier</span> onlyOwner <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">_</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">mortal</span> <span class="token keyword">is</span> owned <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// This contract inherits the &quot;onlyOwner&quot;-modifier from</span></span>
<span class="line">    <span class="token comment">// &quot;owned&quot; and applies it to the &quot;close&quot;-function, which</span></span>
<span class="line">    <span class="token comment">// causes that calls to &quot;close&quot; only have an effect if</span></span>
<span class="line">    <span class="token comment">// they are made by the stored owner.</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> onlyOwner <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">priced</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Modifiers can receive arguments:</span></span>
<span class="line">    <span class="token keyword">modifier</span> <span class="token function">costs</span><span class="token punctuation">(</span><span class="token builtin">uint</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&gt;=</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">_</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Register</span> <span class="token keyword">is</span> priced<span class="token punctuation">,</span> owned <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> registeredAddresses<span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">uint</span> price<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token builtin">uint</span> initialPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span> price <span class="token operator">=</span> initialPrice<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// It is important to also provide the</span></span>
<span class="line">    <span class="token comment">// &quot;payable&quot; keyword here, otherwise the function will</span></span>
<span class="line">    <span class="token comment">// automatically reject all Ether sent to it.</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token function">costs</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registeredAddresses<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">changePrice</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _price<span class="token punctuation">)</span> onlyOwner <span class="token punctuation">{</span></span>
<span class="line">        price <span class="token operator">=</span> _price<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Mutex</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">bool</span> locked<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">modifier</span> <span class="token function">noReentrancy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>locked<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        locked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">_</span><span class="token punctuation">;</span></span>
<span class="line">        locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/// This function is protected by a mutex, which means that</span></span>
<span class="line">    <span class="token comment">/// reentrant calls from within msg.sender.call cannot call f again.</span></span>
<span class="line">    <span class="token comment">/// The \`return 7\` statement assigns 7 to the return value but still</span></span>
<span class="line">    <span class="token comment">/// executes the statement \`locked = false\` in the modifier.</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> noReentrancy <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="constant-state-variables" tabindex="-1"><a class="header-anchor" href="#constant-state-variables"><span>Constant State Variables</span></a></h2><p>必须被一个在编译时就是常量的表达式赋值。</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">uint</span> <span class="token keyword">constant</span> x <span class="token operator">=</span> <span class="token number">32</span><span class="token operator">**</span><span class="token number">22</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">string</span> <span class="token keyword">constant</span> text <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">bytes32</span> <span class="token keyword">constant</span> myHash <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="view-functions" tabindex="-1"><a class="header-anchor" href="#view-functions"><span>View Functions</span></a></h2><p>被声明为 <code>view</code> 的函数将不会修改状态 - 比如 getter。</p><p>会修改状态的函数包含：</p><ul><li>对状态变量进行写操作</li><li>创建其它 contract</li><li>转账</li><li>调用其它不是 <code>view</code> 或 <code>pure</code> 函数</li><li>......</li></ul><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">,</span> <span class="token builtin">uint</span> b<span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token operator">+</span> now<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="pure-functions" tabindex="-1"><a class="header-anchor" href="#pure-functions"><span>Pure Functions</span></a></h2><p>声明为 <code>pure</code> 的函数不会对状态变量进行读取或修改。</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">,</span> <span class="token builtin">uint</span> b<span class="token punctuation">)</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="fallback-functions" tabindex="-1"><a class="header-anchor" href="#fallback-functions"><span>Fallback Functions</span></a></h2><p>一个合约只能有一个未命名的函数，这个函数不能有参数，也不能有返回值。如果没有任何一个函数与给定的 function identifier 匹配，就会调用这个函数。</p><p>另外，当 contract 收到了裸的 Ether (没有数据) 时，这个函数也会被调用。为了能够获得 Ether，fallback function 需要被声明为 <code>payable</code>。否则 contract 就无法通过普通的转账接收 Ether。</p><p>通常只有 2300 gas 会被用于执行 fallback function。因此需要使该函数的执行尽可能便宜。</p><hr><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>Events</span></a></h2><p>使用了 EVM 的日志功能。被调用时，将会把参数保存到交易日志中，并保存在区块里。</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">ClientReceipt</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">event</span> <span class="token function">Deposit</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token builtin">address</span> <span class="token keyword">indexed</span> _from<span class="token punctuation">,</span></span>
<span class="line">        <span class="token builtin">bytes32</span> <span class="token keyword">indexed</span> _id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token builtin">uint</span> _value</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> _id<span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Any call to this function (even deeply nested) can</span></span>
<span class="line">        <span class="token comment">// be detected from the JavaScript API by filtering</span></span>
<span class="line">        <span class="token comment">// for \`Deposit\` to be called.</span></span>
<span class="line">        <span class="token function">Deposit</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _id<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance"><span>Inheritance</span></a></h2><h2 id="abstract-contracts" tabindex="-1"><a class="header-anchor" href="#abstract-contracts"><span>Abstract Contracts</span></a></h2><h2 id="interfaces" tabindex="-1"><a class="header-anchor" href="#interfaces"><span>Interfaces</span></a></h2><hr><h2 id="libraries" tabindex="-1"><a class="header-anchor" href="#libraries"><span>Libraries</span></a></h2><p>库与 contract 类似，但它们部署在一个特定地址，仅被用于 <code>delegatecall</code>。也就是说，如果一个库的代码被调用，代码的执行环境将会位于调用该库的 contract 的上下文中。</p><p>在 EVM 实现中，库中所有被调用的函数将会被 pull 到调用库的 contract 中，然后就开始使用 <code>JUMP</code> 指令对这些代码进行访问。</p><hr>`,49)]))}const o=s(p,[["render",i],["__file","Solidity Contracts.html.vue"]]),u=JSON.parse('{"path":"/notes/Solidity/Solidity%20Contracts.html","title":"Solidity - Contracts","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Creating Contracts","slug":"creating-contracts","link":"#creating-contracts","children":[]},{"level":2,"title":"Visibility and Getters","slug":"visibility-and-getters","link":"#visibility-and-getters","children":[{"level":3,"title":"Getter Functions","slug":"getter-functions","link":"#getter-functions","children":[]}]},{"level":2,"title":"Function Modifiers","slug":"function-modifiers","link":"#function-modifiers","children":[]},{"level":2,"title":"Constant State Variables","slug":"constant-state-variables","link":"#constant-state-variables","children":[]},{"level":2,"title":"View Functions","slug":"view-functions","link":"#view-functions","children":[]},{"level":2,"title":"Pure Functions","slug":"pure-functions","link":"#pure-functions","children":[]},{"level":2,"title":"Fallback Functions","slug":"fallback-functions","link":"#fallback-functions","children":[]},{"level":2,"title":"Events","slug":"events","link":"#events","children":[]},{"level":2,"title":"Inheritance","slug":"inheritance","link":"#inheritance","children":[]},{"level":2,"title":"Abstract Contracts","slug":"abstract-contracts","link":"#abstract-contracts","children":[]},{"level":2,"title":"Interfaces","slug":"interfaces","link":"#interfaces","children":[]},{"level":2,"title":"Libraries","slug":"libraries","link":"#libraries","children":[]}],"git":{},"filePathRelative":"notes/Solidity/Solidity Contracts.md"}');export{o as comp,u as data};
