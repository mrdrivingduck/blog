import{_ as p,c as t,a,b as i,f as s,d as c,e as l,r as o,o as r}from"./app-7eKjwDat.js";const u={};function d(k,n){const e=o("RouteLink");return r(),t("div",null,[n[3]||(n[3]=a(`<h1 id="postgresql-atomics" tabindex="-1"><a class="header-anchor" href="#postgresql-atomics"><span>PostgreSQL - Atomics</span></a></h1><p>Created by: Mr Dk.</p><p>2023 / 10 / 30 0:09</p><p>Hangzhou, Zhejiang, China</p><hr><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>Background</span></a></h2><p>原子操作是多进程/多线程编程中非常重要的原语，可以用于解决并发访问共享内存时出现的竞态条件。原子操作在语义上保证了对共享内存的修改仅需要调用一次 API 就可以完成，在实现上还需要解决可能潜在出现的编译器指令重排序和处理器乱序执行，此外还得兼顾性能。不少高级语言都直接提供了原子数据类型和原子操作 API，比如 C++ 11 的 <a href="https://cplusplus.com/reference/atomic/" target="_blank" rel="noopener noreferrer"><code>std::atomic</code></a> 和 JDK 的 <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html" target="_blank" rel="noopener noreferrer"><code>java.util.concurrent.atomic</code></a>。在 C 语言编写的大型软件系统中，也都各自实现了原子操作 API 作为基础设施，用于实现更加上层的无锁数据结构和算法，比如 Linux kernel 的 <a href="https://docs.kernel.org/core-api/wrappers/atomic_t.html" target="_blank" rel="noopener noreferrer"><code>atomic_t</code></a>，Nginx 的 <code>ngx_atomic_t</code>。在 PostgreSQL 中，也实现了 <code>pg_atomic_*</code> 的原子数据类型和 API。</p><p>本文基于 PostgreSQL <code>master</code> 分支（PostgreSQL 17 under dev）当前的 <code>HEAD</code> 版本分析原子操作的实现：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">commit 26f988212eada9c586223cbbf876c7eb455044d9</span>
<span class="line">Author: Peter Eisentraut &lt;peter@eisentraut.org&gt;</span>
<span class="line">Date:   Thu Oct 26 13:03:43 2023 +0200</span>
<span class="line"></span>
<span class="line">    Add &quot;Add trailing commas to enum definitions&quot; to .git-blame-ignore-revs</span>
<span class="line"></span>
<span class="line">    Discussion: https://www.postgresql.org/message-id/flat/386f8c45-c8ac-4681-8add-e3b0852c1620%40eisentraut.org</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>PostgreSQL 原子操作的目标是能够原子地操作内存并保证缓存一致性，其实现方式是实现具备优秀的跨 CPU 可移植性和跨 OS 可移植性的工程典范。其大致的思路为：从慢而全，到快而专。</p><ol><li>用 OS 提供的信号量实现最原始但最完整的 API</li><li>如果 PostgreSQL 在当前平台上能够支持硬件自旋锁（Spinlock），那么使用硬件自旋替代 OS 信号量实现原子操作</li><li>如果构建 PostgreSQL 时使用的编译器具有内置的原子数据类型和原子操作 API，那么使用编译器的内置类型和 API；它们的可移植性由编译器来保证</li><li>如果构建 PostgreSQL 的目标 CPU 平台支持更加高效的硬件指令来实现原子操作，那么使用相应硬件指令</li></ol><p>在实际的代码中，原子数据类型和原子操作 API 的声明顺序与上述思路是颠倒的，这样能够使 C 预处理器优先选择当前条件下性能最好的实现方式进行条件编译；如果当前条件下无法满足部分前提，再使用性能稍差但更普适的实现方式。</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><p>PostgreSQL 在 <code>src/include/port/atomics.h</code> 中定义了所有对外暴露的 API，这层 API 会被条件编译为适合当前平台的最佳实现。</p><p>首先提供的是屏障，包含编译器屏障指令和 CPU 屏障指令。编译器需要保证对程序的指令重排序不会跨越编译器屏障，但这是一个很弱的保证，因为现代 CPU 基本都是乱序执行指令的，代码段中的指令按顺序排列不意味着它们会被顺序执行。CPU 的读屏障、写屏障、内存屏障分别禁止 CPU 乱序执行屏障前后的读读操作、写写操作、所有操作：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">pg_compiler_barrier</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">pg_compiler_barrier_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">pg_read_barrier</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token function">pg_read_barrier_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">pg_write_barrier</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">pg_write_barrier_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">pg_memory_barrier</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token function">pg_memory_barrier_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标识位（flag）原子操作：</p><ul><li>初始化</li><li>TAS</li><li>检查标识</li><li>清除标识</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pg_atomic_init_flag</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_flag <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> bool <span class="token function">pg_atomic_test_set_flag</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_flag <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> bool <span class="token function">pg_atomic_unlocked_test_flag</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_flag <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pg_atomic_clear_flag</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_flag <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>32 位原子操作：</p><ul><li>初始化</li><li>原子读</li><li>原子写</li><li>原子非锁定写</li><li>原子内存交换</li><li>原子内存比较并交换（CAS）</li><li>原子加/减/与/或运算</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pg_atomic_init_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint32 val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_read_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pg_atomic_write_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint32 val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pg_atomic_unlocked_write_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint32 val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_exchange_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint32 newval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> bool <span class="token function">pg_atomic_compare_exchange_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span></span>
<span class="line">                                                  uint32 <span class="token operator">*</span>expected<span class="token punctuation">,</span> uint32 newval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_fetch_add_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 add_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_fetch_sub_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 sub_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_fetch_and_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint32 and_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_fetch_or_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint32 or_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_add_fetch_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 add_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32 <span class="token function">pg_atomic_sub_fetch_u32</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 sub_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>64 位原子操作：</p><ul><li>初始化</li><li>原子读</li><li>原子写</li><li>原子内存交换</li><li>原子内存比较并交换（CAS）</li><li>原子加/减/与/或运算</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pg_atomic_init_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint64 val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_read_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pg_atomic_write_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint64 val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_exchange_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint64 newval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> bool <span class="token function">pg_atomic_compare_exchange_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span></span>
<span class="line">                                                  uint64 <span class="token operator">*</span>expected<span class="token punctuation">,</span> uint64 newval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_fetch_add_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int64 add_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_fetch_sub_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int64 sub_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_fetch_and_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint64 and_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_fetch_or_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> uint64 or_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_add_fetch_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int64 add_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64 <span class="token function">pg_atomic_sub_fetch_u64</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint64 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int64 sub_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述列出的 API，并不是每一个 API 都最终对应一个硬件原语：部分 API 是通过其它基础 API 与基本运算组合而得到的。比如 <code>pg_atomic_fetch_add_u32</code> 就是通过 <code>pg_atomic_compare_exchange_u32_impl</code> 与加法运算实现的，因此其性能高低受其依赖的基础 API 的性能影响。这部分实现在 <code>src/include/port/atomics/generic.h</code> 中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * Provide additional operations using supported infrastructure. These are</span>
<span class="line"> * expected to be efficient if the underlying atomic operations are efficient.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/generic.h&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 32 位变量的原子加减运算为例：原子加法实际上是通过 32 位的 CAS 实现的，原子减法实际上是通过复用原子加法的代码实现的。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_FETCH_ADD_U32<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_COMPARE_EXCHANGE_U32<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_FETCH_ADD_U32</span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32</span>
<span class="line"><span class="token function">pg_atomic_fetch_add_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 add_<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    uint32 old<span class="token punctuation">;</span></span>
<span class="line">    old <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span>           <span class="token comment">/* ok if read is not atomic */</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">pg_atomic_compare_exchange_u32_impl</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">,</span> old <span class="token operator">+</span> add_<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">/* skip */</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> old<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_FETCH_SUB_U32<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_COMPARE_EXCHANGE_U32<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_FETCH_SUB_U32</span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32</span>
<span class="line"><span class="token function">pg_atomic_fetch_sub_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 sub_<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">pg_atomic_fetch_add_u32_impl</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token operator">-</span>sub_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fallback-implementations" tabindex="-1"><a class="header-anchor" href="#fallback-implementations"><span>Fallback Implementations</span></a></h2><p>对于完全没有原子操作或硬件自旋支持的构建环境，PostgreSQL 对上述所有 API 提供了完整的软件模拟实现。如果构建环境传入未传入任何原子操作相关的宏定义，那么软件模拟实现将会作为后备实现而被启用：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * Provide a full fallback of the pg_*_barrier(), pg_atomic**_flag and</span>
<span class="line"> * pg_atomic_* APIs for platforms without sufficient spinlock and/or atomics</span>
<span class="line"> * support. In the case of spinlock backed atomics the emulation is expected</span>
<span class="line"> * to be efficient, although less so than native atomics support.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/fallback.h&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如，对于 32 位的原子变量，其数据类型结构体将会被定义为如下的样子：</p><ul><li><code>sema</code> 变量用作锁</li><li><code>value</code> 保存实际数据</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_U32_SUPPORT<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_U32_SIMULATION</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_U32_SUPPORT</span></span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pg_atomic_uint32</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* Check pg_atomic_flag&#39;s definition above for an explanation */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__hppa<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__hppa__<span class="token punctuation">)</span>    </span><span class="token comment">/* HP PA-RISC */</span></span></span>
<span class="line">    <span class="token keyword">int</span>         sema<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    <span class="token keyword">int</span>         sema<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">volatile</span> uint32 value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> pg_atomic_uint32<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* PG_HAVE_ATOMIC_U32_SUPPORT */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)),i("p",null,[n[1]||(n[1]=s("有了上述的类型定义以后，原子变量运算的所有 API 将以这样的模式实现：先对原子变量自旋锁定，然后运算赋值，最后解锁。在 ")),c(e,{to:"/notes/PostgreSQL/PostgreSQL%20Spinlock.html"},{default:l(()=>n[0]||(n[0]=[s("自旋锁")])),_:1}),n[2]||(n[2]=s(" 的文章中已经分析过，如果当前构建环境提供了硬件自旋的能力，那么自旋锁 API 将会被编译为高效的硬件指令；否则将会回退使用 OS 信号量来模拟。比如原子加法的实现如下："))]),n[4]||(n[4]=a(`<div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">uint32</span>
<span class="line"><span class="token function">pg_atomic_fetch_add_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 add_<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    uint32      oldval<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">SpinLockAcquire</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ptr<span class="token operator">-&gt;</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    oldval <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span></span>
<span class="line">    ptr<span class="token operator">-&gt;</span>value <span class="token operator">+=</span> add_<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">SpinLockRelease</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ptr<span class="token operator">-&gt;</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> oldval<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如 CAS 操作的语义将不得不用多行代码来啰嗦地模拟：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">bool</span>
<span class="line"><span class="token function">pg_atomic_compare_exchange_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span></span>
<span class="line">                                    uint32 <span class="token operator">*</span>expected<span class="token punctuation">,</span> uint32 newval<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    bool        ret<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Do atomic op under a spinlock. It might look like we could just skip</span>
<span class="line">     * the cmpxchg if the lock isn&#39;t available, but that&#39;d just emulate a</span>
<span class="line">     * &#39;weak&#39; compare and swap. I.e. one that allows spurious failures. Since</span>
<span class="line">     * several algorithms rely on a strong variant and that is efficiently</span>
<span class="line">     * implementable on most major architectures let&#39;s emulate it here as</span>
<span class="line">     * well.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token function">SpinLockAcquire</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ptr<span class="token operator">-&gt;</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* perform compare/exchange logic */</span></span>
<span class="line">    ret <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>value <span class="token operator">==</span> <span class="token operator">*</span>expected<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>expected <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span></span>
<span class="line">        ptr<span class="token operator">-&gt;</span>value <span class="token operator">=</span> newval<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* and release lock */</span></span>
<span class="line">    <span class="token function">SpinLockRelease</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">slock_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ptr<span class="token operator">-&gt;</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="compiler-specific-implementation" tabindex="-1"><a class="header-anchor" href="#compiler-specific-implementation"><span>Compiler-Specific Implementation</span></a></h2><p>目前很多编译器从某个特定版本开始已经内置了原子操作的 API。如果能够检测到当前构建环境中的编译器符合要求，那么使用编译器的内置 API 可以具有更好的可移植性和性能：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * Compiler specific, but architecture independent implementations.</span>
<span class="line"> *</span>
<span class="line"> * Provide architecture independent implementations of the atomic</span>
<span class="line"> * facilities. At the very least compiler barriers should be provided, but a</span>
<span class="line"> * full implementation of</span>
<span class="line"> * * pg_compiler_barrier(), pg_write_barrier(), pg_read_barrier()</span>
<span class="line"> * * pg_atomic_compare_exchange_u32(), pg_atomic_fetch_add_u32()</span>
<span class="line"> * using compiler intrinsics are a good idea.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * gcc or compatible, including clang and icc.  Exclude xlc.  The ppc64le &quot;IBM</span>
<span class="line"> * XL C/C++ for Linux, V13.1.2&quot; emulates gcc, but __sync_lock_test_and_set()</span>
<span class="line"> * of one-byte types elicits SIGSEGV.  That bug was gone by V13.1.5 (2016-12).</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">defined</span><span class="token punctuation">(</span>__GNUC__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__INTEL_COMPILER<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">defined</span><span class="token punctuation">(</span>__IBMC__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__IBMCPP__<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/generic-gcc.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_MSC_VER<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/generic-msvc.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__SUNPRO_C<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>__GNUC__<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/generic-sunpro.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Unsupported compiler, we&#39;ll likely use slower fallbacks... At least</span>
<span class="line"> * compiler barriers should really be provided.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如，对于 GCC 及其兼容编译器，32 位原子变量的数据类型被定义为：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/* generic gcc based atomic uint32 implementation */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_U32_SUPPORT<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">defined</span><span class="token punctuation">(</span>HAVE_GCC__ATOMIC_INT32_CAS<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>HAVE_GCC__SYNC_INT32_CAS<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_U32_SUPPORT</span></span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pg_atomic_uint32</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">volatile</span> uint32 value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> pg_atomic_uint32<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* defined(HAVE_GCC__ATOMIC_INT32_CAS) || defined(HAVE_GCC__SYNC_INT32_CAS) */</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对应的 CAS 操作和原子加法都被实现为 <a href="https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html" target="_blank" rel="noopener noreferrer">GCC 内置 API</a>（<a href="https://llvm.org/docs/Atomics.html" target="_blank" rel="noopener noreferrer">Clang</a> 也兼容这些 API）：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/* prefer __atomic, it has a better API */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_COMPARE_EXCHANGE_U32<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>HAVE_GCC__ATOMIC_INT32_CAS<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_COMPARE_EXCHANGE_U32</span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> bool</span>
<span class="line"><span class="token function">pg_atomic_compare_exchange_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span></span>
<span class="line">                                    uint32 <span class="token operator">*</span>expected<span class="token punctuation">,</span> uint32 newval<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* FIXME: we can probably use a lower consistency model */</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">__atomic_compare_exchange_n</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> newval<span class="token punctuation">,</span> false<span class="token punctuation">,</span></span>
<span class="line">                                       __ATOMIC_SEQ_CST<span class="token punctuation">,</span> __ATOMIC_SEQ_CST<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PG_HAVE_ATOMIC_FETCH_ADD_U32<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>HAVE_GCC__SYNC_INT32_CAS<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_FETCH_ADD_U32</span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32</span>
<span class="line"><span class="token function">pg_atomic_fetch_add_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 add_<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">__sync_fetch_and_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">,</span> add_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="architecture-specific-implementation" tabindex="-1"><a class="header-anchor" href="#architecture-specific-implementation"><span>Architecture-Specific Implementation</span></a></h2><p>最终，对于特定架构的 CPU 硬件，做定制化的处理。可能是通过内联汇编实现更加高效的操作，也可能是仅仅关闭某个操作的实现：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * First a set of architecture specific files is included.</span>
<span class="line"> *</span>
<span class="line"> * These files can provide the full set of atomics or can do pretty much</span>
<span class="line"> * nothing if all the compilers commonly used on these platforms provide</span>
<span class="line"> * usable generics.</span>
<span class="line"> *</span>
<span class="line"> * Don&#39;t add an inline assembly of the actual atomic operations if all the</span>
<span class="line"> * common implementations of your platform provide intrinsics. Intrinsics are</span>
<span class="line"> * much easier to understand and potentially support more architectures.</span>
<span class="line"> *</span>
<span class="line"> * It will often make sense to define memory barrier semantics here, since</span>
<span class="line"> * e.g. generic compiler intrinsics for x86 memory barriers can&#39;t know that</span>
<span class="line"> * postgres doesn&#39;t need x86 read/write barriers do anything more than a</span>
<span class="line"> * compiler barrier.</span>
<span class="line"> *</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__arm__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__arm<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__aarch64__<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/arch-arm.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__i386__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__i386<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__x86_64__<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/arch-x86.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__ppc__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__powerpc__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__ppc64__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__powerpc64__<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/arch-ppc.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__hppa<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__hppa__<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;port/atomics/arch-hppa.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如，对于 32 位的 ARM 架构来说，64 位原子操作是非常慢的，所以直接禁止使用 64 位的原子操作：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * 64 bit atomics on ARM32 are implemented using kernel fallbacks and thus</span>
<span class="line"> * might be slow, so disable entirely. On ARM64 that problem doesn&#39;t exist.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>__aarch64__<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_DISABLE_64_BIT_ATOMICS</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Architecture Reference Manual for ARMv8 states aligned read/write to/from</span>
<span class="line"> * general purpose register is atomic.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_8BYTE_SINGLE_COPY_ATOMICITY</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于 x86_64 架构来说，由于 CAS 操作和原子加法操作都有直接对应的硬件指令，那么直接在内联汇编中编写硬件指令，获得最佳的性能：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_COMPARE_EXCHANGE_U32</span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> bool</span>
<span class="line"><span class="token function">pg_atomic_compare_exchange_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span></span>
<span class="line">                                    uint32 <span class="token operator">*</span>expected<span class="token punctuation">,</span> uint32 newval<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span>    ret<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Perform cmpxchg and use the zero flag which it implicitly sets when</span>
<span class="line">     * equal to measure the success.</span>
<span class="line">     */</span></span>
<span class="line">    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;   lock                \\n&quot;</span></span>
<span class="line">        <span class="token string">&quot;   cmpxchgl    %4,%5   \\n&quot;</span></span>
<span class="line">        <span class="token string">&quot;   setz        %2      \\n&quot;</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;=a&quot;</span> <span class="token punctuation">(</span><span class="token operator">*</span>expected<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;=m&quot;</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;=q&quot;</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;a&quot;</span> <span class="token punctuation">(</span><span class="token operator">*</span>expected<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>newval<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;memory&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>bool<span class="token punctuation">)</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PG_HAVE_ATOMIC_FETCH_ADD_U32</span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint32</span>
<span class="line"><span class="token function">pg_atomic_fetch_add_u32_impl</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> pg_atomic_uint32 <span class="token operator">*</span>ptr<span class="token punctuation">,</span> int32 add_<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    uint32 res<span class="token punctuation">;</span></span>
<span class="line">    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;   lock                \\n&quot;</span></span>
<span class="line">        <span class="token string">&quot;   xaddl   %0,%1       \\n&quot;</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;=q&quot;</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;=m&quot;</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;0&quot;</span> <span class="token punctuation">(</span>add_<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">:</span>       <span class="token string">&quot;memory&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> res<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html" target="_blank" rel="noopener noreferrer">GCC - 6.55 Built-in Functions for Memory Model Aware Atomic Operations</a></p><p><a href="https://llvm.org/docs/Atomics.html" target="_blank" rel="noopener noreferrer">LLVM Atomic Instructions and Concurrency Guide</a></p><p><a href="https://kunpengcompute.github.io/2020/09/20/guan-yu-yuan-zi-cao-zuo-he-ruo-nei-cun-xu/" target="_blank" rel="noopener noreferrer">Kunpeng - 关于原子操作和弱内存序</a></p>`,21))])}const v=p(u,[["render",d],["__file","PostgreSQL Atomics.html.vue"]]),_=JSON.parse('{"path":"/notes/PostgreSQL/PostgreSQL%20Atomics.html","title":"PostgreSQL - Atomics","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Background","slug":"background","link":"#background","children":[]},{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"API","slug":"api","link":"#api","children":[]},{"level":2,"title":"Fallback Implementations","slug":"fallback-implementations","link":"#fallback-implementations","children":[]},{"level":2,"title":"Compiler-Specific Implementation","slug":"compiler-specific-implementation","link":"#compiler-specific-implementation","children":[]},{"level":2,"title":"Architecture-Specific Implementation","slug":"architecture-specific-implementation","link":"#architecture-specific-implementation","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/PostgreSQL/PostgreSQL Atomics.md"}');export{v as comp,_ as data};
