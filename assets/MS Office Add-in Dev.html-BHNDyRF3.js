import{_ as i,c as a,a as n,o as s}from"./app-7eKjwDat.js";const r="/blog/assets/office-js-api-DYqFoUxp.png",c={};function l(o,e){return s(),a("div",null,e[0]||(e[0]=[n('<h1 id="ms-office-add-in-dev" tabindex="-1"><a class="header-anchor" href="#ms-office-add-in-dev"><span>MS Office - Add-in Dev</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 28 0:56</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p>这个东西的中文名称叫做 <strong>外接程序</strong>，也可以叫做 <strong>加载项</strong>，可以用于扩展 Office 应用程序，并与 Office 文档中的内容进行交互。换句话说就是可以自己写程序操作 Office 文档叭 😶。</p><p>Office 提供了套件通用的 API，也有适用于程序个体 (Excel, Word...) 的专用 API。</p><h2 id="office-vba" tabindex="-1"><a class="header-anchor" href="#office-vba"><span>Office VBA</span></a></h2><p>Office Visual Basic for Applications (VBA) 是一种事件驱动编程语言。几乎所有可以使用鼠标、键盘或对话框执行的操作也可以通过使用 VBA 自动进行。若某个操作可以使用 VBA 执行一次，则可以同样轻松地执行该操作一百次。除了可通过编写 VBA 脚本来加速执行日常任务外，还可以使用 VBA 为 Office 应用程序添加新功能，或以特定于业务需要的方式来提示文档用户并与之交互。</p><p>但是..技术似乎比较老，😅 不优雅。我不喜欢。</p><h2 id="vsto" tabindex="-1"><a class="header-anchor" href="#vsto"><span>VSTO</span></a></h2><p>Visual Studio Tools for Office (VSTO) 是 VBA 的替代。VSTO 外接程序包含与 Microsoft Office 应用程序相关联的程序集，使用 <code>C#</code> + <code>.NET</code> 扩展 Office 的功能。</p><p>这种技术方便在，使用较为高级的编程语言，再加上宇宙第一 IDE 的集成，使得开发较为方便。<a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.tools?view=vsto-2017" target="_blank" rel="noopener noreferrer">文档在这里</a>。</p><p>考虑用这一套技术写一些简单的 Office 工具，比如自动化解锁密码。之前手动解密码让我觉得太累了。</p><h2 id="javascript-api-web" tabindex="-1"><a class="header-anchor" href="#javascript-api-web"><span>JavaScript API + Web</span></a></h2><p>这是目前最新的加载项开发方式，通过 Web 技术来扩展 Office。这一技术不涉及 <strong>用户设备</strong> 或 <strong>Office 客户端</strong> 中运行的代码，主机应用程序 (如 Excel) 读取 <strong>加载项清单</strong></p><ul><li>挂钩 UI 中的加载项自定义功能区按钮和菜单命令</li><li>在应用程序中加载加载项的 HTML 和 JavaScript 代码</li><li>这些代码在沙盒中的浏览器上下文范围内执行，操作 Office 功能</li></ul><p>优势：</p><ol><li>跨平台支持 - 不需要 VB 或者 .NET 支持</li><li>集中部署和分发</li><li>可以通过 AppSource 供广大受众使用</li><li>以标准的 Web 技术为依据</li></ol><h3 id="components" tabindex="-1"><a class="header-anchor" href="#components"><span>Components</span></a></h3><p>Office 加载项 = 加载项清单 (XML) + 网页 (HTML + JavaScript)</p><h4 id="清单" tabindex="-1"><a class="header-anchor" href="#清单"><span>清单</span></a></h4><p>是一个 XML 文件，指定外接程序的设置和功能：</p><ul><li>外接程序在应用程序 (如 Excel) 中的显示名称、说明、ID、版本</li><li>如何将外接程序与 Office 集成</li><li>外接程序的权限级别和数据访问要求</li></ul><h4 id="web-应用" tabindex="-1"><a class="header-anchor" href="#web-应用"><span>Web 应用</span></a></h4><p>在 Office 应用中显示的静态 HTML 页面。此页面并不与 Office 文档或其他任何 Internet 资源交互。若要与 Office 客户端和文档交互，可以使用 Office.js JavaScript API。</p><p>大致上来说，就是这个 Web 应用运行起来，在 Office 应用程序内，运行一个类似浏览器的东西。根据清单文件里面的配置信息，访问 Web 服务。可能还涉及 Office 应用程序中状态信息的传递，作为访问 Web 的参数。Web 服务触发调用 Office.js 的 API，实现相应的功能。</p><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h3><p><img src="'+r+'" alt="office-js-api"></p><p>根据清单文件，Office 应用程序上可以显示出对应的外接程序。点击外接程序，右边出现一个类似浏览器界面，访问对应的 Web 页面。在左侧的 Excel 表格中选中一定尺寸的单元格，点击右侧 Web 页面中的一个按钮 (比如 - 设置背景颜色)。Office 应用程序相当于访问了 Web 应用中的服务，触发了 Web 服务调用 Office JavaScript API，修改选中所有单元格的背景颜色。</p><h3 id="supporting" tabindex="-1"><a class="header-anchor" href="#supporting"><span>Supporting</span></a></h3><p>在各种 Web 技术下都适用</p><ul><li>[x] 原生 JavaScript + ajax</li><li>[x] Angular / React / Vue</li><li>[x] Visual Studio - ASP .NET</li></ul><p>不过各自有各自的配置，官网的文档中都有。</p><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://docs.microsoft.com/en-us/office/dev/add-ins/" target="_blank" rel="noopener noreferrer">Office Add-ins Documentation</a></p><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/vsto/create-vsto-add-ins-for-office-by-using-visual-studio?view=vs-2017" target="_blank" rel="noopener noreferrer">使用 Visual Studio 创建 VSTO 外接程序</a></p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>虽说基于 Web 的技术是官方最为推崇的，但我还是喜欢 VSTO 的 😂，觉着写起来舒服些。原则上来说，只要是点击鼠标或者键盘能做到的事，应当都有对应的 API，并且能帮助干一些重复的活。接下来准备做两个小型的批处理外接程序试试看：</p><ol><li>将多个 Excel 文件合并为一个 Excel 文件中的多个表</li><li>将多个 Excel 文件的保护密码移除</li></ol>',42)]))}const f=i(c,[["render",l],["__file","MS Office Add-in Dev.html.vue"]]),p=JSON.parse('{"path":"/notes/MS%20Office/MS%20Office%20Add-in%20Dev.html","title":"MS Office - Add-in Dev","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"Office VBA","slug":"office-vba","link":"#office-vba","children":[]},{"level":2,"title":"VSTO","slug":"vsto","link":"#vsto","children":[]},{"level":2,"title":"JavaScript API + Web","slug":"javascript-api-web","link":"#javascript-api-web","children":[{"level":3,"title":"Components","slug":"components","link":"#components","children":[]},{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]},{"level":3,"title":"Supporting","slug":"supporting","link":"#supporting","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"notes/MS Office/MS Office Add-in Dev.md"}');export{f as comp,p as data};
