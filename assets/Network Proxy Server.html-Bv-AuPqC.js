import{_ as n,c as a,a as r,o as l}from"./app-7eKjwDat.js";const i={};function o(s,e){return l(),a("div",null,e[0]||(e[0]=[r(`<h1 id="network-proxy-server" tabindex="-1"><a class="header-anchor" href="#network-proxy-server"><span>Network - Proxy Server</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 07 / 02 0:29</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p><strong>代理 (Proxy)</strong> 是一种特殊的网络服务，能够允许一台计算机通过该服务与另一台计算机实现非直接连接。代理的应用非常广泛，根据应用场景的不同，发展出了各式各样的代理服务。比如，最最基本的功能就是流量的转发，如果再配合上一定的转发规则，就能成为一个简易的防火墙。</p><p>代理在概念上可以被区分为 <em>正向代理 (Forward Proxy)</em> 和 <em>反向代理 (Reverse Proxy)</em>。</p><p>正向代理位于客户端与目标服务器之前。客户端向代理服务器发送请求，由代理服务器向目标服务器转发请求并将目标服务器的响应转发给客户端。正向代理实际上代理了客户端，与目标服务器进行交互。典型的应用就是 xxx。国内的客户端连接不到墙外的目标服务器，但可以通过一台能够访问目标服务器的代理完成访问。正向代理的几个用途：</p><ul><li>作为中介，使客户端能够突破访问限制</li><li>代理服务器能够缓存目标服务器的部分响应信息，其它用户访问信息时，可以直接使用缓存而不再与目标服务器通信</li><li>目标服务器只知道代理服务器与其通信，从而隐藏了客户端 IP</li></ul><p>反向代理也位于客户端与目标服务器之间。反向代理将客户端的请求转发到内网中的服务器上进行处理，并将处理结果返回给客户端。实际上是代理了目标服务器，与客户端通信。客户端只知道自己正与代理服务器通信，但不知道是哪个目标服务器为自己提供了服务。由此，服务器通过反向代理隐藏了自身的 IP 地址。反向代理的用途：</p><ul><li>负载均衡，根据各个内网服务器的负载情况，将客户端请求转发到不同的目标服务器上</li><li>代理服务器缓存各个内网服务器上共同的静态内容，从而提高访问速度</li><li>作为 Web 攻击 (DoS/DDoS) 的防护</li></ul><h2 id="proxy-server" tabindex="-1"><a class="header-anchor" href="#proxy-server"><span>Proxy Server</span></a></h2><p><a href="https://en.wikipedia.org/wiki/Nginx" target="_blank" rel="noopener noreferrer"><em>Nginx</em></a> (Engine X) 是一款非常有名的高性能 Web 服务器 / 负载均衡器 / 反向代理 (其实也可以作正向代理，不就是流量转发嘛...)。高性能的原因有：</p><ol><li>直接由 C 语言实现</li><li>使用高性能多路复用模型 (如 EPOLL) 处理高并发</li><li>...</li></ol><p>在使用时，只需要在 <code>/etc/nginx/nginx.conf</code> 中进行配置即可：</p><ul><li>作 Web server 时，配置静态资源的路径、监听的端口号</li><li>重定向、流量转发时，配置匹配 URL 的规则</li><li>...</li></ul><p><a href="https://caddyserver.com/" target="_blank" rel="noopener noreferrer"><em>Caddy</em></a> 是一款 Golang 实现的轻量级 Web server / 反向代理 / 负载均衡器 / API 网关 / ...，特性是默认自动将连接配置为 HTTPS。</p><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application"><span>Application</span></a></h2><p>前段时间在开发自己的 blog，通过访问 GitHub 的 GraphQL v4 API 获取 repo 里的一些内容。博客上线之后发现，GraphQL API 的 end point 在国内总是访问失败。正好手上有一台位于 Seoul 的服务器运行了 Caddy，于是决定配置一下试试。</p><p>目的很简单，原先用于访问 GitHub API 的 HTTP payload 不变，只将目标 URL 由 <code>api.github.com</code> 修改为 Seoul 服务器的 IP 地址。这样，HTTP request 就发送到了 Seoul 的服务器上。接下来，由 Seoul 服务器将接收到的流量转发到 <code>api.github.com</code> 上即可。HTTP 响应也经历相反的转发过程。Seoul 服务器在其中扮演正向代理的角色。</p><p>过程分为两步：</p><ol><li>修改网页代码中的目标 URL (这也太简单了)</li><li>在 Seoul 服务器的 Caddy 上配置转发规则</li></ol><p>对 Caddy 的配置，实际上是编辑 <code>/etc/caddy/</code> 下的 <code>Caddyfile</code>。以下是 Caddy 1 的配置，最近新出了 Caddy 2，配置方式应该有所改变。以 <a href="https://caddyserver.com/v1/docs/proxy" target="_blank" rel="noopener noreferrer">proxy 的配置方式</a> 为例：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">xxx.xxx.mrdrivingduck.cn {</span>
<span class="line">    gzip</span>
<span class="line">    timeouts none</span>
<span class="line">    proxy / https://www.baidu.com {</span>
<span class="line">        except /foolmeonce /blog/apiv4</span>
<span class="line">    }</span>
<span class="line">    proxy /foolmeonce 127.0.0.1:43666 {</span>
<span class="line">        without /foolmeonce</span>
<span class="line">        websocket</span>
<span class="line">    }</span>
<span class="line">    proxy /blog/apiv4 https://api.github.com/graphql {</span>
<span class="line">        without /blog/apiv4</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，第一条规则中 <code>except</code> 的含义是过滤：除了 <code>/foolmeonce</code> 和 <code>/blog/apiv4</code> 的流量，其它流量全部转发到 xx (不好意思李总 😁)。</p><p>第二条规则中 <code>without</code> 的语义是，在转发前将 URL 前缀剪去，如 <code>/foolmeonce/api</code> without <code>/foolmeonce</code> == <code>/api</code>。也就是对于所有匹配 <code>/foolmeonce</code> 的 URL，将这一段前缀剪掉后，转发到 <code>127.0.0.1:43666</code>。</p><p>第三条规则类似，对于所有 <code>/blog/apiv4</code> 的请求，将请求 URL 前缀剪去后，发送到 GitHub API end point 上。</p><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://www.cnblogs.com/xuepei/p/10437114.html" target="_blank" rel="noopener noreferrer">正向代理和反向代理详解</a></p><hr>`,32)]))}const c=n(i,[["render",o],["__file","Network Proxy Server.html.vue"]]),t=JSON.parse('{"path":"/notes/Network/Network%20Proxy%20Server.html","title":"Network - Proxy Server","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"Proxy Server","slug":"proxy-server","link":"#proxy-server","children":[]},{"level":2,"title":"Application","slug":"application","link":"#application","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Network/Network Proxy Server.md"}');export{c as comp,t as data};
