import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-8-3-iterator-adapters" tabindex="-1"><a class="header-anchor" href="#chapter-8-3-iterator-adapters"><span>Chapter 8.3 - Iterator Adapters</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 07 22:48</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_8-3-1-insert-iterators" tabindex="-1"><a class="header-anchor" href="#_8-3-1-insert-iterators"><span>8.3.1 Insert Iterators</span></a></h2><p>每个插入迭代器内部维护了一个容器。当用户对插入迭代器进行 <strong>赋值</strong> 操作时，就在插入迭代器内部转变为底层容器的插入操作。其它迭代器的功能都被关闭，前进 / 后退 / 取值 / 解引用等操作都是没有意义的。</p><p>后向插入迭代器。对迭代器的赋值操作将导致从容器的尾端插入元素。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Container</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">back_insert_iterator</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Container<span class="token operator">*</span> container<span class="token punctuation">;</span> <span class="token comment">// 指向底层容器</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Container          container_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> output_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 输出迭代器 (只写不读)</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">back_insert_iterator</span><span class="token punctuation">(</span>_Container<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__x <span class="token comment">/* 指向底层容器 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  back_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span></span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Container</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 重载赋值运算符</span></span>
<span class="line">    container<span class="token operator">-&gt;</span><span class="token function">push_back</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转而调用底层容器的 push_back() 函数</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  back_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 其它迭代器操作没用</span></span>
<span class="line">  back_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  back_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Container</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> back_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>_Container<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">back_insert_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 便于返回迭代器的函数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前向插入迭代器。对迭代器的赋值操作将导致从容器前端插入元素。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Container</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">front_insert_iterator</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Container<span class="token operator">*</span> container<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Container          container_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> output_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 输出迭代器 (只写)</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">front_insert_iterator</span><span class="token punctuation">(</span>_Container<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__x <span class="token comment">/* 指向底层容器 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  front_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span></span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Container</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 重载赋值运算符</span></span>
<span class="line">    container<span class="token operator">-&gt;</span><span class="token function">push_front</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转而调用底层容器的 push_front() 函数</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  front_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  front_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  front_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Container</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> front_insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span> <span class="token function">front_inserter</span><span class="token punctuation">(</span>_Container<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">front_insert_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 便于返回迭代器的函数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟随结点的插入函数。在迭代器指示的结点 (之前) 插入元素，插入成功后将返回的迭代器自增，指向原迭代器指示的元素。即插入位置永远随着构造对象时指定的那个迭代器。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Container</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">insert_iterator</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Container<span class="token operator">*</span> container<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typename</span> <span class="token class-name">_Container</span><span class="token double-colon punctuation">::</span>iterator iter<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Container          container_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> output_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 输出迭代器 (只写)</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">insert_iterator</span><span class="token punctuation">(</span>_Container<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Container</span><span class="token double-colon punctuation">::</span>iterator __i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__x <span class="token comment">/* 指向底层容器 */</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">iter</span><span class="token punctuation">(</span>__i <span class="token comment">/* 指示插入位置的迭代器 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span></span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Container</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    iter <span class="token operator">=</span> container<span class="token operator">-&gt;</span><span class="token function">insert</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在迭代器指示的位置插入</span></span>
<span class="line">    <span class="token operator">++</span>iter<span class="token punctuation">;</span>                                  <span class="token comment">// 重新指向构造函数指定的迭代器</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Container</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Iterator</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span></span>
<span class="line">insert_iterator<span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span> <span class="token function">inserter</span><span class="token punctuation">(</span>_Container<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> _Iterator __i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Container</span><span class="token double-colon punctuation">::</span>iterator __iter<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">insert_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Container<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__x<span class="token punctuation">,</span> <span class="token function">__iter</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-3-2-reverse-iterators" tabindex="-1"><a class="header-anchor" href="#_8-3-2-reverse-iterators"><span>8.3.2 Reverse Iterators</span></a></h2><p>反向迭代器将迭代器的移动行为翻转，改为从尾到头处理容器中的元素。反向迭代器内部维护了一个正向迭代器，只不过颠覆了正向迭代器的视角。</p><p>由于正向迭代器有 <strong>左闭右开</strong> 的特性，因此不能将反向迭代器简单实现为 <code>begin</code> 和 <code>end</code> 的互换。核心：先对类内的正向迭代器进行自减，然后再对该迭代器进行使用。这样 <code>rbegin()</code> 将会对应 <code>end()</code> 的前一个元素。说白了，左闭右开的视角不会变。</p><p>以下是 Random Access Iterators 对应的反向迭代器。由于支持随机存取，因此可以使用 <code>+=</code>、<code>-=</code> 等运算符。对于 Bidirectional Iterators 的反向迭代器，只对外提供重载后的 <code>++</code>、<code>--</code> 运算符。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">reverse_iterator</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> reverse_iterator<span class="token operator">&lt;</span>_RandomAccessIterator<span class="token punctuation">,</span> _Tp<span class="token punctuation">,</span> _Reference<span class="token punctuation">,</span> _Distance<span class="token operator">&gt;</span></span>
<span class="line">        _Self<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _RandomAccessIterator current<span class="token punctuation">;</span> <span class="token comment">// 维护正向迭代器，只需要颠覆其视角即可</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 随机存取迭代器</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp                        value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Distance                  difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                       pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Reference                 reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">reverse_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">reverse_iterator</span><span class="token punctuation">(</span>_RandomAccessIterator __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">current</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 可用一个已有的迭代器构造</span></span>
<span class="line">  _RandomAccessIterator <span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> current<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  _Reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>current <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 访问当前迭代器所指的前一个元素</span></span>
<span class="line">  pointer <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment">// 借用 * 运算符</span></span>
<span class="line">  _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">--</span>current<span class="token punctuation">;</span> <span class="token comment">// 反向迭代器的 ++ 对应正向迭代器的 --</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>current<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">++</span>current<span class="token punctuation">;</span> <span class="token comment">// 反向迭代器的 -- 对应正向迭代器的 ++</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>current<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>_Distance __n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_Self</span><span class="token punctuation">(</span>current <span class="token operator">-</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反向迭代器的 + 对应正向迭代器的 -</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>_Distance __n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    current <span class="token operator">-=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 反向迭代器的 += 对应正向迭代器的 -=</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>_Distance __n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_Self</span><span class="token punctuation">(</span>current <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反向迭代器的 - 对应正向迭代器的 +</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">-=</span><span class="token punctuation">(</span>_Distance __n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    current <span class="token operator">+=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 反向迭代器的 -= 对应正向迭代器的 +=</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 这里的第一个 * 使用的是当前类重载的 operator*，实际上访问的是 *(current - 1)</span></span>
<span class="line">  <span class="token comment">// 第二个 * 特指 *this 为当前对象 (迭代器)</span></span>
<span class="line">  <span class="token comment">// 这里的 + 也是使用当前类重载的 operator+，实际上表示 (current - __n)</span></span>
<span class="line">  _Reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_Distance __n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 实际上访问的是 *(current - __n - 1)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-3-3-stream-iterators" tabindex="-1"><a class="header-anchor" href="#_8-3-3-stream-iterators"><span>8.3.3 Stream Iterators</span></a></h2><p>迭代器可以被绑定到一个 stream 上，使其拥有输入或输出的能力。</p><p>对于输入流迭代器来说，实际上就是在类内维护一个输入流 (<code>istream</code>)。对迭代器的 <code>++</code> 操作将会转而调用 <code>istream</code> 的 <code>&gt;&gt;</code> 操作获取输入。输入流是一个 Input Iterator，因为它是只读的。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Dist</span> <span class="token operator">=</span> ptrdiff_t<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">istream_iterator</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Dist</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">istream_iterator</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> __STD_QUALIFIER</span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">==</span> <span class="token function">__STL_NULL_TMPL_ARGS</span> <span class="token punctuation">(</span><span class="token keyword">const</span> istream_iterator<span class="token operator">&amp;</span><span class="token punctuation">,</span></span>
<span class="line">                                   <span class="token keyword">const</span> istream_iterator<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  istream<span class="token operator">*</span> _M_stream<span class="token punctuation">;</span>   <span class="token comment">// 指向绑定的输入流</span></span>
<span class="line">  _Tp _M_value<span class="token punctuation">;</span>         <span class="token comment">// 暂存对读入的对象</span></span>
<span class="line">  <span class="token keyword">bool</span> _M_end_marker<span class="token punctuation">;</span>   <span class="token comment">// 流是否已结束</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_end_marker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_M_stream<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_end_marker<span class="token punctuation">)</span> <span class="token operator">*</span>_M_stream <span class="token operator">&gt;&gt;</span> _M_value<span class="token punctuation">;</span>   <span class="token comment">// 如果流未结束，则读取输入</span></span>
<span class="line">    _M_end_marker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_M_stream<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> input_iterator_tag  iterator_category<span class="token punctuation">;</span> <span class="token comment">// 输入迭代器 (只读)</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp                 value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Dist               difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span>          pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span>          reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">istream_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cin<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_end_marker</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 默认输入流已结束 (通常用作 last 迭代器)</span></span>
<span class="line">  <span class="token function">istream_iterator</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> __s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">_M_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 绑定输入流，并读入第一个元素</span></span>
<span class="line">  reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_value<span class="token punctuation">;</span> <span class="token punctuation">}</span>                 <span class="token comment">// 返回已读入并暂存的元素</span></span>
<span class="line">  pointer <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  istream_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Dist<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_M_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用一次读取函数</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  istream_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Dist<span class="token operator">&gt;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span></span>
<span class="line">    istream_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Dist<span class="token operator">&gt;</span> __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用一次读取函数</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于构造该迭代器时会调用一次 <code>read()</code> 造成阻塞，所以一定要在确定需要的时候才定义输入流迭代器。示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">first</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> last<span class="token punctuation">;</span>  <span class="token comment">// (cin, false)</span></span>
<span class="line"><span class="token function">copy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// while first != last</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于输出流迭代器来说，类内绑定了一个 <code>ostream</code>。用户对迭代器的 <code>operator=</code> 操作，将会转而调用 <code>ostream</code> 的 <code>operator&lt;&lt;</code> 输出操作。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ostream_iterator</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  ostream<span class="token operator">*</span> _M_stream<span class="token punctuation">;</span>     <span class="token comment">// 指向绑定的输出流</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _M_string<span class="token punctuation">;</span>  <span class="token comment">// 每输出一次后跟着输出的分隔字符串</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> output_iterator_tag iterator_category<span class="token punctuation">;</span>  <span class="token comment">// 输出迭代器 (只写)</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">void</span>                reference<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">ostream_iterator</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> __s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_string</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 默认没有分隔字符串</span></span>
<span class="line">  <span class="token function">ostream_iterator</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> __s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> __c<span class="token punctuation">)</span>                   <span class="token comment">// 指定输出流和分隔字符串</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token function">_M_stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_string</span><span class="token punctuation">(</span>__c<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  ostream_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 重载赋值运算符</span></span>
<span class="line">    <span class="token operator">*</span>_M_stream <span class="token operator">&lt;&lt;</span> __value<span class="token punctuation">;</span>                   <span class="token comment">// 输出赋值给迭代器的数值</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_string<span class="token punctuation">)</span> <span class="token operator">*</span>_M_stream <span class="token operator">&lt;&lt;</span> _M_string<span class="token punctuation">;</span>  <span class="token comment">// 如果有分隔字符串的话，输出分隔字符串</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  ostream_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token comment">// 迭代器运算操作无效</span></span>
<span class="line">  ostream_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  ostream_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一种可能的使用方式：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">ostream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">out</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">copy</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const i=s(t,[["render",o],["__file","Chapter 8.3 - Iterator Adapters.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%208%20-%20%E9%80%82%E9%85%8D%E5%99%A8/Chapter%208.3%20-%20Iterator%20Adapters.html","title":"Chapter 8.3 - Iterator Adapters","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.3.1 Insert Iterators","slug":"_8-3-1-insert-iterators","link":"#_8-3-1-insert-iterators","children":[]},{"level":2,"title":"8.3.2 Reverse Iterators","slug":"_8-3-2-reverse-iterators","link":"#_8-3-2-reverse-iterators","children":[]},{"level":2,"title":"8.3.3 Stream Iterators","slug":"_8-3-3-stream-iterators","link":"#_8-3-3-stream-iterators","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 8 - 适配器/Chapter 8.3 - Iterator Adapters.md"}');export{i as comp,r as data};
