import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(l,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-7-仿函数-functors" tabindex="-1"><a class="header-anchor" href="#chapter-7-仿函数-functors"><span>Chapter 7 - 仿函数 functors</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 07 20:44</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_7-1-仿函数-functors-概观" tabindex="-1"><a class="header-anchor" href="#_7-1-仿函数-functors-概观"><span>7.1 仿函数 (functors) 概观</span></a></h2><p>仿函数 (functors) 是早期的命名方式。在新的 C++ 标准规格中，采用的新名称是 <strong>函数对象 (function objects)</strong>。其实际意义是：一种具有函数特质的对象，该对象可以像函数一样被调用。</p><p>仿函数在 STL 中主要作用于算法领域：</p><ul><li>算法的第一个版本使用最常用 (或最直观) 的某种运算 (比如 <code>operator&lt;</code>)</li><li>算法的第二个版本使用用户提供的仿函数操作，实现算法的 <strong>泛化</strong> (比如用户自行提供一个比较函数)</li></ul><p>如果想要将某个 <strong>操作</strong> 当作算法的参数，那么有两种方法：</p><ol><li>将操作设计为一个函数，将函数指针作为参数</li><li>将操作设计为一个仿函数类，产生一个仿函数类的对象，以该对象作为参数</li></ol><p>其中，函数指针无法满足 STL 对抽象性的要求，也无法满足 STL 适配器的要求。</p><p>从实现角度来说，仿函数实际上就是一个 <strong>行为类似函数</strong> 的对象，因此仿函数类必须重载 <code>operator()</code>。这样仿函数类的对象之后加上 <code>()</code> 就可以调用仿函数类内定义的操作逻辑。除了显式产生对象外，更多的用法是产生一个 <strong>匿名的临时对象</strong>，比如 <code>greater&lt;int&gt;()(6, 4)</code>。</p><p>仿函数按操作数个数划分：一元 / 二元；按功能划分：算术运算 / 关系运算 / 逻辑运算。</p><h2 id="_7-2-可适配-adaptable-的关键" tabindex="-1"><a class="header-anchor" href="#_7-2-可适配-adaptable-的关键"><span>7.2 可适配 (Adaptable) 的关键</span></a></h2><p>STL 的仿函数必须定义自己的 <strong>相关类型 (associative types)</strong> (和迭代器类似)，这些相关类型能够被函数适配器取出，从而获得仿函数的信息。这些类型只是类型定义，只会在编译期内使用，对程序执行效率没有影响，也没有空间负担。</p><p>仿函数的相关类型包括 <strong>函数参数类型</strong> 和 <strong>函数返回值类型</strong>。为方便起见，STL 中已经定义好了一元仿函数 (一个参数，一个返回值) 和二元仿函数 (两个参数，一个返回值)。</p><h3 id="_7-2-1-unary-function" tabindex="-1"><a class="header-anchor" href="#_7-2-1-unary-function"><span>7.2.1 unary_function</span></a></h3><p>一元仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Result</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">unary_function</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Arg argument_type<span class="token punctuation">;</span>   <span class="token comment">// 参数类型</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Result result_type<span class="token punctuation">;</span>  <span class="token comment">// 返回值类型</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何仿函数如果继承自上述结构体，那么就可以通过模板取得参数类型和返回值类型。</p><h3 id="_7-2-2-binary-function" tabindex="-1"><a class="header-anchor" href="#_7-2-2-binary-function"><span>7.2.2 binary_function</span></a></h3><p>二元仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Result</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">binary_function</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Arg1 first_argument_type<span class="token punctuation">;</span>   <span class="token comment">// 第一参数类型</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Arg2 second_argument_type<span class="token punctuation">;</span>  <span class="token comment">// 第二参数类型</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Result result_type<span class="token punctuation">;</span>         <span class="token comment">// 返回值类型</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何仿函数如果继承自上述结构体，就可以通过模板取得两个参数的类型和返回值类型。</p><h2 id="_7-3-算术类-arithmetic-仿函数" tabindex="-1"><a class="header-anchor" href="#_7-3-算术类-arithmetic-仿函数"><span>7.3 算术类 (Arithmetic) 仿函数</span></a></h2><p>加法仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">plus</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">// 两个参数类型与返回值类型一致</span></span>
<span class="line">  _Tp <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">+</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>减法仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">minus</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">// 两个参数类型与返回值类型一致</span></span>
<span class="line">  _Tp <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">-</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乘法仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">multiplies</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">// 两个参数类型与返回值类型一致</span></span>
<span class="line">  _Tp <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">*</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除法仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">divides</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">// 两个参数类型与返回值类型一致</span></span>
<span class="line">  _Tp <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">/</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模运算仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">modulus</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Tp <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">%</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取反运算仿函数 (一元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">negate</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span> <span class="token comment">// 参数类型与返回类型一致</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Tp <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span>__x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还有两个不符合 C++ 标准的，表示同一元素的仿函数 (二元运算)：</p><ul><li><code>T + 0 = T</code></li><li><code>T * 1 = T</code></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// identity_element (not part of the C++ standard).</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span> <span class="token keyword">inline</span> _Tp <span class="token function">identity_element</span><span class="token punctuation">(</span>plus<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span> <span class="token keyword">inline</span> _Tp <span class="token function">identity_element</span><span class="token punctuation">(</span>multiplies<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-4-关系运算类-relational-仿函数" tabindex="-1"><a class="header-anchor" href="#_7-4-关系运算类-relational-仿函数"><span>7.4 关系运算类 (Relational) 仿函数</span></a></h2><p>全部都是二元运算。返回值类型全部为 <code>bool</code>。</p><p>相等仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">equal_to</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">==</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不相等仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">not_equal_to</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">!=</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大于仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">greater</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">&gt;</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大于等于仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">greater_equal</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">&gt;=</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小于仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">less</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">&lt;</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小于等于仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">less_equal</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">&lt;=</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-5-逻辑运算类-logical-仿函数" tabindex="-1"><a class="header-anchor" href="#_7-5-逻辑运算类-logical-仿函数"><span>7.5 逻辑运算类 (Logical) 仿函数</span></a></h2><p>与、或、非运算。返回值全部为 <code>bool</code>。</p><p>与运算仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">logical_and</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">&amp;&amp;</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或运算仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">logical_or</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x <span class="token operator">||</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非运算仿函数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">logical_not</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span>__x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-6-相同-identity-、选择-select-、投影-project-仿函数" tabindex="-1"><a class="header-anchor" href="#_7-6-相同-identity-、选择-select-、投影-project-仿函数"><span>7.6 相同 (identity)、选择 (select)、投影 (project) 仿函数</span></a></h2><p>C++ 标准不涵盖这类仿函数，但各个实现版本都实现了这类仿函数作为内部使用。</p><p>表示相同元素的仿函数 (一元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// identity is an extensions: it is not part of the standard.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Identity</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">identity</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Identity</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择仿函数，接收一个 pair，返回 pair 中的第一个元素或第二个元素 (一元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// select1st and select2nd are extensions: they are not part of the standard.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Pair</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Select1st</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Pair</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> _Pair<span class="token double-colon punctuation">::</span><span class="token class-name">first_type</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Pair</span><span class="token double-colon punctuation">::</span>first_type<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Pair<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> __x<span class="token punctuation">.</span>first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Pair</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Select2nd</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">unary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Pair</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> _Pair<span class="token double-colon punctuation">::</span><span class="token class-name">second_type</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token class-name">_Pair</span><span class="token double-colon punctuation">::</span>second_type<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Pair<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> __x<span class="token punctuation">.</span>second<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Pair</span><span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">select1st</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Select1st</span><span class="token operator">&lt;</span><span class="token class-name">_Pair</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Pair</span><span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">select2nd</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Select2nd</span><span class="token operator">&lt;</span><span class="token class-name">_Pair</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>投影仿函数，接收两个参数，返回一个参数 (二元运算)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// project1st and project2nd are extensions: they are not part of the standard</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Project1st</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token class-name">_Arg2</span><span class="token punctuation">,</span> <span class="token class-name">_Arg1</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  _Arg1 <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Arg1<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Arg2<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __x<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Project2nd</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">binary_function</span><span class="token operator">&lt;</span><span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token class-name">_Arg2</span><span class="token punctuation">,</span> <span class="token class-name">_Arg2</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  _Arg2 <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Arg1<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Arg2<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> __y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">project1st</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Project1st</span><span class="token operator">&lt;</span><span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token class-name">_Arg2</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Arg2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">project2nd</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Project2nd</span><span class="token operator">&lt;</span><span class="token class-name">_Arg1</span><span class="token punctuation">,</span> <span class="token class-name">_Arg2</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71)]))}const i=n(t,[["render",o],["__file","Chapter 7 - functors.html.vue"]]),r=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%207%20-%20%E4%BB%BF%E5%87%BD%E6%95%B0%20functors/Chapter%207%20-%20functors.html","title":"Chapter 7 - 仿函数 functors","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"7.1 仿函数 (functors) 概观","slug":"_7-1-仿函数-functors-概观","link":"#_7-1-仿函数-functors-概观","children":[]},{"level":2,"title":"7.2 可适配 (Adaptable) 的关键","slug":"_7-2-可适配-adaptable-的关键","link":"#_7-2-可适配-adaptable-的关键","children":[{"level":3,"title":"7.2.1 unary_function","slug":"_7-2-1-unary-function","link":"#_7-2-1-unary-function","children":[]},{"level":3,"title":"7.2.2 binary_function","slug":"_7-2-2-binary-function","link":"#_7-2-2-binary-function","children":[]}]},{"level":2,"title":"7.3 算术类 (Arithmetic) 仿函数","slug":"_7-3-算术类-arithmetic-仿函数","link":"#_7-3-算术类-arithmetic-仿函数","children":[]},{"level":2,"title":"7.4 关系运算类 (Relational) 仿函数","slug":"_7-4-关系运算类-relational-仿函数","link":"#_7-4-关系运算类-relational-仿函数","children":[]},{"level":2,"title":"7.5 逻辑运算类 (Logical) 仿函数","slug":"_7-5-逻辑运算类-logical-仿函数","link":"#_7-5-逻辑运算类-logical-仿函数","children":[]},{"level":2,"title":"7.6 相同 (identity)、选择 (select)、投影 (project) 仿函数","slug":"_7-6-相同-identity-、选择-select-、投影-project-仿函数","link":"#_7-6-相同-identity-、选择-select-、投影-project-仿函数","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 7 - 仿函数 functors/Chapter 7 - functors.md"}');export{i as comp,r as data};
