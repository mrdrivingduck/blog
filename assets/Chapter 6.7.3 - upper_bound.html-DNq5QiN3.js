import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-6-7-3-upper-bound" tabindex="-1"><a class="header-anchor" href="#chapter-6-7-3-upper-bound"><span>Chapter 6.7.3 - upper_bound</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 15 10:37</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="upper-bound" tabindex="-1"><a class="header-anchor" href="#upper-bound"><span>upper_bound</span></a></h2><p>二分查找的一个特殊版本。在不破坏顺序的前提下，寻找 <strong>可插入特定值的最后一个合适的位置</strong>。默认使用 <code>operator&lt;</code> 进行比较，但也支持用户提供的二元仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter <span class="token function">__upper_bound</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span> _Distance<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Distance __len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _Distance __half<span class="token punctuation">;</span></span>
<span class="line">  _ForwardIter __middle<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    __half <span class="token operator">=</span> __len <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 区间长度减半</span></span>
<span class="line">    __middle <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">advance</span><span class="token punctuation">(</span>__middle<span class="token punctuation">,</span> __half<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// middle 指向区间中点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__val <span class="token operator">&lt;</span> <span class="token operator">*</span>__middle<span class="token punctuation">)</span>      <span class="token comment">// 指定值 &lt; 区间中点值，那么要到前半区间寻找</span></span>
<span class="line">      __len <span class="token operator">=</span> __half<span class="token punctuation">;</span>           <span class="token comment">// 区间长度减半</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span>                      <span class="token comment">// 指定值 &gt;= 区间中点值</span></span>
<span class="line">      __first <span class="token operator">=</span> __middle<span class="token punctuation">;</span>          <span class="token comment">// 在后半区间寻找</span></span>
<span class="line">      <span class="token operator">++</span>__first<span class="token punctuation">;</span>                   <span class="token comment">// first 指向区间中点的下一个值 (因为 STL 的插入位置在目标迭代器之前)</span></span>
<span class="line">      __len <span class="token operator">=</span> __len <span class="token operator">-</span> __half <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 区间长度减半再减 1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter <span class="token function">upper_bound</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                                <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__upper_bound</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __val<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter <span class="token function">upper_bound</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                                <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 二元仿函数版本</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>与 <code>lower_bound()</code> 的差别是使用 <code>operator&lt;</code> (或用户提供的仿函数) 时操作数的顺序不一样。</p><p><code>lower_bound()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__middle <span class="token operator">&lt;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>upper_bound()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>__val <span class="token operator">&lt;</span> <span class="token operator">*</span>__middle<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>带来的差异就是，<code>lower_bound()</code> 寻找特定值的第一个插入位置，<code>upper_bound()</code> 寻找特定值的最后一个插入位置。</p></blockquote><h2 id="equal-range" tabindex="-1"><a class="header-anchor" href="#equal-range"><span>equal_range</span></a></h2><p>二分查找的一个版本，在已排序的区间中寻找某个特定值所在的区间，该区间为：</p><ul><li>起点是可以插入该元素的第一个位置 (<code>lower_bound()</code>)</li><li>终点是可以插入该元素的最后一个位置 (<code>upper_bound()</code>)</li></ul><p>区间内的每一个元素都与该指定值相等。</p><p>算法默认使用 <code>operator&lt;</code> 来进行比较，也接受用户自行提供的仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> pair<span class="token operator">&lt;</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIter<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">equal_range</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIter<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__equal_range</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __val<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token function">__DISTANCE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Distance</span><span class="token operator">&gt;</span></span>
<span class="line">pair<span class="token operator">&lt;</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIter<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">__equal_range</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span></span>
<span class="line">              _Distance<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Distance __len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  _Distance __half<span class="token punctuation">;</span></span>
<span class="line">  _ForwardIter __middle<span class="token punctuation">,</span> __left<span class="token punctuation">,</span> __right<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    __half <span class="token operator">=</span> __len <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    __middle <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">advance</span><span class="token punctuation">(</span>__middle<span class="token punctuation">,</span> __half<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// middle 指向区间中点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__middle <span class="token operator">&lt;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 区间中点 &lt; 指定值</span></span>
<span class="line">      __first <span class="token operator">=</span> __middle<span class="token punctuation">;</span>       <span class="token comment">// 从区间后半段继续寻找</span></span>
<span class="line">      <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">      __len <span class="token operator">=</span> __len <span class="token operator">-</span> __half <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__val <span class="token operator">&lt;</span> <span class="token operator">*</span>__middle<span class="token punctuation">)</span>  <span class="token comment">// 指定值 &lt; 区间中点</span></span>
<span class="line">      __len <span class="token operator">=</span> __half<span class="token punctuation">;</span>            <span class="token comment">// 从区间前半段继续寻找</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                       <span class="token comment">// 指定值 == 区间中点</span></span>
<span class="line">      __left <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __middle<span class="token punctuation">,</span> __val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 在区间前半段找区间前端点</span></span>
<span class="line">      <span class="token function">advance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      __right <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token operator">++</span>__middle<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __val<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 在区间后半段找区间后端点</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__left<span class="token punctuation">,</span> __right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回迭代器 pair</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 如果没有找到，那么返回一个空区间</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> pair<span class="token operator">&lt;</span>_ForwardIter<span class="token punctuation">,</span> _ForwardIter<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">equal_range</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">,</span></span>
<span class="line">            _Compare __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用户自行提供仿函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const i=s(t,[["render",l],["__file","Chapter 6.7.3 - upper_bound.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.7.3%20-%20upper_bound.html","title":"Chapter 6.7.3 - upper_bound","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"upper_bound","slug":"upper-bound","link":"#upper-bound","children":[]},{"level":2,"title":"equal_range","slug":"equal-range","link":"#equal-range","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.7.3 - upper_bound.md"}');export{i as comp,u as data};
