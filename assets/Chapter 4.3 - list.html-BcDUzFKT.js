import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-4-3-list" tabindex="-1"><a class="header-anchor" href="#chapter-4-3-list"><span>Chapter 4.3 - list</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 03 21:40</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_4-3-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-3-1-概述"><span>4.3.1 概述</span></a></h2><p>单个头结点的环形双向链表设计，好处是每次插入或删除元素就分配或释放一个元素的空间，因此对空间的运用绝对精准，一点也不浪费；对任何位置元素的插入和删除永远是常数时间。</p><h2 id="_4-3-2-list-的结点-node" tabindex="-1"><a class="header-anchor" href="#_4-3-2-list-的结点-node"><span>4.3.2 list 的结点 (node)</span></a></h2><p>双向链表，除了数据以外，还有两个前后指针：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">_List_node_base</span> <span class="token punctuation">{</span></span>
<span class="line">  _List_node_base<span class="token operator">*</span> _M_next<span class="token punctuation">;</span></span>
<span class="line">  _List_node_base<span class="token operator">*</span> _M_prev<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_List_node</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_List_node_base</span></span> <span class="token punctuation">{</span></span>
<span class="line">  _Tp _M_data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-3-list-的迭代器" tabindex="-1"><a class="header-anchor" href="#_4-3-3-list-的迭代器"><span>4.3.3 list 的迭代器</span></a></h2><p>list 的结点并不在内存中连续存储，因此不能像 vector 一样使用普通指针作为迭代器。list 的迭代器应当能够在递增 / 递减时正确指向下一个 / 前一个元素。因此，list 提供 Bidirectional Iterators。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">inline</span> bidirectional_iterator_tag</span>
<span class="line"><span class="token function">iterator_category</span><span class="token punctuation">(</span><span class="token keyword">const</span> _List_iterator_base<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">bidirectional_iterator_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>list 迭代器的重要性质是，insert 或 splice 操作都不会使原有迭代器失效；erase 操作除去被删除结点以外的迭代器也不会失效。</p><p>list 的迭代器内需要维护一个指向结点的指针。通过该指针，能够访问到 list 结点。对迭代器的自增 / 自减能够使迭代器指向下一个 / 上一个 list 结点。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">_List_iterator_base</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> size_t                     size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t                  difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> bidirectional_iterator_tag iterator_category<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _List_node_base<span class="token operator">*</span> _M_node<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_List_iterator_base</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_List_iterator_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_node <span class="token operator">=</span> _M_node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_decr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_node <span class="token operator">=</span> _M_node<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> _List_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_node <span class="token operator">==</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _List_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_node <span class="token operator">!=</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ref</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ptr</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_List_iterator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_List_iterator_base</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _List_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span>_Tp<span class="token operator">*</span><span class="token operator">&gt;</span>             iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _List_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span> const_iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _List_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Ref<span class="token punctuation">,</span>_Ptr<span class="token operator">&gt;</span>             _Self<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Ptr pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Ref reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span> _Node<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_List_iterator</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_List_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_List_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_List_iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> iterator<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_List_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> _M_node<span class="token punctuation">)</span><span class="token operator">-&gt;</span>_M_data<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SGI_STL_NO_ARROW_OPERATOR</span></span></span>
<span class="line">  pointer <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></span>
<span class="line"></span>
<span class="line">  _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_decr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_decr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-4-list-的数据结构" tabindex="-1"><a class="header-anchor" href="#_4-3-4-list-的数据结构"><span>4.3.4 list 的数据结构</span></a></h2><p>由于 SGI list 是一个环形双向链表，因此只需要一个指针就能表示整个链表。该指针可以指向一个 dummy 的空白结点，从而能够完成 STL <strong>左闭右开</strong> 的区间要求。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">_List_base</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Alloc allocator_type<span class="token punctuation">;</span></span>
<span class="line">  allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_List_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_node <span class="token operator">=</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _M_node<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> _M_node<span class="token punctuation">;</span></span>
<span class="line">    _M_node<span class="token operator">-&gt;</span>_M_prev <span class="token operator">=</span> _M_node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">~</span><span class="token function">_List_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _Alloc_type<span class="token punctuation">;</span></span>
<span class="line">  _List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _Alloc_type<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">{</span> _Alloc_type<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> _M_node<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始状态下，<code>node</code> 指针将会指向一个空白结点，该结点的 <code>prev</code> 和 <code>next</code> 都指向自身。通过 <code>node</code> 指针，以下成员函数可以轻松实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_M_node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_M_node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_node<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_node<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_node<span class="token operator">-&gt;</span>_M_next <span class="token operator">==</span> _M_node<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    size_type __result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">distance</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">--</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">--</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-5-list-的构造于内存管理-constructor-push-back-insert" tabindex="-1"><a class="header-anchor" href="#_4-3-5-list-的构造于内存管理-constructor-push-back-insert"><span>4.3.5 list 的构造于内存管理：constructor，push_back，insert</span></a></h2><p>list 使用缺省的 <code>alloc</code> 空间分配器，并在类内定义了一个分配器，方便以 list 结点大小为单位分配内存：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _Alloc_type<span class="token punctuation">;</span></span>
<span class="line">_List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _Alloc_type<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">{</span> _Alloc_type<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下两个子函数除了分配内存，还调用构造函数构造对象：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">_Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _Node<span class="token operator">*</span> __p <span class="token operator">=</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">_Construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__p<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __p<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">_Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _Node<span class="token operator">*</span> __p <span class="token operator">=</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">_Construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__p<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __p<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>list 的插入函数 <code>insert()</code> 有多种重载，但本质上都需要确定一个插入位置。元素将会被插入到该位置之前：该位置的元素将成为所有被插入元素之后的第一个元素，这也是 STL 的插入规范。其余的，就是分配空间与构造结点的过程。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Node<span class="token operator">*</span> __tmp <span class="token operator">=</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __tmp<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">    __tmp<span class="token operator">-&gt;</span>_M_prev <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">;</span></span>
<span class="line">    __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">    __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev <span class="token operator">=</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个标准实现，其它的 <code>insert()</code> 无非就是指定不同的插入位置罢了。包括 <code>push_back()</code> 和 <code>push_front()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区间插入也是同样道理。</p><h2 id="_4-3-6-list-的元素操作" tabindex="-1"><a class="header-anchor" href="#_4-3-6-list-的元素操作"><span>4.3.6 list 的元素操作</span></a></h2><p><code>erase()</code> 操作与 <code>insert()</code> 相反。将迭代器指向的结点或结点区间从链表中取出来 (并重新修复链表内的指针) 后，依次调用析构与内存方式即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _List_node_base<span class="token operator">*</span> __next_node <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">    _List_node_base<span class="token operator">*</span> __prev_node <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">;</span></span>
<span class="line">    _Node<span class="token operator">*</span> __n <span class="token operator">=</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> __position<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">    __prev_node<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __next_node<span class="token punctuation">;</span></span>
<span class="line">    __next_node<span class="token operator">-&gt;</span>_M_prev <span class="token operator">=</span> __prev_node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_Destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__n<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> __next_node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">erase</span><span class="token punctuation">(</span>__first<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __last<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于此，<code>pop_back()</code> 和 <code>pop_front()</code> 也可以被实现了：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    iterator __tmp <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">erase</span><span class="token punctuation">(</span><span class="token operator">--</span>__tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>remove()</code> 删除所有特定值的结点：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  iterator __first <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  iterator __last <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    iterator __next <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> __value<span class="token punctuation">)</span> <span class="token function">erase</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __first <span class="token operator">=</span> __next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>unique()</code> 移除 <strong>数值相同且连续</strong> 的元素，移除至只剩下一个：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  iterator __first <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  iterator __last <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  iterator __next <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__next <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// next 指针前进</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> <span class="token operator">*</span>__next<span class="token punctuation">)</span> <span class="token comment">// first 指针不前进</span></span>
<span class="line">      <span class="token function">erase</span><span class="token punctuation">(</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 删除 next 指针指向的结点</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      __first <span class="token operator">=</span> __next<span class="token punctuation">;</span>      <span class="token comment">// first 指针前进</span></span>
<span class="line">    __next <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tranfer()</code> 提供了 <strong>区间插入操作</strong>：将某个连续范围内的元素迁移到某个特定位置之前。在实现上，只需要修改指针即可。将 <code>first</code> 指向的结点续到插入位置之前的结点之后；从 <code>last</code> 结点的后面接上原插入位置开始的结点。</p><blockquote><p>该函数接受插入区间和插入位置在同一个 list 中。</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Remove [first, last) from its old position.</span></span>
<span class="line">        __last<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token operator">-&gt;</span>_M_next     <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">        __first<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token operator">-&gt;</span>_M_next    <span class="token operator">=</span> __last<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">        __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __first<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Splice [first, last) into its new position.</span></span>
<span class="line">        _List_node_base<span class="token operator">*</span> __tmp      <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">;</span></span>
<span class="line">        __position<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev <span class="token operator">=</span> __last<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">;</span></span>
<span class="line">        __last<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev     <span class="token operator">=</span> __first<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">;</span></span>
<span class="line">        __first<span class="token punctuation">.</span>_M_node<span class="token operator">-&gt;</span>_M_prev    <span class="token operator">=</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数并不是 <code>public</code> 的，而是为其它函数的实现奠定了基础。</p><p><code>splice()</code> 函数能够将一个区间插入到 list 迭代器指示的位置：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// x 与当前 list 不能是同一个 list</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__x<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span><span class="token punctuation">,</span> iterator __i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 仅插入 i 指向的结点</span></span>
<span class="line">    iterator __j <span class="token operator">=</span> __i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">++</span>__j<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">==</span> __i <span class="token operator">||</span> __position <span class="token operator">==</span> __j<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __i<span class="token punctuation">,</span> __j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span><span class="token punctuation">,</span> iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>merge()</code> 将两个 <strong>已经递增排序</strong> 的 list 合并到调用该函数的 list 身上：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">merge</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  iterator __first1 <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  iterator __last1 <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  iterator __first2 <span class="token operator">=</span> __x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  iterator __last2 <span class="token operator">=</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      iterator __next <span class="token operator">=</span> __first2<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">transfer</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> <span class="token operator">++</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 list2 中的结点转移到 list1 (*this)</span></span>
<span class="line">      __first2 <span class="token operator">=</span> __next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span> <span class="token function">transfer</span><span class="token punctuation">(</span>__last1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> __last2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提到排序，list 不能使用 STL 的泛化版 <code>sort()</code>，因为泛化算法只接受 Random Access Iterators。list 类实现了自己的 <code>sort()</code>：据称这是一个 <strong>快速排序</strong>，但我看不懂...... 😭</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Do nothing if the list has length 0 or 1.</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_node<span class="token operator">-&gt;</span>_M_next <span class="token operator">!=</span> _M_node <span class="token operator">&amp;&amp;</span> _M_node<span class="token operator">-&gt;</span>_M_next<span class="token operator">-&gt;</span>_M_next <span class="token operator">!=</span> _M_node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> __carry<span class="token punctuation">;</span></span>
<span class="line">    list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> __counter<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> __fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      __carry<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>__carry<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> __i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span><span class="token punctuation">(</span>__i <span class="token operator">&lt;</span> __fill <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        __counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>__carry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        __carry<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      __carry<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> __fill<span class="token punctuation">)</span> <span class="token operator">++</span>__fill<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> __i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> __i <span class="token operator">&lt;</span> __fill<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span></span>
<span class="line">      __counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__fill<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reverse()</code> 函数将 list 中的所有元素逆置。具体实现是，将每个元素从链表尾 tranfer 到链表头。但我看到的版本是这样的：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__List_base_reverse</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> __p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _List_node_base<span class="token operator">*</span> __tmp <span class="token operator">=</span> __p<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    __STD<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>__tmp<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">,</span> __tmp<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __tmp <span class="token operator">=</span> __tmp<span class="token operator">-&gt;</span>_M_prev<span class="token punctuation">;</span>     <span class="token comment">// Old next node is now prev.</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>__tmp <span class="token operator">!=</span> __p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__List_base_reverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52)]))}const i=s(e,[["render",o],["__file","Chapter 4.3 - list.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%204%20-%20%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%204.3%20-%20list.html","title":"Chapter 4.3 - list","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.3.1 概述","slug":"_4-3-1-概述","link":"#_4-3-1-概述","children":[]},{"level":2,"title":"4.3.2 list 的结点 (node)","slug":"_4-3-2-list-的结点-node","link":"#_4-3-2-list-的结点-node","children":[]},{"level":2,"title":"4.3.3 list 的迭代器","slug":"_4-3-3-list-的迭代器","link":"#_4-3-3-list-的迭代器","children":[]},{"level":2,"title":"4.3.4 list 的数据结构","slug":"_4-3-4-list-的数据结构","link":"#_4-3-4-list-的数据结构","children":[]},{"level":2,"title":"4.3.5 list 的构造于内存管理：constructor，push_back，insert","slug":"_4-3-5-list-的构造于内存管理-constructor-push-back-insert","link":"#_4-3-5-list-的构造于内存管理-constructor-push-back-insert","children":[]},{"level":2,"title":"4.3.6 list 的元素操作","slug":"_4-3-6-list-的元素操作","link":"#_4-3-6-list-的元素操作","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 4 - 序列式容器/Chapter 4.3 - list.md"}');export{i as comp,u as data};
