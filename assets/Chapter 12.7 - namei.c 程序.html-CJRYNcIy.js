import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/mount-DXAMaNM6.png",o={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-7-namei-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-7-namei-c-程序"><span>Chapter 12.7 - namei.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 07 15:42</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-7-namei-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-7-namei-c-程序"><span>12.7 namei.c 程序</span></a></h2><h3 id="_12-7-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-7-1-功能描述"><span>12.7.1 功能描述</span></a></h3><p>主要实现根据目录名或文件名寻找对应 inode 的函数 <code>namei()</code>，以及一些关于目录建立、删除等的操作函数和系统调用。</p><p>MINIX 文件系统与传统 UNIX 文件系统的目录项结构相同，文件名对应的目录项存储在目录 inode 对应的数据块中。文件系统根目录下所有的文件名信息保存在指定 inode (1 号 inode) 的数据块中。</p><p>每个目录项的结构定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NAME_LEN</span> <span class="token expression"><span class="token number">14</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROOT_INO</span> <span class="token expression"><span class="token number">1</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> name<span class="token punctuation">[</span>NAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件的其它信息则被存放在编号为结构体中 <code>inode</code> 的 inode 中。每个编号的 inode 都位于磁盘上的固定位置处。打开文件时，根据给定的文件名，从根目录 (1 号 inode) 或相对路径的 inode 开始查找。</p><h3 id="_12-7-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-7-2-代码注释"><span>12.7.2 代码注释</span></a></h3><h4 id="permission-检查文件访问许可权限" tabindex="-1"><a class="header-anchor" href="#permission-检查文件访问许可权限"><span>permission() - 检查文件访问许可权限</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">permission</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> mode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// inode 的链接计数已经为 0，表示文件已删除</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>euid <span class="token operator">==</span> inode<span class="token operator">-&gt;</span>i_uid<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 文件宿主访问权限</span></span>
<span class="line">        mode <span class="token operator">&gt;&gt;=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_group_p</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_gid<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 组用户访问权限</span></span>
<span class="line">        mode <span class="token operator">&gt;&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> mask <span class="token operator">&amp;</span> <span class="token number">0007</span><span class="token punctuation">)</span> <span class="token operator">==</span> mask<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="match-指定长度字符串比较函数" tabindex="-1"><a class="header-anchor" href="#match-指定长度字符串比较函数"><span>match() - 指定长度字符串比较函数</span></a></h4><p>相当于 <code>strncmp</code> 函数：</p><ul><li>相同返回 1</li><li>不同返回 0</li></ul><p>判断 len 长度的 name 是否与目录项 de 中的文件名相同。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">register</span> <span class="token keyword">int</span> same <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;ax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>de <span class="token operator">||</span> <span class="token operator">!</span>de<span class="token operator">-&gt;</span>inode <span class="token operator">||</span> len <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 特殊处理</span></span>
<span class="line">    <span class="token comment">// &quot;&quot; 与 &quot;.&quot; 相同</span></span>
<span class="line">    <span class="token comment">// 处理 /usr/lib//libc.a 的情况</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> NAME_LEN <span class="token operator">&amp;&amp;</span> de<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 如果 de-&gt;name[len] 不为 NULL</span></span>
<span class="line">        <span class="token comment">// 说明 de 中 name 的长度超过 len</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 用内联汇编进行快速比较</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;cld\\n\\t&quot;</span></span>
<span class="line">            <span class="token string">&quot;fs ; repe; cmpsb\\n\\t&quot;</span></span>
<span class="line">            <span class="token string">&quot;setz %%al&quot;</span></span>
<span class="line">            <span class="token operator">:</span><span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;S&quot;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> de<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">:</span><span class="token string">&quot;cx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;di&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;si&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> same<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="find-entry-在指定目录中查找指定文件名的目录项" tabindex="-1"><a class="header-anchor" href="#find-entry-在指定目录中查找指定文件名的目录项"><span>find_entry() - 在指定目录中查找指定文件名的目录项</span></a></h4><p>返回含有对应目录项的高速缓冲区指针，另外还返回该目录项指针 (该返回值是通过参数返回的)。因为返回值只能有一个</p><blockquote><p>代码中对于 <code>../</code> 的特殊处理，涉及到文件系统挂载的问题：</p><p><img src="`+t+`" alt="mount"></p><p>挂载点位于 FS1 的目录 <code>/.../dir</code> 上，通过其上一级目录的 inode1，找到该目录对应的 inode - inode2。inode2 中有一个挂载标志，被挂载的 FS2 文件系统超级块中的 <code>s_imount</code> 指向被挂载的 inode2。同时，FS2 中自己的 1 号 inode 作为 FS2 的根目录，所以存在这样的问题：</p><p>在 FS2 的根目录上使用 <code>../</code>，就需要退到 FS 1 的 inode2 中</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span><span class="token operator">*</span> dir<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> namelen<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token operator">*</span> res_dir<span class="token punctuation">)</span> <span class="token comment">// 目录项地址通过这个参数返回</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> entries<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> block<span class="token punctuation">,</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span> sb<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">NO_TRUNCATE</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span></span>
<span class="line">        namelen <span class="token operator">=</span> NAME_LEN<span class="token punctuation">;</span> <span class="token comment">// 文件名超出长度时，截断</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 计算有多少个目录项</span></span>
<span class="line">    entries <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>res_dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 对于 &quot;..&quot; 的路径</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token operator">==</span> current<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 如果这个目录已经是当前进程的根目录</span></span>
<span class="line">            <span class="token comment">// 就将 .. 处理为 . (只修改路径名长度)</span></span>
<span class="line">            <span class="token comment">// 不能后退到父目录中</span></span>
<span class="line">            namelen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_num <span class="token operator">==</span> ROOT_INO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 该目录已经是 root inode</span></span>
<span class="line">            <span class="token comment">// 让 *dir 指向被安装文件系统的 inode</span></span>
<span class="line">            sb <span class="token operator">=</span> <span class="token function">get_super</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得该文件系统的超级块</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 超级块被安装在另一个文件系统的 inode 上</span></span>
<span class="line">                <span class="token function">iput</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token operator">=</span> sb<span class="token operator">-&gt;</span>s_imount<span class="token punctuation">;</span> <span class="token comment">// 是 dir 指向安装该文件系统的 inode</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 目前，dir 指针应当已经定位到了 inode 上</span></span>
<span class="line">    <span class="token comment">// 待搜索的路径名也应当已经合法</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 第一个直接块号 (0 则退出)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将第一个直接块读入缓冲区</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span> <span class="token comment">// 指向直接块缓冲区第一项</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> de <span class="token operator">&gt;=</span> bh<span class="token operator">-&gt;</span>b_data <span class="token operator">+</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当前缓冲块已搜索完</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放已经搜索完的缓冲区</span></span>
<span class="line">            bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 该目录共有 entries 个目录项</span></span>
<span class="line">            <span class="token comment">// 占用 entries / DIR_ENTRIES_PER_BLOCK 个逻辑块</span></span>
<span class="line">            <span class="token comment">// 取得该目录项第 i / DIR_ENTRIES_PER_BLOCK 个逻辑块的块号</span></span>
<span class="line">            <span class="token comment">// 并将该块号读入缓冲区</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> <span class="token function">bmap</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">,</span> i <span class="token operator">/</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                <span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 读取失败则跳过这一个逻辑块</span></span>
<span class="line">                i <span class="token operator">+=</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span> <span class="token comment">// 指向新的缓冲块的开始处</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>namelen<span class="token punctuation">,</span> name<span class="token punctuation">,</span> de<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 目录项已匹配</span></span>
<span class="line">            <span class="token operator">*</span>res_dir <span class="token operator">=</span> de<span class="token punctuation">;</span> <span class="token comment">// 通过参数返回该目录项的指针</span></span>
<span class="line">            <span class="token keyword">return</span> bh<span class="token punctuation">;</span> <span class="token comment">// 通过返回值返回含有该目录项的缓冲块指针</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        de<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 下一个 entry</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放最后查找的缓冲块</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 未找到</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="add-entry-向指定目录添加一个指定文件名的目录项" tabindex="-1"><a class="header-anchor" href="#add-entry-向指定目录添加一个指定文件名的目录项"><span>add_entry() - 向指定目录添加一个指定文件名的目录项</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">add_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> namelen<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token operator">*</span> res_dir<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> block<span class="token punctuation">,</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token operator">*</span>res_dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">NO_TRUNCATE</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&gt;</span> NAME_LEN<span class="token punctuation">)</span></span>
<span class="line">        namelen <span class="token operator">=</span> NAME_LEN<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> dir<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 取目录第一个直接块号</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将第一个直接块读入缓冲区</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在所有的数据块中，查找未使用的空目录项</span></span>
<span class="line">    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> de <span class="token operator">&gt;=</span> bh<span class="token operator">-&gt;</span>b_data <span class="token operator">+</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当前缓冲块已扫描完</span></span>
<span class="line">            <span class="token comment">// 释放当前块，寻找下一块</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 下一块的逻辑块号 (如果没有就申请一块)</span></span>
<span class="line">            block <span class="token operator">=</span> <span class="token function">create_block</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> i <span class="token operator">/</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 将下一块读入缓冲区</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                i <span class="token operator">+=</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span> <span class="token comment">// 指向新块的头部</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> dir<span class="token operator">-&gt;</span>i_size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 超出了该目录的文件大小</span></span>
<span class="line">            <span class="token comment">// 需要更新该目录 inode 中的文件大小</span></span>
<span class="line">            de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 该项可以被使用</span></span>
<span class="line">            dir<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            dir<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// inode 修改标志</span></span>
<span class="line">            dir<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// de-&gt;inode == 0 表示找到了空闲项 || 添加了新项</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>de<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            dir<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NAME_LEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">                de<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> namelen<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区中的目录项被修改</span></span>
<span class="line">            <span class="token operator">*</span>res_dir <span class="token operator">=</span> de<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> bh<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        de<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 由于搜索不到空闲项会开辟新的项</span></span>
<span class="line">    <span class="token comment">// 所以下面的代码将不会被执行到 (与上个函数不同)</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="follow-link-查找符号链接链接的文件-inode" tabindex="-1"><a class="header-anchor" href="#follow-link-查找符号链接链接的文件-inode"><span>follow_link() - 查找符号链接链接的文件 inode</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">follow_link</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fs<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 没有给出目录 inode，就使用进程的 root inode</span></span>
<span class="line">        dir <span class="token operator">=</span> current<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span></span>
<span class="line">        dir<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 没有给出目录项 inode</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISLNK</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 不是符号链接，直接返回该目录项的 inode</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;mov %%fs, %0&quot;</span><span class="token operator">:</span><span class="token string">&quot;=r&quot;</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取 fs 寄存器，需保证指向用户数据段</span></span>
<span class="line">    <span class="token comment">// 将该 inode 的第一个直接块读入缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs <span class="token operator">!=</span> <span class="token number">0x17</span> <span class="token operator">||</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放回符号链接的 inode</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;mov %0, %%fs&quot;</span><span class="token operator">::</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fs 暂时指向内核数据款</span></span>
<span class="line">    <span class="token comment">// 需要处理的数据在内核空间中</span></span>
<span class="line">    inode <span class="token operator">=</span> <span class="token function">_namei</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析符号链接指向的 inode</span></span>
<span class="line">    <span class="token comment">// 符号链接的数据区中存放了对应文件的路径名字符串</span></span>
<span class="line">    <span class="token comment">// 根据该字符串，查找到对应文件的 inode</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;mov %0, %%fs&quot;</span><span class="token operator">::</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复 fs</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲块</span></span>
<span class="line">    <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-dir-根据给定路径名进行搜索-直到到达最内层目录" tabindex="-1"><a class="header-anchor" href="#get-dir-根据给定路径名进行搜索-直到到达最内层目录"><span>get_dir() - 根据给定路径名进行搜索，直到到达最内层目录</span></a></h4><p>给定路径名和起始目录的 inode。</p><blockquote><p>啥叫最顶端目录？<code>/usr/a/b/ccc.txt</code>，返回的应该是 <code>/usr/a/b/</code> 目录的 inode，即最内层目录的上一级目录的 inode。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">get_dir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> thisname<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> namelen<span class="token punctuation">,</span> inr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果没有给定起始目录，则从进程的当前工作目录开始</span></span>
<span class="line">        inode <span class="token operator">=</span> current<span class="token operator">-&gt;</span>pwd<span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 绝对路径</span></span>
<span class="line">        <span class="token comment">// 从进程的 root inode 开始</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode <span class="token operator">=</span> current<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span></span>
<span class="line">        pathname<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 忽略 &#39;/&#39; 符号</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 对各目录名或文件名部分进行循环处理</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        thisname <span class="token operator">=</span> pathname<span class="token punctuation">;</span> <span class="token comment">// 指向当前处理的字符串头部</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> MAY_EXEC<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当前所在 inode 不是目录 || 没有进入该目录的权限</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>namelen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>pathname<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> namelen<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 此时 pathname 指向当前处理字符串的结束尾部</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 目录名已结束，直接返回该目录的 inode</span></span>
<span class="line">            <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 在该目录下寻找指定名称的目录项</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token punctuation">,</span> thisname<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        inr <span class="token operator">=</span> de<span class="token operator">-&gt;</span>inode<span class="token punctuation">;</span> <span class="token comment">// 该目录项的 inode 编号</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        dir <span class="token operator">=</span> inode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">iget</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 取该 inode 的内容</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">follow_link</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dir-namei-返回指定目录名的-inode-以及最内层目录的名称" tabindex="-1"><a class="header-anchor" href="#dir-namei-返回指定目录名的-inode-以及最内层目录的名称"><span>dir_namei() - 返回指定目录名的 inode，以及最内层目录的名称</span></a></h4><blockquote><p>根据我对代码的理解，返回的是最内层目录的上一级目录的 inode，以及最内层的目录或文件名 (即最后一个 <code>/</code> 右边的部分)。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> </span>
<span class="line">    <span class="token keyword">int</span> <span class="token operator">*</span> namelen<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> base<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">get_dir</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    basename <span class="token operator">=</span> pathname<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>pathname<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            basename <span class="token operator">=</span> pathname<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>namelen <span class="token operator">=</span> pathname <span class="token operator">-</span> basename <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>name <span class="token operator">=</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> dir<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="namei-取指定路径名的-inode-子函数" tabindex="-1"><a class="header-anchor" href="#namei-取指定路径名的-inode-子函数"><span>_namei() - 取指定路径名的 inode 子函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">_namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> follow_links<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> inr<span class="token punctuation">,</span> namelen<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> dir<span class="token punctuation">;</span> <span class="token comment">// 比如 /usr/</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>base <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> base<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 处理 /usr/src/linux --&gt; /usr/src/linux/</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    inr <span class="token operator">=</span> de<span class="token operator">-&gt;</span>inode<span class="token punctuation">;</span> <span class="token comment">// 取得最内层的 inode 号</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">iget</span><span class="token punctuation">(</span>base<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 取得最内层的 inode</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>follow_links<span class="token punctuation">)</span></span>
<span class="line">        inode <span class="token operator">=</span> <span class="token function">follow_link</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> inode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lnamei-取指定路径名的-inode-不跟随符号链接" tabindex="-1"><a class="header-anchor" href="#lnamei-取指定路径名的-inode-不跟随符号链接"><span>lnamei() - 取指定路径名的 inode，不跟随符号链接</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">lnamei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="namei-取指定路径名的-inode-跟随符号链接" tabindex="-1"><a class="header-anchor" href="#namei-取指定路径名的-inode-跟随符号链接"><span>namei() - 取指定路径名的 inode，跟随符号链接</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> <span class="token function">namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">_namei</span><span class="token punctuation">(</span>pathnam<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="open-namei-打开文件使用的-namei-函数" tabindex="-1"><a class="header-anchor" href="#open-namei-打开文件使用的-namei-函数"><span>open_namei() - 打开文件使用的 namei() 函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">opne_namei</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span><span class="token operator">*</span> res_inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> inr<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> namelen<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_TRUNC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_ACCMODE<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        flag <span class="token operator">|=</span> O_WRONLY<span class="token punctuation">;</span></span>
<span class="line">    mode <span class="token operator">&amp;=</span> <span class="token number">0777</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>umask<span class="token punctuation">;</span></span>
<span class="line">    mode <span class="token operator">|=</span> I_REGULAR<span class="token punctuation">;</span> <span class="token comment">// 常规文件标志 - 用于打开文件不存在，需要创建文件时</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 寻找路径 inode，并得到最内层文件名和长度</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// /usr/</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>O_ACCMODE <span class="token operator">|</span> O_CREATE <span class="token operator">|</span> O_TRUNC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 打开目录名</span></span>
<span class="line">            <span class="token comment">// 直接返回该目录的 inode</span></span>
<span class="line">            <span class="token operator">*</span>res_inode <span class="token operator">=</span> dir<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EISDIR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找最内层的目录项所在缓冲块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 没有找到对应目录项</span></span>
<span class="line">        <span class="token comment">// 创建文件操作</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_CREAT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 不是创建文件操作，退出</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 对目录没有写的权利，退出</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        inode <span class="token operator">=</span> <span class="token function">new_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 申请一个新的 inode</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_uid <span class="token operator">=</span> current<span class="token operator">-&gt;</span>euid<span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> mode<span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        bh <span class="token operator">=</span> <span class="token function">add_entry</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在目录中加入新项</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 添加目录项操作失败</span></span>
<span class="line">            <span class="token comment">// 放回申请到的 inode</span></span>
<span class="line">            inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span> <span class="token comment">// 将新 inode 的编号计入 dir 目录的目录项中</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">*</span>res_inode <span class="token operator">=</span> inode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 之前的取文件名对应目录项的操作成功</span></span>
<span class="line">    <span class="token comment">// 指定文件名的文件已经存在</span></span>
<span class="line">    inr <span class="token operator">=</span> de<span class="token operator">-&gt;</span>inode<span class="token punctuation">;</span> <span class="token comment">// 该文件的 inode 编号</span></span>
<span class="line">    dev <span class="token operator">=</span> dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_EXCL<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 独占操作标志置位</span></span>
<span class="line">        <span class="token comment">// 文件已存在，退出</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 读取该文件的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">follow_link</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token function">iget</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> inr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_ACCMODE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> <span class="token function">ACC_MODE</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 是一个目录 inode，且访问模式是只写或读写</span></span>
<span class="line">        <span class="token comment">// 没有访问许可权限</span></span>
<span class="line">        <span class="token comment">// 放回 inode 并退出</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span> <span class="token comment">// 更新 inode 访问时间</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> O_TRUNC<span class="token punctuation">)</span> <span class="token comment">// 截 0 标志</span></span>
<span class="line">        <span class="token function">truncate</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>res_inode <span class="token operator">=</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-mknod-创建一个设备文件或普通文件结点" tabindex="-1"><a class="header-anchor" href="#sys-mknod-创建一个设备文件或普通文件结点"><span>sys_mknod() - 创建一个设备文件或普通文件结点</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_mknod</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> namelen<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 不是超级用户</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 找不到路径</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 没有指定文件名</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 对该目录没有可写权限</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 指定文件已存在</span></span>
<span class="line">        <span class="token comment">// 不能创建同名结点</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 目录项未找到，申请新的 inode</span></span>
<span class="line">    inode <span class="token operator">=</span> <span class="token function">new_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> mode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">S_ISCHR</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 块设备或字符设备文件，存放设备号</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dev<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在目录中加入目录项</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">add_entry</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span> <span class="token comment">// 新的目录项中设置 inode 编号</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 目录项所在缓冲区已修改</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-mkdir-创建一个目录" tabindex="-1"><a class="header-anchor" href="#sys-mkdir-创建一个目录"><span>sys_mkdir() - 创建一个目录</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> namelen<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">,</span> <span class="token operator">*</span> dir_block<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 找不到上层目录</span></span>
<span class="line">        <span class="token keyword">return</span> _ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 没有指定目录名</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 对目录没有写权限</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 搜索目录是否已经存在</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 目录已存在</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode <span class="token operator">=</span> <span class="token function">new_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为目录申请新的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token comment">// 2 个目录项</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_atime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 为该 inode 申请数据块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 申请数据块失败</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 从设备上读取新申请的磁盘块到高速缓冲中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir_block <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 读取失败</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> dir_block<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 在目录项缓冲块中设置两个目录项</span></span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">strcpy</span><span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;.&quot; 目录项</span></span>
<span class="line">    de<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> dir<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">strcpy</span><span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;..&quot; 目录项</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_nlinks <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// inode 硬链接数为 2</span></span>
<span class="line">    <span class="token comment">// 缓冲块修改、退出</span></span>
<span class="line">    dir_block<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>dir_block<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> I_DIRECTORY <span class="token operator">|</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> <span class="token number">0777</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>umask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在父目录的数据块中设置一个新目录项</span></span>
<span class="line">    <span class="token comment">// 存放新目录的目录项</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">add_entry</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 目录项所在缓冲区被修改</span></span>
<span class="line">    dir<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 子目录的 &quot;..&quot; 项引用</span></span>
<span class="line">    dir<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 父目录 inode 被修改</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="empty-dir-检查目录是否为空" tabindex="-1"><a class="header-anchor" href="#empty-dir-检查目录是否为空"><span>empty_dir() - 检查目录是否为空</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">empty_dir</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> nr<span class="token punctuation">,</span> block<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查该目录的目录项是否正确</span></span>
<span class="line">    <span class="token comment">// 应当至少有 &quot;.&quot; 和 &quot;..&quot; 两个目录项</span></span>
<span class="line">    len <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目录项个数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 目录项数少于 2</span></span>
<span class="line">        <span class="token comment">// 第一个直接块不对应任何块号</span></span>
<span class="line">        <span class="token comment">// 读取第一个直接块失败</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;warning - bad directory on dev %04x\\n&quot;</span><span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span> <span class="token comment">// 指向所有目录项的开头</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>inode <span class="token operator">!=</span> inode<span class="token operator">-&gt;</span>i_num <span class="token operator">||</span> <span class="token operator">!</span>de<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>inode <span class="token operator">||</span></span>
<span class="line">        <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> de<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;..&quot;</span><span class="token punctuation">,</span> dev<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 前两个目录项有问题</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;warning - bad directory on dev %04x\\n&quot;</span><span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 从第三个目录项开始</span></span>
<span class="line">    nr <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    de <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> de <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_data <span class="token operator">+</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当前缓冲块已经搜索完</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放当前缓冲块</span></span>
<span class="line">            block <span class="token operator">=</span> <span class="token function">bmap</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> nr <span class="token operator">/</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得下一块的逻辑块号</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                nr <span class="token operator">+=</span> DIR_ENTRIES_PER_BLOCK<span class="token punctuation">;</span> <span class="token comment">// 跳过这一块</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将下一块读入缓冲区</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            de <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span> <span class="token comment">// 指向缓冲区开始处</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 目录项的 inode 号不为 0</span></span>
<span class="line">            <span class="token comment">// 目录项正被使用，因此该目录不为空</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        de<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        nr<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 除了 &quot;.&quot; 和 &quot;..&quot;，其余目录项都为空</span></span>
<span class="line">    <span class="token comment">// 因此目录为空，释放缓冲块并返回 1</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-rmdir-删除目录" tabindex="-1"><a class="header-anchor" href="#sys-rmdir-删除目录"><span>sys_rmdir() - 删除目录</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> namelen<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 找不到上层目录</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 没有指定目录名</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 对目录没有写权限</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 查询指定目录名的目录项</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 对应目录不存在</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 取得目录的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">iget</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> de<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_mode <span class="token operator">&amp;</span> S_ISVTX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>euid <span class="token operator">&amp;&amp;</span> inode<span class="token operator">-&gt;</span>i_uid <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>euid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 目录设置了受限删除标志</span></span>
<span class="line">        <span class="token comment">// 进程有效用户 id 不是 root</span></span>
<span class="line">        <span class="token comment">// inode 的用户 id 不等于进程的有效用户 id</span></span>
<span class="line">        <span class="token comment">// 不允许删除</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev <span class="token operator">!=</span> dir<span class="token operator">-&gt;</span>i_dev <span class="token operator">||</span> inode<span class="token operator">-&gt;</span>i_count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// inode 设备号与其父目录不同</span></span>
<span class="line">        <span class="token comment">// inode 在其它地方被引用</span></span>
<span class="line">        <span class="token comment">// 不允许删除</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode <span class="token operator">==</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 试图删除 &quot;.&quot; 目录</span></span>
<span class="line">        <span class="token comment">// 不允许删除</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 不是一个目录</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOTDIR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty_dir</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 目录不空，不能删除</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOTEMPTY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_nlinks <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;empty directory has nlinks!=2(%d)&quot;</span><span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 将目录从父目录的目录项中删除</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 目录项缓冲区被修改</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_nlinks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 将 inode 置为空闲</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    dir<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    dir<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> dir<span class="token operator">-&gt;</span>i_mtime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">    dir<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-unlink-删除文件名对应的目录项" tabindex="-1"><a class="header-anchor" href="#sys-unlink-删除文件名对应的目录项"><span>sys_unlink() - 删除文件名对应的目录项</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> namelen<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 寻找目录项</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 目录项不存在</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 取得目录项对应的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">iget</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> de<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 删除前验证</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_mode <span class="token operator">&amp;</span> S_ISVTX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">suser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>euid <span class="token operator">!=</span> inode<span class="token operator">-&gt;</span>i_uid <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>euid <span class="token operator">!=</span> dir<span class="token operator">-&gt;</span>i_uid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 权限问题</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 是目录</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 链接计数已经为 0</span></span>
<span class="line">        <span class="token comment">// 警告，并修正为 1</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Deleting nonexistent file (%04x:%d), %d\\n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">              inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_nlinks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 从目录项中删除</span></span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果文件是最后一个链接，且没有进程打开该文件，则放回后文件将被删除，并释放设备占用的空间</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-symlink-建立符号链接" tabindex="-1"><a class="header-anchor" href="#sys-symlink-建立符号链接"><span>sys_symlink() - 建立符号链接</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_symlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> oldname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> newname<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> dir<span class="token punctuation">,</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">,</span> <span class="token operator">*</span> name_block<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> namelen<span class="token punctuation">,</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 新路径的父目录</span></span>
<span class="line">    dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>newname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 申请新的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode <span class="token operator">=</span> <span class="token function">new_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> S_IFLNK <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0777</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>umask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 保存符号链接的路径名字符串，需要为该 inode 申请一个磁盘块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">new_block</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将磁盘块读入缓冲区</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>name_block <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_zone<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 拷贝路径名字符串</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1023</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>oldname<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        name_block<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">    name_block<span class="token operator">-&gt;</span>b_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// &#39;\\0&#39;</span></span>
<span class="line">    name_block<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲块已修改</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>name_block<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲块</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// inode 中的文件长度</span></span>
<span class="line">    inode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// inode 已被修改</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 搜索指定符号链接是否已经存在</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 符号链接已存在，不能再建立符号链接</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放 inode 及其对应的数据块</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲块</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在目录项中添加符号链接的目录项</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">add_entry</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 添加目录项失败</span></span>
<span class="line">        inode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在目录项所在缓冲区中填入符号链接的 inode 编号</span></span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-link-为文件建立一个文件名目录项-硬链接" tabindex="-1"><a class="header-anchor" href="#sys-link-为文件建立一个文件名目录项-硬链接"><span>sys_link() - 为文件建立一个文件名目录项 (硬链接)</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> oldname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> newname<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dir_entry</span> <span class="token operator">*</span> de<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> oldinode<span class="token punctuation">,</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> basename<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> namelen<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    oldinode <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>oldname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找到被链接文件的 inode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldinode<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// inode 不存在</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>oldinode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 是一个目录</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 链接项路径的上层目录 inode</span></span>
<span class="line">    dir <span class="token operator">=</span> <span class="token function">dir_namei</span><span class="token punctuation">(</span>newname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>basename<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>namelen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>i_dev <span class="token operator">!=</span> oldinode<span class="token operator">-&gt;</span>i_dev<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 不能跨设备硬链接</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EXDEV<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">permission</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> MAY_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 查找目录项是否已经存在</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">find_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 同名目录项已经存在，不能建立链接</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 添加新的目录项</span></span>
<span class="line">    bh <span class="token operator">=</span> <span class="token function">add_entry</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 新目录项获取失败</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOSPC<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    de<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> oldinode<span class="token operator">-&gt;</span>i_num<span class="token punctuation">;</span> <span class="token comment">// 设置 inode 编号为被链接文件的 inode 编号</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区已被修改</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 修改被链接文件的 inode</span></span>
<span class="line">    oldinode<span class="token operator">-&gt;</span>i_nlinks<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    oldinode<span class="token operator">-&gt;</span>i_ctime <span class="token operator">=</span> CURRENT_TIME<span class="token punctuation">;</span></span>
<span class="line">    oldinode<span class="token operator">-&gt;</span>i_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">iput</span><span class="token punctuation">(</span>oldinode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>终于把这个最长的程序给过完了。本程序的子函数主要用于 <strong>inode 数据结构</strong> 和 <strong>路径名</strong> 之间的关联。关联成功后，对：</p><ul><li>指定路径及其父目录的 inode 数据结构</li><li>inode 对应的数据块</li></ul><p>进行 CRUD 等操作，并取得 inode 对应的逻辑块进行 CRUD 等。后续的函数都是文件、目录和链接的系统调用实现，全部借助于上述提及的子函数中的功能。</p>`,62)]))}const u=s(o,[["render",c],["__file","Chapter 12.7 - namei.c 程序.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.7%20-%20namei.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.7 - namei.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.7 namei.c 程序","slug":"_12-7-namei-c-程序","link":"#_12-7-namei-c-程序","children":[{"level":3,"title":"12.7.1 功能描述","slug":"_12-7-1-功能描述","link":"#_12-7-1-功能描述","children":[]},{"level":3,"title":"12.7.2 代码注释","slug":"_12-7-2-代码注释","link":"#_12-7-2-代码注释","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.7 - namei.c 程序.md"}');export{u as comp,r as data};
