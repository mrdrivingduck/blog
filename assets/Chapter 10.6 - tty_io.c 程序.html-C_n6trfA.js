import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e="/blog/assets/10-14-BPrR_U8m.png",c={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-10-6-tty-io-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-10-6-tty-io-c-程序"><span>Chapter 10.6 - tty_io.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 27 12:04</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_10-6-tty-io-c-程序" tabindex="-1"><a class="header-anchor" href="#_10-6-tty-io-c-程序"><span>10.6 tty_io.c 程序</span></a></h2><h3 id="_10-6-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_10-6-1-功能描述"><span>10.6.1 功能描述</span></a></h3><p>对每个设备的缓冲队列的操作方式：</p><ul><li>读操作从缓冲队列的左端取字符，并把尾指针向右移动</li><li>写操作从缓冲队列的右端取字符，并把头指针向右移动</li></ul><p>若任何指针超出了缓冲队列的末端，则折回左端重新开始。</p><p><img src="'+e+`" alt="10-14"></p><p>本程序中包含字符设备的 <strong>上层接口函数</strong>：</p><ul><li>终端读函数 <code>tty_read()</code></li><li>终端写函数 <code>tty_write()</code></li><li>行规则函数 <code>copy_to_cooked()</code></li></ul><p><code>tty_read()</code> 和 <code>tty_write()</code> 将会在文件系统中操作字符设备文件时被调用。当程序读写文件时，在对应的系统调用中，若判断出所读文件是一个字符设备文件时，根据所读设备的子设备号，由字符设备读写表最终调用到这两个函数。</p><p><code>copy_to_cooked()</code> 由键盘中断过程调用：</p><ul><li>根据终端的 <code>termios</code> 结构体中设置的字符输入/输出标志，对读缓冲队列中的字符进行处理</li><li>把字符转换为以行为单位的规范模式字符队列</li><li>保存在辅助缓冲队列中</li><li>若终端设置了回显标志，还要把字符放入写队列中，并调用终端写函数</li><li>唤醒等待辅助缓冲队列的进程</li></ul><p>函数实现的步骤：</p><ol><li>若读队列为空，或辅助队列已满，则直接唤醒等待 <strong>辅助队列</strong> 的进程，结束</li><li>从读队列的 <strong>尾指针</strong> 处取一个字符，尾指针前移</li><li>若是 <strong>回车</strong> 或 <strong>换行</strong>，则根据终端 termios 结构体中的标志作相应转换</li><li>若 <strong>大写转小写标志</strong> 置位，则把字符替换为对应的小写字符</li><li>若 <strong>规范模式标志</strong> 置位，则对字符进行规范模式处理 <ol><li>删行字符：删除辅助队列中的一行字符 (头指针后退)</li><li>擦除字符：删除辅助队列头指针处的一个字符</li><li>停止字符：设置终端的停止标志</li><li>开始字符：复位终端的停止标志</li></ol></li><li>若 <strong>接收键盘信号标志</strong> 置位，则为进程生成键入控制字符的对应信号</li><li>行结束字符：辅助队列的行数统计值 data 增 1</li><li>若 <strong>本地回显标志</strong> 置位，则把字符也放入写缓冲队列中，并调用终端写函数</li><li>把该字符放入辅助队列中，返回步骤 1 处理其它字符</li><li>唤醒睡眠在辅助队列上的进程，退出</li></ol><h3 id="_10-6-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_10-6-2-代码注释"><span>10.6.2 代码注释</span></a></h3><h4 id="访问-termios-结构体中的标志的宏" tabindex="-1"><a class="header-anchor" href="#访问-termios-结构体中的标志的宏"><span>访问 termios 结构体中的标志的宏</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取三个模式标志集合之一</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_L_FLAG</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;</span> f<span class="token punctuation">)</span> </span><span class="token comment">// 本地模式标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_I_FLAG</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;</span> f<span class="token punctuation">)</span> </span><span class="token comment">// 输入模式标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_O_FLAG</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;</span> f<span class="token punctuation">)</span> </span><span class="token comment">// 输出模式标志</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 取本地模式标志集中的一个标志</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_CANON</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ICANON<span class="token punctuation">)</span> </span><span class="token comment">// 取规范模式标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_ISIG</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ISIG<span class="token punctuation">)</span> </span><span class="token comment">// 取信号标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_ECHO</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span> ECHO<span class="token punctuation">)</span> </span><span class="token comment">// 取回显字符标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_ECHOE</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ECHOE<span class="token punctuation">)</span> </span><span class="token comment">// 规范模式时取回显擦出标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_ECHOK</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ECHOK<span class="token punctuation">)</span> </span><span class="token comment">// 规范模式时取 KILL 擦除当前行标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_ECHOCTL</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ECHOCTL<span class="token punctuation">)</span> </span><span class="token comment">// 取回显控制字符标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_ECHOKE</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ECHOKE<span class="token punctuation">)</span> </span><span class="token comment">// 规范模式时取 KILL 擦除行并回显标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">L_TOSTOP</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_L_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>TOSTOP<span class="token punctuation">)</span> </span><span class="token comment">// 对于后台输出发送 SIGTTOU 信号</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 取输入模式标志集中的一个标志</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">I_UCLC</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_I_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>IUCLC<span class="token punctuation">)</span> </span><span class="token comment">// 取大写到小写转换标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">I_NLCR</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_I_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>INLCR<span class="token punctuation">)</span> </span><span class="token comment">// 取换行符 NL 转回车符 CR 标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">I_CRNL</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_I_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ICRNL<span class="token punctuation">)</span> </span><span class="token comment">// 取回车符 CR 转换行符 NL 标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">I_NOCR</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_I_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>IGNCR<span class="token punctuation">)</span> </span><span class="token comment">// 取忽略回车符 CR 标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">I_IXON</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_I_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>IXON<span class="token punctuation">)</span> </span><span class="token comment">// 取输入控制流标志 XON</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 取输出模式标志集中的一个标志</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">O_POST</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_O_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>OPOST<span class="token punctuation">)</span> </span><span class="token comment">// 取执行输出处理标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">O_NLCR</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_O_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ONLCR<span class="token punctuation">)</span> </span><span class="token comment">// 取换行符 NL 转回车换行符 CR-NL 标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">O_CRNL</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_O_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>OCRNL<span class="token punctuation">)</span> </span><span class="token comment">// 取回车符CR转换行符NL标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">O_NLRET</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_O_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>ONLRET<span class="token punctuation">)</span> </span><span class="token comment">// 取换行符NL执行回车功能的标志</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">O_LCUC</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token function">_O_FLAG</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">,</span>OLCUC<span class="token punctuation">)</span> </span><span class="token comment">// 取小写转大写字符标志</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 取控制标志集中的波特率</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">C_SPEED</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cflag <span class="token operator">&amp;</span> CBAUD<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">// 判断 tty 终端是否已挂线 (hang up)，即波特率是否为 0</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">C_HUP</span><span class="token expression"><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">C_SPEED</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">==</span> B0<span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="终端的数据结构定义" tabindex="-1"><a class="header-anchor" href="#终端的数据结构定义"><span>终端的数据结构定义</span></a></h4><p>包含：</p><ul><li>tty 终端使用的缓冲队列结构体数组 <code>tty_queues</code></li><li>tty 终端表结构体数组 <code>tty_table</code></li></ul><p>每个 tty 终端使用三个缓冲队列：读队列、写队列、辅助队列。</p><p>共有 8 个控制台终端，2 个串行终端，4 对伪终端，共 18 个中断，需要 54 个缓冲队列。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUEUES</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>MAX_CONSOLES <span class="token operator">+</span> NR_SERIALS <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>NR_PTYS<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> tty_queues<span class="token punctuation">[</span>QUEUES<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// tty 缓冲队列数组</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> tty_table<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// tty 表结构数组</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义每种类型的 tty 在缓冲队列数组中起始项的位置</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">con_queues</span> <span class="token expression">tty_queues </span><span class="token comment">// 控制台 tty 占用起始 8 * 3 = 24 项</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rs_queues</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>MAX_CONSOLES<span class="token punctuation">)</span> <span class="token operator">+</span> tty_queues<span class="token punctuation">)</span> </span><span class="token comment">// 两个串行终端占用其后 6 项</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mpty_queues</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>MAX_CONSOLES<span class="token operator">+</span>NR_SERIALS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tty_queue<span class="token punctuation">)</span> </span><span class="token comment">// 4 个主伪终端</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">spty_queues</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>MAX_CONSOLES<span class="token operator">+</span>NR_SERIALS<span class="token operator">+</span>NR_PTYS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tty_queue<span class="token punctuation">)</span> </span><span class="token comment">// 4 个从伪终端</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义每种类型的 tty 终端在 tty_table 数组中的起始项位置</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">con_table</span> <span class="token expression">tty_table </span><span class="token comment">// 8 个控制台终端占用前 64 项</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rs_table</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>tty_table<span class="token punctuation">)</span> </span><span class="token comment">// 两个串行终端使用随后两项</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mpty_table</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">+</span>tty_table<span class="token punctuation">)</span> </span><span class="token comment">// 4 个主伪终端使用从 128 开始的项，最多 64 项</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">spty_table</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">192</span><span class="token operator">+</span>tty_table<span class="token punctuation">)</span> </span><span class="token comment">// 4 个从伪终端使用从 192 开始的项，最多 64 项</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> fg_console <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前前台控制台号</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="汇编程序-rs-io-s-中使用的缓冲队列结构地址表" tabindex="-1"><a class="header-anchor" href="#汇编程序-rs-io-s-中使用的缓冲队列结构地址表"><span>汇编程序 rs_io.s 中使用的缓冲队列结构地址表</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> table_list<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    con_queues <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> con_queues <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 控制台的读写缓冲队列地址</span></span>
<span class="line">    rs_queues <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> rs_queues <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 串行终端 1 的读写缓冲队列地址</span></span>
<span class="line">    rs_queues <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> rs_queues <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">// 串行终端 2 的读写缓冲队列地址</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="change-console-改变前台控制台函数" tabindex="-1"><a class="header-anchor" href="#change-console-改变前台控制台函数"><span>change_console() - 改变前台控制台函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">change_console</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> new_console<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_console <span class="token operator">==</span> fg_console <span class="token operator">||</span> new_console <span class="token operator">&gt;=</span> NR_CONSOLES<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    fg_console <span class="token operator">=</span> new_console<span class="token punctuation">;</span></span>
<span class="line">    table_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> con_queues <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> fg_console <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 控制台的读缓冲队列地址</span></span>
<span class="line">    table_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> con_queues <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> fg_console <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 控制台的写缓冲队列地址</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sleep-if-empty-若队列缓冲区空-让进程进入可中断睡眠状态" tabindex="-1"><a class="header-anchor" href="#sleep-if-empty-若队列缓冲区空-让进程进入可中断睡眠状态"><span>sleep_if_empty() - 若队列缓冲区空，让进程进入可中断睡眠状态</span></a></h4><p>进程在取缓冲区中的字符之前，需要调用此函数加以验证。若没有信号要处理，且指定的队列缓冲区为空，则进程进入可中断睡眠状态，并让缓冲队列的等待指针指向该进程。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_if_empty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">EMPTY</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-&gt;</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sleep-if-full-若队列缓冲区满-让进程进入可中断睡眠状态" tabindex="-1"><a class="header-anchor" href="#sleep-if-full-若队列缓冲区满-让进程进入可中断睡眠状态"><span>sleep_if_full() - 若队列缓冲区满，让进程进入可中断睡眠状态</span></a></h4><p>进程在往缓冲区写字符之前，需要调用此函数加以验证。若进程没有信号需要处理，且缓冲区中剩余空闲长度 &lt; 128，则进程进入可中断睡眠状态，并让队列的进程等待指针指向该进程。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep_if_full</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span> <span class="token operator">*</span> queue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FULL</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">LEFT</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-&gt;</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="copy-to-cooked-行规则函数" tabindex="-1"><a class="header-anchor" href="#copy-to-cooked-行规则函数"><span>copy_to_cooked() - 行规则函数</span></a></h4><p>根据终端 termios 结构体中设置的各种标志，将指定 tty 终端的读队列缓冲区中的字符复制并转换为规范模式，并存放在复制队列中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">copy_to_cooked</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">signed</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查终端各缓冲队列指针是否有效</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q <span class="token operator">||</span> tty<span class="token operator">-&gt;</span>write_q <span class="token operator">||</span> tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;copy_to_cooked: missing queues\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FULL</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">GETCH</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取一个字符到 c，并前移尾指针</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 回车符 CR</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_CRNL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 回车转换行标志置位</span></span>
<span class="line">                c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 转换为换行符</span></span>
<span class="line">            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_NOCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 忽略回车标志置位</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 忽略</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token function">I_NLCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 换行符 &amp;&amp; 换行转回车标志置位</span></span>
<span class="line">            c <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">// 转换为回车符</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_UCLC</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 大写转小写输入标志置位</span></span>
<span class="line">            c <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 规范模式标志置位</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">KILL_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">KILL_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 键盘终止控制字符 KILL (^U)</span></span>
<span class="line">                <span class="token comment">// 删除当前行</span></span>
<span class="line">                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                       <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">LAST</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span></span>
<span class="line">                         <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                          <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 辅助队列不为空</span></span>
<span class="line">                    <span class="token comment">// 不是回车或 EOF</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 本地回显置位，向写队列写入擦除字符 ERASE</span></span>
<span class="line">                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token comment">// 控制字符 - 两字节</span></span>
<span class="line">                            <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 tty 写函数</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token function">DEC</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token operator">-&gt;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 头指针后退</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ERASE_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">ERASE_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 删除字符 ERASE (^H)</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                    <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">LAST</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                     <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 本地回显置位</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token function">DEC</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token operator">-&gt;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">I_IXON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 使终端停止/开始字符起作用</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">STOP_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">STOP_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                tty<span class="token operator">-&gt;</span>stopped <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">STOP_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">               <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">START_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                tty<span class="token operator">-&gt;</span>stopped <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ISIG</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 终端键盘可以产生信号</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">INTR_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">               <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">INTR_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">kill_pg</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> SIGINT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">QUIT_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">               <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">QUIT_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">kill_pg</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">SUSPEND_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> </span>
<span class="line">               <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">SUSPEND_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_orphaned_pgrp</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">kill_pg</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> SIGTSTP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 换行符或文件结束符，表明一行已经处理完</span></span>
<span class="line">        <span class="token comment">// 辅助队列中的行数值 + 1</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> <span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            tty<span class="token operator">-&gt;</span>secondary<span class="token operator">-&gt;</span>data<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHO</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 换行符 NL</span></span>
<span class="line">                <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 控制字符</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_ECHOCTL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 回显控制字符</span></span>
<span class="line">                    <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token char">&#39;^&#39;</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token function">PUTCH</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span></span>
<span class="line">                <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 每次循环的最后将字符放入辅助队列中</span></span>
<span class="line">        <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 辅助队列写入完毕</span></span>
<span class="line">    <span class="token comment">// 如果有等待辅助队列的进程，则唤醒</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>secondary<span class="token operator">-&gt;</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tty-signal-向使用终端的进程组中的所有进程发送信号" tabindex="-1"><a class="header-anchor" href="#tty-signal-向使用终端的进程组中的所有进程发送信号"><span>tty_signal() - 向使用终端的进程组中的所有进程发送信号</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">tty_signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span>tty<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_orphaned_pgrp</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">kill_pg</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送信号</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>blocked <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sig <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 信号被屏蔽 || 信号被当前进程忽略</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>sigaction<span class="token punctuation">[</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_handler<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 设置了新的处理句柄</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span> <span class="token comment">// 可被中断</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token comment">// 重新启动系统调用</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ERESTARTSYS<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tty-read-tty-读函数" tabindex="-1"><a class="header-anchor" href="#tty-read-tty-读函数"><span>tty_read() - tty 读函数</span></a></h4><p>从终端的 <strong>辅助队列</strong> 中读取指定数量的字符，放到用户缓冲区中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">tty_read</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> channel<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> other_tty <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token operator">*</span>b <span class="token operator">=</span> buf<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> minimum<span class="token punctuation">,</span> time<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">&gt;</span> <span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    tty <span class="token operator">=</span> <span class="token function">TTY_TABLE</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q <span class="token operator">||</span> tty<span class="token operator">-&gt;</span>read_q <span class="token operator">||</span> tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 缓冲队列指针合法</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">==</span> channel<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 终端的进程组号与当前进程组号不同</span></span>
<span class="line">        <span class="token comment">// 当前进程是后台进程组中的一个进程</span></span>
<span class="line">        <span class="token comment">// 停止当前进程组中的所有进程</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">tty_signal</span><span class="token punctuation">(</span>SIGTTIN<span class="token punctuation">,</span> tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 当前终端是伪终端</span></span>
<span class="line">        <span class="token comment">// 对应的另一个终端</span></span>
<span class="line">        other_tty <span class="token operator">=</span> tty_table <span class="token operator">+</span> <span class="token punctuation">(</span>channel <span class="token operator">^</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 根据 VTIME 和 VMIN 对应的控制字符数组</span></span>
<span class="line">    <span class="token comment">// 设置读字符操作的超时定时值 time 和最少需要读取的字符个数 minimum</span></span>
<span class="line">    <span class="token comment">// VMIN 是为了满足操作而需要读取的最少字符个数</span></span>
<span class="line">    <span class="token comment">// VTIME 是一个 0.1s 的计数计时值</span></span>
<span class="line">    time <span class="token operator">=</span> <span class="token number">10L</span> <span class="token operator">*</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 设置读操作超时定时值</span></span>
<span class="line">    minimum <span class="token operator">=</span> tty<span class="token operator">-&gt;</span>termios<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 最少需要读取的字符个数</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 规范模式</span></span>
<span class="line">        minimum <span class="token operator">=</span> nr<span class="token punctuation">;</span> <span class="token comment">// 设置最少读取字符数</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span> <span class="token comment">// 不会超时</span></span>
<span class="line">        time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>minimum<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 非规范模式</span></span>
<span class="line">        <span class="token comment">// 已经设置了最少读取字符数</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 非规范模式</span></span>
<span class="line">        <span class="token comment">// 没有设置最少读取字符数</span></span>
<span class="line">        minimum <span class="token operator">=</span> nr<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span></span>
<span class="line">            current<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> time <span class="token operator">+</span> jiffies<span class="token punctuation">;</span></span>
<span class="line">        time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span>  <span class="token punctuation">(</span>minimum <span class="token operator">&gt;</span> nr<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 最多读取要求的字符数</span></span>
<span class="line">        minimum <span class="token operator">=</span> nr<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>nr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>other_tty<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 伪终端</span></span>
<span class="line">            <span class="token comment">// 让另一个伪终端把字符写入当前伪终端的辅助队列中</span></span>
<span class="line">            other_tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>other_tty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">             <span class="token operator">!</span><span class="token function">FULL</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>read_q<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">             <span class="token operator">!</span>tty<span class="token operator">-&gt;</span>secondary<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 辅助队列为空</span></span>
<span class="line">            <span class="token comment">// 设置规范模式标志，且 tty 读缓冲队列未满，辅助队列字符行数为 0</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token operator">-&gt;</span>timeout <span class="token operator">||</span></span>
<span class="line">                <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 没有设置过读取超时值 || 进程收到信号</span></span>
<span class="line">                <span class="token comment">// 退出</span></span>
<span class="line">                <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_A_PTY_SLAVE</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">C_HUP</span><span class="token punctuation">(</span>other_tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 伪终端 &amp;&amp; 对应的主伪终端已经挂断</span></span>
<span class="line">                <span class="token comment">// 退出</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>secondary<span class="token operator">-&gt;</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">GETCH</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取缓冲队列字符</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE <span class="token operator">&amp;&amp;</span></span>
<span class="line">                 c <span class="token operator">==</span> <span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 文件结束符 || 换行符</span></span>
<span class="line">                tty<span class="token operator">-&gt;</span>secondary<span class="token operator">-&gt;</span>data<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">!=</span> _POSIX_VDISABLE <span class="token operator">&amp;&amp;</span></span>
<span class="line">                 c <span class="token operator">==</span> <span class="token function">EOF_CHAR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token operator">&amp;&amp;</span> <span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 文件结束符 &amp;&amp; 规范模式标志</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">put_fs_byte</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>nr<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 规范模式 &amp;&amp; 换行符</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nr <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">EMPTY</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 规范模式下，tty 读到了换行符或文件结束符</span></span>
<span class="line">        <span class="token comment">// 非规范模式下，已经读取了 nr 个字符，或辅助队列为空</span></span>
<span class="line">        <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tty<span class="token operator">-&gt;</span>read_q<span class="token operator">-&gt;</span>proc_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 超时定时值不为 0</span></span>
<span class="line">            <span class="token comment">// 等待一定的时间，让其它进程可以把字符写入读队列中</span></span>
<span class="line">            current<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> time <span class="token operator">+</span> jiffies<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_CANON</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">||</span> b<span class="token operator">-</span>buf <span class="token operator">&gt;=</span> minimum<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 处于规范模式 || 已经读取了 nr 个字符</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 退出循环</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    current<span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 进程收到信号 &amp;&amp; 没有读取任何字符</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ERESTARTSYS<span class="token punctuation">;</span> <span class="token comment">// 重新启动系统调用</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回已读取的字符数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tty-write-tty-写函数" tabindex="-1"><a class="header-anchor" href="#tty-write-tty-写函数"><span>tty_write() - tty 写函数</span></a></h4><p>把用户缓冲区中的字符放入 tty 写队列缓冲区中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">tty_write</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> channel<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> cr_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">tty_struct</span> <span class="token operator">*</span> tty<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token operator">*</span>b <span class="token operator">=</span> buf<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">&gt;</span> <span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    tty <span class="token operator">=</span> <span class="token function">TTY_TABLE</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得 tty 设备结构体</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q <span class="token operator">||</span> tty<span class="token operator">-&gt;</span>read_q <span class="token operator">||</span> tty<span class="token operator">-&gt;</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 缓冲队列合法性</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">L_TOSTOP</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">==</span> channel<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>pgrp <span class="token operator">!=</span> current<span class="token operator">-&gt;</span>pgrp<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 后台进程输出时需要发送信号 SIGTTOU</span></span>
<span class="line">        <span class="token comment">// 当前进程是后台进程组中的一个进程，不在前台</span></span>
<span class="line">        <span class="token comment">// 等待其成为前台进程组后再进行写操作</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">tty_signal</span><span class="token punctuation">(</span>SIGTTOU<span class="token punctuation">,</span> tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>nr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">sleep_if_full</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写队列已满</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 当前进程有信号要处理</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>nr <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">FULL</span><span class="token punctuation">(</span>tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 要写的字符 &gt; 0 &amp;&amp; tty 写缓冲队列不满</span></span>
<span class="line">            c <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从用户缓冲区取一字节</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">O_POST</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 输出处理标志</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">O_CRNL</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    c <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">O_NLRET</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    c <span class="token operator">=</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cr_flag <span class="token operator">&amp;&amp;</span> <span class="token function">O_NLCR</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    cr_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token function">PUTCH</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">O_LCUC</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    c <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            b<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 用户缓冲区指针</span></span>
<span class="line">            nr<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 要写的字符数量</span></span>
<span class="line">            cr_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">PUTCH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> tty<span class="token operator">-&gt;</span>write_q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放入写队列中</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 要求的字符全部写完</span></span>
<span class="line">        <span class="token comment">// 写队列已满</span></span>
<span class="line">        tty<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用对应的 tty 写函数</span></span>
<span class="line">        <span class="token comment">// 若还有字节要写，需要等待写队列中的字节被其它进程取走</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 调度返回后，将在循环中继续执行</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回写入的字节数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-tty-interrupt-tty-中断处理的调用函数" tabindex="-1"><a class="header-anchor" href="#do-tty-interrupt-tty-中断处理的调用函数"><span>do_tty_interrupt() - tty 中断处理的调用函数</span></a></h4><p>在 <strong>串口读字符中断</strong> 和 <strong>键盘中断</strong> 的处理函数中被调用，将 tty 终端读缓冲队列中的字符复制或转换为 <strong>规范模式</strong>，并存放在辅助队列中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_tty_interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> tty<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">copy_to_cooked</span><span class="token punctuation">(</span><span class="token function">TTY_TABLE</span><span class="token punctuation">(</span>tty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tty-init-tty-终端初始化函数" tabindex="-1"><a class="header-anchor" href="#tty-init-tty-终端初始化函数"><span>tty_init() - tty 终端初始化函数</span></a></h4><p>初始化所有的终端缓冲队列。初始化串口终端和控制台终端。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">tty_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化所有的终端的缓冲队列结构</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> QUEUES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        tty_queues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置串行终端的读/写缓冲队列</span></span>
<span class="line">    rs_queues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">0x3f8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    rs_queues<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">0x3f8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    rs_queues<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">0x2f8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    rs_queues<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">0x2f8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 初始化所有终端的 tty 结构体</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tty_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INIT_C_CC <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化控制台终端</span></span>
<span class="line">    <span class="token function">con_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_CONSOLES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        con_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                ICRNL<span class="token punctuation">,</span></span>
<span class="line">                OPOST <span class="token operator">|</span> ONLCR<span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                IXON <span class="token operator">|</span> ISIG <span class="token operator">|</span> ICANON <span class="token operator">|</span> ECHO <span class="token operator">|</span> ECHOCTL <span class="token operator">|</span> ECHOKE<span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                INIT_C_CC</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            con_write<span class="token punctuation">,</span></span>
<span class="line">            con_queues <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            con_queues <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            con_queues <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化串行终端</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_SERIALS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        rs_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                B2400 <span class="token operator">|</span> CS8<span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                INIT_C_CC</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            rs_write<span class="token punctuation">,</span></span>
<span class="line">            rs_queues <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            rs_queues <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            rs_queues <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化伪终端 tty</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_PTYS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        mpty_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                B9600 <span class="token operator">|</span> CS8<span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                INIT_C_CC</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            mpty_write<span class="token punctuation">,</span></span>
<span class="line">            mpty_queues <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            mpty_queues <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            mpty_queues <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        spty_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tty_struct</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                B9600 <span class="token operator">|</span> CS8<span class="token punctuation">,</span></span>
<span class="line">                IXON <span class="token operator">|</span> ISIG <span class="token operator">|</span> ICANON<span class="token punctuation">,</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                INIT_C_CC</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            spty_write<span class="token punctuation">,</span></span>
<span class="line">            spty_queues <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            spty_queues <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            spty_queues <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">rs_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d virtual consoles\\n\\r&quot;</span><span class="token punctuation">,</span> NR_CONSOLES<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d pty&#39;s\\n\\r&quot;</span><span class="token punctuation">,</span> NR_PTYS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54)]))}const u=s(c,[["render",o],["__file","Chapter 10.6 - tty_io.c 程序.html.vue"]]),k=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2010%20-%20%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/Chapter%2010.6%20-%20tty_io.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 10.6 - tty_io.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"10.6 tty_io.c 程序","slug":"_10-6-tty-io-c-程序","link":"#_10-6-tty-io-c-程序","children":[{"level":3,"title":"10.6.1 功能描述","slug":"_10-6-1-功能描述","link":"#_10-6-1-功能描述","children":[]},{"level":3,"title":"10.6.2 代码注释","slug":"_10-6-2-代码注释","link":"#_10-6-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 10 - 字符设备驱动程序/Chapter 10.6 - tty_io.c 程序.md"}');export{u as comp,k as data};
