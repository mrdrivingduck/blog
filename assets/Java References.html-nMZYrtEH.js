import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="java-references" tabindex="-1"><a class="header-anchor" href="#java-references"><span>Java - References</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 11 / 10 17:33</p><p>Nanjing, Jiangsu, China</p><hr><p>理解并实验了 Java 中几种不同类型的引用及其特性。该问题来源于研究 JDK 源代码的 <code>ThreadLocal</code> 类时，其中的 <code>ThreadLocalMap</code> 使用的是所谓 <em>弱引用</em>。在 <em>马士兵</em> 老师的 <em>多线程与高并发</em> 书籍中找到了答案。</p><h2 id="strong-references" tabindex="-1"><a class="header-anchor" href="#strong-references"><span>Strong References</span></a></h2><p>强引用就是默认的引用类型，任何被强引用的对象都不会被 GC，除非强引用变量被重新指向 <code>null</code>。做一个简单的小型实验：创建一个测试类，重写该类的 <code>finalize()</code> 函数。</p><blockquote><p>Java 会在 GC 对象时自动调用 <code>finalize()</code> 函数，重写该函数仅为观察对象的时机。实际上，该函数永远不用也不应该被重写。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">TestReference</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;GC happened.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">TestReference</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;First GC trial.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Second GC trial.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC 在其它线程中进行，防止当前线程结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的运行结果如下。可以看到，强引用只有在赋值为 <code>null</code> 后才会发生 GC。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">First GC trial.</span>
<span class="line">Second GC trial.</span>
<span class="line">GC happened.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="soft-references" tabindex="-1"><a class="header-anchor" href="#soft-references"><span>Soft References</span></a></h2><p>软引用需要被显式使用。对于被软引用的对象来说，JVM 在内存充裕时不会急着 GC 它；只有当 JVM 急需内存时，才会回收被软引用的对象。可以通过调低 JVM 的堆内存来测试：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestReference</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// maybe not null</span></span>
<span class="line"><span class="token comment">// ... fulfill JVM&#39;s memory</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// maybe null</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC 在其它线程中进行，防止当前线程结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个特性可以用于实现 <strong>缓存</strong> - 如果内存够用，就保留对象用于提升性能；如果内存不够用，就回收缓存保证 JVM 有足够的内存正常运行。</p><h2 id="weak-references" tabindex="-1"><a class="header-anchor" href="#weak-references"><span>Weak References</span></a></h2><p>弱引用需要被显式使用。如果 JVM 检测到一个对象 <strong>只被弱引用</strong> (没有任何强引用或软引用)，那么将会 GC 该对象。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestReference</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// not null</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GC 在其它线程中进行，防止当前线程结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一特性主要体现在 Java 的 <code>ThreadLocal</code> 类中。该类在当前线程对象内维护一个称为 <code>ThreadLocalMap</code> 的 map，里面的 key 是弱引用的 <code>ThreadLocal</code> 对象，value 是想要保存在线程内部保存的局部变量。当线程用强引用实例化一个 <code>ThreadLocal</code> 对象并作为某个局部变量的 key 放入线程 map 中时，此时堆上的 <code>ThreadLocal</code> 对象被引用两次：</p><ul><li>程序中的强引用</li><li>线程内的 <code>ThreadLocalMap</code> 弱引用</li></ul><p>当程序中强引用所在的函数结束后，该引用作为函数内的局部变量 (栈上变量) 也消失了。此时，如果线程一直运行下去 (假设它是一个后台线程)，map 将一直对堆上的 <code>ThreadLocal</code> 对象保持引用。假设 map 持有的是强引用，那么 <code>ThreadLocal</code> 对象将一直不会被 GC，从而引发内存泄露；而如果这是个弱引用，那么堆上的 <code>ThreadLocal</code> 对象将会在原有强引用断开连接后被 GC。</p><p>一个例子。在这里，我实现了自己的 <code>ThreadLocal</code> 类，主要是重写了 <code>finalize()</code> 函数以观察 <code>ThreadLocal</code> 对象被 GC 的时机：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread local object GC happened.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TestReference</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Value object GC happened.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以下代码。将 <code>ThreadLocal</code> 对象设置到 <code>ThreadLocalMap</code> 中后，断开程序中对它的强引用，只剩下 <code>ThreadLocalMap</code> 中的弱引用，看看 <code>ThreadLocal</code> 对象会不会被 GC。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">MyThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestReference</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TestReference</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// No strong reference to value anymore.</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;First GC trial.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">threadLocal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// No strong reference to thread local anymore.</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Second GC trial.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的运行结果，<code>ThreadLocal</code> 对象被 GC 了。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">First GC trial.</span>
<span class="line">Second GC trial.</span>
<span class="line">Thread local object GC happened.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有件很蛋疼的事：虽然 map 中的 key 引用的堆上对象 (<code>ThreadLocal</code>) 已经被 GC 了而成为了 <code>null</code>，但是 value 对象并没有被 GC，依旧被 map 强引用 - 这样也会产生内存泄漏。<code>ThreadLocalMap</code> 的实现中其实已经考虑到了这个问题，在调用成员函数 <code>set()</code> / <code>get()</code> / <code>remove()</code> 时，会顺便对 map 中所有 key 为 <code>null</code> 的 value 进行清理。然而，极端情况下，如果这几个函数之后一直没有被调用，那么内存泄漏实际上一直存在。我们还是应当要有把任何不合理的事情扼杀在摇篮里的基本修养。当不再显式使用一个 <code>ThreadLocal</code> 对象时，主动调用 <code>remove()</code> 将其从当前线程的 map 中清除掉：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">MyThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestReference</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TestReference</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// No strong reference to value anymore.</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;First GC trial.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Remove the value from the thread local map.</span></span>
<span class="line">threadLocal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// No strong reference to thread local anymore.</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Second GC trial.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到结果如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">First GC trial.</span>
<span class="line">Second GC trial.</span>
<span class="line">Thread local object GC happened.</span>
<span class="line">Value object GC happened.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="phantom-references" tabindex="-1"><a class="header-anchor" href="#phantom-references"><span>Phantom References</span></a></h2><p>虚引用的构造函数至少需要两个参数：除了被引用的对象外，另一个参数是一个 <strong>引用队列</strong>。当引用的对象要被 GC 时 (<code>finalize()</code> 被调用后)，JVM 将会把引用放进队列中。如果在这个队列中检测到了变动，说明对象被 GC 了。对虚引用调用 <code>get()</code> 是取不到值的。</p><p>写不出实验代码了。虚引用主要用于管理堆外内存，也就是不在 GC 管理范围以内的内存。当 GC 发生后，通过检测引用队列，相当于可以通知程序显式释放堆外内存。</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p>马士兵 - 多线程与高并发 (2020 年第一版)</p><p><a href="https://www.geeksforgeeks.org/types-references-java/" target="_blank" rel="noopener noreferrer">GeeksforGeeks - Types of References in Java</a></p><p><a href="https://blog.csdn.net/vicoqi/article/details/79743112" target="_blank" rel="noopener noreferrer">CSDN - ThreadLocalMap 里的弱引用</a></p><hr>`,41)]))}const i=s(t,[["render",c],["__file","Java References.html.vue"]]),u=JSON.parse('{"path":"/notes/Java/Java%20References.html","title":"Java - References","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Strong References","slug":"strong-references","link":"#strong-references","children":[]},{"level":2,"title":"Soft References","slug":"soft-references","link":"#soft-references","children":[]},{"level":2,"title":"Weak References","slug":"weak-references","link":"#weak-references","children":[]},{"level":2,"title":"Phantom References","slug":"phantom-references","link":"#phantom-references","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Java/Java References.md"}');export{i as comp,u as data};
