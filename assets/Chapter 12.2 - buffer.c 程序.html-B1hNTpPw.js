import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/12-16-k9qbSBBf.png",c="/blog/assets/12-17-T_7Oq3Kc.png",l="/blog/assets/12-19-BLKjD1G4.png",o={};function i(u,n){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-12-2-buffer-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-2-buffer-c-程序"><span>Chapter 12.2 - buffer.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 02 0:46</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_12-2-buffer-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-2-buffer-c-程序"><span>12.2 buffer.c 程序</span></a></h2><p>高速缓冲管理程序。</p><h3 id="_12-2-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-2-1-功能描述"><span>12.2.1 功能描述</span></a></h3><h4 id="_1-高速缓冲区的物理位置" tabindex="-1"><a class="header-anchor" href="#_1-高速缓冲区的物理位置"><span>1. 高速缓冲区的物理位置</span></a></h4><p>高速缓冲区位于 <strong>内核代码</strong> 和 <strong>主内存区</strong> 之间，除了 <strong>块设备驱动程序</strong>，内核程序如果需要访问块设备中的数据，都需要经过高速缓冲区来间接地进行操作。</p><h4 id="_2-高速缓冲区初始化" tabindex="-1"><a class="header-anchor" href="#_2-高速缓冲区初始化"><span>2. 高速缓冲区初始化</span></a></h4><p>在初始化时，高速缓冲区被划分为 1024B 大小的缓冲块，从整个缓冲区两端开始，分别同时设置 <strong>缓冲块头结构</strong> 和 <strong>缓冲块</strong>：</p><ul><li>地址高端被划分为 1024B 的缓冲块</li><li>地址低端分别建立起对应各头结构的 <code>buffer_head</code></li></ul><p>持续到缓冲区没有足够的内存再划分出缓冲块为止。</p><p><img src="'+t+`" alt="12-16"></p><h4 id="_3-高速缓冲区结构和链表" tabindex="-1"><a class="header-anchor" href="#_3-高速缓冲区结构和链表"><span>3. 高速缓冲区结构和链表</span></a></h4><p>buffer_head 的结构体定义如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span> b_data<span class="token punctuation">;</span> <span class="token comment">// 指向对应缓冲块</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> b_blocknr<span class="token punctuation">;</span> <span class="token comment">// 块号</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> b_dev<span class="token punctuation">;</span> <span class="token comment">// 设备号 (0 代表空闲)</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b_uptodate<span class="token punctuation">;</span> <span class="token comment">// 数据是否已更新</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b_dirt<span class="token punctuation">;</span> <span class="token comment">// 数据是否已修改</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b_count<span class="token punctuation">;</span> <span class="token comment">// 使用该块的引用数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b_lock<span class="token punctuation">;</span> <span class="token comment">// 缓冲区是否被锁定</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> b_wait<span class="token punctuation">;</span> <span class="token comment">// 等待该缓冲区解锁的任务</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> b_prev<span class="token punctuation">;</span> <span class="token comment">// hash 队列正向指针</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> b_next<span class="token punctuation">;</span> <span class="token comment">// hash 队列反向指针</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> b_prev_free<span class="token punctuation">;</span> <span class="token comment">// 空闲链表正向指针</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> b_next_free<span class="token punctuation">;</span> <span class="token comment">// 空闲链表反向指针</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据结构之间的关系如图：</p><p><img src="`+c+'" alt="12-17"></p><p>所有缓冲块的 buffer_head 被链接成一个 <strong>双向链表</strong> 结构 - 称为 <strong>空闲链表</strong>。</p><ul><li>由 <code>b_prev_free</code> 和 <code>b_next_free</code> 链接</li><li>实际上是一个 LRU (Least Recently Used) 链表</li></ul><blockquote><p>但是空闲链表中的项并不都是空闲的... 🤨</p></blockquote><p><code>free_list</code> 指针是链表的头指针，指向近期最少使用的缓冲块。该缓冲块的反向指针指向链表的最后一个缓冲块，即最近刚使用的缓冲块。</p><p><code>b_lock</code> 是锁定标志 - 表示 <strong>驱动程序</strong> 正在对该缓冲块的内容进行修改：</p><ul><li>更新数据块信息时，当前进程会自愿睡眠等待，别的进程有机会访问该缓冲块</li><li>应当在睡眠之前锁定该缓冲块</li></ul><p><code>b_count</code> 表示相应缓冲块被各个进程引用的次数：</p><ul><li>计数不为 0 时，就不能释放相应缓冲块</li><li>计数为 0 时，表示该缓冲块空闲</li><li>对于程序申请的缓冲块，如果在 hash 表中已经存在该块，则直接将 b_count 加 1</li><li>否则重新申请一块空闲缓冲块，并将 b_count 设备为 1</li><li>程序释放对缓冲块的引用时，b_count 减 1</li></ul><p><code>b_dirt</code> 是 <strong>脏</strong> 标志 - 说明缓冲块中的内容已被修改，与块设备上对应内容不同</p><p><code>b_uptodate</code> 是数据有效标志 - 说明缓冲块中的数据是否有效</p><ul><li>初始化或释放块时，<code>b_dirt</code> 和 <code>b_uptodate</code> 都应设置为 0</li></ul><h4 id="_4-高速缓冲区的-hash-表" tabindex="-1"><a class="header-anchor" href="#_4-高速缓冲区的-hash-表"><span>4. 高速缓冲区的 hash 表</span></a></h4><p>为了能够快速有效地在缓冲区中判断 <strong>请求的数据块是否在缓冲区中</strong>，使用了具有 307 个 buffer_header 指针项的 hash 表，由 <code>b_prev</code> 和 <code>b_next</code> 链接。</p><p>Hash 函数：<code>(设备号 ^ 逻辑块号) mod 307</code>。将具有相同 hash 的缓冲块链接在 hash 表的同一项上。数据结构关系的示意：</p><p><img src="'+l+`" alt="12-19"></p><p>实线为 hash 表指针，虚线为之前所谓的空闲链表指针。</p><h4 id="_5-缓冲块搜索函数" tabindex="-1"><a class="header-anchor" href="#_5-缓冲块搜索函数"><span>5. 缓冲块搜索函数</span></a></h4><p>首先在 hash 表某项的队列中搜索指定 <strong>设备号</strong> 和 <strong>逻辑块号</strong> 的缓冲块是否已存在</p><ul><li>若存在，则之间返回 buffer_head 指针</li><li>若不在，则需要从空闲链表的头部开始，寻找一个空闲的缓冲块</li></ul><p>其中还需要对找到的空闲缓冲块作比较 - 哪个比较适合？</p><ul><li>权值 - 由 <strong>锁定标志</strong> 和 <strong>修改标志</strong> 计算</li></ul><p>若没有找到空闲块，则进程进入睡眠状态，醒来了再接着找；若空闲块被锁定，则进程也进入睡眠状态，等待驱动程序对其解锁。若从睡眠到醒来继续执行之间的时间里，该块被其它进程占用，则需要重新开始搜索。如果该缓冲块已被修改过，则需要将缓冲块与硬盘同步 - 写盘。</p><ul><li>再次等待该块解锁</li><li>如果该块又被其它进程占用，则又前功尽弃，需要重新开始搜索</li></ul><p>如果在当前进程睡眠时，其它进程已经将我们需要的缓冲块加入了 hash 队列中。因此还需要搜索一下 hash 队列，又需要重新执行。最终，找到了一块 <strong>未被进程使用、没上锁、没被修改</strong> 的空闲块：</p><ul><li>将该块的引用次数置 1</li><li>复位其它几个标志</li><li>从空闲链表中移除该块，设置 <strong>设备号</strong> 和 <strong>逻辑块号</strong> 后</li><li>插入 hash 表对应项的头部</li><li>链接到空闲链表的末尾处</li></ul><p>由于操作是从空闲链表的头部开始搜索，移除最近最不常用的块后，插入尾部，因此实现了 LRU 算法。算法策略：</p><ul><li>缓冲块已在 hash 表中，则直接使用</li><li>从空闲链表头部开始搜索最近最少使用的缓冲块并使用</li><li>优先级 <ul><li>根据 <code>b_dirt</code> 和 <code>b_lock</code> 计算权重</li><li>由于写入操作较为耗时，需要加到 <code>b_dirt</code> 的权重</li><li>在权重最小的缓冲块上等待</li></ul></li></ul><h4 id="_6-缓冲块读取函数" tabindex="-1"><a class="header-anchor" href="#_6-缓冲块读取函数"><span>6. 缓冲块读取函数</span></a></h4><p>取得的缓冲块可能是一个新的空闲块，也可能是正好含有需要的数据的缓冲块。因此要判断缓冲块的 <code>b_uptodate</code> 查看缓冲块数据是否有效：</p><ul><li><p>如果有效，则数据块可以直接被返回给申请程序</p></li><li><p>否则就调用 <strong>低层块设备读写函数 ll_rw_block()</strong> ，并让自身进入睡眠，等待数据被读入缓冲块，醒来后再判断数据是否已经有效：</p></li><li><p>如果有效，则可以返回给申请的程序</p></li><li><p>否则读操作失败，于是释放缓冲块，并返回 NULL</p></li></ul><p>当程序不再需要使用缓冲块中的数据时，就释放缓冲块，并唤醒因等待缓冲块而睡眠的进程。空闲链表中的缓冲块，只有当：</p><ul><li>被写盘刷新</li><li>解锁</li><li>引用计数为 0</li></ul><p>才能挪作他用。</p><h4 id="_7-高速缓冲区访问过程和同步操作" tabindex="-1"><a class="header-anchor" href="#_7-高速缓冲区访问过程和同步操作"><span>7. 高速缓冲区访问过程和同步操作</span></a></h4><p>让内存中的一些缓冲块内容与磁盘块设备上的信息一致。比如 <code>sync_inodes()</code> 是为了把 inode_table 中的 inode 信息与磁盘一致起来。同步操作通常被分为两个阶段：</p><ol><li>数据结构信息与高速缓冲区中缓冲块的同步</li><li>高速缓冲区中数据块与磁盘对应块的同步</li></ol><h3 id="_12-2-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-2-2-代码注释"><span>12.2.2 代码注释</span></a></h3><h4 id="指针定义" tabindex="-1"><a class="header-anchor" href="#指针定义"><span>指针定义</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span> <span class="token comment">// 内核代码末端</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> start_buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>end<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> hash_table<span class="token punctuation">[</span>NR_HASH<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// NR_HASH = 307</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> free_list<span class="token punctuation">;</span> <span class="token comment">// 空闲链表头指针</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> buffer_wait <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 空闲缓冲块等待队列</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> NR_BUFFERS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 系统中含有的缓冲区个数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="wait-on-buffer-等待指定缓冲区解锁" tabindex="-1"><a class="header-anchor" href="#wait-on-buffer-等待指定缓冲区解锁"><span>wait_on_buffer() - 等待指定缓冲区解锁</span></a></h4><p>如果指定的缓冲块已经上锁，则让进程不可中断地等待在缓冲块的等待队列中。缓冲块解锁时，等待队列上的进程将被唤醒。其中涉及到了开 / 关中断：</p><ul><li>虽然进程是在关中断之后进入休眠的</li><li>但由于每个进程都有独立的 EFLAGS，保存在 TSS 段中</li><li>因此进程切换时，当前 EFLAGS 也随之改变</li></ul><p>即：每个进程中断的开 / 关状态是独立的。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bh<span class="token operator">-&gt;</span>b_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sys-sync-同步设备和高速缓冲中的数据" tabindex="-1"><a class="header-anchor" href="#sys-sync-同步设备和高速缓冲中的数据"><span>sys_sync() - 同步设备和高速缓冲中的数据</span></a></h4><p>首先调用 inode 同步函数，将内存中所有修改过的 inode 写入高速缓冲。然后扫描整个高速缓冲区，对已经被修改的缓冲块生成写盘请求：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_sync</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">sync_inodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    bh <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span> <span class="token comment">// 缓冲区开始处</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_BUFFERS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>d_dirt<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 缓冲块已被修改</span></span>
<span class="line">            <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>WRITE<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用块设备驱动程序</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sync-dev-对指定设备执行高速缓冲数据与设备上数据的同步操作" tabindex="-1"><a class="header-anchor" href="#sync-dev-对指定设备执行高速缓冲数据与设备上数据的同步操作"><span>sync_dev() - 对指定设备执行高速缓冲数据与设备上数据的同步操作</span></a></h4><p>先搜索所有的高速缓冲块，对指定设备 dev 的缓冲块，若其数据已被修改，则进行同步操作。然后将内存 inode 的数据写入高速缓冲中，再对指定设备执行一次相同的同步操作。采用两边同步操作是为了提高内核执行效率。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sync_dev</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 同步指定设备所有已修改缓冲块</span></span>
<span class="line">    bh <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_BUFFERS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> bh<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">!=</span> dev<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待缓冲区解锁</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">==</span> dev <span class="token operator">&amp;&amp;</span> bh<span class="token operator">-&gt;</span>b_dirt<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>WRITE<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">sync_inodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 inode 写入高速缓冲</span></span>
<span class="line">    </span>
<span class="line">    bh <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_BUFFERS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> bh<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">!=</span> dev<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">==</span> dev <span class="token operator">&amp;&amp;</span> bh<span class="token operator">-&gt;</span>b_dirt<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>WRITE<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="invalidate-buffers-使指定设备在高速缓冲区中的数据无效" tabindex="-1"><a class="header-anchor" href="#invalidate-buffers-使指定设备在高速缓冲区中的数据无效"><span>invalidate_buffers() - 使指定设备在高速缓冲区中的数据无效</span></a></h4><p>对指定设备的缓冲块复位 <code>b_uptodate</code> 和 <code>b_dirt</code> 标志。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token keyword">inline</span> <span class="token function">invalidate_buffers</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    bh <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_BUFFERS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> bh<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">!=</span> dev<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">==</span> dev<span class="token punctuation">)</span></span>
<span class="line">            bh<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hash-计算、查找宏" tabindex="-1"><a class="header-anchor" href="#hash-计算、查找宏"><span>Hash 计算、查找宏</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_hashfn</span><span class="token expression"><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dev<span class="token operator">^</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> NR_HASH<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">hash</span><span class="token expression"><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span> hash_table<span class="token punctuation">[</span><span class="token function">_hashfn</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">]</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="remove-from-queues-从-hash-队列和空闲链表中移走缓冲块" tabindex="-1"><a class="header-anchor" href="#remove-from-queues-从-hash-队列和空闲链表中移走缓冲块"><span>remove_from_queues() - 从 hash 队列和空闲链表中移走缓冲块</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">remove_from_queues</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 从 hash 队列中移除缓冲块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_next<span class="token punctuation">)</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_next<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_prev<span class="token punctuation">)</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_prev<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 该缓冲块是 hash 队列的第一块</span></span>
<span class="line">    <span class="token comment">// 需要让 hash 表中的项指向该项</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span> <span class="token operator">==</span> bh<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span> <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 从空闲链表中移除缓冲块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_prev_free<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Free block list corrupted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_prev_free<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_next_free<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_prev_free<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 如果空闲链表头指向本缓冲块</span></span>
<span class="line">    <span class="token comment">// 则指向下一缓冲块</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>free_list <span class="token operator">==</span> bh<span class="token punctuation">)</span></span>
<span class="line">        free_list <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insert-into-queues-将缓冲块插入空闲链表尾部-同时放入-hash-队列中" tabindex="-1"><a class="header-anchor" href="#insert-into-queues-将缓冲块插入空闲链表尾部-同时放入-hash-队列中"><span>insert_into_queues() - 将缓冲块插入空闲链表尾部，同时放入 hash 队列中</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert_into_queues</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 插入空闲链表尾部</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> free_list<span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> free_list<span class="token operator">-&gt;</span>b_prev_free<span class="token punctuation">;</span></span>
<span class="line">    free_list<span class="token operator">-&gt;</span>b_prev_free<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> bh<span class="token punctuation">;</span></span>
<span class="line">    free_list<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 放入 hash 队列</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">hash</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">,</span> bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span> <span class="token operator">=</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_next<span class="token punctuation">)</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_next<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> bh<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="find-buffer-利用-hash-表在高速缓冲中寻找给定设备和指定块号的缓冲块" tabindex="-1"><a class="header-anchor" href="#find-buffer-利用-hash-表在高速缓冲中寻找给定设备和指定块号的缓冲块"><span>find_buffer() - 利用 hash 表在高速缓冲中寻找给定设备和指定块号的缓冲块</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">find_buffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span> tmp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> tmp <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>b_next<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>b_dev <span class="token operator">==</span> dev <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">-&gt;</span>b_blocknr <span class="token operator">==</span> block<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-hash-table-利用-hash-表寻找指定缓冲块" tabindex="-1"><a class="header-anchor" href="#get-hash-table-利用-hash-表寻找指定缓冲块"><span>get_hash_table() - 利用 hash 表寻找指定缓冲块</span></a></h4><p>若找到，则对缓冲块上锁，并返回块的头指针。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">get_hash_table</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">find_buffer</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 缓冲块中没有</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 增加引用次数</span></span>
<span class="line">        <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待解锁</span></span>
<span class="line">        <span class="token comment">// 睡眠状态后，需要检验缓冲块的正确性</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">==</span> dev <span class="token operator">&amp;&amp;</span> bh<span class="token operator">-&gt;</span>b_blocknr <span class="token operator">==</span> block<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> bh<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 缓冲块状态发生改变，撤销引用，重新寻找</span></span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_count<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="getblk-取高速缓冲中指定的缓冲块" tabindex="-1"><a class="header-anchor" href="#getblk-取高速缓冲中指定的缓冲块"><span>getblk() - 取高速缓冲中指定的缓冲块</span></a></h4><p>检查指定设备号和块号的缓冲块是否已在高速缓冲中：</p><ul><li>如果是，则返回对应的头指针</li><li>如果不是，则设置一个对应设备号和块号的新项，并返回缓冲块头指针</li></ul><p>首先定义了判断缓冲块权重的宏 - 修改标志的权重较高。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BADNESS</span><span class="token expression"><span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token operator">-&gt;</span>b_dirt<span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">getblk</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> tmp<span class="token punctuation">,</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">get_hash_table</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 缓冲区已在高速缓冲中</span></span>
<span class="line">        <span class="token keyword">return</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 否则就开始扫描空闲链表</span></span>
<span class="line">    tmp <span class="token operator">=</span> free_list<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>b_count<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 缓冲块正被使用，跳过</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh <span class="token operator">||</span> <span class="token function">BADNESS</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">BADNESS</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            bh <span class="token operator">=</span> tmp<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">BADNESS</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// BADNESS == 0</span></span>
<span class="line">                <span class="token comment">// 没有锁定，没有修改的块</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>b_next_free<span class="token punctuation">)</span> <span class="token operator">!=</span> free_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 所有缓冲块都被使用，则睡眠等待</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 唤醒后重新寻找缓冲块</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 找到了一个比较合适的空闲缓冲块</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_count<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 唤醒后该块又被占用了</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 缓冲区已被修改</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dirt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 数据写盘</span></span>
<span class="line">        <span class="token function">sync_dev</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 再次等待缓冲区解锁</span></span>
<span class="line">        <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_count<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 又被占用......</span></span>
<span class="line">            <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 睡眠等待的过程中</span></span>
<span class="line">    <span class="token comment">// 其它进程可能已经将该缓冲块加入高速缓冲中</span></span>
<span class="line">    <span class="token comment">// 再次检查</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find_buffer</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 占用缓冲块</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">remove_from_queue</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移出空闲链表</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_dev <span class="token operator">=</span> dev<span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_blocknr <span class="token operator">=</span> block<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">insert_into_queues</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入到空闲链表尾部</span></span>
<span class="line">    <span class="token keyword">return</span> bh<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="brelse-释放指定缓冲块" tabindex="-1"><a class="header-anchor" href="#brelse-释放指定缓冲块"><span>brelse() - 释放指定缓冲块</span></a></h4><p>等待缓冲块解锁，然后将引用计数递减，最后唤醒等待空闲缓冲块的进程。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">brelse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> buf<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>buf<span class="token operator">-&gt;</span>b_count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to free free buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bread-读取指定数据块-并返回含有数据的缓冲区" tabindex="-1"><a class="header-anchor" href="#bread-读取指定数据块-并返回含有数据的缓冲区"><span>bread() - 读取指定数据块，并返回含有数据的缓冲区</span></a></h4><p>根据设备号和数据块号，在高速缓冲区申请一块缓冲块：</p><ul><li>若缓冲块已含有有效的数据，就直接返回缓冲块指针</li><li>否则读取指定的数据到缓冲块，并返回缓冲块指针</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> block<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bread: getblk returned NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 数据有效，可直接使用</span></span>
<span class="line">        <span class="token keyword">return</span> bh<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 产生读取块设备的请求</span></span>
<span class="line">    <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待数据被读入，等待缓冲区解锁</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 缓冲区已更新</span></span>
<span class="line">        <span class="token keyword">return</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读设备操作失败，释放缓冲区</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bread-page-一次读取四个缓冲块" tabindex="-1"><a class="header-anchor" href="#bread-page-一次读取四个缓冲块"><span>bread_page() - 一次读取四个缓冲块</span></a></h4><p>同时读取四块可以获得速度上的好处，参数中的数组 <code>b[4]</code> 包含了四个设备数据块号。</p><p>复制内存块的宏 - 从 from 地址复制一块 (1024B) 到 to 位置。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COPYBLK</span><span class="token expression"><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">&quot;cld\\n\\t&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token string">&quot;rep\\n\\t&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token string">&quot;movsl\\n\\t&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token operator">::</span></span><span class="token string">&quot;c&quot;</span><span class="token expression"><span class="token punctuation">(</span>BLOCK_SIZE<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;S&quot;</span><span class="token expression"><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;D&quot;</span><span class="token expression"><span class="token punctuation">(</span>to<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token operator">:</span></span><span class="token string">&quot;cx&quot;</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token string">&quot;di&quot;</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token string">&quot;si&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">bread_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 取得对应缓冲块</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_updodate<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token comment">// 如果缓冲块中的数据不可用</span></span>
<span class="line">                    <span class="token comment">// 产生读设备请求</span></span>
<span class="line">                    <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span> bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待缓冲区解锁</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 数据有效，复制数据</span></span>
<span class="line">                <span class="token function">COPYBLK</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>b_data<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="breada-从指定设备读取指定的一些块" tabindex="-1"><a class="header-anchor" href="#breada-从指定设备读取指定的一些块"><span>breada() - 从指定设备读取指定的一些块</span></a></h4><p>函数参数个数可变，成功时返回第一块的 buffer_head 指针，否则返回 NULL。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">breada</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    va_list args<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">,</span> <span class="token operator">*</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bread: getblk returned NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 预读随后的数据块</span></span>
<span class="line">    <span class="token comment">// 只需读进高速缓冲区，并不马上使用</span></span>
<span class="line">    <span class="token comment">// 因此读完后将其引用计数递减，释放掉该块</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>first <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tmp <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READA<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            tmp<span class="token operator">-&gt;</span>b_count<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待第一个缓冲区解锁</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 缓冲区数据有效</span></span>
<span class="line">        <span class="token keyword">return</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读操作失败，释放缓冲区，返回 NULL</span></span>
<span class="line">    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="buffer-init-缓冲区初始化函数" tabindex="-1"><a class="header-anchor" href="#buffer-init-缓冲区初始化函数"><span>buffer_init() - 缓冲区初始化函数</span></a></h4><p>从缓冲区头和尾分别初始化 buffer_head 和对应的数据块，直到缓冲区中的所有内存都被分配完毕。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">buffer_init</span><span class="token punctuation">(</span><span class="token keyword">long</span> buffer_end<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> h <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 确定缓冲区高端的实际位置</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer_end <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 缓冲区高端等于 1MB</span></span>
<span class="line">        <span class="token comment">// 640KB - 1MB 被显存和 BIOS 使用</span></span>
<span class="line">        <span class="token comment">// 实际缓冲区高端应为 640KB</span></span>
<span class="line">        b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> buffer_end<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>b <span class="token operator">-=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_dev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区设备号</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_wait <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> b<span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_prev_free <span class="token operator">=</span> h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        h<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        NR_BUFFERS<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0x100000</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// b 递减到 1MB，则跳过 384KB</span></span>
<span class="line">            b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0xA0000</span><span class="token punctuation">;</span> <span class="token comment">// 让 b 指向 640KB 处</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    h<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// h 指向最后一个缓冲块头</span></span>
<span class="line">    free_list <span class="token operator">=</span> start_buffer<span class="token punctuation">;</span> <span class="token comment">// 空闲链表头指针</span></span>
<span class="line">    free_list<span class="token operator">-&gt;</span>b_pref_free <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment">// 头部和尾部关联循环</span></span>
<span class="line">    h<span class="token operator">-&gt;</span>b_next_free <span class="token operator">=</span> free_list<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化所有的 hash 表项</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_HASH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        hash_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>这里涉及到很多的 sleep 和 wake up，进程状态的改变和对全局数据结构的操作封装在子函数内，导致代码向高层封装的时候越来越难懂了...看懂都很难了，更不用提开发的难度了..还是很佩服的。👍</p>`,111)]))}const k=s(o,[["render",i],["__file","Chapter 12.2 - buffer.c 程序.html.vue"]]),d=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.2%20-%20buffer.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.2 - buffer.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.2 buffer.c 程序","slug":"_12-2-buffer-c-程序","link":"#_12-2-buffer-c-程序","children":[{"level":3,"title":"12.2.1 功能描述","slug":"_12-2-1-功能描述","link":"#_12-2-1-功能描述","children":[]},{"level":3,"title":"12.2.2 代码注释","slug":"_12-2-2-代码注释","link":"#_12-2-2-代码注释","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.2 - buffer.c 程序.md"}');export{k as comp,d as data};
