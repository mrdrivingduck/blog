import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function o(c,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="c-smart-pointer" tabindex="-1"><a class="header-anchor" href="#c-smart-pointer"><span>C++ - Smart Pointer</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 09 / 19 20:00</p><p>Ningbo, Zhejiang, China</p><hr><p>学习一下 C++ 中四种常见智能指针的用法、行为和具体实现。它们的定义位于：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="auto-ptr-deprecated-in-c-11" tabindex="-1"><a class="header-anchor" href="#auto-ptr-deprecated-in-c-11"><span>auto_ptr (deprecated in C++ 11)</span></a></h2><p>Automatic Pointer，已经在 C++ 11 标准中过时。</p><p>智能指针本身也是一个对象，在内部维护了实际的指针。当 <code>auto_ptr</code> 对象的生命周期结束时，在对象的 <strong>析构函数</strong> 中实现对指针的销毁 (通常为 <code>operator delete</code>)。</p><p>该指针提供了对一个指针的全周期生命管理，语义上类似于 <strong>独占</strong> 一个指针，维护着对内部指针的 <strong>控制权</strong>。对指针拥有控制权的 <code>auto_ptr</code> 负责对内部指针进行销毁。因此，不可能有多于两个 <code>auto_ptr</code> 对象在内部维护着同一个指针。当两个 <code>auto_ptr</code> 对象之间发生赋值时，将会涉及到控制权的转移。控制权转移之后，原指针将失效。</p><p>另外，可以看到构造函数都带有 <code>throw</code>，保证是 <em>异常安全</em> 的。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">explicit</span> <span class="token function">auto_ptr</span> <span class="token punctuation">(</span>X<span class="token operator">*</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">auto_ptr</span> <span class="token punctuation">(</span>auto_ptr<span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token function">auto_ptr</span> <span class="token punctuation">(</span>auto_ptr<span class="token operator">&lt;</span>Y<span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">auto_ptr</span> <span class="token punctuation">(</span>auto_ptr_ref<span class="token operator">&lt;</span>X<span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token operator">~</span><span class="token function">auto_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>常规指针行为：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">X<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取内部指针</span></span>
<span class="line">X<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过 operator* 对内部指针解引用</span></span>
<span class="line">X<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 operator-&gt; 返回内部指针的成员变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制权管理：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 指针赋值，左边的 auto_ptr 对象接管控制权，右边的 auto_ptr 对象置空</span></span>
<span class="line">auto_ptr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span>auto_ptr<span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token operator">&gt;</span></span>
<span class="line">  auto_ptr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span>auto_ptr<span class="token operator">&lt;</span>Y<span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">auto_ptr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span>auto_ptr_ref<span class="token operator">&lt;</span>X<span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 放弃控制权，将 auto_ptr 内部指针置空，但不销毁指针指向的空间</span></span>
<span class="line">X<span class="token operator">*</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 放弃控制权，并销毁内部指针指向的空间</span></span>
<span class="line"><span class="token comment">// 然后内部指针被重新初始化 (或置空)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">reset</span> <span class="token punctuation">(</span>X<span class="token operator">*</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>auto_ptr</code> 使用了 copy 语义来实现转移指针，但其行为并不与 copy 语义一致。因为原对象释放了所有权。因此在 C++ 11 中被 <code>unique_ptr</code> 替代，因为它实现了 move 语义。</p></blockquote><h2 id="unique-ptr" tabindex="-1"><a class="header-anchor" href="#unique-ptr"><span>unique_ptr</span></a></h2><p>它的语义如其名称所述，表示独占一个资源。一旦它对一个指针资源拥有控制权，就需要在析构函数中负责对这个指针进行销毁。被赋值或主动放弃控制权时也是如此。unique_ptr 在语义上独占了指针，因此在销毁指针时并不考虑这个指针是否被其它对象持有。</p><p>其内部元素包含：</p><ul><li>Pointer：在构造时被赋值，在赋值 / reset 时可被替换，也可以被独立访问</li><li>Deleter：一个 <strong>可调用对象</strong>，接收参数为相同指针类型，在构造时被设置，可以通过赋值替换，用于销毁其管理的指针</li></ul><p>构造函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 空构造函数，内部指针被设置为 nullptr</span></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token function">unique_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token function">unique_ptr</span> <span class="token punctuation">(</span>nullptr_t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">:</span> <span class="token function">unique_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 从指针构造</span></span>
<span class="line"><span class="token keyword">explicit</span> <span class="token function">unique_ptr</span> <span class="token punctuation">(</span>pointer p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从指针构造，并复制一份输入 deleter</span></span>
<span class="line"><span class="token function">unique_ptr</span> <span class="token punctuation">(</span>pointer p<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">typename</span> <span class="token class-name">conditional</span><span class="token operator">&lt;</span>is_reference<span class="token operator">&lt;</span>D<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token keyword">const</span> D<span class="token operator">&amp;</span><span class="token operator">&gt;</span> del<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从指针构造，并使用输入 deleter</span></span>
<span class="line"><span class="token function">unique_ptr</span> <span class="token punctuation">(</span>pointer p<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>D<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span> del<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// move 语义构造：接管指针，复制一份 deleter</span></span>
<span class="line"><span class="token function">unique_ptr</span> <span class="token punctuation">(</span>unique_ptr<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token function">unique_ptr</span> <span class="token punctuation">(</span>unique_ptr<span class="token operator">&lt;</span>U<span class="token punctuation">,</span>E<span class="token operator">&gt;</span><span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token function">unique_ptr</span> <span class="token punctuation">(</span>auto_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// !!! 拷贝构造函数被禁用，因为指针是被独占的</span></span>
<span class="line"><span class="token function">unique_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> unique_ptr<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>析构函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token operator">~</span><span class="token function">unique_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 以内部指针为参数，调用 deleter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>指针行为：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 判空，不再需要先通过 get 获取到内部指针，再对内部指针进行判空</span></span>
<span class="line"><span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 重载 operator* 和 operator-&gt;</span></span>
<span class="line"><span class="token keyword">typename</span> <span class="token class-name">add_lvalue_reference</span><span class="token operator">&lt;</span>element_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line">pointer <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制权管理：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 放弃指针控制权，内部指针置空</span></span>
<span class="line">pointer <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 放弃指针控制权并销毁</span></span>
<span class="line"><span class="token comment">// (可选) 接管输入参数中的指针控制权</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">reset</span> <span class="token punctuation">(</span>pointer p <span class="token operator">=</span> <span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 与另一个 unique_ptr 对换控制权</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">swap</span> <span class="token punctuation">(</span>unique_ptr<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shared-ptr" tabindex="-1"><a class="header-anchor" href="#shared-ptr"><span>shared_ptr</span></a></h2><p>该对象允许与其它 shared_ptr 对象共享对一个指针的控制权。这一组共享者中最后一个释放控制权的对象负责销毁该指针。共享控制权的唯一方式是复制内部指针，并维护引用计数。</p><p>内部的指针：</p><ul><li>Stored pointer：指向需要被管理的对象</li><li>Owned pointer：指向控制权对象组用于管理何时销毁 stored pointer 的数据</li></ul><p>构造函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 空构造函数，不管理任何指针，引用计数为 0</span></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token function">shared_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token function">shared_ptr</span><span class="token punctuation">(</span>nullptr_t<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">shared_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 默认构造函数，可选指针、deleter、allocator</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token keyword">explicit</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>U<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>U<span class="token operator">*</span> p<span class="token punctuation">,</span> D del<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>nullptr_t p<span class="token punctuation">,</span> D del<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>U<span class="token operator">*</span> p<span class="token punctuation">,</span> D del<span class="token punctuation">,</span> Alloc alloc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>nullptr_t p<span class="token punctuation">,</span> D del<span class="token punctuation">,</span> Alloc alloc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 拷贝构造函数</span></span>
<span class="line"><span class="token comment">// 如果输入参数不为空，则共享控制权，并增加 ref count</span></span>
<span class="line"><span class="token comment">// 如果输入参数为空，那么创建一个空的对象</span></span>
<span class="line"><span class="token function">shared_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> shared_ptr<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> shared_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从 weak_ptr 构造：如果输入参数过期，那么抛出 bad_weak_ptr 异常</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token keyword">explicit</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> weak_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 移动构造函数</span></span>
<span class="line"><span class="token comment">// 构造完毕后，输入参数被置空</span></span>
<span class="line"><span class="token function">shared_ptr</span> <span class="token punctuation">(</span>shared_ptr<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 从 auto_ptr 或 unique_ptr 转移控制权，入参丢失控制权而被置空</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>auto_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span>unique_ptr<span class="token operator">&lt;</span>U<span class="token punctuation">,</span>D<span class="token operator">&gt;</span><span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 别名构造函数</span></span>
<span class="line"><span class="token comment">// 对象不管理 p 指向的存储，而是共享 x 的数据并累加引用计数</span></span>
<span class="line"><span class="token comment">// 通常被用于指向已经被纳入管理的 object member</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token function">shared_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> shared_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;</span> x<span class="token punctuation">,</span> element_type<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>析构函数：</p><ul><li>如果引用计数大于 1，那么引用计数--</li><li>如果引用计数等于 1，那么使用 deleter 或 <code>operator delete</code> 销毁指针</li><li>如果引用计数为 0，那么没有任何效果</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token operator">~</span><span class="token function">shared_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>重置：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 当前对象被自销毁</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// (可选) 然后对一个新指针建立控制权</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">reset</span> <span class="token punctuation">(</span>U<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">reset</span> <span class="token punctuation">(</span>U<span class="token operator">*</span> p<span class="token punctuation">,</span> D del<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">reset</span> <span class="token punctuation">(</span>U<span class="token operator">*</span> p<span class="token punctuation">,</span> D del<span class="token punctuation">,</span> Alloc alloc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用计数相关：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>  <span class="token comment">// 返回引用计数</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>         <span class="token comment">// 返回控制权是否唯一</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其余与 unique_ptr 类似。</p><h2 id="weak-ptr" tabindex="-1"><a class="header-anchor" href="#weak-ptr"><span>weak_ptr</span></a></h2><p>shared_ptr 互相引用时，引用计数永远不会减至 0。weak_ptr 用于解决这个问题。它可以被 shared_ptr 赋值，但不增加引用计数。</p><p>构造函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 成为共享组的一部分，但不持有控制权 (不增加引用计数)</span></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token function">weak_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">weak_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> weak_ptr<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token function">weak_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> weak_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token function">weak_ptr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> shared_ptr<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>析构函数无任何作用。</p><p>引用计数相关：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 返回共享内部指针控制权的指针数量</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 返回当前 weak_ptr 是否过期 (use_count()==0)</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 返回当前 weak_ptr 对应的 shared_ptr (如果没有过期)</span></span>
<span class="line">shared_ptr<span class="token operator">&lt;</span>element_type<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>weak_ptr 没有重载 <code>operator*</code> 和 <code>operator-&gt;</code>，因此只能通过 shared_ptr 访问堆空间。</p><blockquote><p>没太搞懂它的具体使用场景。</p></blockquote><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="http://www.cplusplus.com/reference/memory/auto_ptr/" target="_blank" rel="noopener noreferrer">cplusplus.com - auto_ptr</a></p><p><a href="http://www.cplusplus.com/reference/memory/unique_ptr/" target="_blank" rel="noopener noreferrer">cplusplus.com - unique_ptr</a></p><p><a href="http://www.cplusplus.com/reference/memory/shared_ptr/" target="_blank" rel="noopener noreferrer">cplusplus.com - shared_ptr</a></p><p><a href="https://www.cplusplus.com/reference/memory/weak_ptr/" target="_blank" rel="noopener noreferrer">cplusplus.com - weak_ptr</a></p>`,60)]))}const i=n(t,[["render",o],["__file","C__ Smart Pointer.html.vue"]]),r=JSON.parse('{"path":"/notes/C__/C__%20Smart%20Pointer.html","title":"C++ - Smart Pointer","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"auto_ptr (deprecated in C++ 11)","slug":"auto-ptr-deprecated-in-c-11","link":"#auto-ptr-deprecated-in-c-11","children":[]},{"level":2,"title":"unique_ptr","slug":"unique-ptr","link":"#unique-ptr","children":[]},{"level":2,"title":"shared_ptr","slug":"shared-ptr","link":"#shared-ptr","children":[]},{"level":2,"title":"weak_ptr","slug":"weak-ptr","link":"#weak-ptr","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ Smart Pointer.md"}');export{i as comp,r as data};
