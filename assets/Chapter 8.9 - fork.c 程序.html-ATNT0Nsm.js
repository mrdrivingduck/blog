import{_ as n,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e="/blog/assets/8-13-HocL9trE.png",o={};function c(l,s){return t(),a("div",null,s[0]||(s[0]=[p('<h1 id="chapter-8-9-fork-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-8-9-fork-c-程序"><span>Chapter 8.9 - fork.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 21 11:34</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_8-9-fork-c-程序" tabindex="-1"><a class="header-anchor" href="#_8-9-fork-c-程序"><span>8.9 fork.c 程序</span></a></h2><h3 id="_8-9-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_8-9-1-功能描述"><span>8.9.1 功能描述</span></a></h3><p>fork 系统调用用于创建子进程。在 Linux 中，所有进程都是进程 0 的子进程，该程序是 <code>sys_fork()</code> 函数的辅助处理函数集：</p><ul><li><code>find_empty_process()</code></li><li><code>copy_process()</code></li></ul><p><code>copy_process()</code> 函数用于复制进程的代码段和数据段，以及环境</p><ul><li>为新建进程在主内存区中申请内存</li><li>复制当前进程的任务数据结构中的所有内容，作为新进程任务数据结构的模板</li><li>对复制的任务数据结构进行修改 <ul><li>利用系统调用发生时，压入堆栈的寄存器信息，重新设置任务结构中的 TSS</li><li>使新进程的状态保持父进程即将进入中断过程前的状态</li></ul></li><li>复制当前进程的页目录项和页表项</li><li>同步文件使用</li><li>在 GDT 中设置 LDT 和 TSS，新任务设置为可运行状态，向当前进程返回新进程号</li></ul><h3 id="_8-9-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_8-9-2-代码注释"><span>8.9.2 代码注释</span></a></h3><h4 id="进程空间区域写前验证函数-verify-area" tabindex="-1"><a class="header-anchor" href="#进程空间区域写前验证函数-verify-area"><span>进程空间区域写前验证函数 verify_area()</span></a></h4><p>对于 80386 CPU，在执行特权级 0 代码时，页保护标志不起作用，copy-on-write 失去作用 - 该函数用于解决这个问题。对于 80486 CPU，内核可以通过设置 CR0 中的写保护标志 WP 禁止向用户空间只读页面写数据。检测以页为单位进行操作，因此程序需要首先定位到 addr 所在页面的基地址：</p><p><img src="'+e+`" alt="8-13"></p><p>该地址是进程空间中的逻辑地址，即相对于进程起始地址空间的偏移量，然后加上进程数据段基地址，变换为 CPU 线性空间中的地址。最后调用 <code>write_verify()</code> 对指定大小的内存空间进行写前验证。若页面只读，则执行共享检验和写时复制：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">verify_area</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> start<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> addr<span class="token punctuation">;</span></span>
<span class="line">    size <span class="token operator">+=</span> start <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">;</span> <span class="token comment">// addr 在页内的偏移</span></span>
<span class="line">    start <span class="token operator">&amp;=</span> <span class="token number">0xfffff000</span><span class="token punctuation">;</span> <span class="token comment">// 对齐页边界，进程空间中的逻辑地址</span></span>
<span class="line">    </span>
<span class="line">    start <span class="token operator">+=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加上进程数据段基址，转换为线性地址</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 循环进行写页面验证</span></span>
<span class="line">        <span class="token comment">// 如果页面不可写，则复制页面</span></span>
<span class="line">        size <span class="token operator">-=</span> <span class="token number">4096</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">write_verify</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        start <span class="token operator">+=</span> <span class="token number">4096</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复制内存页表函数-copy-mem" tabindex="-1"><a class="header-anchor" href="#复制内存页表函数-copy-mem"><span>复制内存页表函数 copy_mem()</span></a></h4><p>参数 <code>nr</code> 是新任务号，<code>p</code> 是新任务数据结构的指针，为新任务在线性地址空间中设置代码段和数据段的基地址、限长，并复制页表。仅为新进程设置当前进程 (父进程) 的页目录表项和页表项，并不分配物理页面。此时，新进程与当前进程共享所有内存页面。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">copy_mem</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> old_data_base<span class="token punctuation">,</span> new_data_base<span class="token punctuation">,</span> data_limit<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> old_code_base<span class="token punctuation">,</span> new_code_base<span class="token punctuation">,</span> code_limit<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    code_limit <span class="token operator">=</span> <span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代码段选择符</span></span>
<span class="line">    data_limit <span class="token operator">=</span> <span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据段选择符</span></span>
<span class="line">    old_code_base <span class="token operator">=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代码段线性基地址</span></span>
<span class="line">    old_data_base <span class="token operator">=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据段线性基地址</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_data_base <span class="token operator">!=</span> old_code_base<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// Linux 0.12 不支持代码段和数据段分离</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;We don&#39;t support separate I&amp;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>data_limit <span class="token operator">&lt;</span> code_limit<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Bad data_limit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设置新进程在线性地址空间中的基地址</span></span>
<span class="line">    new_data_base <span class="token operator">=</span> new_code_base <span class="token operator">=</span> nr <span class="token operator">*</span> TASK_SIZE<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>start_code <span class="token operator">=</span> new_code_base<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_base</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> new_code_base<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置代码段线性基地址</span></span>
<span class="line">    <span class="token function">set_base</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> new_data_base<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置数据段线性基地址</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 复制页表项和页目录项</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_page_tables</span><span class="token punctuation">(</span>old_data_base<span class="token punctuation">,</span> new_data_base<span class="token punctuation">,</span> data_limit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 复制出错，回收页表项</span></span>
<span class="line">        <span class="token function">free_page_tables</span><span class="token punctuation">(</span>new_data_base<span class="token punctuation">,</span> data_limit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="进程拷贝函数-copy-process" tabindex="-1"><a class="header-anchor" href="#进程拷贝函数-copy-process"><span>进程拷贝函数 copy_process()</span></a></h4><p>复制进程信息 <code>task[n]</code>，并设置必要的寄存器，整个地复制数据段 (也是代码段)。函数参数是汇编依次压入堆栈的寄存器数据。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">copy_process</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span> <span class="token keyword">long</span> ebp<span class="token punctuation">,</span> <span class="token keyword">long</span> edi<span class="token punctuation">,</span> <span class="token keyword">long</span> esi<span class="token punctuation">,</span> <span class="token keyword">long</span> gs<span class="token punctuation">,</span> <span class="token keyword">long</span> none<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">long</span> ebx<span class="token punctuation">,</span> <span class="token keyword">long</span> ecx<span class="token punctuation">,</span> <span class="token keyword">long</span> edx<span class="token punctuation">,</span> <span class="token keyword">long</span> orig_eax<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">long</span> fs<span class="token punctuation">,</span> <span class="token keyword">long</span> es<span class="token punctuation">,</span> <span class="token keyword">long</span> ds<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">long</span> eip<span class="token punctuation">,</span> <span class="token keyword">long</span> cs<span class="token punctuation">,</span> <span class="token keyword">long</span> eflags<span class="token punctuation">,</span> <span class="token keyword">long</span> esp<span class="token punctuation">,</span> <span class="token keyword">long</span> ss<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 为新的 PCB 申请一页</span></span>
<span class="line">    <span class="token comment">// 并将地址放入任务数组中</span></span>
<span class="line">    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span></span>
<span class="line">    task<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>current<span class="token punctuation">;</span> <span class="token comment">// 只复制任务结构，不复制内核态堆栈</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 对复制来的任务数据结构进行一些修改</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span> <span class="token comment">// 防止被内核调度执行</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>pid <span class="token operator">=</span> last_pid<span class="token punctuation">;</span> <span class="token comment">// 新进程号</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>counter <span class="token operator">=</span> p<span class="token operator">-&gt;</span>priority<span class="token punctuation">;</span> <span class="token comment">// 进程时间片</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>signal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 信号 bitmap</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 报警定时值</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>leader <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 进程领导权不能继承</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>utime <span class="token operator">=</span> p<span class="token operator">-&gt;</span>stime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 用户态和核心态运行时间</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>cutime <span class="token operator">=</span> p<span class="token operator">-&gt;</span>cstime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 子进程用户态和核心态运行时间</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>start_time <span class="token operator">=</span> jiffies<span class="token punctuation">;</span> <span class="token comment">// 进程开始运行时间</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 修改 TSS 的内容</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>back_link <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>esp0 <span class="token operator">=</span> PAGE_SIZE <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span> <span class="token comment">// 指向页面顶端</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ss0 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>eip <span class="token operator">=</span> eip<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>eflags <span class="token operator">=</span> eflags<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>eax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// fork() 返回时，新进程返回 0</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ecx <span class="token operator">=</span> ecx<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>edx <span class="token operator">=</span> edx<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ebx <span class="token operator">=</span> ebx<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>esp <span class="token operator">=</span> esp<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ebp <span class="token operator">=</span> ebp<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>esi <span class="token operator">=</span> esi<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>edi <span class="token operator">=</span> edi<span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>es <span class="token operator">=</span> es <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span> <span class="token comment">// 段寄存器仅 16 位有效。</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>cs <span class="token operator">=</span> cs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ss <span class="token operator">=</span> ss <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ds <span class="token operator">=</span> ds <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>fs <span class="token operator">=</span> fs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>gs <span class="token operator">=</span> gs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>ldt <span class="token operator">=</span> <span class="token function">_LDT</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务 LDT 描述符的选择符 (LDT 描述符在 GDT 中)</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>trace_bitmap <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果当前任务使用了协处理器，就保存上下文到新进程的 i387 中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;clts; fnsave %0; frstor %0&quot;</span><span class="token operator">::</span><span class="token string">&quot;m&quot;</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 复制进程页表</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_mem</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 出错</span></span>
<span class="line">        task<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">free_page</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回收 PCB 所在页</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 子进程与父进程共享打开的文件</span></span>
<span class="line">    <span class="token comment">// 将对应文件的打开次数 +1</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_OPEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">=</span> p<span class="token operator">-&gt;</span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            f<span class="token operator">-&gt;</span>f_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 父进程的 pwd、root、executable 的 inode 引用次数 +1</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>pwd<span class="token punctuation">)</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>pwd<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>executable<span class="token punctuation">)</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>executable<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>library<span class="token punctuation">)</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>library<span class="token operator">-&gt;</span>i_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在 GDT 表中设置新任务的 TSS 段和 LDT 段描述符</span></span>
<span class="line">    <span class="token function">set_tss_desc</span><span class="token punctuation">(</span>gdt <span class="token operator">+</span> <span class="token punctuation">(</span>nr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> FIRST_TSS_ENTRY<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>tss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_ldt_desc</span><span class="token punctuation">(</span>gdt <span class="token operator">+</span> <span class="token punctuation">(</span>nr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> FIRST_LDT_ENTRY<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 将进程插入进程链表</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>p_pptr <span class="token operator">=</span> current<span class="token punctuation">;</span> <span class="token comment">// 设置新进程的父进程为当前进程</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>p_cptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 新进程无子进程</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>p_ysptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 新进程无更年轻的兄弟进程</span></span>
<span class="line">    p<span class="token operator">-&gt;</span>p_osptr <span class="token operator">=</span> current<span class="token operator">-&gt;</span>p_cptr<span class="token punctuation">;</span> <span class="token comment">// 设置新进程的老兄弟进程</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">)</span> <span class="token comment">// 设置老兄弟进程的年轻兄弟进程指针</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>p_osptr<span class="token operator">-&gt;</span>p_ysptr <span class="token operator">=</span> p<span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>p_cptr <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// 设置当前进程的最新子进程</span></span>
<span class="line">    </span>
<span class="line">    p<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span> <span class="token comment">// 子进程就绪</span></span>
<span class="line">    <span class="token keyword">return</span> last_pid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="寻找进程槽-find-empty-process" tabindex="-1"><a class="header-anchor" href="#寻找进程槽-find-empty-process"><span>寻找进程槽 find_empty_process()</span></a></h4><p>为新进程取得不重复的进程号，返回在任务数组中的 index。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">find_empty_process</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 寻找唯一的 pid</span></span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>last_pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        last_pid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// overflow</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_TASKS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>pid <span class="token operator">==</span> last_pid<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>pgrp <span class="token operator">==</span> last_pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 唯一的 pid 已找到</span></span>
<span class="line">    <span class="token comment">// 寻找任务数组空槽</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_TASKS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">// 找到任务数组空槽</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)]))}const u=n(o,[["render",c],["__file","Chapter 8.9 - fork.c 程序.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%208%20-%20%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81/Chapter%208.9%20-%20fork.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 8.9 - fork.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.9 fork.c 程序","slug":"_8-9-fork-c-程序","link":"#_8-9-fork-c-程序","children":[{"level":3,"title":"8.9.1 功能描述","slug":"_8-9-1-功能描述","link":"#_8-9-1-功能描述","children":[]},{"level":3,"title":"8.9.2 代码注释","slug":"_8-9-2-代码注释","link":"#_8-9-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 8 - 内核代码/Chapter 8.9 - fork.c 程序.md"}');export{u as comp,r as data};
