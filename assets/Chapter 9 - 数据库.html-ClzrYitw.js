import{_ as s,c as e,a,o as i}from"./app-7eKjwDat.js";const l={};function t(p,n){return i(),e("div",null,n[0]||(n[0]=[a(`<h1 id="chapter-9-数据库" tabindex="-1"><a class="header-anchor" href="#chapter-9-数据库"><span>Chapter 9 - 数据库</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 02 14:15</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="databases" tabindex="-1"><a class="header-anchor" href="#databases"><span>Databases</span></a></h2><p>Redis 服务器将所有的数据库都保存在如下结构体中。初始化服务时，会根据其中的 <code>dbnum</code> 属性来决定应创建多少个数据库。这个属性可以在服务器配置中指定，默认 16。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> dbnum<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务器内部，维护客户端状态的结构体中的一个指针记录了当前客户端正在使用的数据库：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisClient</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span> redisClient<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="key-space" tabindex="-1"><a class="header-anchor" href="#key-space"><span>Key Space</span></a></h2><p>Redis 是一个 key-value 数据库服务器。每个数据库中都有一个 key space，是一个字典，保存了数据库中所有的键值对：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后的增删改查全部通过对 key space 进行增删改查完成。在进行读写操作的同时，Redis 还需要进行一些额外的维护操作：</p><ol><li>服务器根据读写访问的 key 是否存在，更新 hit/miss 的次数</li><li>更新 key 的 LRU 时间</li><li>如果 key 已过期，则先删除这个 key</li><li>如果客户端监视该 key，那么会将该 key 标记为脏</li><li>服务器修改 key 后都会对 dirty 计数器 +1 (用于触发持久化操作或复制操作)</li><li>如果开启了数据库通知，那么对 key 修改后，服务器按配置推送通知</li></ol><hr><h2 id="key-expiration" tabindex="-1"><a class="header-anchor" href="#key-expiration"><span>Key Expiration</span></a></h2><p>客户端可以以秒或毫秒精度为数据库中的 key 设置 TTL (Time To Live)。在到期后，服务器自动删除过期的 key。</p><p>在 <code>redisDb</code> 中有一个 <code>expires</code> 字典专门用于保存数据库中所有 key 的过期时间。过期时间以 <code>long long</code> 类型的整数保存，是一个毫秒精度的 UNIX 时间戳。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    dict <span class="token operator">*</span>expires<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过期 key 的判定：</p><ol><li>key 存在于过期字典</li><li>当前 UNIX 时间戳是否大于过期时间</li></ol><h2 id="removing-strategy-candidate" tabindex="-1"><a class="header-anchor" href="#removing-strategy-candidate"><span>Removing Strategy Candidate</span></a></h2><p>几种可能的删除机制：</p><h3 id="定时删除" tabindex="-1"><a class="header-anchor" href="#定时删除"><span>定时删除</span></a></h3><p>在设置 key 过期时间的同时，设置一个 timer，在 timer 到期时删除 key。</p><ul><li>CPU 不友好 - 时间浪费在与任务无关的过期 key 上，影响吞吐量</li><li>内存友好 - 过期的 key 会被尽快删除</li><li>创建定时器的内部实现是无序链表 - 查找时间复杂度为 O(N)</li></ul><h3 id="惰性删除" tabindex="-1"><a class="header-anchor" href="#惰性删除"><span>惰性删除</span></a></h3><p>只有在取出 key 时才对 key 进行过期检查。</p><ul><li>节省 CPU 到了最大程度</li><li>对于内存十分不友好，因为有些 key 如果不被访问就永远不会释放</li></ul><h3 id="定期删除" tabindex="-1"><a class="header-anchor" href="#定期删除"><span>定期删除</span></a></h3><p>是上述两种策略的折衷。每隔一段时间执行一次删除过期 key 的操作，并限制删除操作执行的时间与频率。最重要的点是控制好时间与频率，如果时间太长、频率高，那么就退化为定时删除；反之，则退化为惰性删除。</p><h2 id="removing-strategy-implementation" tabindex="-1"><a class="header-anchor" href="#removing-strategy-implementation"><span>Removing Strategy Implementation</span></a></h2><p>Redis 服务器实际使用了惰性删除和定期删除两种策略。</p><h3 id="惰性删除实现" tabindex="-1"><a class="header-anchor" href="#惰性删除实现"><span>惰性删除实现</span></a></h3><p>在所有读写数据库的命令之前，都会对操作的 key 进行检查：</p><ul><li>如果 key 已经过期，那么将该 key 从数据库中删除</li><li>如果 key 未过期，那么检查函数直接通过</li></ul><h3 id="定期删除实现" tabindex="-1"><a class="header-anchor" href="#定期删除实现"><span>定期删除实现</span></a></h3><p>在 <strong>规定时间</strong> 内，<strong>周期性地</strong> <strong>分多次</strong> 遍历服务器中的各个数据库，从每个数据库的过期字典中 <strong>随机检查</strong> 一部分过期时间，并删除其中的过期 key。</p><p>需要用一个值记录当前的检查进度 - 假设 16 个数据库，第一次检查了前四个，第二次就从第五个开始检查，一轮检查完毕后，开启新的一轮。</p><hr><h2 id="持久化过期策略" tabindex="-1"><a class="header-anchor" href="#持久化过期策略"><span>持久化过期策略</span></a></h2><p>对于 RDB 持久化功能，已过期的 key 将不会被保存到文件中；载入 RDB 文件时，过期的 key 将不会被载入到数据库中 (主数据库)。从数据库将载入所有 key。</p><p>对于 AOF 持久化，当过期的 key 被删除后，程序会向 AOF 文件追加 DEL 命令来显式标记删除。</p><p>当服务器运行在复制模式时，<strong>从服务器</strong> 的过期 key 由 <strong>主服务器</strong> 控制 (为了保证两者的一致性)。</p><ul><li>主服务器删除过期 key 后，将显式通知从服务器删除</li><li>从服务器不会主动删除过期 key</li></ul><hr><h2 id="数据库通知" tabindex="-1"><a class="header-anchor" href="#数据库通知"><span>数据库通知</span></a></h2><p>两个类型的通知：</p><ul><li>Key-space notification - 键空间通知 - 某个 key 执行了什么命令</li><li>Key-event notification - 键事件通知 - 某个命令被什么 key 执行了</li></ul>`,50)]))}const r=s(l,[["render",t],["__file","Chapter 9 - 数据库.html.vue"]]),d=JSON.parse('{"path":"/redis-implementation-notes/Part%202%20-%20%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0/Chapter%209%20-%20%E6%95%B0%E6%8D%AE%E5%BA%93.html","title":"Chapter 9 - 数据库","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Databases","slug":"databases","link":"#databases","children":[]},{"level":2,"title":"Key Space","slug":"key-space","link":"#key-space","children":[]},{"level":2,"title":"Key Expiration","slug":"key-expiration","link":"#key-expiration","children":[]},{"level":2,"title":"Removing Strategy Candidate","slug":"removing-strategy-candidate","link":"#removing-strategy-candidate","children":[{"level":3,"title":"定时删除","slug":"定时删除","link":"#定时删除","children":[]},{"level":3,"title":"惰性删除","slug":"惰性删除","link":"#惰性删除","children":[]},{"level":3,"title":"定期删除","slug":"定期删除","link":"#定期删除","children":[]}]},{"level":2,"title":"Removing Strategy Implementation","slug":"removing-strategy-implementation","link":"#removing-strategy-implementation","children":[{"level":3,"title":"惰性删除实现","slug":"惰性删除实现","link":"#惰性删除实现","children":[]},{"level":3,"title":"定期删除实现","slug":"定期删除实现","link":"#定期删除实现","children":[]}]},{"level":2,"title":"持久化过期策略","slug":"持久化过期策略","link":"#持久化过期策略","children":[]},{"level":2,"title":"数据库通知","slug":"数据库通知","link":"#数据库通知","children":[]}],"git":{},"filePathRelative":"redis-implementation-notes/Part 2 - 单机数据库的实现/Chapter 9 - 数据库.md"}');export{r as comp,d as data};
