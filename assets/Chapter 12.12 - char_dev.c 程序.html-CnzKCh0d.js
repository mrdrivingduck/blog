import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-12-char-dev-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-12-char-dev-c-程序"><span>Chapter 12.12 - char_dev.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 15 20:13</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-12-char-dev-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-12-char-dev-c-程序"><span>12.12 char_dev.c 程序</span></a></h2><h3 id="_12-12-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-12-1-功能描述"><span>12.12.1 功能描述</span></a></h3><p>包含各个字符设备文件的访问函数，另还有一个设备读写函数指针表。</p><h3 id="_12-12-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-12-2-代码注释"><span>12.12.2 代码注释</span></a></h3><h4 id="rw-ttyx-串口终端读写操作函数" tabindex="-1"><a class="header-anchor" href="#rw-ttyx-串口终端读写操作函数"><span>rw_ttyx() - 串口终端读写操作函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_ttyx</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rw <span class="token operator">==</span> READ<span class="token punctuation">)</span> <span class="token operator">?</span></span>
<span class="line">            <span class="token function">tty_read</span><span class="token punctuation">(</span>minor<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">:</span></span>
<span class="line">            <span class="token function">tty_write</span><span class="token punctuation">(</span>minor<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rw-tty-控制台终端读写操作函数" tabindex="-1"><a class="header-anchor" href="#rw-tty-控制台终端读写操作函数"><span>rw_tty() - 控制台终端读写操作函数</span></a></h4><p>基本同上，但需要对进程是否有 <strong>控制终端</strong> 进行检测。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_tty</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tty <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">rw_ttyx</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>tty<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rw-ram-内存数据读写函数-未实现" tabindex="-1"><a class="header-anchor" href="#rw-ram-内存数据读写函数-未实现"><span>rw_ram() - 内存数据读写函数 - 未实现</span></a></h4><h4 id="rw-mem-物理内存数据读写函数-未实现" tabindex="-1"><a class="header-anchor" href="#rw-mem-物理内存数据读写函数-未实现"><span>rw_mem() - 物理内存数据读写函数 - 未实现</span></a></h4><h4 id="rw-kmem-内核虚拟内存数据读写函数-未实现" tabindex="-1"><a class="header-anchor" href="#rw-kmem-内核虚拟内存数据读写函数-未实现"><span>rw_kmem() - 内核虚拟内存数据读写函数 - 未实现</span></a></h4><h4 id="rw-port-端口读写操作函数" tabindex="-1"><a class="header-anchor" href="#rw-port-端口读写操作函数"><span>rw_port() - 端口读写操作函数</span></a></h4><p><code>pos</code> 为端口地址</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_port</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">*</span>pos<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 端口地址小于 64k</span></span>
<span class="line">    <span class="token comment">// 还有数据需要操作</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READ<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// ??</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    i <span class="token operator">-=</span> <span class="token operator">*</span>pos<span class="token punctuation">;</span> <span class="token comment">// i 为读/写的字节数</span></span>
<span class="line">    <span class="token operator">*</span>pos <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rw-memory-内存读写操作函数" tabindex="-1"><a class="header-anchor" href="#rw-memory-内存读写操作函数"><span>rw_memory() - 内存读写操作函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rw_memory</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 内存主设备号为 1</span></span>
<span class="line">    <span class="token comment">// 根据内存设备的子设备号</span></span>
<span class="line">    <span class="token comment">// 调用不同的内存读写函数</span></span>
<span class="line">    <span class="token keyword">switch</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">// /dev/ram0 或 /dev/ramdisk</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">rw_ram</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// /dev/ram1 或 /dev/mem 或 ram</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">rw_mem</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">// /dev/ram2 或 /dev/kmem</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">rw_kmem</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment">// /dev/null</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READ<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> count<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token comment">// /dev/port</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">rw_port</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rw-char-字符设备读写操作函数" tabindex="-1"><a class="header-anchor" href="#rw-char-字符设备读写操作函数"><span>rw_char() - 字符设备读写操作函数</span></a></h4><p>根据设备的主设备号，分别调用对应的 <strong>字符设备读写函数指针表</strong> 中的函数。字符设备读写函数指针的定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token punctuation">(</span><span class="token operator">*</span>crw_ptr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> minor<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>字符设备读写函数指针表：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> crw_ptr crw_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// /dev/null</span></span>
<span class="line">    rw_memory<span class="token punctuation">,</span> <span class="token comment">// /dev/mem</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// /dev/fd</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// /dev/hd</span></span>
<span class="line">    rw_ttyx<span class="token punctuation">,</span> <span class="token comment">// /dev/ttyx</span></span>
<span class="line">    rw_tty<span class="token punctuation">,</span> <span class="token comment">// /dev/tty</span></span>
<span class="line">    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// /dev/lp</span></span>
<span class="line">    <span class="token constant">NULL</span> <span class="token comment">// 未命名管道</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>系统中的设备种数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NRDEVS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>crw_table<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>crw_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>字符设备读写操作函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">rw_char</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    crw_ptr call_addr<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> NRDEVS<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 设备号超出系统设备数</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>call_addr <span class="token operator">=</span> crw_table<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 设备没有读写函数</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">call_addr</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token function">MINOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>从层次上来看，在对字符设备的上层调用中，需要提供设备号。接口函数根据设备的 <strong>主设备号</strong>，找到对应设备的读写函数指针，然后将 <strong>子设备号</strong> 传入各类设备的读写子函数中，在读写子函数中进入不同的分支逻辑。</p>`,34)]))}const i=s(t,[["render",c],["__file","Chapter 12.12 - char_dev.c 程序.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.12%20-%20char_dev.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.12 - char_dev.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.12 char_dev.c 程序","slug":"_12-12-char-dev-c-程序","link":"#_12-12-char-dev-c-程序","children":[{"level":3,"title":"12.12.1 功能描述","slug":"_12-12-1-功能描述","link":"#_12-12-1-功能描述","children":[]},{"level":3,"title":"12.12.2 代码注释","slug":"_12-12-2-代码注释","link":"#_12-12-2-代码注释","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.12 - char_dev.c 程序.md"}');export{i as comp,r as data};
