import{_ as i,c as s,a as d,o as l}from"./app-7eKjwDat.js";const o={};function c(n,e){return l(),s("div",null,e[0]||(e[0]=[d(`<h1 id="linux-user-id" tabindex="-1"><a class="header-anchor" href="#linux-user-id"><span>Linux - User ID</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 03 / 10 16:49</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="user-id-in-files" tabindex="-1"><a class="header-anchor" href="#user-id-in-files"><span>User ID in Files</span></a></h2><p>查看一个文件的信息：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ ls -alt README.md</span>
<span class="line">-rw-r--r-- 1 mrdrivingduck mrdrivingduck 18596 Mar  9 22:22 README.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，其中的信息包含：</p><ul><li>文件类型 <ul><li><code>-</code>：常规文件</li><li><code>d</code>：目录名</li><li><code>s</code>：符号链接</li><li><code>p</code>：命名管道</li><li><code>c</code>：字符设备文件</li><li><code>b</code>：块设备文件</li></ul></li><li>文件宿主 / 文件宿主所在组 / 其它用户 对当前文件的操作权限</li><li>链接计数</li><li>文件宿主用户名</li><li>文件宿主组名</li><li>文件大小</li><li>最后修改时间</li><li>文件名</li></ul><p>以上信息全部包含在 inode 的结点定义中：</p><ul><li><code>i_mode</code>：文件类型和权限</li><li><code>i_nlinks</code>：链接数 (多少个文件目录项指向当前 inode)</li><li><code>i_uid</code>：文件宿主的用户 id</li><li><code>i_gid</code>：文件宿主的组 id</li><li><code>i_size</code>：文件长度</li><li><code>i_mtime</code>：文件修改时间</li><li><code>i_zone[9]</code>：指向该文件使用的磁盘块</li></ul><p>文件名保存在以目录项为内容的磁盘块中。</p><p>其中，<code>i_mode</code> 是一个 16-bit 的数，其定义如下：</p><ul><li>bit 15-12 表示文件类型</li><li>bit 11-9 是特殊标志位： <ul><li><code>01</code> - 执行时设置用户 ID <strong>(set-user-ID)</strong></li><li><code>02</code> - 执行时设置组 ID <strong>(set-group-ID)</strong></li><li><code>04</code> - 目录的受限删除标志</li></ul></li><li>bit 8-6 为文件宿主的 R/W/X 权限</li><li>bit 5-3 为文件宿主所在组的 R/W/X 权限</li><li>bit 2-0 为其它用户的 R/W/X 权限</li></ul><h2 id="user-id-of-users" tabindex="-1"><a class="header-anchor" href="#user-id-of-users"><span>User ID of Users</span></a></h2><p>Linux 中一个用户具有以下两个 ID：</p><ul><li>(真实) 用户 ID ((r)uid)</li><li>(真实) 用户组 ID ((r)gid)</li></ul><p>对应的 ID 存放在 <code>/etc/passwd</code> 文件中，除了包含用户的两个 ID 外，还包含了：</p><ul><li>用户的默认工作目录</li><li>用户的默认 shell</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">mrdrivingduck:x:1000:1000:,,,:/home/mrdrivingduck:/usr/bin/zsh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="user-id-of-processes" tabindex="-1"><a class="header-anchor" href="#user-id-of-processes"><span>User ID of Processes</span></a></h2><p>每个进程启动时，进程数据结构中会分别记录三种用户 ID 和三种组 ID：</p><ul><li>(r)uid / (r)gid：拥有进程的 (真实) 用户 ID / (真实) 组 ID</li><li>euid / egid：有效用户 ID / 有效组 ID</li><li>suid / sgid：保存用户 ID / 保存组 ID</li></ul><p><code>ruid</code> / <code>rgid</code> 是启动进程的用户对应的用户 ID 和组 ID。<strong><code>euid</code> / <code>egid</code> 用于进程访问文件时的权限判断</strong>。通常来说，<code>euid</code> / <code>egid</code> 就是进程的 <code>ruid</code> / <code>rgid</code>。因此，进程只能访问进程有效用户 (真实用户) (组) 允许访问的文件。</p><p>当进程对应的可执行文件中 <code>set-user-ID</code> / <code>set-group-ID</code> 置位时，<code>suid</code> / <code>sgid</code> 保存了 <strong>可执行文件的宿主用户 ID</strong>；否则，<code>suid</code> / <code>sgid</code> 等于进程的 <code>euid</code> / <code>egid</code>。在面对这类设置了标志位的特殊的可执行文件时，进程的 <code>euid</code> / <code>egid</code> 被设置为 <code>suid</code> / <code>sgid</code>，从而使进程可以以可执行文件宿主的权限访问文件。</p><p>典型例子：Linux 中的 <code>passwd</code> 命令。该命令的可执行文件权限如下：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ ls -alt /usr/bin/passwd</span>
<span class="line">-rwsr-xr-x 1 root root 68208 May 28  2020 /usr/bin/passwd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，该可执行文件的宿主是 root 用户。该程序的功能是允许用户修改自己的口令，口令需要保存到 <code>/etc/passwd</code> 文件中：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ ls -alt /etc/passwd</span>
<span class="line">-rw-r--r-- 1 root root 1723 Jan 11 17:14 /etc/passwd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>该文件的宿主是 root 用户，并且只有 root 用户才有权限写入该文件。如果普通用户执行 <code>passwd</code> 程序，其 <code>euid</code> 将会是普通用户而不是 root，从而无法写入 <code>/etc/passwd</code> 文件。解决的方法是对 <code>passwd</code> 程序设置为 <code>set-user-ID</code>。当普通用户执行该程序时，其 <code>euid</code> 将会变为 root 用户，从而有权限对 <code>/etc/passwd</code> 文件进行写入。</p><p>使用 <code>set-user-ID</code> 的还有 <code>sudo</code>、<code>su</code> 等命令。</p><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p>Linux 内核完全注释 V5.0.1 - 8.10 sys.c 程序</p><p>Linux 内核完全注释 V5.0.1 - 12.1 文件系统 总体功能</p><hr>`,37)]))}const a=i(o,[["render",c],["__file","Linux User ID.html.vue"]]),t=JSON.parse('{"path":"/notes/Operating%20System/Linux%20User%20ID.html","title":"Linux - User ID","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"User ID in Files","slug":"user-id-in-files","link":"#user-id-in-files","children":[]},{"level":2,"title":"User ID of Users","slug":"user-id-of-users","link":"#user-id-of-users","children":[]},{"level":2,"title":"User ID of Processes","slug":"user-id-of-processes","link":"#user-id-of-processes","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Operating System/Linux User ID.md"}');export{a as comp,t as data};
