import{_ as n,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function c(o,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-4-5-stack" tabindex="-1"><a class="header-anchor" href="#chapter-4-5-stack"><span>Chapter 4.5 - stack</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 04 14:44 🍀</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_4-5-1-stack-概述" tabindex="-1"><a class="header-anchor" href="#_4-5-1-stack-概述"><span>4.5.1 stack 概述</span></a></h2><p>stack 是一种 FILO (First In Last Out) 的数据结构，只有一个出口。允许以下操作：</p><ul><li>新增元素</li><li>移除元素</li><li>取得最顶端元素</li></ul><p>此外，没有其它方法可以存取 stack 中的元素，也没有遍历操作。</p><h2 id="_4-5-2-stack-定义完整列表" tabindex="-1"><a class="header-anchor" href="#_4-5-2-stack-定义完整列表"><span>4.5.2 stack 定义完整列表</span></a></h2><p>deque 是双向开口的数据结构。如果以 deque 为底层结构，封闭 deque 的头部开口，就形成了一个 stack。SGI STL 默认以 deque 为 stack 的底层结构。stack 的所有 API 都由底层数据结构的 API 来实现，只不过屏蔽了某些底层结构的 API (比如头部开口)。具有这种 <em>修改某物接口，形成另一种风貌</em> 性质的结构被称为 <strong>adapter (适配器)</strong>。STL 中的 stack 通常不被归类为容器 (container)，而是容器适配器 (container adapter)。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Sequence</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>deque<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token comment">// deque</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">stack</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Sequence</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">stack</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// requirements:</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Assignable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Sequence<span class="token punctuation">,</span> _BackInsertionSequence<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type _Sequence_value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Sequence_value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__STL_MEMBER_TEMPLATES</span></span></span>
<span class="line">  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Seq1</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Seq1</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">,</span></span>
<span class="line">                         <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp1<span class="token punctuation">,</span> _Seq1<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">/* __STL_MEMBER_TEMPLATES */</span></span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> __STD_QUALIFIER</span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">==</span> <span class="token function">__STL_NULL_TMPL_ARGS</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">bool</span> __STD_QUALIFIER</span>
<span class="line">  <span class="token keyword">operator</span><span class="token operator">&lt;</span> <span class="token function">__STL_NULL_TMPL_ARGS</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __STL_MEMBER_TEMPLATES */</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type      value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type       size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span>          _Sequence                  container_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference       reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Sequence c<span class="token punctuation">;</span> <span class="token comment">// 底层容器</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">stack</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Sequence<span class="token operator">&amp;</span> __s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span>__s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 以下 API 全部转而调用底层容器的 API 实现相应功能</span></span>
<span class="line">  <span class="token comment">// 只暴露底层容器的尾部接口</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  const_reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运算符重载也直接调用底层容器的运算符：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Seq</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Seq<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Seq<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">==</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Seq</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Seq<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Seq<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-5-3-stack-没有迭代器" tabindex="-1"><a class="header-anchor" href="#_4-5-3-stack-没有迭代器"><span>4.5.3 stack 没有迭代器</span></a></h2><p>stack 不提供遍历功能，也不提供迭代器。</p><h2 id="_4-5-4-以-list-作为-stack-的底层容器" tabindex="-1"><a class="header-anchor" href="#_4-5-4-以-list-作为-stack-的底层容器"><span>4.5.4 以 list 作为 stack 的底层容器</span></a></h2><p>list 也是双向开口的结构，并且 stack 使用的底层容器操作 <code>empty()</code> / <code>size()</code> / <code>back()</code> / <code>push_back()</code> / <code>pop_back()</code> list 也都有。因此也可以使用 list 作为 stack 的底层结构：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> list_stack<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,20)]))}const i=n(t,[["render",c],["__file","Chapter 4.5 - stack.html.vue"]]),k=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%204%20-%20%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%204.5%20-%20stack.html","title":"Chapter 4.5 - stack","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.5.1 stack 概述","slug":"_4-5-1-stack-概述","link":"#_4-5-1-stack-概述","children":[]},{"level":2,"title":"4.5.2 stack 定义完整列表","slug":"_4-5-2-stack-定义完整列表","link":"#_4-5-2-stack-定义完整列表","children":[]},{"level":2,"title":"4.5.3 stack 没有迭代器","slug":"_4-5-3-stack-没有迭代器","link":"#_4-5-3-stack-没有迭代器","children":[]},{"level":2,"title":"4.5.4 以 list 作为 stack 的底层容器","slug":"_4-5-4-以-list-作为-stack-的底层容器","link":"#_4-5-4-以-list-作为-stack-的底层容器","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 4 - 序列式容器/Chapter 4.5 - stack.md"}');export{i as comp,k as data};
