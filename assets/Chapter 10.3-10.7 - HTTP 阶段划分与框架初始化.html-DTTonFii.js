import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="chapter-10-3-10-7-http-阶段划分与框架初始化" tabindex="-1"><a class="header-anchor" href="#chapter-10-3-10-7-http-阶段划分与框架初始化"><span>Chapter 10.3-10.7 - HTTP 阶段划分与框架初始化</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 07 / 29 20:57</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_10-3-监听端口的管理" tabindex="-1"><a class="header-anchor" href="#_10-3-监听端口的管理"><span>10.3 监听端口的管理</span></a></h2><p>监听端口是由 <code>server{}</code> 块下的 <code>listen</code> 配置项决定的。每监听一个 TCP 端口，都将使用一个独立的 <code>ngx_http_conf_port_t</code> 结构体来表示，这个结构体由全局配置 <code>ngx_http_core_main_conf_t</code> 引用：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                servers<span class="token punctuation">;</span>         <span class="token comment">/* ngx_http_core_srv_conf_t */</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_http_phase_engine_t</span>    phase_engine<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_hash_t</span>                 headers_in_hash<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_hash_t</span>                 variables_hash<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                variables<span class="token punctuation">;</span>         <span class="token comment">/* ngx_http_variable_t */</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                prefix_variables<span class="token punctuation">;</span>  <span class="token comment">/* ngx_http_variable_t */</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 ncaptures<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 server_names_hash_max_size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 server_names_hash_bucket_size<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 variables_hash_max_size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 variables_hash_bucket_size<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_hash_keys_arrays_t</span>    <span class="token operator">*</span>variables_keys<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>               <span class="token operator">*</span>ports<span class="token punctuation">;</span> <span class="token comment">// 所有的监听端口！！！</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_http_phase_t</span>           phases<span class="token punctuation">[</span>NGX_HTTP_LOG_PHASE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_core_main_conf_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>ports</code> 数组表示服务器监听的所有端口。每个端口的信息形式如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                  family<span class="token punctuation">;</span> <span class="token comment">// socket 地址家族</span></span>
<span class="line">    <span class="token class-name">in_port_t</span>                  port<span class="token punctuation">;</span> <span class="token comment">// 监听的端口号</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                addrs<span class="token punctuation">;</span>     <span class="token comment">/* array of ngx_http_conf_addr_t */</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_conf_port_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的 <code>addrs</code> 动态数组指向了监听的这个端口的所有 <strong>地址</strong>。因为在 Nginx 中支持一台物理主机有多个 IP 地址。由此，一个 <code>ngx_http_conf_port_t</code> 将会对应多个 <code>ngx_http_conf_addr_t</code>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_http_listen_opt_t</span>      opt<span class="token punctuation">;</span> <span class="token comment">// 监听 socket 的属性</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 索引到 server{} 块下的配置，决定使用哪个虚拟主机的配置</span></span>
<span class="line">    <span class="token comment">// key 是 server name，value 是 ngx_http_core_srv_conf_t 结构体</span></span>
<span class="line">    <span class="token class-name">ngx_hash_t</span>                 hash<span class="token punctuation">;</span> <span class="token comment">// 完全匹配 server name 的 hash 表</span></span>
<span class="line">    <span class="token class-name">ngx_hash_wildcard_t</span>       <span class="token operator">*</span>wc_head<span class="token punctuation">;</span> <span class="token comment">// 通配符前置的 hash 表</span></span>
<span class="line">    <span class="token class-name">ngx_hash_wildcard_t</span>       <span class="token operator">*</span>wc_tail<span class="token punctuation">;</span> <span class="token comment">// 通配符后置的 hash 表</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_PCRE<span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 nregex<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_server_name_t</span>    <span class="token operator">*</span>regex<span class="token punctuation">;</span> <span class="token comment">// 静态数组，正则表达式及其匹配的 server{} 虚拟主机</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* the default server configuration for this address:port */</span></span>
<span class="line">    <span class="token class-name">ngx_http_core_srv_conf_t</span>  <span class="token operator">*</span>default_server<span class="token punctuation">;</span> <span class="token comment">// 该监听端口下默认的 server{} 虚拟主机</span></span>
<span class="line">    <span class="token comment">// 所有 server{} 虚拟主机对应的配置项</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                servers<span class="token punctuation">;</span>  <span class="token comment">/* array of ngx_http_core_srv_conf_t */</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_conf_addr_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对每一个 <code>ngx_http_conf_addr_t</code> (监听地址) 来说，都会有一个 <code>ngx_listening_t</code> 与其对应 - 其 <code>handler</code> 回调函数被设置为 <code>ngx_http_init_connection()</code> - 即 TCP 连接建立成功后，调用该函数初始化 HTTP 相关信息。</p><h2 id="_10-4-server-主机名-的快速检索" tabindex="-1"><a class="header-anchor" href="#_10-4-server-主机名-的快速检索"><span>10.4 Server (主机名) 的快速检索</span></a></h2><p>每个 <code>server{}</code> 虚拟主机的配置项都由一个 <code>ngx_http_core_src_conf_t</code> 结构体来表示，所有这样的结构体由全局配置结构体中的 <code>servers</code> 动态数组组织起来。当处理 HTTP 连接时，接收到 HTTP header 并取到 Host 后，理论上需要遍历动态数组，才能找到 server name 匹配的 <code>server{}</code> 块 - 时间复杂度太高！</p><p>Nginx 将所有 <code>server{}</code> 配置项结构体组织为 hash 表。Key 是 server name 字符串，value 是 <code>ngx_http_conf_addr_t</code> 结构体。这样能够快速检索相应的配置项。</p><h2 id="_10-5-location-uri-的快速检索" tabindex="-1"><a class="header-anchor" href="#_10-5-location-uri-的快速检索"><span>10.5 Location (URI) 的快速检索</span></a></h2><p>每个 <code>server{}</code> 块下都有多个 <code>location{}</code> 块，<code>location{}</code> 块中还可以嵌套 <code>location{}</code> 块。每一批 <code>location{}</code> 块由 <strong>双向链表</strong> 与父配置块 (<code>server{}</code> 或 <code>location{}</code>) 关联。那么在检索某个 URI 时，显然也需要遍历所有的 loc 配置块才行 - 时间复杂度太高！</p><p>Nginx 将双向链表中的所有的 loc 配置项按照 <strong>匹配字符串</strong> 进行排序。针对排序后的双向链表，快速构建 <strong>静态的二叉查找树</strong>。由于 <code>location{}</code> 块是可以递归的，因此这个建树操作也是递归的。</p><p>为什么没有构造红黑树呢？因为配置项在启动以后肯定是静态不变的，因此可以使用静态的完全平衡二叉树来组织，效率上会比红黑树更好。红黑树是查询效率和修改效率的折衷。</p><hr><h2 id="_10-6-http-请求的-11-个处理阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-http-请求的-11-个处理阶段"><span>10.6 HTTP 请求的 11 个处理阶段</span></a></h2><p>Nginx 的模块化设计使得每个 HTTP 模块专注于完成一个独立、简单的功能，一个请求的处理可以由无数多个 HTTP 模块共同完成。但是，如果模块处理请求的顺序是单一的，将无法满足灵活性需求。每一个处理请求的模块很难灵活地指定下一个处理模块是哪个。因此，HTTP 框架将处理流程划分为 11 个阶段，其中每个阶段都可以由任意多个 HTTP 模块流水式地处理请求。这 11 个阶段是有顺序的，有些阶段是必备的，有些阶段是可选的，也可以有多个模块介入同一阶段。</p><p>在全局配置项 <code>ngx_http_core_main_conf_t</code> 结构体中，有两个相关结构体：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_http_phase_engine_t</span> phase_engine<span class="token punctuation">;</span> <span class="token comment">// 各阶段的处理函数组成的数组</span></span>
<span class="line">    <span class="token class-name">ngx_http_phase_t</span> phases<span class="token punctuation">[</span>NGX_HTTP_LOG_PHASE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化时帮助 HTTP 模块添加处理函数</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_core_main_conf_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>phases</code> 是一个数组，数组中的每个元素都对应了一个 HTTP 阶段。每个元素的定义如下，含义为，每一个 HTTP 模块初始化时，添加到 <strong>该阶段</strong> 的所有处理函数。任何 HTTP 模块都可以在初始化时通过 <code>ngx_http_module_t</code> 接口的 <code>postconfiguration()</code> 函数将自定义的函数添加到 <code>handlers</code> 数组中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_array_t</span>                handlers<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_phase_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>phase_engine</code> 是一个 <code>ngx_http_phase_engine_t</code> 结构体。在初始化后，HTTP 框架将每个阶段的处理函数全部添加到下面的 <code>handlers</code> 中，表示一个请求可能经历的所有处理函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_http_phase_handler_t</span>  <span class="token operator">*</span>handlers<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// NGX_HTTP_SERVER_REWRITE_PHASE 阶段的第一个处理函数的 index</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 server_rewrite_index<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// NGX_HTTP_REWRITE_PHASE 阶段的第一个处理函数的 index</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 location_rewrite_index<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">ngx_http_phase_engine_t</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而具体每一个处理函数又是如何定义的呢？</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ngx_http_phase_handler_s</span>  <span class="token class-name">ngx_http_phase_handler_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ngx_http_phase_handler_s</span> <span class="token punctuation">{</span></span>
<span class="line">    ngx_http_phase_handler_pt  checker<span class="token punctuation">;</span></span>
<span class="line">    ngx_http_handler_pt        handler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_uint_t</span>                 next<span class="token punctuation">;</span> <span class="token comment">// 下一个 HTTP 处理阶段的序号</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">ngx_int_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>ngx_http_phase_handler_pt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token class-name">ngx_http_phase_handler_t</span> <span class="token operator">*</span>ph<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">ngx_int_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>ngx_http_handler_pt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理函数中定义了 <code>check()</code> 函数和 <code>handler()</code> 函数。HTTP 框架会在 <code>checker()</code> 函数已实现的前提下调用 <code>checker()</code> 函数来处理请求，在其中调用 <code>handler()</code> 函数 (而不是直接调用 <code>handler()</code>)。所有的 <code>checker()</code> 函数都是由 HTTP 的核心模块实现的，普通的 HTTP 模块无法重定义这个函数；除 HTTP 核心模块以外的模块，只能通过定义 <code>handler()</code> 函数介入请求处理的某个阶段。</p><h3 id="_10-6-2-ngx-http-post-read-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-2-ngx-http-post-read-phase-阶段"><span>10.6.2 NGX_HTTP_POST_READ_PHASE 阶段</span></a></h3><p>当 HTTP 框架在建立的 TCP 连接上接收到完整的 HTTP header 时，开始执行这个阶段的 <code>checker()</code> 函数。该阶段的 <code>checker()</code> 函数如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_http_core_generic_phase</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token class-name">ngx_http_phase_handler_t</span> <span class="token operator">*</span>ph<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>  rc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * generic phase checker,</span>
<span class="line">     * used by the post read and pre-access phases</span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;generic phase: %ui&quot;</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>phase_handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    rc <span class="token operator">=</span> ph<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用各 HTTP 模块添加的 handler 函数</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 进入下一个 HTTP 阶段，忽略当前阶段的其它 handler</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>phase_handler <span class="token operator">=</span> ph<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_DECLINED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 进入下一个 handler (可能是当前阶段，也可能是下一个阶段)</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>phase_handler<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_AGAIN <span class="token operator">||</span> rc <span class="token operator">==</span> NGX_DONE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 请求依旧停留在当前阶段中</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* rc == NGX_ERROR || rc == NGX_HTTP_...  */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果返回上述注释中的情况，那么结束请求</span></span>
<span class="line">    <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可见，<code>handler()</code> 的返回值会对 HTTP 的请求处理流程造成影响。在不同的 HTTP 处理阶段中，相同的返回值可能会有不一样的效果。</p><table><thead><tr><th>返回值</th><th>意义和行为</th></tr></thead><tbody><tr><td><code>NGX_OK</code></td><td>直接进入下一阶段，当前阶段的其它处理函数被忽略</td></tr><tr><td><code>NGX_DECLINED</code></td><td>按数组顺序执行下一个处理函数</td></tr><tr><td><code>NGX_AGAIN</code></td><td>当前处理函数有机会再次被调用，控制权被转交给事件模块</td></tr><tr><td><code>NGX_DONE</code></td><td>同上</td></tr><tr><td><code>NGX_ERROR</code></td><td>调用 <code>ngx_http_finalize_request()</code> 结束请求</td></tr><tr><td>其它</td><td>同上</td></tr></tbody></table><p>以一个官方模块 <code>ngx_http_realip_module</code> 为例，它的 <code>postconfiguration()</code> 函数中会把自定义的处理函数介入这个阶段。具体方式是，把处理函数添加到 <code>ngx_http_core_main_conf_t</code> 中 <code>phases[NGX_HTTP_POST_READ_PHASE]</code> 的 <code>handlers</code> 动态数组中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_http_realip_init</span><span class="token punctuation">(</span><span class="token class-name">ngx_conf_t</span> <span class="token operator">*</span>cf<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    ngx_http_handler_pt        <span class="token operator">*</span>h<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_core_main_conf_t</span>  <span class="token operator">*</span>cmcf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取全局配置项</span></span>
<span class="line">    cmcf <span class="token operator">=</span> <span class="token function">ngx_http_conf_get_module_main_conf</span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> ngx_http_core_module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取该阶段的 handlers 动态数组</span></span>
<span class="line">    h <span class="token operator">=</span> <span class="token function">ngx_array_push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmcf<span class="token operator">-&gt;</span>phases<span class="token punctuation">[</span>NGX_HTTP_POST_READ_PHASE<span class="token punctuation">]</span><span class="token punctuation">.</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 添加 handler</span></span>
<span class="line">    <span class="token operator">*</span>h <span class="token operator">=</span> ngx_http_realip_handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 这里把同一个函数添加到了另一个阶段中，这样是完全可以的</span></span>
<span class="line">    h <span class="token operator">=</span> <span class="token function">ngx_array_push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmcf<span class="token operator">-&gt;</span>phases<span class="token punctuation">[</span>NGX_HTTP_PREACCESS_PHASE<span class="token punctuation">]</span><span class="token punctuation">.</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">*</span>h <span class="token operator">=</span> ngx_http_realip_handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-6-3-ngx-http-server-rewrite-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-3-ngx-http-server-rewrite-phase-阶段"><span>10.6.3 NGX_HTTP_SERVER_REWRITE_PHASE 阶段</span></a></h3><p>该阶段用于在 URI 与 location 表达式匹配前，修改 URI (即所谓重定向)。该阶段不存在返回值可以使流程直接进入下一阶段。</p><table><thead><tr><th>返回值</th><th>意义和行为</th></tr></thead><tbody><tr><td><code>NGX_DONE</code></td><td>当前阶段尚未结束，控制权返回当前阶段</td></tr><tr><td><code>NGX_DECLINED</code></td><td>执行数组中的下一个处理函数</td></tr><tr><td><code>NGX_AGAIN</code></td><td>结束请求</td></tr><tr><td><code>NGX_DONE</code></td><td>同上</td></tr><tr><td><code>NGX_ERROR</code></td><td>同上</td></tr><tr><td>其它</td><td>同上</td></tr></tbody></table><h3 id="_10-6-4-ngx-http-find-config-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-4-ngx-http-find-config-phase-阶段"><span>10.6.4 NGX_HTTP_FIND_CONFIG_PHASE 阶段</span></a></h3><p>这个阶段不能被跳过，主要工作是根据请求的 URI 匹配 location 表达式，即使用 location 组成的静态平衡二叉树进行快速检索。任何 HTTP 模块无法向这一个阶段添加处理函数。</p><h3 id="_10-6-5-ngx-http-rewrite-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-5-ngx-http-rewrite-phase-阶段"><span>10.6.5 NGX_HTTP_REWRITE_PHASE 阶段</span></a></h3><p>这一阶段使请求在检索到 location 之后有机会再次修改 URL。因此与 <code>NGX_HTTP_SERVER_REWRITE_PHASE</code> 阶段逻辑类似，返回值含义也相同。</p><h3 id="_10-6-6-ngx-http-post-rewrite-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-6-ngx-http-post-rewrite-phase-阶段"><span>10.6.6 NGX_HTTP_POST_REWRITE_PHASE 阶段</span></a></h3><p>这一阶段也只能由 HTTP 框架实现，不允许 HTTP 模块向该阶段添加自定义的处理函数。主要工作是检查 <code>rewrite()</code> 重写 URL 的次数是否超过 10 次，防止死循环。</p><h3 id="_10-6-7-ngx-http-preaccess-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-7-ngx-http-preaccess-phase-阶段"><span>10.6.7 NGX_HTTP_PREACCESS_PHASE 阶段</span></a></h3><p>该阶段用于在决定请求的访问权限前，为 HTTP 模块提供机会介入。它的 <code>checker()</code> 函数也是 <code>ngx_http_core_generic_phase()</code>，因此返回值含义与 <code>NGX_HTTP_POST_READ_PHASE</code> 完全相同。</p><h3 id="_10-6-8-ngx-http-access-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-8-ngx-http-access-phase-阶段"><span>10.6.8 NGX_HTTP_ACCESS_PHASE 阶段</span></a></h3><p>该阶段用于让 HTTP 模块判断是否允许这个请求访问 Nginx 服务器。这个阶段使用了新的 <code>checker()</code> 函数，因此返回值有了新的含义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_http_core_access_phase</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token class-name">ngx_http_phase_handler_t</span> <span class="token operator">*</span>ph<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>                  rc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_core_loc_conf_t</span>  <span class="token operator">*</span>clcf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> r<span class="token operator">-&gt;</span>main<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>phase_handler <span class="token operator">=</span> ph<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;access phase: %ui&quot;</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>phase_handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调用处理函数</span></span>
<span class="line">    rc <span class="token operator">=</span> ph<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 按数组顺序执行下一个处理函数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_DECLINED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>phase_handler<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 控制权交还给事件模块，有机会被再次调用</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_AGAIN <span class="token operator">||</span> rc <span class="token operator">==</span> NGX_DONE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 取得全局配置项</span></span>
<span class="line">    clcf <span class="token operator">=</span> <span class="token function">ngx_http_get_module_loc_conf</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ngx_http_core_module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 配置项中的 satisfy 为 satisfy all</span></span>
<span class="line">    <span class="token comment">// 也就是说，需要满足每个处理函数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>clcf<span class="token operator">-&gt;</span>satisfy <span class="token operator">==</span> NGX_HTTP_SATISFY_ALL<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 按顺序执行下一个处理函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            r<span class="token operator">-&gt;</span>phase_handler<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// satisfy any，即在该阶段满足一个处理函数就 ok 了</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 直接执行下一个阶段的第一个处理函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            r<span class="token operator">-&gt;</span>access_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>headers_out<span class="token punctuation">.</span>www_authenticate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                r<span class="token operator">-&gt;</span>headers_out<span class="token punctuation">.</span>www_authenticate<span class="token operator">-&gt;</span>hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            r<span class="token operator">-&gt;</span>phase_handler <span class="token operator">=</span> ph<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 设置 access_code，然后按顺序执行下一个处理函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_HTTP_FORBIDDEN <span class="token operator">||</span> rc <span class="token operator">==</span> NGX_HTTP_UNAUTHORIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>access_code <span class="token operator">!=</span> NGX_HTTP_UNAUTHORIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                r<span class="token operator">-&gt;</span>access_code <span class="token operator">=</span> rc<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            r<span class="token operator">-&gt;</span>phase_handler<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* rc == NGX_ERROR || rc == NGX_HTTP_...  */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 到这里只可能被配置为 satisfy all，那么结束请求</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_HTTP_UNAUTHORIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">ngx_http_core_auth_delay</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值含义如代码中所示，就不列表了。这里可以看到，处理流程与配置文件中的 <code>satisfy</code> 配置项有着密切关系。<code>satisfy all</code> 意味着当前阶段的所有 <code>handler</code> 必须共同作用于这一个请求才行，因此在一个模块返回 <code>NGX_OK</code> 后，还要继续调用下一个模块的 <code>handler</code>；如果有一个 <code>handler</code> 没有返回 <code>NGX_OK</code>，那么就说明无权限访问，请求结束。<code>satisfy any</code> 的逻辑按照类似的方式理解即可。</p><h3 id="_10-6-9-ngx-http-post-access-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-9-ngx-http-post-access-phase-阶段"><span>10.6.9 NGX_HTTP_POST_ACCESS_PHASE 阶段</span></a></h3><p>这个阶段负责给上一个阶段收尾，向用户发送拒绝服务的响应。这个阶段只能由 HTTP 框架实现。该阶段的 <code>checker()</code> 函数如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_http_core_post_access_phase</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ngx_http_phase_handler_t</span> <span class="token operator">*</span>ph<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>  access_code<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;post access phase: %ui&quot;</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>phase_handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获得前一阶段中设置的 access code</span></span>
<span class="line">    access_code <span class="token operator">=</span> r<span class="token operator">-&gt;</span>access_code<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果 access code 不为 0，那么没有访问权限，结束请求</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>access_code<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>access_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>access_code <span class="token operator">==</span> NGX_HTTP_FORBIDDEN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;access forbidden by rule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>access_code <span class="token operator">==</span> NGX_HTTP_UNAUTHORIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">ngx_http_core_auth_delay</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> access_code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 否则继续执行下一个处理函数</span></span>
<span class="line">    r<span class="token operator">-&gt;</span>phase_handler<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-6-10-ngx-http-try-files-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-10-ngx-http-try-files-phase-阶段"><span>10.6.10 NGX_HTTP_TRY_FILES_PHASE 阶段</span></a></h3><p>这个阶段用于让 HTTP 请求访问静态资源，与 <code>try_files</code> 配置项密切相关。模块只能由 HTTP 框架实现。如果指定的静态文件资源中有一个可以访问，那么读取文件并发送响应给用户，不再执行后续阶段；如果所有静态文件资源都无法访问，那么再继续执行下一个处理函数。</p><blockquote><p>源代码咋没找到？？？</p></blockquote><h3 id="_10-6-11-ngx-http-content-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-11-ngx-http-content-phase-阶段"><span>10.6.11 NGX_HTTP_CONTENT_PHASE 阶段</span></a></h3><p>这是一个核心的 HTTP 阶段，大部分 HTTP 模块都愿意在这个阶段介入请求处理。原因有二：</p><ol><li>这样可以复用之前的所有基础性阶段的功能</li><li>该阶段向 HTTP 模块提供了两种介入方式</li></ol><p>第一种方式，也就是与其它阶段相同的方式，通过 <code>postconfiguration()</code> 函数向全局配置结构体中的 <code>phases[NGX_HTTP_CONTENT_PHASE]</code> 结构体的动态数组中添加处理函数。这样，处理函数会应用于 <strong>全部</strong> 的 HTTP 请求。</p><p>第二种方式，设置 <code>ngx_http_core_loc_conf_t</code> 结构体 (即每一个 <code>location{}</code> 块的配置结构体) 中的 <code>handler</code> 指针实现。这样，处理函数不再应用于所有的 HTTP 请求，仅当请求的 URI 匹配 <code>location{}</code> 块时才会被调用。</p><blockquote><p>由于 <code>location{}</code> 块的配置结构体中的 <code>handler</code> 是一个指针，而不是一个数组。因此，如果使用第二种方式介入 HTTP 请求的处理流程，在这个阶段将只能执行这一个处理函数！如果使用第一种方式，那么该阶段可以经由任意多个 HTTP 模块处理。</p><p>如果同时设置了两种处理方式，第二种方式的优先级更高，第一种方式的处理函数将不会生效。如果有多个 HTTP 模块都试图用第二种方式介入这一阶段，那么后面的配置项将有可能覆盖前面的配置项中的 <code>handler</code> 指针。</p></blockquote><p>该阶段的 <code>checker()</code> 函数如下：</p><blockquote><p>为了加快处理速度，HTTP 框架在 <code>NGX_HTTP_FIND_CONFIG_PHASE</code> 阶段就把请求 URL location 块中的 <code>handler</code> 设置到 <code>ngx_http_request_t</code> 结构体中的 <code>content_handler</code> 中。</p><p>如果设置了 <code>content_handler</code>，就优先以 <code>content_handler</code> 为准。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_http_core_content_phase</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ngx_http_phase_handler_t</span> <span class="token operator">*</span>ph<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">size_t</span>     root<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>  rc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_str_t</span>  path<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 优先使用 location 块中指定的处理函数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>content_handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 设置请求的写事件处理函数，防止 HTTP 模块异步处理请求时有其它 HTTP 模块在向客户端发送响应</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_request_empty_handler<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span><span class="token function">content_handler</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;content phase: %ui&quot;</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>phase_handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果没有 content_handler，那么再使用惯用方式</span></span>
<span class="line">    rc <span class="token operator">=</span> ph<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 没有返回 NGX_DECLINED，那么就不再执行该阶段的其它 handler</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">!=</span> NGX_DECLINED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* rc == NGX_DECLINED */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// NGX_DECLINED 有点 &quot;意犹未尽&quot; 的意思，想立刻执行下一个函数</span></span>
<span class="line">    ph<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 确认当前函数是否是当前阶段的最后一个函数</span></span>
<span class="line">    <span class="token comment">// ?</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ph<span class="token operator">-&gt;</span>checker<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        r<span class="token operator">-&gt;</span>phase_handler<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_AGAIN<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* no content handler was found */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTP 403</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>uri<span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token operator">-&gt;</span>uri<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_map_uri_to_path</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;directory index of \\&quot;%s\\&quot; is forbidden&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_FORBIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;no handler found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HTTP 404</span></span>
<span class="line">    <span class="token function">ngx_http_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-6-12-ngx-http-log-phase-阶段" tabindex="-1"><a class="header-anchor" href="#_10-6-12-ngx-http-log-phase-阶段"><span>10.6.12 NGX_HTTP_LOG_PHASE 阶段</span></a></h3><p>这个阶段用于记录日志，并做一些共性的收尾工作。使用的 <code>checker()</code> 函数为 <code>ngx_http_core_generic_phase()</code>。</p><hr><h2 id="_10-7-http-框架的初始化流程" tabindex="-1"><a class="header-anchor" href="#_10-7-http-框架的初始化流程"><span>10.7 HTTP 框架的初始化流程</span></a></h2><p>当配置文件中出现了 <code>http{}</code> 块时，就回调 <code>ngx_http_block()</code> 函数，其中包含了 HTTP 框架的初始化流程：</p><ol><li>由 0 开始递增地设置所有 HTTP 模块地 <code>ctx_index</code> 字段 (第几个 HTTP 模块)</li><li>初始化到 <code>http{}</code> 块时，产生 <code>ngx_http_conf_ctx_t</code> 结构体 (里面包含三个等级的配置项数组指针)</li><li>依次调用所有模块的 <code>create_main_conf()</code> 函数，初始化 <code>main_conf</code> 数组</li><li>依次调用所有模块的 <code>create_srv_conf()</code> 函数，初始化 <code>srv_conf</code> 数组</li><li>依次调用所有模块的 <code>create_loc_conf()</code> 函数，初始化 <code>loc_conf</code> 数组</li><li>依次调用所有模块的 <code>preconfiguration()</code> 函数</li><li>解析 <code>http{}</code> 块下的 main 级别配置项 - 其中会遇到 <code>server{}</code> 块、<code>location{}</code> 块，都会触发相应的解析函数</li><li>依次调用所有模块的 <code>init_main_conf()</code> 函数</li><li>调用 <code>ngx_http_merge_servers()</code> 函数合并配置项</li><li>创建 <code>location{}</code> 块组成的平衡 BST</li><li>将 <code>phase[]</code> 中可以由用户自行定义处理函数的 7 个阶段的 <code>handlers[]</code> 数组初始化</li><li>依次调用所有模块的 <code>postconfiguration()</code> 函数，将各阶段介入的 handler 加入 <code>phase[]</code> 中</li><li>遍历每个阶段的 <code>handlers</code>，将所有的处理函数构成 <code>phase_engine.handlers[]</code> 数组，放入全局配置结构体中</li><li>构造 <code>server{}</code> 中的虚拟主机通配符 hash 表</li><li>构造监听端口与 server 之间的联系，设置新连接回调函数为 <code>ngx_http_init_connection()</code></li></ol>`,75)]))}const o=s(t,[["render",c],["__file","Chapter 10.3-10.7 - HTTP 阶段划分与框架初始化.html.vue"]]),r=JSON.parse('{"path":"/understanding-nginx-notes/Part%203%20-%20%E6%B7%B1%E5%85%A5%20Nginx/Chapter%2010.3-10.7%20-%20HTTP%20%E9%98%B6%E6%AE%B5%E5%88%92%E5%88%86%E4%B8%8E%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96.html","title":"Chapter 10.3-10.7 - HTTP 阶段划分与框架初始化","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"10.3 监听端口的管理","slug":"_10-3-监听端口的管理","link":"#_10-3-监听端口的管理","children":[]},{"level":2,"title":"10.4 Server (主机名) 的快速检索","slug":"_10-4-server-主机名-的快速检索","link":"#_10-4-server-主机名-的快速检索","children":[]},{"level":2,"title":"10.5 Location (URI) 的快速检索","slug":"_10-5-location-uri-的快速检索","link":"#_10-5-location-uri-的快速检索","children":[]},{"level":2,"title":"10.6 HTTP 请求的 11 个处理阶段","slug":"_10-6-http-请求的-11-个处理阶段","link":"#_10-6-http-请求的-11-个处理阶段","children":[{"level":3,"title":"10.6.2 NGX_HTTP_POST_READ_PHASE 阶段","slug":"_10-6-2-ngx-http-post-read-phase-阶段","link":"#_10-6-2-ngx-http-post-read-phase-阶段","children":[]},{"level":3,"title":"10.6.3 NGX_HTTP_SERVER_REWRITE_PHASE 阶段","slug":"_10-6-3-ngx-http-server-rewrite-phase-阶段","link":"#_10-6-3-ngx-http-server-rewrite-phase-阶段","children":[]},{"level":3,"title":"10.6.4 NGX_HTTP_FIND_CONFIG_PHASE 阶段","slug":"_10-6-4-ngx-http-find-config-phase-阶段","link":"#_10-6-4-ngx-http-find-config-phase-阶段","children":[]},{"level":3,"title":"10.6.5 NGX_HTTP_REWRITE_PHASE 阶段","slug":"_10-6-5-ngx-http-rewrite-phase-阶段","link":"#_10-6-5-ngx-http-rewrite-phase-阶段","children":[]},{"level":3,"title":"10.6.6 NGX_HTTP_POST_REWRITE_PHASE 阶段","slug":"_10-6-6-ngx-http-post-rewrite-phase-阶段","link":"#_10-6-6-ngx-http-post-rewrite-phase-阶段","children":[]},{"level":3,"title":"10.6.7 NGX_HTTP_PREACCESS_PHASE 阶段","slug":"_10-6-7-ngx-http-preaccess-phase-阶段","link":"#_10-6-7-ngx-http-preaccess-phase-阶段","children":[]},{"level":3,"title":"10.6.8 NGX_HTTP_ACCESS_PHASE 阶段","slug":"_10-6-8-ngx-http-access-phase-阶段","link":"#_10-6-8-ngx-http-access-phase-阶段","children":[]},{"level":3,"title":"10.6.9 NGX_HTTP_POST_ACCESS_PHASE 阶段","slug":"_10-6-9-ngx-http-post-access-phase-阶段","link":"#_10-6-9-ngx-http-post-access-phase-阶段","children":[]},{"level":3,"title":"10.6.10 NGX_HTTP_TRY_FILES_PHASE 阶段","slug":"_10-6-10-ngx-http-try-files-phase-阶段","link":"#_10-6-10-ngx-http-try-files-phase-阶段","children":[]},{"level":3,"title":"10.6.11 NGX_HTTP_CONTENT_PHASE 阶段","slug":"_10-6-11-ngx-http-content-phase-阶段","link":"#_10-6-11-ngx-http-content-phase-阶段","children":[]},{"level":3,"title":"10.6.12 NGX_HTTP_LOG_PHASE 阶段","slug":"_10-6-12-ngx-http-log-phase-阶段","link":"#_10-6-12-ngx-http-log-phase-阶段","children":[]}]},{"level":2,"title":"10.7 HTTP 框架的初始化流程","slug":"_10-7-http-框架的初始化流程","link":"#_10-7-http-框架的初始化流程","children":[]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 3 - 深入 Nginx/Chapter 10.3-10.7 - HTTP 阶段划分与框架初始化.md"}');export{o as comp,r as data};
