import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/8-7-CpHCtjQk.png",c={};function l(o,n){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-8-6-sched-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-8-6-sched-c-程序"><span>Chapter 8.6 - sched.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 18 11:50</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_8-6-sched-c-程序" tabindex="-1"><a class="header-anchor" href="#_8-6-sched-c-程序"><span>8.6 sched.c 程序</span></a></h2><h3 id="_8-6-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_8-6-1-功能描述"><span>8.6.1 功能描述</span></a></h3><p>内核中有关任务 (进程) 调度管理的程序，包含：</p><ul><li>几个有关调度的基本函数</li><li>一些简单的系统调用</li><li>系统时钟中断的定时函数和软盘驱动器定时程序</li></ul><h4 id="_8-6-1-1-调度函数" tabindex="-1"><a class="header-anchor" href="#_8-6-1-1-调度函数"><span>8.6.1.1 调度函数</span></a></h4><p>调度函数 <code>schedule()</code> 负责选择系统中下一个要运行的任务。首先，对所有任务进行检测，唤醒任何一个已经得到信号的任务：</p><ul><li>检查报警器定时值 alarm，如果已经过时，就在信号位图中设置 <code>SIGALRM</code> 信号，清除 alarm</li><li>如果进程的信号位图中，除去被阻塞的信号外还有其它信号，并处于可中断睡眠状态 <code>TASK_RUNNING</code>，则置任务为就绪状态 <code>TASK_RUNNING</code></li></ul><p>随后是调度的核心部分。根据进程的 <strong>时间片</strong> 和 <strong>优先级</strong>，选择随后要执行的任务。并利用 <code>switch_to()</code> 切换到该任务。若所有就绪态任务的时间片都为 0，则根据任务的优先级重新设置每个任务的运行时间片。再次重新检查所有任务的时间片，并进行选择。</p><h4 id="_8-6-1-2-睡眠和唤醒函数" tabindex="-1"><a class="header-anchor" href="#_8-6-1-2-睡眠和唤醒函数"><span>8.6.1.2 睡眠和唤醒函数</span></a></h4><p><code>sleep_on()</code> 函数的主要功能：当一个进程所请求的资源 <strong>正被占用</strong> 或 <strong>不在内存</strong>，则暂时将该进程切换出去，放在等待队列中等待一段时间。</p><p>函数涉及三个任务指针的操作：</p><ul><li><code>*p</code>：等待队列头指针 <ul><li>文件系统中 <code>i_wait</code> 指针</li><li>内存缓冲中 <code>buffer_wait</code> 指针</li><li>...</li></ul></li><li><code>tmp</code>：存储在当前任务的内核态堆栈上，指向前一个正在等待的任务</li><li><code>current</code>：当前任务指针</li></ul><p><code>sleep_on()</code> 函数使 <code>*p</code> 指向当前任务，使当前任务的 <code>tmp</code> 指针指向 <code>*p</code> 原来指向的正在等待的任务。当几个进程为了等待同一资源而分别调用 <code>sleep_on()</code> 时，构筑出了一个等待队列：</p><p><img src="'+t+`" alt="8-7"></p><blockquote><p>这队列很奇怪 因为它好像不是 FIFO 的.. 😥，更像一个链式栈。<code>*p</code> 指向队尾 (栈顶)。后面看代码可以得知，这个数据结构是 FILO 的。</p></blockquote><p>将进程插入队列后，<code>sleep_on()</code> 函数就会调用 <code>schedule()</code> 函数去执行别的进程。当进程被唤醒时，就会把比它更早进入队列的进程唤醒。唤醒函数 <code>wake_up()</code> 用于把等待可用资源的指定任务置位就绪状态。</p><p><code>sleep_on()</code> 还有一种形式 - <code>interruptible_sleep_on()</code> 函数</p><ul><li>调度其它任务前，将当前任务置为 <strong>可中断等待状态</strong></li><li>在本任务被唤醒后，还需要判断队列上是否有后来的任务；若有，则需要先调度它们</li><li>Linux 0.12 中，这两种情况都由 <code>sleep_on()</code> 实现，用任务的状态作为参数区分这两种情况</li></ul><h3 id="_8-6-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_8-6-2-代码注释"><span>8.6.2 代码注释</span></a></h3><blockquote><p>进程调度和信号处理之间联系较多，所以我觉得要结合 <code>sys_call.s</code> 和 <code>signal.c</code> 一块儿看，才能加强理解。</p></blockquote><h4 id="信号操作宏" tabindex="-1"><a class="header-anchor" href="#信号操作宏"><span>信号操作宏</span></a></h4><p>首先定义了两个宏，用于快速操作信号。信号的编号是从 1 开始，到 32 为止；但信号在 bitmap 中是从第 0 位到第 31 位，所以要注意这个转变。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取编号为 nr 的信号在 bitmap 中的对应数值</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_S</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">// 除 SIGKILL 和 SIGSTOP 信号以外，其它信号是可以被阻塞的</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_BLOCKABLE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token function">_S</span><span class="token punctuation">(</span>SIGKILL<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">_S</span><span class="token punctuation">(</span>SIGSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于信号和阻塞的一点理解：内核通过在进程 PCB 中设置信号位来给进程发送信号，如果进程处于可中断睡眠状态，则设置信号位后唤醒进程；如果进程处于不可中断睡眠状态，则只设置信号位。进程处理信号的时机在其从内核态返回用户态时：</p><ul><li>收到信号后进程退出</li><li>进程忽略信号</li><li>捕捉某类信号 - 调用对应的信号处理函数</li></ul><p>一种可能的思路：向进程发送某个信号后，会将该信号的阻塞位置位；进程处理完该信号后，将该阻塞位复位。如果进程处理信号期间，又来了同样的信号，那么会被阻塞位给屏蔽掉，即丢弃 (所谓的不可靠信号)。可靠的信号处理形式：排队记录，那么就不存在丢弃的问题。</p></blockquote><p>OK，看代码，一开始是内核调试函数。</p><h4 id="显示各任务的详细信息" tabindex="-1"><a class="header-anchor" href="#显示各任务的详细信息"><span>显示各任务的详细信息</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">show_task</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">4096</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内核栈最大容量</span></span>
<span class="line">                                                <span class="token comment">// PCB 和内核态堆栈共占一页物理内存</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d: pid=%d, state=%d, father=%d, child=%d, &quot;</span><span class="token punctuation">,</span></span>
<span class="line">            nr<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>state<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>p_cptr <span class="token operator">?</span> p<span class="token operator">-&gt;</span>p_cptr<span class="token operator">-&gt;</span>pid <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 检测指定任务数据结构以后等于 0 的字节数 (大约)</span></span>
<span class="line">             <span class="token comment">// 即，内核态堆栈空闲字节数</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d chars free in kstack\\n\\r&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot; PC=%08X.&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1019</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>p_ysptr <span class="token operator">||</span> p<span class="token operator">-&gt;</span>p_osptr<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot; Younger sib=%d, older sib=%d\\n\\r&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                p<span class="token operator">-&gt;</span>p_ysptr <span class="token operator">?</span> p<span class="token operator">-&gt;</span>p_ysptr<span class="token operator">-&gt;</span>pid <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                p<span class="token operator">-&gt;</span>p_osptr <span class="token operator">?</span> p<span class="token operator">-&gt;</span>p_osptr<span class="token operator">-&gt;</span>pid <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">show_state</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;\\rTask-info:\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_TASKS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// NR_TASKS 为内核支持的最多任务数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 任务指针不为空 (任务存在)</span></span>
<span class="line">            <span class="token function">show_task</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据结构定义" tabindex="-1"><a class="header-anchor" href="#数据结构定义"><span>数据结构定义</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">union</span> task_union <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> task<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> stack<span class="token punctuation">[</span>PAGE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ???</span></span>
<span class="line"><span class="token comment">// union 大一上 C 语言课的时候一笔带过</span></span>
<span class="line"><span class="token comment">// 有空再弄明白这具体是个啥</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 任务 0 初始化</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">union</span> task_union init_task <span class="token operator">=</span> <span class="token punctuation">{</span> INIT_TASK<span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 初始化系统滴答</span></span>
<span class="line"><span class="token comment">// volatile 和编译器有关，需要有空弄弄明白</span></span>
<span class="line"><span class="token comment">// 系统滴答 10ms 一次，是系统时钟单位</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">volatile</span> jiffies <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 开机时间</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> startup_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 为调整时钟而需要增加的滴答数</span></span>
<span class="line"><span class="token keyword">int</span> jiffies_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当前任务指针，指向任务 0</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 上一个使用协处理器的任务指针</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>last_task_used_math <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// 定义任务指针数组，第一项被初始化为任务 0</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 任务 0 的用户态堆栈</span></span>
<span class="line"><span class="token comment">// 1K 项，共 4KB</span></span>
<span class="line"><span class="token keyword">long</span> user_stack<span class="token punctuation">[</span> PAGE_SIZE <span class="token operator">&gt;&gt;</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// SS:ESP</span></span>
<span class="line"><span class="token comment">// SS 的段选择符为内核数据段选择符 0x10</span></span>
<span class="line"><span class="token comment">// ESP 是逆向入栈的 (地址递减)，因此初始地址指向 user_stack 的最后一项</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">short</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> stack_start <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span> user_stack <span class="token punctuation">[</span> PAGE_SIZE <span class="token operator">&gt;&gt;</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是一个子函数，用于在任务被调度切换之后，保存原任务的协处理器状态，恢复新任务的协处理器状态。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">math_state_restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 任务没变，直接返回</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;fwait&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送协处理器指令之前要先发 WAIT 指令</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;fnsave %0&quot;</span><span class="token operator">::</span><span class="token string">&quot;m&quot;</span> <span class="token punctuation">(</span>last_task_used_math<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    last_task_used_math <span class="token operator">=</span> current<span class="token punctuation">;</span> <span class="token comment">// 指向当前任务</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>used_math<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当前任务使用过协处理器</span></span>
<span class="line">        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;frstor %0&quot;</span><span class="token operator">::</span><span class="token string">&quot;m&quot;</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复协处理器状态</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 首次使用协处理器</span></span>
<span class="line">        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;fninit&quot;</span><span class="token operator">::</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化协处理器</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>used_math <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 设置已使用协处理器标志</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调度函数-schedule" tabindex="-1"><a class="header-anchor" href="#调度函数-schedule"><span>调度函数 schedule()</span></a></h4><p>下面是最核心的 <code>schedule()</code> 函数 (会被很多地方调用到！)：</p><ul><li>调度进程</li><li>处理信号</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">,</span> next<span class="token punctuation">,</span> c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 首先检测各进程的定时器</span></span>
<span class="line">    <span class="token comment">// 唤醒已得到信号的可中断任务</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>timeout <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>timeout <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 已设置定时器 &amp;&amp; 已经超时</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 复位定时器</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_INTERRUPTIBLE<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 已设置 SIGALRM 信号 &amp;&amp; 已经超时</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 置 SIGALRM 信号</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKALBE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_INTERRUPTIBLE<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 信号 bitmap 中存在除被阻塞的信号外还有信号存在</span></span>
<span class="line">                <span class="token comment">// 且任务处于可中断等待状态</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 调度程序的主要部分</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数值最大的时间片</span></span>
<span class="line">        next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 下一个要调度的任务</span></span>
<span class="line">        i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span> <span class="token comment">// 任务 index</span></span>
<span class="line">        p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 最后一个任务项</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 从最后一个任务开始循环</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">&amp;</span><span class="token operator">--</span>p<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 跳过空槽</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">&gt;</span> c<span class="token punctuation">)</span></span>
<span class="line">                c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 有大于 0 的时间片，则跳出循环，将任务切换到 next</span></span>
<span class="line">        <span class="token comment">// 或没有一个可运行任务 (c == -1, next == 0)，则跳出循环，切换到任务 0</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 所有进程的时间片都为 0</span></span>
<span class="line">        <span class="token comment">// 根据优先级重新计算 counter</span></span>
<span class="line">        <span class="token comment">// counter = counter/2 + priority</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>counter <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>priority<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">switch_to</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务切换宏</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的各种函数中全部都使用了该 <code>schedule()</code> 函数。</p><h4 id="系统调用-pause" tabindex="-1"><a class="header-anchor" href="#系统调用-pause"><span>系统调用 pause()</span></a></h4><ul><li>将当前任务设定为可中断等待状态，并重新调度</li><li>(还没有完全实现？)</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="睡眠函数-sleep-on" tabindex="-1"><a class="header-anchor" href="#睡眠函数-sleep-on"><span>睡眠函数 sleep_on()</span></a></h4><ul><li>将当前任务置为 <strong>可中断睡眠状态</strong> 或 <strong>不可中断睡眠状态</strong></li><li>将等待队列头指针指向当前任务</li><li>参数 <code>state</code> 可以为 <code>TASK_UNINTERRUPTIBLE</code> 或 <code>TASK_INTERRUPTIBLE</code><ul><li>不可中断睡眠状态需要利用 <code>wake_up()</code> 函数明确唤醒</li><li>可中断睡眠状态可以通过信号、任务超时等手段唤醒</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token comment">// 指针所指对象可以为 NULL，但指针本身不会为 0</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;task[0] trying to sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 插入等待队列</span></span>
<span class="line">    tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span></span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新调度</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 任务被唤醒后，将从这里继续执行</span></span>
<span class="line">    <span class="token comment">// 如果等待队列头指针并非指向自己</span></span>
<span class="line">    <span class="token comment">// 说明之后还有进程进入了等待队列</span></span>
<span class="line">    <span class="token comment">// 先将队头置为就绪状态，将自身置为不可中断等待状态</span></span>
<span class="line">    <span class="token comment">// 队列中的进程使用 wake_up() 依次显式唤醒前一个任务</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 此时，任务被真正唤醒，*p == current</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>p<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Warning: *P = NULL\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">=</span> tmp<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 头指针指向队列中的前一个任务</span></span>
<span class="line">        <span class="token comment">// 如果该任务存在，则唤醒</span></span>
<span class="line">        <span class="token comment">// 等待队列头指针最终会变为 NULL</span></span>
<span class="line">        tmp<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 上述函数是接下来两个函数的实现函数：</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__sleep_on</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__sleep_on</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="唤醒函数-wake-up" tabindex="-1"><a class="header-anchor" href="#唤醒函数-wake-up"><span>唤醒函数 wake_up()</span></a></h4><p>唤醒不可中断等待任务。由于新等待任务插入在等待队列的头指针处，因此唤醒的是最后进入等待队列的任务：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">==</span> TASK_STOPPED<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;wake_up: TASK_STOPPED&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">==</span> TASK_ZOMBIE<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;wake_up: TASK_ZOMBIE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// TASK_RUNNING</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内核定时器" tabindex="-1"><a class="header-anchor" href="#内核定时器"><span>内核定时器</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIME_REQUESTS</span> <span class="token expression"><span class="token number">64</span> </span><span class="token comment">// 最多 64 个定时器</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> jiffies<span class="token punctuation">;</span>            <span class="token comment">// 定时滴答数</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 定时处理程序</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">// 指向下一个定时器</span></span>
<span class="line"><span class="token punctuation">}</span> timer_list<span class="token punctuation">[</span>TIME_REQUESTS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span> next_timer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 定时器队列头指针</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> jiffies<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token comment">// 处理程序指针为空</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关中断</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 定时器的值 ≤ 0，则立刻调用处理程序，不加入链表</span></span>
<span class="line">        <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 从定时器中找一个空闲项</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> timer_list<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> timer_list <span class="token operator">+</span> TIME_REQUESTS<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-&gt;</span>fn<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> timer_list <span class="token operator">+</span> TIME_REQUESTS<span class="token punctuation">)</span> <span class="token comment">// 定时器数组用完</span></span>
<span class="line">            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;No more time requests free&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> next_timer<span class="token punctuation">;</span></span>
<span class="line">        next_timer <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// 插入定时器队头</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 链表按定时值从小到大排序</span></span>
<span class="line">        <span class="token comment">// 排序时减去排在前面的定时器所需要的滴答数</span></span>
<span class="line">        <span class="token comment">// 处理定时器时，只需要查看表头的定时器是否到期</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies <span class="token operator">&lt;</span> p<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>jiffies <span class="token operator">-=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            fn <span class="token operator">=</span> p<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            jiffies <span class="token operator">=</span> p<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies<span class="token punctuation">;</span></span>
<span class="line">            p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开中断</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="时钟中断处理函数" tabindex="-1"><a class="header-anchor" href="#时钟中断处理函数"><span>时钟中断处理函数</span></a></h4><p>。由 <code>sys_call.s</code> 中的 <code>_timer_interrupt</code> 调用。调用时，会将当前 CPU 的 CPL 压入堆栈，作为函数参数，表示中断发生时，CPU 正在执行用户代码还是内核代码。执行计时更新操作，以及任务切换。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> cpl<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 黑屏操作</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">int</span> blanked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>blankcount <span class="token operator">||</span> <span class="token operator">!</span>blankinterval<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>blanked<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">unblank_screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>blankcount<span class="token punctuation">)</span></span>
<span class="line">            blankcount<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        blanked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>blanked<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">blank_screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        blanked <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 硬盘操作超时</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>hd_timeout<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>hd_timeout<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">hd_times_out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 扬声器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>beepcount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>beepcount<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果当前代码运行在内核态，则递增 stime</span></span>
<span class="line">    <span class="token comment">// 如果当前代码运行在用户态，则递增 utime</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cpl<span class="token punctuation">)</span> <span class="token comment">// cpl == 3</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>utime<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>stime<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果设置了内核定时器，则将第一个定时器的值 -1</span></span>
<span class="line">    <span class="token comment">// 如果已经到时，则调用相应处理程序，并移除定时器</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>next_timer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        next_timer<span class="token operator">-&gt;</span>jiffies<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>next_timer <span class="token operator">&amp;&amp;</span> next_timer<span class="token operator">-&gt;</span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            fn <span class="token operator">=</span> next_timer<span class="token operator">-&gt;</span>fn<span class="token punctuation">;</span></span>
<span class="line">            next_timer<span class="token operator">-&gt;</span>fn <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">            next_timer <span class="token operator">=</span> next_timer<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 删除队头</span></span>
<span class="line">            <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用定时处理函数</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 软盘</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_DOR <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">do_floppy_timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 当前进程时间片还没用完，继续执行</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>current<span class="token operator">-&gt;</span>counter<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cpl<span class="token punctuation">)</span> <span class="token comment">// 内核态程序，不依赖 counter 进行调度</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="与进程相关的几个系统调用" tabindex="-1"><a class="header-anchor" href="#与进程相关的几个系统调用"><span>与进程相关的几个系统调用</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 设定新定时时间，并返回原定时时间的剩余值</span></span>
<span class="line"><span class="token comment">// alarm 的时间单位是系统滴答，所以设计滴答和秒的单位转换</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_alarm</span><span class="token punctuation">(</span><span class="token keyword">long</span> seconds<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> old <span class="token operator">=</span> current<span class="token operator">-&gt;</span>alarm<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span></span>
<span class="line">        old <span class="token operator">=</span> <span class="token punctuation">(</span>old<span class="token operator">-</span>jiffies<span class="token punctuation">)</span> <span class="token operator">/</span> HZ<span class="token punctuation">;</span> <span class="token comment">// 剩余时间</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>alarm <span class="token operator">=</span> <span class="token punctuation">(</span>seconds <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>jiffies <span class="token operator">+</span> HZ <span class="token operator">*</span> seconds<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取当前进程号 pid</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> current<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取父进程号 ppid</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_getppid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> current<span class="token operator">-&gt;</span>p_pptr<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取用户号 uid</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_getuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> current<span class="token operator">-&gt;</span>uid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取有效用户号 euid</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_geteuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> current<span class="token operator">-&gt;</span>euid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取组号 gid</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_getgit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> current<span class="token operator">-&gt;</span>gid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 取有效的组号 egid</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_getegit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> current<span class="token operator">-&gt;</span>egid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 降低对 CPU 的使用权</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sys_nice</span><span class="token punctuation">(</span><span class="token keyword">long</span> increment<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>priority <span class="token operator">-</span> increment <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 防止优先权增大</span></span>
<span class="line">        current<span class="token operator">-&gt;</span>priority <span class="token operator">-=</span> increment<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内核调度初始化程序" tabindex="-1"><a class="header-anchor" href="#内核调度初始化程序"><span>内核调度初始化程序</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">sched_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">desc_struct</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">// 描述符表</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 兼容 POSIX 标准，并无实际意义</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Struct sigaction MUST be 16 bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 在 GDT 中设置 Task 0 的 TSS 和 LDT</span></span>
<span class="line">    <span class="token comment">// FIRST_TSS_ENTRY == 4</span></span>
<span class="line">    <span class="token comment">// FIRST_LDT_ENTRY == 5</span></span>
<span class="line">    <span class="token comment">// gdt 是一个描述符表数组</span></span>
<span class="line">    <span class="token function">set_tss_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>tss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_ldt_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_LDT_ENTRY<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化任务数组和描述符表项</span></span>
<span class="line">    p <span class="token operator">=</span> gdt <span class="token operator">+</span> FIRST_TSS_ENTRY <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 指向 GDT 第六项</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_TASKS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 跳过了 Task 0</span></span>
<span class="line">        task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>a <span class="token operator">=</span> p<span class="token operator">-&gt;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>a <span class="token operator">=</span> p<span class="token operator">-&gt;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 复位 NT 标志</span></span>
<span class="line">    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">&quot;pushfl; andl $0xffffbfff, (%esp); popfl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 加载 Task 0 的 TSS 和 LDT</span></span>
<span class="line">    <span class="token comment">// 只手动加载这一次，之后新任务的 LDT 由 CPU 根据 TSS 中的 LDT 项自动加载</span></span>
<span class="line">    <span class="token function">ltr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">lldt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始化 8253 定时器</span></span>
<span class="line">    <span class="token comment">// 通道 0，工作方式 3</span></span>
<span class="line">    <span class="token comment">// 输出引脚接在 8259 主芯片的 IRQ0 上</span></span>
<span class="line">    <span class="token comment">// 10ms 发出一次 IRQ0 请求</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb_p</span><span class="token punctuation">(</span>LATCH <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span>LATCH <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设置时钟中断门，修改中断控制器屏蔽码，允许时钟中断</span></span>
<span class="line">    <span class="token comment">// 设置系统调用中断门</span></span>
<span class="line">    <span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>timer_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>system_call<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,66)]))}const u=s(c,[["render",l],["__file","Chapter 8.6 - sched.c 程序.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%208%20-%20%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81/Chapter%208.6%20-%20sched.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 8.6 - sched.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.6 sched.c 程序","slug":"_8-6-sched-c-程序","link":"#_8-6-sched-c-程序","children":[{"level":3,"title":"8.6.1 功能描述","slug":"_8-6-1-功能描述","link":"#_8-6-1-功能描述","children":[]},{"level":3,"title":"8.6.2 代码注释","slug":"_8-6-2-代码注释","link":"#_8-6-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 8 - 内核代码/Chapter 8.6 - sched.c 程序.md"}');export{u as comp,r as data};
