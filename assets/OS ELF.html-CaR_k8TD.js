import{_ as n,c as a,a as s,o as l}from"./app-7eKjwDat.js";const t={};function o(i,e){return l(),a("div",null,e[0]||(e[0]=[s(`<h1 id="os-elf" tabindex="-1"><a class="header-anchor" href="#os-elf"><span>OS - ELF</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 26 0:26</p><p>Nanjing, Jiangsu, China</p><hr><blockquote><p>过去几个月也没少碰 ELF 文件，一些知识总结在了项目文档中。本文内容来自于 <em>程序员的自我修养 - 链接、装载与库，俞甲子 石凡 潘爱民著</em>。</p></blockquote><hr><h2 id="about-the-format" tabindex="-1"><a class="header-anchor" href="#about-the-format"><span>About the Format</span></a></h2><p>编译器编译后生成的文件叫做目标文件。从结构上讲，它已经符合可执行文件的格式，只是没有被链接，因此一些符号和地址可能还没有被调整。目前流行的可执行文件格式有 Windows 下的 PE (Portable Executable) 和 Linux 下的 ELF (Executable Linkable Format)，它们都是 COFF (Common File Format) 的变种。目标文件就是 Windows 下的 <code>.obj</code> 或 Linux 下的 <code>.o</code>，也基本使用了对应的可执行文件格式。另外，动态链接库 (<code>.dll</code> / <code>.so</code>) 与静态链接库 (<code>.lib</code> / <code>.a</code>) 也使用相同的格式。ELF 格式的文件分类就有以下几种：</p><ul><li>可重定位文件 (Relocatable File) - 目标文件</li><li>可执行文件 (Executable File)</li><li>共享目标文件 (Shared Object File)</li><li>核心转储文件 (Core Dump File)</li></ul><h2 id="sections" tabindex="-1"><a class="header-anchor" href="#sections"><span>Sections</span></a></h2><p>目标文件包含了机器代码、数据，另外还有一些符号表、调试信息、字符串等。目标文件将这些信息按不同的属性分段 (section) 存储。比如，指令分为一个段，数据分为一个段。</p><ul><li><code>.text</code> - 代码</li><li><code>.data</code> - 已初始化的全局变量和局部静态变量</li><li><code>.bss</code> - 未初始化的全局变量和局部静态变量 (只是预留位置，在文件中不占据空间)</li><li><code>.rodata</code> - 只读数据，支持 C++ 的 <code>const</code> 关键字</li></ul><p>分段的原因是，一般来说指令是只读的，数据是可读可写的，OS 可以将这两个区域的虚拟内存分别设置只读权限和可读写权限，防止程序指令被意外修改。另外，当系统中运行程序的多个副本时 (多进程)，指令是相同的，因而可以被共享。目前的 CPU cache 一般也都被设置为数据 cache 和指令 cache 分离。</p><p>文件中还有段表 (section table)，其中包含描述每一个段信息的段描述符。编译器、链接器、装载器依靠段表来定位和访问段属性。段描述符记录了除段具体内容以外的所有信息，对于编译器和链接器来说，主要关注段的 <strong>类型</strong> 和 <strong>标志位</strong>：</p><ul><li>在类型上，代码、数据都属于 <code>SHT_PROGBITS</code> (程序段)，另外还有字符串、符号、动态链接等段类型</li><li>在标志位上，<code>SHF_WRITE</code> (可写)，<code>SHF_ALLOC</code> (在进程中需要分配空间)，<code>SHF_EXECINSTR</code> (进程空间可执行)</li></ul><h3 id="relocation-table" tabindex="-1"><a class="header-anchor" href="#relocation-table"><span>Relocation Table</span></a></h3><p>对于需要重定位的段，ELF 中还有有类似 <code>.rel.*</code> 的 <strong>重定位表</strong>。如，<code>.text</code> 对应 <code>.rel.text</code>。重定位表段的类型为 <code>SHT_REL</code>，其中记录了代码段中的重定位信息。</p><h3 id="string-table" tabindex="-1"><a class="header-anchor" href="#string-table"><span>String Table</span></a></h3><p>ELF 中还有专门用于保存字符串的段，类型为 <code>SHT_STRTAB</code>。这样其它的 section 中可以通过引用该段中的下标来引用字符串。比如每个段的名称就被专门保存在一个段中。</p><hr><h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol"><span>Symbol</span></a></h2><p>在链接中，目标文件之间的相互拼合实际上是目标文件之间对函数和变量地址的引用。一个目标文件 <strong>定义</strong> 了变量或函数，另一个目标文件 <strong>引用</strong> 了变量或函数。每个函数和变量都有自己独特的名字，避免链接过程中与其它名称混淆。在链接中，函数和变量统称为 <strong>符号 (symbol)</strong>。</p><p>每个目标文件中都有一个符号表，每个符号对应一个符号值。对于变量和函数来说，符号值就是它们的地址。符号表中的符号可能用于：</p><ul><li>定义在本目标文件内的 <strong>全局符号</strong>，可被其它目标文件引用</li><li>本目标文件引用的 <strong>全局符号</strong>，而没有被定义在本目标文件 (外部符号)</li><li>段名</li><li>局部符号 (只在编译单元内部可见，对链接没有作用)</li><li>目标文件指令与代码行的对应关系</li></ul><p>其中，全局符号是链接过程最关注的部分。ELF 文件中的符号表是一个名为 <code>.symtab</code> 的段，是一个由多个符号结构体组成的数组。每个符号结构体记录的信息有，符号名、符号值、符号占据空间大小、符号类型和绑定信息、符号所在段等。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Elf64_Word	st_name<span class="token punctuation">;</span>		<span class="token comment">/* Symbol name (string tbl index) */</span></span>
<span class="line">  <span class="token keyword">unsigned</span> <span class="token keyword">char</span>	st_info<span class="token punctuation">;</span>		<span class="token comment">/* Symbol type and binding */</span></span>
<span class="line">  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> st_other<span class="token punctuation">;</span>		<span class="token comment">/* Symbol visibility */</span></span>
<span class="line">  Elf64_Section	st_shndx<span class="token punctuation">;</span>		<span class="token comment">/* Section index */</span></span>
<span class="line">  Elf64_Addr	st_value<span class="token punctuation">;</span>		<span class="token comment">/* Symbol value */</span></span>
<span class="line">  Elf64_Xword	st_size<span class="token punctuation">;</span>		<span class="token comment">/* Symbol size */</span></span>
<span class="line"><span class="token punctuation">}</span> Elf64_Sym<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过符号类型和绑定信息，可以确定符号是全局符号还是局部符号，符号是一个函数还是一个变量：</p><ul><li><code>STB_LOCAL</code></li><li><code>STB_GLOBAL</code></li><li><code>STB_WEAK</code></li></ul><p>通过符号所在段，可以判断符号是否定义在当前目标文件中：</p><ul><li>Section 下标</li><li><code>SHN_ABS</code> - 绝对值，如文件名</li><li><code>SHN_COMMON</code> - 未初始化的全局符号定义</li><li><code>SHN_UNDEF</code> - 符号在本目标文件中被引用，但定义在其它目标文件中</li></ul><p>另外，在链接器的链接脚本中还有一些特殊符号。程序并没有定义它们，但是可以直接声明它们并使用：</p><ul><li><code>__executable_start</code> - 程序起始地址</li><li><code>__etext</code> - 代码段结束地址</li><li><code>_edata</code> - 数据段结束地址</li><li><code>_end</code> - 程序结束地址</li></ul><h2 id="符号修饰与函数签名" tabindex="-1"><a class="header-anchor" href="#符号修饰与函数签名"><span>符号修饰与函数签名</span></a></h2><p>如果直接用函数名作为符号名，意味着要链接该库的目标文件中不能使用与该库中函数和变量相同的符号名，否则就会出现符号名冲突。C++ 在设计时就考虑到了这个问题，通过 name space 解决这个问题。</p><p>C++ 编译器在编译源代码时，会对函数和变量名进行 <strong>修饰</strong>，并作为符号名。该符号名中包含：</p><ul><li>函数名</li><li>函数参数类型</li><li>所在类与 name space</li><li>...</li></ul><p>不同的编译器的修饰方式各有不同。</p><hr><h2 id="debug-information" tabindex="-1"><a class="header-anchor" href="#debug-information"><span>Debug Information</span></a></h2><p>在编译时多加一个选项，可以在目标文件中生成很多个用于调试的段。这些信息可能会占用很大的空间，甚至比程序本身的代码和数据还大好几倍。当程序发布前，Linux 下可以使用 <code>strip</code> 去掉 ELF 文件中的调试信息。</p><hr>`,42)]))}const d=n(t,[["render",o],["__file","OS ELF.html.vue"]]),p=JSON.parse('{"path":"/notes/Operating%20System/OS%20ELF.html","title":"OS - ELF","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About the Format","slug":"about-the-format","link":"#about-the-format","children":[]},{"level":2,"title":"Sections","slug":"sections","link":"#sections","children":[{"level":3,"title":"Relocation Table","slug":"relocation-table","link":"#relocation-table","children":[]},{"level":3,"title":"String Table","slug":"string-table","link":"#string-table","children":[]}]},{"level":2,"title":"Symbol","slug":"symbol","link":"#symbol","children":[]},{"level":2,"title":"符号修饰与函数签名","slug":"符号修饰与函数签名","link":"#符号修饰与函数签名","children":[]},{"level":2,"title":"Debug Information","slug":"debug-information","link":"#debug-information","children":[]}],"git":{},"filePathRelative":"notes/Operating System/OS ELF.md"}');export{d as comp,p as data};
