import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(c,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="c-stl-set" tabindex="-1"><a class="header-anchor" href="#c-stl-set"><span>C++ STL set</span></a></h1><p>Created by : Mr Dk.</p><p>2018 / 03 / 30 23:27</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">set</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set 为集合容器，key 就是 value。容器中 key 值唯一，按照 key 值从小到大排列。底层实现为 <em>红黑树</em>，插入元素时不破坏顺序，若元素已存在，则插入失败。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment">// OR : std::set</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">set <span class="token operator">&lt;</span>key_type<span class="token operator">&gt;</span> set<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes"><span>Attributes</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> size <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 set 中的元素个数</span></span>
<span class="line"><span class="token keyword">bool</span> empty <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 set 是否为空</span></span>
<span class="line"><span class="token keyword">int</span> max_size <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 set 的最大容量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iterator" tabindex="-1"><a class="header-anchor" href="#iterator"><span>Iterator</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">set<span class="token operator">&lt;</span>key_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter<span class="token punctuation">;</span> <span class="token comment">// 正向迭代器</span></span>
<span class="line">iter <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向第一个元素的迭代器</span></span>
<span class="line">iter <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向最后一个元素下一个位置的迭代器</span></span>
<span class="line"></span>
<span class="line">set <span class="token operator">&lt;</span>key_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>reverse_iterator r_iter<span class="token punctuation">;</span> <span class="token comment">// 反向迭代器</span></span>
<span class="line">r_iter <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向最后一个元素的迭代器</span></span>
<span class="line">r_iter <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向第一个元素前一个位置的迭代器</span></span>
<span class="line"></span>
<span class="line">key_type key <span class="token operator">=</span> <span class="token operator">*</span>iter<span class="token punctuation">;</span> <span class="token comment">// 取得 key 值</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 遍历</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>iter<span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> set<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// *iter</span></span>
<span class="line">    <span class="token comment">// TO DO ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="search" tabindex="-1"><a class="header-anchor" href="#search"><span>Search</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iter <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 若没有找到 key ，则返回指向超尾元素的迭代器</span></span>
<span class="line"><span class="token comment">// 若找到 key ，则返回指向该 node 的迭代器</span></span>
<span class="line"><span class="token comment">// 时间复杂度基本为 log(set.size())</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">==</span> set<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Not Found</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Found</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 若 key 已存在，则插入失败</span></span>
<span class="line"><span class="token comment">// 新值不会覆盖旧值</span></span>
<span class="line"><span class="token comment">// 调用拷贝构造函数</span></span>
<span class="line">set<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 若需要获得插入状态</span></span>
<span class="line"><span class="token comment">// 返回的迭代器指向 set 中已存在的 key</span></span>
<span class="line"><span class="token comment">// 返回的 bool 表示插入是否成功</span></span>
<span class="line">pair<span class="token operator">&lt;</span>set <span class="token operator">&lt;</span>key_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span> res <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Insert failure</span></span>
<span class="line">    <span class="token comment">// TO DO ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deletion" tabindex="-1"><a class="header-anchor" href="#deletion"><span>Deletion</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">set<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除迭代器指向的 node</span></span>
<span class="line">set<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除指定的 key 值所对应的 node</span></span>
<span class="line">set<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>Iter1<span class="token punctuation">,</span> Iter2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除一个范围内的 node</span></span>
<span class="line">set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除所有元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="self-defined-keys" tabindex="-1"><a class="header-anchor" href="#self-defined-keys"><span>Self-Defined Keys</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// 由于 set 本身是有序的，因此需要 key 类型是可比较的。</span></span>
<span class="line"><span class="token comment">// 当使用自定义的 class 作为 key 时，需要 overload &lt; 运算符。</span></span>
<span class="line"><span class="token comment">// 在 overload 的写法上需要注意，千万不能漏掉 {} 之前的 const。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token comment">// Constructor</span></span>
<span class="line">    <span class="token comment">// Copy_Constructor (VERY IMPORTANT!!!)</span></span>
<span class="line">    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Class <span class="token operator">&amp;</span>cD<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// TO DO ...</span></span>
<span class="line">        <span class="token comment">// return true | return false;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>在 <em>并查集</em> 类算法题目中经常使用。</p>`,26)]))}const o=n(t,[["render",l],["__file","C__ STL set.html.vue"]]),r=JSON.parse('{"path":"/notes/C__/C__%20STL%20set.html","title":"C++ STL set","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]},{"level":2,"title":"Attributes","slug":"attributes","link":"#attributes","children":[]},{"level":2,"title":"Iterator","slug":"iterator","link":"#iterator","children":[]},{"level":2,"title":"Search","slug":"search","link":"#search","children":[]},{"level":2,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":2,"title":"Deletion","slug":"deletion","link":"#deletion","children":[]},{"level":2,"title":"Self-Defined Keys","slug":"self-defined-keys","link":"#self-defined-keys","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ STL set.md"}');export{o as comp,r as data};
