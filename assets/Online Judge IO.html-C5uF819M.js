import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const i={};function l(t,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="online-judge-i-o" tabindex="-1"><a class="header-anchor" href="#online-judge-i-o"><span>Online Judge - I/O</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 03 / 11 15:29</p><p>Nanjing, Jiangsu, China</p><hr><p>最近需要参加一些在线笔试。OJ 平台有以下两种模式：</p><ul><li>核心代码模式 (以 <em>LeetCode</em> 为例)：只需要编写核心函数，无需自行处理输入输出</li><li>ACM 模式：需要自行编写代码读取输入，打印输出</li></ul><p>对于 ACM 模式，特此记录各种处理输入的方式，防止笔试现场搞半天输入都处理不利索。</p><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h2><p>对于输入中明确给出了具体输入的规模的简单情况，就不多加记录了。将具体的输入规模读取后，根据这个数字进行循环，即可获得所有输入。以下记录一些输入规模不确定，或没有显式停止标志的处理方法。</p><h3 id="不确定输入的总组数-没有显式停止标志" tabindex="-1"><a class="header-anchor" href="#不确定输入的总组数-没有显式停止标志"><span>不确定输入的总组数，没有显式停止标志</span></a></h3><p>这种输入没有显式的停止标志，文件尾或 <code>Ctrl-Z</code> 就是隐式的停止符号。对于这种输入，如果每组输入的规模确定，可以直接使用 <code>while</code> + <code>cin</code> 处理。比如，以下每行输入两个整数，输入组数不确定：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1 2</span>
<span class="line">3 4</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到输入结束时，<code>while</code> 循环也将结束。</p><h3 id="不确定输入的总组数-有明确停止标志" tabindex="-1"><a class="header-anchor" href="#不确定输入的总组数-有明确停止标志"><span>不确定输入的总组数，有明确停止标志</span></a></h3><p>对于有明确停止标志的输入，可以在 <code>while</code> 的循环条件中顺带对停止标志加以判断。比如，以下每行输入两个整数，以两个 <code>0</code> 结尾：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1 2</span>
<span class="line">3 4</span>
<span class="line">... ...</span>
<span class="line">0 0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不确定输入总组数-不确定每行输入个数" tabindex="-1"><a class="header-anchor" href="#不确定输入总组数-不确定每行输入个数"><span>不确定输入总组数，不确定每行输入个数</span></a></h3><p>由于不确定输入总组数，因此肯定只能通过 <code>while</code> 对每行输入进行读取。现在的问题是，每个输入的个数也不确定，只有显式指定的分隔符 (比如 <code></code> 或 <code>,</code>)，或是隐式指定的结尾 (行尾换行符)。比如，每行不确定输入个数，输入之间用空格分隔：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1 2 3</span>
<span class="line">4 5</span>
<span class="line">...</span>
<span class="line">0 0 0 0 0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这种输入，处理方式为：首先用一个 <code>while</code> 每次读取输入的完整一行，作为外层循环；在内层循环中，对每一行的数据根据分隔符进行进一步分割。为了方便分割，可以使用 <code>getline()</code> 与 <code>stringstream</code> 配合：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span></span>
<span class="line"></span>
<span class="line">string line<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    stringstream <span class="token function">ss</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    string each_word<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> each_word<span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// deal with each_word ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getline()</code> 能够接受一个流作为参数，所以可以接受标准输入流 / 字符串流 / 文件流等。另外，<code>getline()</code> 会在遇到停止符号时截取字符串，<strong>并丢弃停止符号本身</strong>，然后添加上 <code>\\0</code> 后作为输出结果。默认的停止符号为换行符，但可以通过函数参数自行指定，另外，遇到字符串结尾、流结尾时自然也会结束。</p><p>上述代码中，外层循环中的 <code>getline()</code> 从标准输入流中获取一行输入，在遇到换行符时，抛弃掉换行符后，将已接收的一行字节数据保存在 <code>string</code> 对象中，即一行完整的数据。内层循环中的 <code>getline()</code> 从封装为 <code>stringstream</code> 流的字符串中获取输入，直到遇到指定的空格停止符，抛弃掉空格后，将输出保存到 <code>string</code> 对象中；当到达字符串流的中止符时，也自然停止并返回行内最后一个输入。</p><p>以上方式同样适用于每行输入中使用非空格分隔符。</p><h3 id="重定向输入" tabindex="-1"><a class="header-anchor" href="#重定向输入"><span>重定向输入</span></a></h3><p>每次重新运行程序进行测试时，都要手动输入数据，麻烦。将输入提前写在文件中，并将 <em>标准输入</em> 重定向到文件，就省得每次动手输入了。在程序中，仅需一行代码就可以实现输入重定向：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;input.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该函数原本定义在 <code>stdio.h</code> 中。在运行时，可根据环境使用 <code>&lt;stdio.h&gt;</code> (C) 或 <code>&lt;cstdio&gt;</code> (C++)。</p><p><strong>在提交前记得注释这一行！</strong></p><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://www.nowcoder.com/test/27976983/summary" target="_blank" rel="noopener noreferrer">牛客网 - OJ 在线编程常见输入输出练习</a></p><p><a href="https://blog.csdn.net/sxhelijian/article/details/8978850" target="_blank" rel="noopener noreferrer">CSDN - ACM 题目中输入数据的处理 (C++版)</a></p>`,38)]))}const o=s(i,[["render",l],["__file","Online Judge IO.html.vue"]]),d=JSON.parse('{"path":"/notes/Algorithm/Online%20Judge%20IO.html","title":"Online Judge - I/O","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"C++","slug":"c","link":"#c","children":[{"level":3,"title":"不确定输入的总组数，没有显式停止标志","slug":"不确定输入的总组数-没有显式停止标志","link":"#不确定输入的总组数-没有显式停止标志","children":[]},{"level":3,"title":"不确定输入的总组数，有明确停止标志","slug":"不确定输入的总组数-有明确停止标志","link":"#不确定输入的总组数-有明确停止标志","children":[]},{"level":3,"title":"不确定输入总组数，不确定每行输入个数","slug":"不确定输入总组数-不确定每行输入个数","link":"#不确定输入总组数-不确定每行输入个数","children":[]},{"level":3,"title":"重定向输入","slug":"重定向输入","link":"#重定向输入","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Algorithm/Online Judge IO.md"}');export{o as comp,d as data};
