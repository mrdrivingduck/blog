import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-2-3-内存基本处理工具" tabindex="-1"><a class="header-anchor" href="#chapter-2-3-内存基本处理工具"><span>Chapter 2.3 - 内存基本处理工具</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 01 22:35</p><p>Nanjing, Jiangsu, China</p><hr><ul><li><code>uninitialized_copy()</code> - 对应于高层算法 <code>copy()</code></li><li><code>uninitialized_fill()</code> - 对应于高层算法 <code>fill()</code></li><li><code>uninitialized_fill_n()</code> - 对应于高层算法 <code>fill_n()</code></li></ul><h2 id="_2-3-1-uninitialized-copy" tabindex="-1"><a class="header-anchor" href="#_2-3-1-uninitialized-copy"><span>2.3.1 <code>uninitialized_copy</code></span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter</span>
<span class="line">  <span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                     _ForwardIter __result<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__uninitialized_copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>__first</code> 和 <code>__last</code> 区间内的已有元素，将它们中的每一个复制一份，放到 <code>__result</code> 开始的未初始化区间中。通过对待复制元素的数据类型进行萃取，可以选择调用元素的拷贝构造函数，或是直接使用低层内存操作函数 <code>memmove()</code>。</p><p>上述代码已经使用 <code>iterator_traits</code> 萃取出了待复制元素的数据类型。接下来再使用 <code>__type_traits</code> 萃取出该数据类型是否为 POD (Plain Old Data) 类型 (C++ 原生数据类型及结构体)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter</span>
<span class="line"><span class="token function">__uninitialized_copy</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                     _ForwardIter __result<span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>is_POD_type _Is_POD<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__uninitialized_copy_aux</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">,</span> <span class="token function">_Is_POD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于是否为 POD，进一步具体化出了两种版本：</p><ul><li>如果是 POD 类型，则调用 <code>copy()</code></li><li>如果不是 POD 类型，则遍历每一个元素，依次调用拷贝构造函数</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Valid if copy construction is equivalent to assignment, and if the</span></span>
<span class="line"><span class="token comment">//  destructor is trivial.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter</span>
<span class="line"><span class="token function">__uninitialized_copy_aux</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                         _ForwardIter __result<span class="token punctuation">,</span></span>
<span class="line">                         __true_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter</span>
<span class="line"><span class="token function">__uninitialized_copy_aux</span><span class="token punctuation">(</span>_InputIter __first<span class="token punctuation">,</span> _InputIter __last<span class="token punctuation">,</span></span>
<span class="line">                         _ForwardIter __result<span class="token punctuation">,</span></span>
<span class="line">                         __false_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _ForwardIter __cur <span class="token operator">=</span> __result<span class="token punctuation">;</span></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">,</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">_Construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>__cur<span class="token punctuation">,</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __cur<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__result<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>copy()</code> 中直接使用了 <code>memmove()</code> 进行高效拷贝：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> _Tp<span class="token operator">*</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span> __first<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span> __last<span class="token punctuation">,</span> _Tp<span class="token operator">*</span> __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> ptrdiff_t _Num <span class="token operator">=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">memmove</span><span class="token punctuation">(</span>__result <span class="token operator">-</span> _Num<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">*</span> _Num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __result <span class="token operator">-</span> _Num<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-2-uninitialized-fill" tabindex="-1"><a class="header-anchor" href="#_2-3-2-uninitialized-fill"><span>2.3.2 <code>uninitialized_fill</code></span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">uninitialized_fill</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span></span>
<span class="line">                               _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                               <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__uninitialized_fill</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __x<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 <code>__first</code> 和 <code>__last</code> 之间的未初始化区间全部初始化为 <code>__x</code>。类似地，首先使用 <code>iterator_traits</code> 萃取出元素的数据类型。接下来，使用 <code>__type_traits</code> 萃取出数据类型是否为 POD 类型：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__uninitialized_fill</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span></span>
<span class="line">                                 _ForwardIter __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> _Tp1<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span>_Tp1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>is_POD_type _Is_POD<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__uninitialized_fill_aux</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __x<span class="token punctuation">,</span> <span class="token function">_Is_POD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不是 POD 类型，则依次循环每个元素进行拷贝构造；如果是 POD 类型，则直接调用 <code>fill()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Valid if copy construction is equivalent to assignment, and if the</span></span>
<span class="line"><span class="token comment">// destructor is trivial.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">__uninitialized_fill_aux</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                         <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> __true_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">fill</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span></span>
<span class="line"><span class="token function">__uninitialized_fill_aux</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span></span>
<span class="line">                         <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> __false_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _ForwardIter __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __cur <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">_Construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>__cur<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>fill()</code> 直接使用指针进行循环复制：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _ForwardIter __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_ForwardIter<span class="token punctuation">,</span> _Mutable_ForwardIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__first <span class="token operator">=</span> __value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-3-uninitialized-fill-n" tabindex="-1"><a class="header-anchor" href="#_2-3-3-uninitialized-fill-n"><span>2.3.3 <code>uninitialized_fill_n</code></span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter</span>
<span class="line"><span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__uninitialized_fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">,</span> <span class="token function">__VALUE_TYPE</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>__first</code> 开始的 <code>__n</code> 个内存空间的初始值全部设置为 <code>__x</code>。同样，先使用 <code>iterator_traits</code> 萃取出元素的数据类型，然后使用 <code>__type_traits</code> 萃取出数据类型是否为 POD：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp1</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter</span>
<span class="line"><span class="token function">__uninitialized_fill_n</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> _Tp1<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span>_Tp1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>is_POD_type _Is_POD<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">__uninitialized_fill_n_aux</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">,</span> <span class="token function">_Is_POD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据是否为 POD 类型，进一步具体化：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Valid if copy construction is equivalent to assignment, and if the</span></span>
<span class="line"><span class="token comment">//  destructor is trivial.</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> _ForwardIter</span>
<span class="line"><span class="token function">__uninitialized_fill_n_aux</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> __true_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_ForwardIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_ForwardIter</span>
<span class="line"><span class="token function">__uninitialized_fill_n_aux</span><span class="token punctuation">(</span>_ForwardIter __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> __false_type<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _ForwardIter __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span></span>
<span class="line">  __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>__n<span class="token punctuation">,</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">_Construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>__cur<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __cur<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>fill_n()</code> 也是使用指针进行循环内存复制：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">fill_n</span><span class="token punctuation">(</span>_OutputIter __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>__n<span class="token punctuation">,</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>__first <span class="token operator">=</span> __value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __first<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const i=s(t,[["render",l],["__file","Chapter 2.3 - 内存基本处理工具.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%202%20-%20%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8%20allocator/Chapter%202.3%20-%20%E5%86%85%E5%AD%98%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7.html","title":"Chapter 2.3 - 内存基本处理工具","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"2.3.1 uninitialized_copy","slug":"_2-3-1-uninitialized-copy","link":"#_2-3-1-uninitialized-copy","children":[]},{"level":2,"title":"2.3.2 uninitialized_fill","slug":"_2-3-2-uninitialized-fill","link":"#_2-3-2-uninitialized-fill","children":[]},{"level":2,"title":"2.3.3 uninitialized_fill_n","slug":"_2-3-3-uninitialized-fill-n","link":"#_2-3-3-uninitialized-fill-n","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 2 - 空间分配器 allocator/Chapter 2.3 - 内存基本处理工具.md"}');export{i as comp,u as data};
