import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="chapter-11-定时器和时间管理" tabindex="-1"><a class="header-anchor" href="#chapter-11-定时器和时间管理"><span>Chapter 11 - 定时器和时间管理</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 10 / 10 23:54</p><p>Nanjing, Jiangsu, China</p><hr><p>内核中大量函数都是基于时间驱动的，时间管理在内核中占有非常重要的地位。</p><h2 id="_11-1-内核中的时间概念" tabindex="-1"><a class="header-anchor" href="#_11-1-内核中的时间概念"><span>11.1 内核中的时间概念</span></a></h2><p>内核必须在硬件的帮助下才能管理和计算时间。</p><ul><li>系统定时器：以设定好的频率自行触发</li><li>内核知道连续两次时钟中断的间隔：节拍 (tick)</li></ul><p>内核通过控制时钟中断，维护实际时间。在时钟中断处理程序中，要进行的工作有：</p><ul><li>更新系统运行时间</li><li>更新实际时间</li><li>均衡调度程序中各 CPU 的运行队列</li><li>检查当前进程是否用尽了自己的时间片 - 如用尽，则重新调度</li><li>运行超时的定时器</li><li>更新资源消耗和 CPU 时间的统计值</li></ul><p>在每次的时钟中断处理程序中都要被处理。</p><h2 id="_11-2-节拍率-hz" tabindex="-1"><a class="header-anchor" href="#_11-2-节拍率-hz"><span>11.2 节拍率：HZ</span></a></h2><p>在系统启动时，按照 HZ 的值对硬件进行设置。大多数体系结构的节拍率都是可调的。</p><h3 id="_11-2-1-理想的-hz-值" tabindex="-1"><a class="header-anchor" href="#_11-2-1-理想的-hz-值"><span>11.2.1 理想的 HZ 值</span></a></h3><p>提高节拍率 → 时钟中断产生得更加频繁 → 中断处理程序会更频繁地执行</p><p>更高的时钟中断解析度提高了时间驱动事件的准确度。若某个时刻随机触发定时器，可能在任何时刻超时。只有在时钟中断到来时才可以执行它。</p><h3 id="_11-2-2-高-hz-的优势" tabindex="-1"><a class="header-anchor" href="#_11-2-2-高-hz-的优势"><span>11.2.2 高 HZ 的优势</span></a></h3><ul><li>内核定时器能以更高的频率和准确率运行</li><li>依赖定时值执行的系统调用，能以更高的精度运行 - <code>poll()</code>、<code>select()</code></li><li>减少等待时钟中断到来的时间，提升系统性能</li><li>对资源消耗的测量会有更精细的解析度</li><li>提高进程抢占的准确度</li></ul><h3 id="_11-2-3-高-hz-的劣势" tabindex="-1"><a class="header-anchor" href="#_11-2-3-高-hz-的劣势"><span>11.2.3 高 HZ 的劣势</span></a></h3><p>CPU 必须花时间来执行时钟中断处理程序 → 系统负担加重。频繁打乱 CPU 的 cache，并增加耗电。但随着现代硬件能力的提升，增加的负担不会对系统的性能有较大影响。</p><blockquote><p>无节拍的 OS？动态调度时钟中断，不以固定的频率触发时钟中断，而是按需动态调度和重新设置，省电。</p></blockquote><h2 id="_11-3-jiffies" tabindex="-1"><a class="header-anchor" href="#_11-3-jiffies"><span>11.3 jiffies</span></a></h2><p>全局变量 <code>jiffies</code> 用于记录自系统启动以来产生的节拍总数。启动时，内核将该变量初始化为 0。每次时钟中断处理程序都会增加该变量的值。</p><h3 id="_11-3-1-jiffies-的内部表示" tabindex="-1"><a class="header-anchor" href="#_11-3-1-jiffies-的内部表示"><span>11.3.1 jiffies 的内部表示</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">volatile</span> jiffies<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>32-bit 的 jiffies 变量，在 100HZ 的时钟频率下，497 天后会 overflow；64-bit 的变量，任何人都别指望会看到它溢出。由于历史的原因，又要考虑与已有内核代码的兼容。所以定义了：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">extern</span> u64 jiffies_64<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在内核映像的链接程序中，用 <code>jiffies_64</code> 覆盖 <code>jiffies</code>。原有代码直接访问 <code>jiffies</code> 的低 32-bit，而时间管理代码使用整个 64-bit，避免 overflow。</p><h3 id="_11-3-2-jiffies-的回绕" tabindex="-1"><a class="header-anchor" href="#_11-3-2-jiffies-的回绕"><span>11.3.2 jiffies 的回绕</span></a></h3><p>如果 jiffies 变量超出最大存放范围，则会回绕到 0：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> timeout <span class="token operator">=</span> jiffies <span class="token operator">+</span> HZ<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&gt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// not timeout</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// timeout</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的程序就会存在问题。好在内核提供了四个宏，用于比较节拍计数。能够正确处理节拍计数回绕的情况 (安全版本)：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">time_after</span><span class="token expression"><span class="token punctuation">(</span>unknown<span class="token punctuation">,</span>known<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>known<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unknown<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">time_before</span><span class="token expression"><span class="token punctuation">(</span>unknown<span class="token punctuation">,</span>known<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unknown<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>known<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">time_after_eq</span><span class="token expression"><span class="token punctuation">(</span>unknown<span class="token punctuation">,</span>known<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unknown<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>known<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">time_before_eq</span><span class="token expression"><span class="token punctuation">(</span>unknown<span class="token punctuation">,</span>known<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>known<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unknown<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>unknwon</code> 通常是 <code>jiffies</code>，<code>known</code> 是需要对比的值。</p><h3 id="_11-3-3-用户空间和-hz" tabindex="-1"><a class="header-anchor" href="#_11-3-3-用户空间和-hz"><span>11.3.3 用户空间和 HZ</span></a></h3><h2 id="_11-4-硬时钟和定时器" tabindex="-1"><a class="header-anchor" href="#_11-4-硬时钟和定时器"><span>11.4 硬时钟和定时器</span></a></h2><h3 id="_11-4-1-实时时钟" tabindex="-1"><a class="header-anchor" href="#_11-4-1-实时时钟"><span>11.4.1 实时时钟</span></a></h3><p>实时时钟 (RTC) 用于持久存放系统时间。系统关闭后，也可以靠主板上的微型电池保持计时。通常，RTC 和 CMOS 集成在一起。系统启动时，内核读取 RTC 来初始化墙上时间。</p><h3 id="_11-4-2-系统定时器" tabindex="-1"><a class="header-anchor" href="#_11-4-2-系统定时器"><span>11.4.2 系统定时器</span></a></h3><p>根本思想：提供一种周期性触发中断机制。在 x86 中，采用可编程中断时钟 (PIT)。内核在启动时对 PIT 进行编程初始化，使其能够产生时钟中断。</p><blockquote><p>8259 chip???</p></blockquote><h2 id="_11-5-时钟中断处理程序" tabindex="-1"><a class="header-anchor" href="#_11-5-时钟中断处理程序"><span>11.5 时钟中断处理程序</span></a></h2><p>分为两个部分：</p><ul><li>与体系结构相关</li><li>与体系结构无关</li></ul><p>与体系结构相关的部分，作为 <strong>系统定时器</strong> 的 <strong>中断处理程序</strong>，注册到内核中：</p><ul><li>获得 <code>xtime_lock</code> 锁，对系统时间进行维护，更新 RTC</li><li>调用体系结构无关的时钟例程 <code>tick_periodic()</code></li><li>释放 <code>xtime_lock</code> 锁</li><li>退出</li></ul><p>体系结构无关的例程：</p><ul><li>累加 <code>jiffies_64</code> 变量</li><li>更新资源消耗的统计值 (当前进程消耗的系统时间和用户时间)</li><li>执行已经到期的动态定时器</li><li>执行进程调度</li><li>更新墙上时间</li><li>计算平均负载值</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tick_periodic</span><span class="token punctuation">(</span><span class="token keyword">int</span> cpu<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>tick_do_timer_cpu <span class="token operator">==</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">write_seqlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xtime_lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        tick_next_period <span class="token operator">=</span> <span class="token function">ktime_add</span><span class="token punctuation">(</span>tick_next_period<span class="token punctuation">,</span> tick_period<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">do_time</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">write_sequnlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xtime_lock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">update_process_times</span><span class="token punctuation">(</span><span class="token function">user_mode</span><span class="token punctuation">(</span><span class="token function">get_irq_regs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">profile_tick</span><span class="token punctuation">(</span>CPU_PROFILING<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>do_timer()</code> 函数来说，承担了对 <code>jiffies_64</code> 的实际增加操作：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">do_timer</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> ticks<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    jiffies_64 <span class="token operator">+=</span> ticks<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">update_wall_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新墙上时钟</span></span>
<span class="line">    <span class="token function">calc_global_load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新系统的平均负载统计值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>update_process_times()</code> 更新耗费的各种节拍：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">update_process_times</span><span class="token punctuation">(</span><span class="token keyword">int</span> user_tick<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> cpu <span class="token operator">=</span> <span class="token function">smp_processor_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">account_process_tick</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> user_tick<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新进程运行时间</span></span>
<span class="line">    <span class="token function">run_local_timers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">rcu_check_callbacks</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> user_tick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printk_tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">scheduler_tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 减少进程时间片</span></span>
<span class="line">    <span class="token function">run_posix_cpu_timers</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>account_process_tick()</code> 对进程的时间进行实质性更新。<code>user_tick</code> 的值是通过查看系统寄存器来设置的。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">account_process_tick</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> user_tick<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">cputime_t</span> one_jiffy_scaled <span class="token operator">=</span> <span class="token function">cputime_to_scaled</span><span class="token punctuation">(</span>cputime_one_jiffy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">rq</span> <span class="token operator">*</span>rq <span class="token operator">=</span> <span class="token function">this_rq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>user_tick<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">account_user_time</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> cputime_one_jiffy<span class="token punctuation">,</span> one_jiffy_scaled<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> rq<span class="token operator">-&gt;</span>idle<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">irq_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> HARDIRQ_OFFSET<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">account_system_time</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> HARDIRQ_OFFSET<span class="token punctuation">,</span> cputime_one_jiffy<span class="token punctuation">,</span> one_jiffy_scaled<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">account_idle_time</span><span class="token punctuation">(</span>cputime_one_jiffy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内核对进程进行时间计数时，是根据中断发生时 CPU 所处的模式进行分类统计的。把这一个节拍全部算给中断发生时的 CPU 模式了 - 实际上，进程在一个节拍期间，可能多次进出内核态，但没有更精密的统计算法了。</p><h2 id="_11-6-实际时间" tabindex="-1"><a class="header-anchor" href="#_11-6-实际时间"><span>11.6 实际时间</span></a></h2><p>当前实际时间，即墙上时间。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">timespec</span> xtime<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token punctuation">{</span></span>
<span class="line">    _kernel_time_t tv_sec<span class="token punctuation">;</span> <span class="token comment">// s</span></span>
<span class="line">    <span class="token keyword">long</span> tv_nsec<span class="token punctuation">;</span>          <span class="token comment">// ns</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tv_sec</code> 存放着 1970.1.1 依赖经过的时间。</p><p>读写 <code>xtime</code> 变量需要申请 <code>xtime_lock</code> 锁。从用户空间取得墙上时间的接口 - <code>gettimeofday()</code>。它对应内核中的系统调用 <code>sys_gettimeofday()</code>，几乎完全取代了 <code>time()</code> 系统调用。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">asmlinkage <span class="token keyword">long</span> <span class="token function">sys_ettimeofday</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>tv<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timezone</span> <span class="token operator">*</span>tz<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">timeval</span> ktv<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">do_gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ktv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 与体系结构相关</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ktv<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ktv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>tz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>tz<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sys_tz<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sys_tz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内核主要会在文件系统中，修改各种时间戳时，使用 <code>xtime</code>。</p><h2 id="_11-7-定时器" tabindex="-1"><a class="header-anchor" href="#_11-7-定时器"><span>11.7 定时器</span></a></h2><p>也叫 <strong>动态定时器</strong> 或 <strong>内核定时器</strong>。使用简单：</p><ul><li>初始化</li><li>设置一个超时时间</li><li>指定超时后执行的函数</li><li>激活</li></ul><p>定时器 <strong>不周期执行</strong>，超时后自动撤销（动态定时器）。</p><h3 id="_11-7-1-使用定时器" tabindex="-1"><a class="header-anchor" href="#_11-7-1-使用定时器"><span>11.7.1 使用定时器</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> entry<span class="token punctuation">;</span> <span class="token comment">// 定时器链表入口</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> expires<span class="token punctuation">;</span> <span class="token comment">// 定时值 (jiffies 为单位)</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定时器处理函数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> data<span class="token punctuation">;</span> <span class="token comment">// 处理函数的参数</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">tvec_t_base_s</span> <span class="token operator">*</span>base<span class="token punctuation">;</span> <span class="token comment">// 定时器内部值</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> my_timer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">init_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">my_timer<span class="token punctuation">.</span>expires <span class="token operator">=</span> jiffies <span class="token operator">+</span> delay<span class="token punctuation">;</span></span>
<span class="line">my_timer<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">my_timer<span class="token punctuation">.</span>function <span class="token operator">=</span> my_function<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，处理函数需要符合以下原型：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">my_timer_function</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>内核可以保证不会在超时时间到期前运行处理函数，但有可能延误定时器处理程序的执行。所以不能用定时器来实现任何 <strong>硬实时任务</strong>。</p><p>更改定时器（顺带会激活）：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">mod_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_timer<span class="token punctuation">,</span> jiffies <span class="token operator">+</span> new_delay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在定时器超时前停止寄存器（已超时的定时器会被自动删除）：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">del_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该函数返回后，保证了定时器将来不会再被激活。但在多 CPU 的机器上，定时器处理程序可能已经在其它 CPU 上运行了。删除定时器时，应当等待其它 CPU 上运行的定时器处理程序都退出：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">del_timer_sync</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_11-7-2-定时器竞争条件" tabindex="-1"><a class="header-anchor" href="#_11-7-2-定时器竞争条件"><span>11.7.2 定时器竞争条件</span></a></h3><p>不能通过删除 + 创建定时器的方法代替 <code>mod_timer()</code> 函数，因为在多 CPU 的机器上是不安全的。内核异步执行中断处理程序，应当重点保护定时器中断处理程序中的共享数据。</p><h3 id="_11-7-3-实现定时器" tabindex="-1"><a class="header-anchor" href="#_11-7-3-实现定时器"><span>11.7.3 实现定时器</span></a></h3><p>内核在 <strong>时钟中断</strong> 发生后执行定时器。时钟中断处理程序调用 <code>run_local_timers()</code> 函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">run_local_timers</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">hrtimer_run_queues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">raise_softirq</span><span class="token punctuation">(</span>TIMER_SOFTIRQ<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定时器软中断</span></span>
<span class="line">    <span class="token function">softlockup_tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>触发的软中断由 <code>run_timer_softirq()</code> 函数处理，运行当前 CPU 上所有超时的定时器。内核中，所有的定时器都以链表的形式存放在一起，但寻找超时定时器而遍历整个链表是不明智的。内核按定时器的超时时间划分为 5 组，定时器超时时间接近时，定时器 <strong>随组一起下移</strong>。</p><p>确保了内核尽可能减少搜索超时定时器所带来的负担。</p><h2 id="_11-8-延迟执行" tabindex="-1"><a class="header-anchor" href="#_11-8-延迟执行"><span>11.8 延迟执行</span></a></h2><p>短暂地推迟执行任务，比如等待硬件完成某些工作。</p><h3 id="_11-8-1-忙等待" tabindex="-1"><a class="header-anchor" href="#_11-8-1-忙等待"><span>11.8.1 忙等待</span></a></h3><p>延迟的时间是节拍的整数倍，精确率要求不高时使用。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> timeout <span class="token operator">=</span> jiffies <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">time_before</span><span class="token punctuation">(</span>jiffies<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效率低下，更好的方法是在代码等待时，允许内核重新调度执行其它任务：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> timeout <span class="token operator">=</span> jiffies <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> HZ<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">time_before</span><span class="token punctuation">(</span>jiffies<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">cond_resched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>jiffies</code> 变量被标记为 <code>volatile</code></p><ul><li>指示编译器在每次访问变量时，都要重新从主存中获得</li><li>而不是通过寄存器中的变量别名访问</li></ul><h3 id="_11-8-2-短延迟" tabindex="-1"><a class="header-anchor" href="#_11-8-2-短延迟"><span>11.8.2 短延迟</span></a></h3><ul><li>需要比时钟节拍还短的延时</li><li>要求延迟的时间精确</li></ul><p>发生在和硬件同步时。内核提供了三个 μs、ns 和 ms 级别的延迟函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> usecs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ndelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> nsecs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> msecs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些函数依靠 <strong>执行数次循环</strong> 达到延迟效果</p><ul><li>内核可以知道 CPU 在 1s 内能执行多少次循环</li><li>该值存放在 <code>loops_per_jiffy</code> 变量中，由内核启动时的 <code>calibrate_delay()</code> 计算</li><li>可以通过 <code>/proc/cpuinfo</code> 读到</li></ul><h3 id="_11-8-3-schedule-timeout" tabindex="-1"><a class="header-anchor" href="#_11-8-3-schedule-timeout"><span>11.8.3 schedule_timeout()</span></a></h3><p>让需要延迟执行的任务睡眠，直到指定的延迟时间耗尽后再重新运行。不能保证睡眠时间正好等于指定的延迟时间，只能保证尽量接近。指定时间到期后，内核唤醒任务，并放回运行队列：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">set_current_state</span><span class="token punctuation">(</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 若不想接受信号唤醒，也可以设为 TASK_UNINTERRUPTIBLE</span></span>
<span class="line"><span class="token function">schedule_timeout</span><span class="token punctuation">(</span>s<span class="token operator">*</span>HZ<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>schedule_timeout</code> 实际上是内核定时器的一个简单应用：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token function">schedule_timeout</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">timer_t</span> timer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> expire<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> MAX_SCHEDULE_TIMEOUT<span class="token operator">:</span></span>
<span class="line">            <span class="token comment">// 无限期睡眠</span></span>
<span class="line">            <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> out<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// printk(KERN_ERR &quot;schedule_timeout: wrong timeout&quot;)</span></span>
<span class="line">                current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">goto</span> out<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    expire <span class="token operator">=</span> timeout <span class="token operator">+</span> jiffies<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">init_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    timer<span class="token punctuation">.</span>expires <span class="token operator">=</span> expire<span class="token punctuation">;</span></span>
<span class="line">    timer<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> current<span class="token punctuation">;</span> <span class="token comment">// 当前进程的地址作为超时处理函数的参数 (用于唤醒)</span></span>
<span class="line">    timer<span class="token punctuation">.</span>function <span class="token operator">=</span> process_timeout<span class="token punctuation">;</span> <span class="token comment">// 超时处理函数</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前任务已经睡眠，不会被调度到</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">del_timer_sync</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务被提前唤醒 (收到信号)，则撤销定时器</span></span>
<span class="line"></span>
<span class="line">    timeout <span class="token operator">=</span> expire <span class="token operator">-</span> jiffies<span class="token punctuation">;</span></span>
<span class="line">out<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">return</span> timeout <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> timeout<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>超时处理函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">process_timeout</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">wake_up_process</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">task_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒设置定时器的进程</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>比 0.12 的时钟管理复杂了很多啊，主要是还要考虑多 CPU 中存在的竞争条件问题。</p>`,111)]))}const o=s(t,[["render",c],["__file","Chapter 11 - 定时器和时间管理.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-development-notes/Chapter%2011%20-%20%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86.html","title":"Chapter 11 - 定时器和时间管理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"11.1 内核中的时间概念","slug":"_11-1-内核中的时间概念","link":"#_11-1-内核中的时间概念","children":[]},{"level":2,"title":"11.2 节拍率：HZ","slug":"_11-2-节拍率-hz","link":"#_11-2-节拍率-hz","children":[{"level":3,"title":"11.2.1 理想的 HZ 值","slug":"_11-2-1-理想的-hz-值","link":"#_11-2-1-理想的-hz-值","children":[]},{"level":3,"title":"11.2.2 高 HZ 的优势","slug":"_11-2-2-高-hz-的优势","link":"#_11-2-2-高-hz-的优势","children":[]},{"level":3,"title":"11.2.3 高 HZ 的劣势","slug":"_11-2-3-高-hz-的劣势","link":"#_11-2-3-高-hz-的劣势","children":[]}]},{"level":2,"title":"11.3 jiffies","slug":"_11-3-jiffies","link":"#_11-3-jiffies","children":[{"level":3,"title":"11.3.1 jiffies 的内部表示","slug":"_11-3-1-jiffies-的内部表示","link":"#_11-3-1-jiffies-的内部表示","children":[]},{"level":3,"title":"11.3.2 jiffies 的回绕","slug":"_11-3-2-jiffies-的回绕","link":"#_11-3-2-jiffies-的回绕","children":[]},{"level":3,"title":"11.3.3 用户空间和 HZ","slug":"_11-3-3-用户空间和-hz","link":"#_11-3-3-用户空间和-hz","children":[]}]},{"level":2,"title":"11.4 硬时钟和定时器","slug":"_11-4-硬时钟和定时器","link":"#_11-4-硬时钟和定时器","children":[{"level":3,"title":"11.4.1 实时时钟","slug":"_11-4-1-实时时钟","link":"#_11-4-1-实时时钟","children":[]},{"level":3,"title":"11.4.2 系统定时器","slug":"_11-4-2-系统定时器","link":"#_11-4-2-系统定时器","children":[]}]},{"level":2,"title":"11.5 时钟中断处理程序","slug":"_11-5-时钟中断处理程序","link":"#_11-5-时钟中断处理程序","children":[]},{"level":2,"title":"11.6 实际时间","slug":"_11-6-实际时间","link":"#_11-6-实际时间","children":[]},{"level":2,"title":"11.7 定时器","slug":"_11-7-定时器","link":"#_11-7-定时器","children":[{"level":3,"title":"11.7.1 使用定时器","slug":"_11-7-1-使用定时器","link":"#_11-7-1-使用定时器","children":[]},{"level":3,"title":"11.7.2 定时器竞争条件","slug":"_11-7-2-定时器竞争条件","link":"#_11-7-2-定时器竞争条件","children":[]},{"level":3,"title":"11.7.3 实现定时器","slug":"_11-7-3-实现定时器","link":"#_11-7-3-实现定时器","children":[]}]},{"level":2,"title":"11.8 延迟执行","slug":"_11-8-延迟执行","link":"#_11-8-延迟执行","children":[{"level":3,"title":"11.8.1 忙等待","slug":"_11-8-1-忙等待","link":"#_11-8-1-忙等待","children":[]},{"level":3,"title":"11.8.2 短延迟","slug":"_11-8-2-短延迟","link":"#_11-8-2-短延迟","children":[]},{"level":3,"title":"11.8.3 schedule_timeout()","slug":"_11-8-3-schedule-timeout","link":"#_11-8-3-schedule-timeout","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"linux-kernel-development-notes/Chapter 11 - 定时器和时间管理.md"}');export{o as comp,u as data};
