import{_ as i,c as e,a,o as s}from"./app-7eKjwDat.js";const t="/blog/assets/8-1-DdcNrUxJ.png",n="/blog/assets/8-3-CtXkEIlL.png",r={};function c(p,l){return s(),e("div",null,l[0]||(l[0]=[a('<h1 id="chapter-8-1-内核代码总体功能" tabindex="-1"><a class="header-anchor" href="#chapter-8-1-内核代码总体功能"><span>Chapter 8.1 - 内核代码总体功能</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 14 19:46</p><p>Ningbo, Zhejiang, China</p><hr><p><code>linux/kernel/</code></p><ul><li>blk_drv/</li><li>chr_drv/</li><li>math/</li><li>Makefile</li><li>asm.s</li><li>exit.c</li><li>fork.c</li><li>mktime.c</li><li>panic.c</li><li>printk.c</li><li>sched.c</li><li>signal.c</li><li>sys.c</li><li>sys_call.c</li><li>traps.c</li><li>vsprintf.c</li></ul><hr><h2 id="_8-1-总体功能" tabindex="-1"><a class="header-anchor" href="#_8-1-总体功能"><span>8.1 总体功能</span></a></h2><p>总体上分为三类：</p><ul><li>硬件 (异常) 中断处理程序</li><li>系统调用服务处理程序</li><li>进程调度等通用功能</li></ul><p>最喜欢的是这张调用关系图，太 tm 合我的口味了 😆</p><p><img src="'+t+'" alt="8-1"></p><h3 id="_8-1-1-中断处理程序" tabindex="-1"><a class="header-anchor" href="#_8-1-1-中断处理程序"><span>8.1.1 中断处理程序</span></a></h3><ul><li>asm.s，实现大部分硬件异常所引起的中断服务过程的汇编部分</li><li>traps.c，实现 asm.s 中断处理过程中的 C 函数部分</li></ul><p>另外有几个硬件中断处理程序在别的地方实现。</p><p>在 Linux 系统中，中断服务功能由内核提供。中断处理过程使用进程的 <strong>内核态堆栈</strong>。涉及到优先级变化时，CPU 会将被中断代码段的 <strong>堆栈段值 SS</strong> 和 <strong>堆栈指针 ESP</strong> 压入中断处理程序的堆栈中，之后还需要在内核态堆栈上压入 EFLAGS 和返回地址 CS、EIP。</p><ul><li>被中断代码段的堆栈，即进程的用户态堆栈</li><li>中断处理程序的堆栈，即进程的内核态堆栈</li></ul><p>asm.s 代码主要对 Intel 的保留中断 INT 0 - INT 16 做处理，INT 17 - INT 31 由 Intel 公司留作今后使用。8259A 上发出的 INT 32 - INT 47 分别在各种硬件的初始化程序中设置和处理。Linux 系统调用中断 INT 128 的服务程序则在 <code>kernel/sys_call.s</code> 中。某些异常引起中断时，CPU 内部会产生一个出错码，压入堆栈，因此 asm.s 根据是否携带出错码分为两类分别进行处理，但处理过程相同，如下图：</p><p><img src="'+n+'" alt="8-3"></p><h3 id="_8-1-2-系统调用处理相关程序" tabindex="-1"><a class="header-anchor" href="#_8-1-2-系统调用处理相关程序"><span>8.1.2 系统调用处理相关程序</span></a></h3><p>Linux 应用程序使用系统资源时需要利用中断 INT 0x80 进行，并需要在寄存器 EAX 中放入调用号。如果需要传递参数，则可以通过 EBX、ECX、EDX。sys_call.s 程序的作用类似于 asm.s 的作用，提供系统调用处理过程的入口汇编程序。其它几个 C 文件则提供了中断调用的 C 处理函数。</p><h3 id="_8-1-3-其它通用类程序" tabindex="-1"><a class="header-anchor" href="#_8-1-3-其它通用类程序"><span>8.1.3 其它通用类程序</span></a></h3><ul><li>schedule.c - 内核的核心调度程序</li><li>mktime.c - 仅包含一个内核使用的时间函数</li><li>panic.c - 包含一个 <code>panic()</code> 函数，用于在内核运行出现错误时显示错误并停机</li><li>printk.c 和 vsprintf.c - 内核显示信息的支持程序</li></ul>',24)]))}const _=i(r,[["render",c],["__file","Chapter 8.1 - 内核代码 总体功能.html.vue"]]),o=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%208%20-%20%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81/Chapter%208.1%20-%20%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%20%E6%80%BB%E4%BD%93%E5%8A%9F%E8%83%BD.html","title":"Chapter 8.1 - 内核代码总体功能","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"8.1 总体功能","slug":"_8-1-总体功能","link":"#_8-1-总体功能","children":[{"level":3,"title":"8.1.1 中断处理程序","slug":"_8-1-1-中断处理程序","link":"#_8-1-1-中断处理程序","children":[]},{"level":3,"title":"8.1.2 系统调用处理相关程序","slug":"_8-1-2-系统调用处理相关程序","link":"#_8-1-2-系统调用处理相关程序","children":[]},{"level":3,"title":"8.1.3 其它通用类程序","slug":"_8-1-3-其它通用类程序","link":"#_8-1-3-其它通用类程序","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 8 - 内核代码/Chapter 8.1 - 内核代码 总体功能.md"}');export{_ as comp,o as data};
