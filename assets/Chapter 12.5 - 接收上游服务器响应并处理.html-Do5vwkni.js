import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-12-5-接收上游服务器响应并处理" tabindex="-1"><a class="header-anchor" href="#chapter-12-5-接收上游服务器响应并处理"><span>Chapter 12.5 - 接收上游服务器响应并处理</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 08 / 01 21:21</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_12-5-接收上游服务器的响应头部" tabindex="-1"><a class="header-anchor" href="#_12-5-接收上游服务器的响应头部"><span>12.5 接收上游服务器的响应头部</span></a></h2><h3 id="_12-5-1-应用层协议的两段划分方式" tabindex="-1"><a class="header-anchor" href="#_12-5-1-应用层协议的两段划分方式"><span>12.5.1 应用层协议的两段划分方式</span></a></h3><p>Nginx 设置了 <code>ngx_http_upstream_process_header()</code> 函数处理上游服务器的响应。Upstream 机制支持上游服务器使用任何基于 TCP 的应用层协议 - TCP 其实就是 <strong>有顺序的数据流</strong>。实际上，上游服务器的响应可大可小，如果在内存中保存完整的响应，可能会引发内存不够的问题；如果在磁盘文件中接收响应，又会带来大量 I/O。</p><p>为了解决这个问题，应用层协议通常会将请求划分为 header 和 body。Header 中抽象了不同协议报文之间的共同部分，不同协议数据包的 header 都具有相同的格式。服务器必须解析 header，而 body 则不做格式上的要求，也不一定解析。Header 的长度要么是固定的，要么在一个指定的范围内 - 所以在处理 header 时，开辟的内存只需要容纳 header 的长度即可。</p><p>Header 和 body 存储什么样的信息取决于应用层协议，upstream 机制并不关心。Upstream 机制已经抽象出了 <code>process_header()</code> 函数，由具体的 HTTP 模块实现 header 解析逻辑。如果 HTTP 模块的目的是反向代理，那么可以将解析出的 header 适配到响应给下游客户端的 header 中。</p><p>而 body 的内容较为简单，HTTP 模块一般都不解析 body。Upstream 机制抽象了三种形式的 body 处理方式：</p><ol><li>不转发响应</li><li>下游网速优先的响应 (使用固定的缓冲区存放上游响应，因为上游响应会很快被下游取走)</li><li>上游网速优先的响应 (使用较大内存或磁盘文件来缓存上游响应，因为可能会有堆积)</li></ol><h3 id="_12-5-3-接收响应头部的流程" tabindex="-1"><a class="header-anchor" href="#_12-5-3-接收响应头部的流程"><span>12.5.3 接收响应头部的流程</span></a></h3><p><code>process_header</code> 是 <code>ngx_http_upstream_t</code> 结构体中定义的函数指针。Upstream 机制不涉及应用层协议，由使用 upstream 机制的模块负责解析应用层协议。HTTP 模块提供的回调函数是 <code>ngx_http_upstream_process_header()</code>。这个函数也被设计为 <code>ngx_http_upstream_t</code> 结构体中的读事件回调函数，会被反复调用</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_http_upstream_process_header</span><span class="token punctuation">(</span><span class="token class-name">ngx_http_request_t</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token class-name">ngx_http_upstream_t</span> <span class="token operator">*</span>u<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ssize_t</span>            n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_int_t</span>          rc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_connection_t</span>  <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取 Nginx 与上游服务器的连接</span></span>
<span class="line">    c <span class="token operator">=</span> u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>connection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_HTTP<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;http upstream process header&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    c<span class="token operator">-&gt;</span>log<span class="token operator">-&gt;</span>action <span class="token operator">=</span> <span class="token string">&quot;reading response header from upstream&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 检测读事件是否超时</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>read<span class="token operator">-&gt;</span>timedout<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 还没有请求发送到上游服务器，就收到了响应，不对劲</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token operator">-&gt;</span>request_sent <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_http_upstream_test_connect</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 接收响应头的缓冲区还未分配内存</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 分配缓冲区内存</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>pool<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>pos <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start<span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start<span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>end <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start <span class="token operator">+</span> u<span class="token operator">-&gt;</span>conf<span class="token operator">-&gt;</span>buffer_size<span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>temporary <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>tag <span class="token operator">=</span> u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>tag<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>headers_in<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>pool<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">ngx_table_elt_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>headers_in<span class="token punctuation">.</span>trailers<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>pool<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">ngx_table_elt_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>pos <span class="token operator">+=</span> r<span class="token operator">-&gt;</span>cache<span class="token operator">-&gt;</span>header_start<span class="token punctuation">;</span></span>
<span class="line">            u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>pos<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 调用 recv() 读取上游响应</span></span>
<span class="line">        n <span class="token operator">=</span> c<span class="token operator">-&gt;</span><span class="token function">recv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>end <span class="token operator">-</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 接下来还需要继续接收响应</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> NGX_AGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span></span>
<span class="line">            <span class="token comment">// 将读事件添加到定时器中</span></span>
<span class="line">            <span class="token function">ngx_add_timer</span><span class="token punctuation">(</span>rev<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>read_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">            <span class="token comment">// 将读事件添加到事件驱动模块中</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_handle_read_event</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>read<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 结束函数</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 上游服务器关闭连接</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                          <span class="token string">&quot;upstream prematurely closed connection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 发生错误</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> NGX_ERROR <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 统计接收到的响应长度</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>bytes_received <span class="token operator">+=</span> n<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 缓冲区地址后移</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last <span class="token operator">+=</span> n<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span></span>
<span class="line">        u<span class="token operator">-&gt;</span>valid_header_in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>cached <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">        <span class="token comment">// 解析 header</span></span>
<span class="line">        rc <span class="token operator">=</span> u<span class="token operator">-&gt;</span><span class="token function">process_header</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Header 还没有接收完整</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_AGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 检查缓冲区是否耗尽</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last <span class="token operator">==</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                              <span class="token string">&quot;upstream sent too big header&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                       NGX_HTTP_UPSTREAM_FT_INVALID_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 等待下一次触发</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Header 不合法</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_HTTP_UPSTREAM_INVALID_HEADER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_HTTP_UPSTREAM_FT_INVALID_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Header 错误</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span></span>
<span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* rc == NGX_OK */</span></span>
<span class="line"></span>
<span class="line">    u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>header_time <span class="token operator">=</span> ngx_current_msec <span class="token operator">-</span> u<span class="token operator">-&gt;</span>start_time<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>headers_in<span class="token punctuation">.</span>status_n <span class="token operator">&gt;=</span> NGX_HTTP_SPECIAL_RESPONSE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_upstream_test_next</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_upstream_intercept_errors</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 处理已经解析出的 headers，会将已经解析出的 headers 设置到 request 结构体的 headers_out 中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_upstream_process_headers</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 开始向客户端转发响应</span></span>
<span class="line">    <span class="token function">ngx_http_upstream_send_response</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-5-4-响应体的处理" tabindex="-1"><a class="header-anchor" href="#_12-5-4-响应体的处理"><span>12.5.4 响应体的处理</span></a></h3><p>转发响应由 <code>ngx_http_upstream_send_response()</code> 进行。首先会把 headers 发送出去。之后在函数中，会根据配置项中的 <code>buffering</code> 标志来决定是否打开缓存处理 body - 打开缓存意味着上游网速更快 (比如 Nginx 与上游服务器在同一个内网中)，从而进行是否需要转发响应的判断。</p><p>如果不打开缓存：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token operator">-&gt;</span>buffering<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HTTP_CACHE<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_file_cache_free</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>cache<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>pipe<span class="token operator">-&gt;</span>temp_file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 判断 HTTP 模块是否实现了用于处理 body 的 input_filter 函数</span></span>
<span class="line">    <span class="token comment">// 如果没有实现，则给出一个默认的实现函数</span></span>
<span class="line">    <span class="token comment">// 如果用户想自己处理 body，会实现这个函数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>input_filter <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 处理 body 前的初始化工作</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>input_filter_init <span class="token operator">=</span> ngx_http_upstream_non_buffered_filter_init<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 处理 body 的回调函数</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>input_filter <span class="token operator">=</span> ngx_http_upstream_non_buffered_filter<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 回调函数的参数，用于被多次调用时保存上下文</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>input_filter_ctx <span class="token operator">=</span> r<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置读事件回调函数 (接收到上游服务器的响应时回调)</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>read_event_handler <span class="token operator">=</span> ngx_http_upstream_process_non_buffered_upstream<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置写事件回调函数 (向下游客户端转发响应时回调)</span></span>
<span class="line">    r<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span></span>
<span class="line">        ngx_http_upstream_process_non_buffered_downstream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    r<span class="token operator">-&gt;</span>limit_rate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    r<span class="token operator">-&gt;</span>limit_rate_set <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调用 input_filter 的初始化函数，做好处理 body 前的准备工作</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span><span class="token function">input_filter_init</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>input_filter_ctx<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>clcf<span class="token operator">-&gt;</span>tcp_nodelay <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_tcp_nodelay</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析完 header 后，还剩下的字符</span></span>
<span class="line">    n <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last <span class="token operator">-</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>pos<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果还有剩余字符，说明已经收到了部分 body</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>pos<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        u<span class="token operator">-&gt;</span>state<span class="token operator">-&gt;</span>response_length <span class="token operator">+=</span> n<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 调用 input_filter 处理 body</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span><span class="token function">input_filter</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>input_filter_ctx<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Body 处理结束，向下游转发 body</span></span>
<span class="line">        <span class="token function">ngx_http_upstream_process_non_buffered_downstream</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>pos <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start<span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>last <span class="token operator">=</span> u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">.</span>start<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_http_send_special</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> NGX_HTTP_FLUSH<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 如果与上游的连接就绪，那么调用读回调函数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>peer<span class="token punctuation">.</span>connection<span class="token operator">-&gt;</span>read<span class="token operator">-&gt;</span>ready <span class="token operator">||</span> u<span class="token operator">-&gt;</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ngx_http_upstream_process_non_buffered_upstream</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果打开缓存：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 准备并处理 body</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>input_filter_init</span>
<span class="line">    <span class="token operator">&amp;&amp;</span> u<span class="token operator">-&gt;</span><span class="token function">input_filter_init</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>input_ctx<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">ngx_http_upstream_finalize_request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">,</span> NGX_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置读事件回调函数</span></span>
<span class="line">u<span class="token operator">-&gt;</span>read_event_handler <span class="token operator">=</span> ngx_http_upstream_process_upstream<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 设置写事件回调函数</span></span>
<span class="line">r<span class="token operator">-&gt;</span>write_event_handler <span class="token operator">=</span> ngx_http_upstream_process_downstream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用读事件回调函数，向上游服务器读取响应</span></span>
<span class="line"><span class="token function">ngx_http_upstream_process_upstream</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，对响应中 body 的处理，由 <code>input_filter()</code> 完成。如果没有实现，那么 Nginx 提供了一个默认实现 (以及一个相对应的初始化函数)。默认的初始化函数为 <code>ngx_http_upstream_non_buffered_filter_init()</code>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_http_upstream_non_buffered_filter_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的 body 处理函数为 <code>ngx_http_upstream_non_buffered_filter()</code>。从函数名就可以看出来，这个函数不使用 (文件) 缓存。也就是说，将会试图在内存缓冲区中存放完整的 body - 一旦上游服务器发来的响应超过了内存缓冲区的大小，请求将会出错：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">ngx_int_t</span></span>
<span class="line"><span class="token function">ngx_http_upstream_non_buffered_filter</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">ssize_t</span> bytes<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_http_request_t</span>  <span class="token operator">*</span>r <span class="token operator">=</span> data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ngx_buf_t</span>            <span class="token operator">*</span>b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_chain_t</span>          <span class="token operator">*</span>cl<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>ll<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_http_upstream_t</span>  <span class="token operator">*</span>u<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    u <span class="token operator">=</span> r<span class="token operator">-&gt;</span>upstream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 找到 out_bufs 的末尾以便添加新的缓冲区</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>cl <span class="token operator">=</span> u<span class="token operator">-&gt;</span>out_bufs<span class="token punctuation">,</span> ll <span class="token operator">=</span> <span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>out_bufs<span class="token punctuation">;</span> cl<span class="token punctuation">;</span> cl <span class="token operator">=</span> cl<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ll <span class="token operator">=</span> <span class="token operator">&amp;</span>cl<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获得一个空闲的 ngx_buf_t</span></span>
<span class="line">    cl <span class="token operator">=</span> <span class="token function">ngx_chain_get_free_buf</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>pool<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>free_bufs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 新的缓冲块加入链表尾</span></span>
<span class="line">    <span class="token operator">*</span>ll <span class="token operator">=</span> cl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cl<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>flush <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    cl<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>memory <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    b <span class="token operator">=</span> <span class="token operator">&amp;</span>u<span class="token operator">-&gt;</span>buffer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Buffer 指针向后移动，保存 body</span></span>
<span class="line">    cl<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>pos <span class="token operator">=</span> b<span class="token operator">-&gt;</span>last<span class="token punctuation">;</span></span>
<span class="line">    b<span class="token operator">-&gt;</span>last <span class="token operator">+=</span> bytes<span class="token punctuation">;</span></span>
<span class="line">    cl<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>last <span class="token operator">=</span> b<span class="token operator">-&gt;</span>last<span class="token punctuation">;</span></span>
<span class="line">    cl<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>tag <span class="token operator">=</span> u<span class="token operator">-&gt;</span>output<span class="token punctuation">.</span>tag<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>length <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">&gt;</span> u<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_WARN<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>connection<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;upstream sent more data than specified in &quot;</span></span>
<span class="line">                      <span class="token string">&quot;\\&quot;Content-Length\\&quot; header&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        cl<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>last <span class="token operator">=</span> cl<span class="token operator">-&gt;</span>buf<span class="token operator">-&gt;</span>pos <span class="token operator">+</span> u<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span></span>
<span class="line">        u<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 需要接收的 body 长度减少</span></span>
<span class="line">    u<span class="token operator">-&gt;</span>length <span class="token operator">-=</span> bytes<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是处理响应 body 的回调函数。从 Nginx 的视角来看，它的读事件应该是从上游服务器获取响应，写事件应该是向下游客户端转发响应。因此上面函数中设置的读写回调函数才是 <code>input_filter()</code> 函数的调用者。根据 Nginx 根据网络环境处理响应的策略，读写回调函数也被分为了两组：</p><ul><li>不打开缓存 - <code>ngx_http_upstream_process_non_buffered_upstream()</code> / <code>ngx_http_upstream_process_non_buffered_downstream()</code></li><li>打开缓存 - <code>ngx_http_upstream_process_upstream()</code> / <code>ngx_http_upstream_process_downstream()</code></li></ul>`,27)]))}const i=s(t,[["render",l],["__file","Chapter 12.5 - 接收上游服务器响应并处理.html.vue"]]),u=JSON.parse('{"path":"/understanding-nginx-notes/Part%203%20-%20%E6%B7%B1%E5%85%A5%20Nginx/Chapter%2012.5%20-%20%E6%8E%A5%E6%94%B6%E4%B8%8A%E6%B8%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E5%B9%B6%E5%A4%84%E7%90%86.html","title":"Chapter 12.5 - 接收上游服务器响应并处理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.5 接收上游服务器的响应头部","slug":"_12-5-接收上游服务器的响应头部","link":"#_12-5-接收上游服务器的响应头部","children":[{"level":3,"title":"12.5.1 应用层协议的两段划分方式","slug":"_12-5-1-应用层协议的两段划分方式","link":"#_12-5-1-应用层协议的两段划分方式","children":[]},{"level":3,"title":"12.5.3 接收响应头部的流程","slug":"_12-5-3-接收响应头部的流程","link":"#_12-5-3-接收响应头部的流程","children":[]},{"level":3,"title":"12.5.4 响应体的处理","slug":"_12-5-4-响应体的处理","link":"#_12-5-4-响应体的处理","children":[]}]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 3 - 深入 Nginx/Chapter 12.5 - 接收上游服务器响应并处理.md"}');export{i as comp,u as data};
