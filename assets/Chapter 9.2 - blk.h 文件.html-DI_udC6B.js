import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="chapter-9-2-blk-h-文件" tabindex="-1"><a class="header-anchor" href="#chapter-9-2-blk-h-文件"><span>Chapter 9.2 - blk.h 文件</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 22 14:49</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_9-2-blk-h-文件" tabindex="-1"><a class="header-anchor" href="#_9-2-blk-h-文件"><span>9.2 blk.h 文件</span></a></h2><h3 id="_9-2-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_9-2-1-功能描述"><span>9.2.1 功能描述</span></a></h3><p>块设备参数的头文件，定义了请求等待队列中的请求项数据结构 request。用宏语句定义了电梯搜索算法。对内核目前支持的设备，根据其各自的主设备号分别定义了对应的常数值。</p><h3 id="_9-2-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_9-2-2-代码注释"><span>9.2.2 代码注释</span></a></h3><h4 id="块设备表" tabindex="-1"><a class="header-anchor" href="#块设备表"><span>块设备表</span></a></h4><p>每种块设备占用一项，index 即为主设备号：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NR_BLK_DEV</span> <span class="token expression"><span class="token number">7</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">blk_dev_struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>reuqest_fn<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设备的请求处理函数</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> current_request<span class="token punctuation">;</span> <span class="token comment">// 设备当前正在处理的请求</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">blk_dev_struct</span> blk_dev<span class="token punctuation">[</span>NR_BLK_DEV<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设备请求项结构体及其数组" tabindex="-1"><a class="header-anchor" href="#设备请求项结构体及其数组"><span>设备请求项结构体及其数组</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NR_REQUEST</span> <span class="token expression"><span class="token number">32</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> dev<span class="token punctuation">;</span> <span class="token comment">// 发出请求的设备号，-1 代表空闲</span></span>
<span class="line">    <span class="token keyword">int</span> cmd<span class="token punctuation">;</span> <span class="token comment">// READ | WRITE</span></span>
<span class="line">    <span class="token keyword">int</span> errors<span class="token punctuation">;</span> <span class="token comment">// 操作产生的错误次数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sector<span class="token punctuation">;</span> <span class="token comment">// 起始扇区</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nr_sectors<span class="token punctuation">;</span> <span class="token comment">// 操作扇区数</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">;</span> <span class="token comment">// 数据缓冲区</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> waiting<span class="token punctuation">;</span> <span class="token comment">// 等待请求完成的任务</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span> <span class="token comment">// 缓冲区头指针</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">// 指向下一个请求项</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 请求项数组</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> request<span class="token punctuation">[</span>NR_REQUEST<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 等待空闲请求项的进程队列头指针</span></span>
<span class="line"><span class="token comment">// 32 个请求项全被占满时，进程在队列中排队</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> wait_for_request<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据块总数指针数组-blk-size" tabindex="-1"><a class="header-anchor" href="#数据块总数指针数组-blk-size"><span>数据块总数指针数组 blk_size[]</span></a></h4><p>指向对应主设备号的总块数数组 hd_sizes[]。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token operator">*</span> blk_size<span class="token punctuation">[</span>NR_BLK_DEV<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="设备宏" tabindex="-1"><a class="header-anchor" href="#设备宏"><span>设备宏</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">MAJOR_NR</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>MAJOR_NR <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">&quot;ramdisk&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_REQUEST</span> <span class="token expression">do_rd_request </span><span class="token comment">// 虚拟盘请求项处理函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_NR</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span> </span><span class="token comment">// 子设备号 0 - 7</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_ON</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span> </span><span class="token comment">// 虚拟盘无需开启和关闭</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_OFF</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>MAJOR_NR <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">&quot;floppy&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_INTR</span> <span class="token expression">do_floppy </span><span class="token comment">// 软盘中断处理函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_REQUEST</span> <span class="token expression">do_fd_request </span><span class="token comment">// 软盘请求项处理函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_NR</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> </span><span class="token comment">// 子设备号 0 - 3</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_ON</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token function">floppy_on</span><span class="token punctuation">(</span><span class="token function">DEVICE_NR</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// 开启设备宏</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_OFF</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token function">floppy_off</span><span class="token punctuation">(</span><span class="token function">DEVICE_NR</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// 关闭设备宏</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token punctuation">(</span>MAJOR_NR <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">&quot;harddisk&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_INTR</span> <span class="token expression">do_hd </span><span class="token comment">// 硬盘中断处理函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_TIMEOUT</span> <span class="token expression">hd_timeout </span><span class="token comment">// 硬盘超时值</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_REQUEST</span> <span class="token expression">do_hd_request </span><span class="token comment">// 硬盘请求项处理函数</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_NR</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">MINOR</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> </span><span class="token comment">// 设备号 0 - 1</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_ON</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span> </span><span class="token comment">// 硬盘一开机总是运转着</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEVICE_OFF</span><span class="token expression"><span class="token punctuation">(</span>device<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">&quot;unknown blk device&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="当前请求项的宏-current" tabindex="-1"><a class="header-anchor" href="#当前请求项的宏-current"><span>当前请求项的宏 CURRENT</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CURRENT</span> <span class="token expression"><span class="token punctuation">(</span>blk_dev<span class="token punctuation">[</span>MAJOR_NR<span class="token punctuation">]</span><span class="token punctuation">.</span>current_request<span class="token punctuation">)</span> </span><span class="token comment">// 主设备的当前请求指针</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CURRENT_DEV</span> <span class="token expression"><span class="token function">DEVICE_NR</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span> </span><span class="token comment">// 当前请求项的设备号</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结束请求处理函数-end-request" tabindex="-1"><a class="header-anchor" href="#结束请求处理函数-end-request"><span>结束请求处理函数 end_request()</span></a></h4><p>首先是一个解锁缓冲块的子函数：</p><blockquote><p>这个缓冲块具体指的是什么还没太明白。请求结构里又有一个数据缓冲块的指针，又有一个缓冲区头指针，不知道有什么区别。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">extern</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span>DEVICE_NAME <span class="token string">&quot;: free buffer being unlocked\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_block <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bh<span class="token operator">-&gt;</span>b_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先关闭指定的块设备</li><li>检查此次读写缓冲区是否有效：有效则设置缓冲区更新标志，解锁该缓冲区；否则显示相关的 I/O 出错信息</li><li>唤醒等待该请求项的进程</li><li>唤醒等待空闲请求项的进程</li><li>释放并从链表中清除本请求项</li><li>处理下一个请求项</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">extern</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">end_request</span><span class="token punctuation">(</span><span class="token keyword">int</span> uptodate<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">DEVICE_OFF</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭设备</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        CURRENT<span class="token operator">-&gt;</span>bh<span class="token operator">-&gt;</span>b_uptodate <span class="token operator">=</span> uptodate<span class="token punctuation">;</span> <span class="token comment">// 设置缓冲区更新标志</span></span>
<span class="line">        <span class="token function">unlock_buffer</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解锁缓冲区</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uptodate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 出错</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span>DEVICE_NAME <span class="token string">&quot;I/O error\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;dev %04x, block %d\\n\\r&quot;</span><span class="token punctuation">,</span> CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">,</span> CURRENT<span class="token operator">-&gt;</span>bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CURRENT<span class="token operator">-&gt;</span>waiting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒等待该请求项的进程</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_for_request<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒等待空闲请求项的进程</span></span>
<span class="line">    CURRENT<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 释放该请求项</span></span>
<span class="line">    CURRENT <span class="token operator">=</span> CURRENT<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 指向下一个请求项</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="请求项初始化宏-init-request" tabindex="-1"><a class="header-anchor" href="#请求项初始化宏-init-request"><span>请求项初始化宏 INIT_REQUEST</span></a></h4><p>几个块设备驱动程序的开始处，对请求项的初始化操作类似。因此定义一个统一的初始化宏，并对当前请求项进行一些有效性判断：</p><ul><li>若当前请求项为空，则设备已经没有需要处理的请求项了，扫尾后退出函数</li><li>主设备号 ≠ 驱动程序定义的主设备号，说明请求项队列错乱，内核 panic</li><li>若请求项中使用的缓冲块没有被锁定，说明 kernel 也有问题，panic</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INIT_REQUEST</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression">repeat<span class="token operator">:</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CURRENT<span class="token punctuation">)</span> <span class="token punctuation">{</span> \\ </span><span class="token comment">// 当前请求项为空</span></span></span>
<span class="line">        CLEAR_DEVICE_INTR \\</span>
<span class="line">        CLEAR_DEVICE_TIMEOUT \\</span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span> \\</span>
<span class="line">    <span class="token punctuation">}</span> \\</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span> <span class="token operator">!=</span> MAJOR_NR<span class="token punctuation">)</span>\\ <span class="token comment">// 主设备号不对</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>DEVICE_NAME <span class="token string">&quot;: request list destroyed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \\</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>CURRENT<span class="token operator">-&gt;</span>bh<span class="token punctuation">)</span> <span class="token punctuation">{</span> \\</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CURRENT<span class="token operator">-&gt;</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span> \\ <span class="token comment">// 缓冲区未锁定</span></span>
<span class="line">            <span class="token function">panic</span><span class="token punctuation">(</span>DEVICE_NAME <span class="token string">&quot;: block not locked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \\</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31)]))}const i=n(t,[["render",c],["__file","Chapter 9.2 - blk.h 文件.html.vue"]]),r=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%209%20-%20%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/Chapter%209.2%20-%20blk.h%20%E6%96%87%E4%BB%B6.html","title":"Chapter 9.2 - blk.h 文件","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"9.2 blk.h 文件","slug":"_9-2-blk-h-文件","link":"#_9-2-blk-h-文件","children":[{"level":3,"title":"9.2.1 功能描述","slug":"_9-2-1-功能描述","link":"#_9-2-1-功能描述","children":[]},{"level":3,"title":"9.2.2 代码注释","slug":"_9-2-2-代码注释","link":"#_9-2-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 9 - 块设备驱动程序/Chapter 9.2 - blk.h 文件.md"}');export{i as comp,r as data};
