import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-6-2-互斥信号量管理" tabindex="-1"><a class="header-anchor" href="#chapter-6-2-互斥信号量管理"><span>Chapter 6.2 - 互斥信号量管理</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 11 / 20 09:50</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_6-2-1-概述" tabindex="-1"><a class="header-anchor" href="#_6-2-1-概述"><span>6.2.1 概述</span></a></h2><p>互斥信号量 (Mutual Exclusion Semaphores) 也是一个二值信号量。但不同的是，它能够解决 <strong>优先级反转问题</strong>：当高优先级任务需要使用某个共享资源，而资源又被一个低优先级的任务所占用。为了解决优先级反转，应该将低优先级任务的优先级提高到高于优先级任务的优先级，直到低优先级任务处理完毕共享资源。</p><p>μC/OS-II 的解决方法：将占用共享资源的低优先级任务的优先级提升到略高于高优先级任务的优先级，<strong>优先级继承优先级</strong> (Priority Inderitance Priority, PIP)。所以互斥信号量在 ECB 中的有效部分包含：</p><ul><li>表示互斥信号量的标志</li><li>PIP</li><li>等待任务列表</li></ul><p>同样，互斥信号量可以在编译前直接被剪裁掉。</p><h2 id="_6-2-2-建立互斥信号量-osmutexcreate-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-2-建立互斥信号量-osmutexcreate-函数"><span>6.2.2 建立互斥信号量 - OSMutexCreate() 函数</span></a></h2><p>用于建立和初始化 mutex，显然需要在初始化时给出 PIP。</p><p>原理：</p><ul><li>从空闲 ECB 链表中取出一个 ECB</li><li>将 <code>OSEventType</code> 设定为 <code>OS_EVENT_TYPE_MUTEX</code></li><li>将 <code>OSEventCnt</code> 的高 8 位保存 PIP，低 8 位置为 <code>0xFF</code></li><li>当 mutex 被任务占用时，低 8 位用于保存占用任务的优先级</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                  CREATE A MUTUAL EXCLUSION SEMAPHORE</span>
<span class="line">*</span>
<span class="line">* Description: This function creates a mutual exclusion semaphore.</span>
<span class="line">*</span>
<span class="line">* Arguments  : prio          is the priority to use when accessing the mutual exclusion semaphore.  In</span>
<span class="line">*                            other words, when the semaphore is acquired and a higher priority task</span>
<span class="line">*                            attempts to obtain the semaphore then the priority of the task owning the</span>
<span class="line">*                            semaphore is raised to this priority.  It is assumed that you will specify</span>
<span class="line">*                            a priority that is LOWER in value than ANY of the tasks competing for the</span>
<span class="line">*                            mutex.</span>
<span class="line">*</span>
<span class="line">*              perr          is a pointer to an error code which will be returned to your application:</span>
<span class="line">*                               OS_ERR_NONE         if the call was successful.</span>
<span class="line">*                               OS_ERR_CREATE_ISR   if you attempted to create a MUTEX from an ISR</span>
<span class="line">*                               OS_ERR_PRIO_EXIST   if a task at the priority inheritance priority</span>
<span class="line">*                                                   already exist.</span>
<span class="line">*                               OS_ERR_PEVENT_NULL  No more event control blocks available.</span>
<span class="line">*                               OS_ERR_PRIO_INVALID if the priority you specify is higher that the</span>
<span class="line">*                                                   maximum allowed (i.e. &gt; OS_LOWEST_PRIO)</span>
<span class="line">*</span>
<span class="line">* Returns    : != (void *)0  is a pointer to the event control clock (OS_EVENT) associated with the</span>
<span class="line">*                            created mutex.</span>
<span class="line">*              == (void *)0  if an error is detected.</span>
<span class="line">*</span>
<span class="line">* Note(s)    : 1) The LEAST significant 8 bits of &#39;.OSEventCnt&#39; are used to hold the priority number</span>
<span class="line">*                 of the task owning the mutex or 0xFF if no task owns the mutex.</span>
<span class="line">*</span>
<span class="line">*              2) The MOST  significant 8 bits of &#39;.OSEventCnt&#39; are used to hold the priority number</span>
<span class="line">*                 to use to reduce priority inversion.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line">OS_EVENT  <span class="token operator">*</span><span class="token function">OSMutexCreate</span> <span class="token punctuation">(</span>INT8U   prio<span class="token punctuation">,</span></span>
<span class="line">                          INT8U  <span class="token operator">*</span>perr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    OS_EVENT  <span class="token operator">*</span>pevent<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                               </span><span class="token comment">/* Allocate storage for CPU status register */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>perr <span class="token operator">==</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL_IEC61508</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSSafetyCriticalStartFlag <span class="token operator">==</span> OS_TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>prio <span class="token operator">&gt;=</span> OS_LOWEST_PRIO<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">/* Validate PIP                             */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PRIO_INVALID<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSIntNesting <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment">/* See if called from ISR ...               */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_CREATE_ISR<span class="token punctuation">;</span>                         <span class="token comment">/* ... can&#39;t CREATE mutex from an ISR       */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSTCBPrioTbl<span class="token punctuation">[</span>prio<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">/* Mutex priority must not already exist    */</span></span>
<span class="line">        <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">/* Task already exist at priority ...       */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PRIO_EXIST<span class="token punctuation">;</span>                         <span class="token comment">/* ... inheritance priority                 */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    OSTCBPrioTbl<span class="token punctuation">[</span>prio<span class="token punctuation">]</span> <span class="token operator">=</span> OS_TCB_RESERVED<span class="token punctuation">;</span>                  <span class="token comment">/* Reserve the table entry                  */</span></span>
<span class="line">    pevent             <span class="token operator">=</span> OSEventFreeList<span class="token punctuation">;</span>                  <span class="token comment">/* Get next free event control block        */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent <span class="token operator">==</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment">/* See if an ECB was available              */</span></span>
<span class="line">        OSTCBPrioTbl<span class="token punctuation">[</span>prio<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token comment">/* No, Release the table entry              */</span></span>
<span class="line">        <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">*</span>perr              <span class="token operator">=</span> OS_ERR_PEVENT_NULL<span class="token punctuation">;</span>           <span class="token comment">/* No more event control blocks             */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>pevent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    OSEventFreeList        <span class="token operator">=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span>OSEventFreeList<span class="token operator">-&gt;</span>OSEventPtr<span class="token punctuation">;</span>   <span class="token comment">/* Adjust the free list        */</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventType    <span class="token operator">=</span> OS_EVENT_TYPE_MUTEX<span class="token punctuation">;</span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventCnt     <span class="token operator">=</span> <span class="token punctuation">(</span>INT16U<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>INT16U<span class="token punctuation">)</span>prio <span class="token operator">&lt;&lt;</span> <span class="token number">8u</span><span class="token punctuation">)</span> <span class="token operator">|</span> OS_MUTEX_AVAILABLE<span class="token punctuation">;</span> <span class="token comment">/* Resource is avail.  */</span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventPtr     <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                                 <span class="token comment">/* No task owning the mutex    */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_EVENT_NAME_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventName    <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token function">OS_EventWaitListInit</span><span class="token punctuation">(</span>pevent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>perr                  <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>pevent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-3-删除互斥信号量-osmutexdel-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-3-删除互斥信号量-osmutexdel-函数"><span>6.2.3 删除互斥信号量 - OSMutexDel() 函数</span></a></h2><p>删除一个 mutex。需要指定一个删除选项：</p><ul><li><code>OS_DEL_NO_PEND</code> - 仅在没有任何任务等待 mutex 时才删除</li><li><code>OS_DEL_ALWAYS</code> - 无论有没有任务等待，都立刻删除 mutex，所有等待 mutex 的任务立刻就绪</li></ul><p>原理：将 ECB 中的内容清空，并归还空闲 ECB 链表。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                          DELETE A MUTEX</span>
<span class="line">*</span>
<span class="line">* Description: This function deletes a mutual exclusion semaphore and readies all tasks pending on the it.</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent        is a pointer to the event control block associated with the desired mutex.</span>
<span class="line">*</span>
<span class="line">*              opt           determines delete options as follows:</span>
<span class="line">*                            opt == OS_DEL_NO_PEND   Delete mutex ONLY if no task pending</span>
<span class="line">*                            opt == OS_DEL_ALWAYS    Deletes the mutex even if tasks are waiting.</span>
<span class="line">*                                                    In this case, all the tasks pending will be readied.</span>
<span class="line">*</span>
<span class="line">*              perr          is a pointer to an error code that can contain one of the following values:</span>
<span class="line">*                            OS_ERR_NONE             The call was successful and the mutex was deleted</span>
<span class="line">*                            OS_ERR_DEL_ISR          If you attempted to delete the MUTEX from an ISR</span>
<span class="line">*                            OS_ERR_INVALID_OPT      An invalid option was specified</span>
<span class="line">*                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mutex</span>
<span class="line">*                            OS_ERR_EVENT_TYPE       If you didn&#39;t pass a pointer to a mutex</span>
<span class="line">*                            OS_ERR_PEVENT_NULL      If &#39;pevent&#39; is a NULL pointer.</span>
<span class="line">*</span>
<span class="line">* Returns    : pevent        upon error</span>
<span class="line">*              (OS_EVENT *)0 if the mutex was successfully deleted.</span>
<span class="line">*</span>
<span class="line">* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of</span>
<span class="line">*                 the mutex MUST check the return code of OSMutexPend().</span>
<span class="line">*</span>
<span class="line">*              2) This call can potentially disable interrupts for a long time.  The interrupt disable</span>
<span class="line">*                 time is directly proportional to the number of tasks waiting on the mutex.</span>
<span class="line">*</span>
<span class="line">*              3) Because ALL tasks pending on the mutex will be readied, you MUST be careful because the</span>
<span class="line">*                 resource(s) will no longer be guarded by the mutex.</span>
<span class="line">*</span>
<span class="line">*              4) IMPORTANT: In the &#39;OS_DEL_ALWAYS&#39; case, we assume that the owner of the Mutex (if there</span>
<span class="line">*                            is one) is ready-to-run and is thus NOT pending on another kernel object or</span>
<span class="line">*                            has delayed itself.  In other words, if a task owns the mutex being deleted,</span>
<span class="line">*                            that task will be made ready-to-run at its original priority.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_MUTEX_DEL_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">OS_EVENT  <span class="token operator">*</span><span class="token function">OSMutexDel</span> <span class="token punctuation">(</span>OS_EVENT  <span class="token operator">*</span>pevent<span class="token punctuation">,</span></span>
<span class="line">                       INT8U      opt<span class="token punctuation">,</span></span>
<span class="line">                       INT8U     <span class="token operator">*</span>perr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    BOOLEAN    tasks_waiting<span class="token punctuation">;</span></span>
<span class="line">    OS_EVENT  <span class="token operator">*</span>pevent_return<span class="token punctuation">;</span></span>
<span class="line">    INT8U      pip<span class="token punctuation">;</span>                                        <span class="token comment">/* Priority inheritance priority            */</span></span>
<span class="line">    INT8U      prio<span class="token punctuation">;</span></span>
<span class="line">    OS_TCB    <span class="token operator">*</span>ptcb<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                               </span><span class="token comment">/* Allocate storage for CPU status register */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>perr <span class="token operator">==</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent <span class="token operator">==</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment">/* Validate &#39;pevent&#39;                        */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PEVENT_NULL<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>pevent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventType <span class="token operator">!=</span> OS_EVENT_TYPE_MUTEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">/* Validate event block type                */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_EVENT_TYPE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>pevent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSIntNesting <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment">/* See if called from ISR ...               */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_DEL_ISR<span class="token punctuation">;</span>                             <span class="token comment">/* ... can&#39;t DELETE from an ISR             */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>pevent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">!=</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">/* See if any tasks waiting on mutex        */</span></span>
<span class="line">        tasks_waiting <span class="token operator">=</span> OS_TRUE<span class="token punctuation">;</span>                           <span class="token comment">/* Yes                                      */</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        tasks_waiting <span class="token operator">=</span> OS_FALSE<span class="token punctuation">;</span>                          <span class="token comment">/* No                                       */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> OS_DEL_NO_PEND<span class="token operator">:</span>                               <span class="token comment">/* DELETE MUTEX ONLY IF NO TASK WAITING --- */</span></span>
<span class="line">             <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks_waiting <span class="token operator">==</span> OS_FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_EVENT_NAME_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">                 pevent<span class="token operator">-&gt;</span>OSEventName <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">                 pip                 <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                 OSTCBPrioTbl<span class="token punctuation">[</span>pip<span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/* Free up the PIP                          */</span></span>
<span class="line">                 pevent<span class="token operator">-&gt;</span>OSEventType <span class="token operator">=</span> OS_EVENT_TYPE_UNUSED<span class="token punctuation">;</span></span>
<span class="line">                 pevent<span class="token operator">-&gt;</span>OSEventPtr  <span class="token operator">=</span> OSEventFreeList<span class="token punctuation">;</span>    <span class="token comment">/* Return Event Control Block to free list  */</span></span>
<span class="line">                 pevent<span class="token operator">-&gt;</span>OSEventCnt  <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line">                 OSEventFreeList     <span class="token operator">=</span> pevent<span class="token punctuation">;</span></span>
<span class="line">                 <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                 <span class="token operator">*</span>perr               <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">                 pevent_return       <span class="token operator">=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">/* Mutex has been deleted                   */</span></span>
<span class="line">             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                 <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                 <span class="token operator">*</span>perr               <span class="token operator">=</span> OS_ERR_TASK_WAITING<span class="token punctuation">;</span></span>
<span class="line">                 pevent_return       <span class="token operator">=</span> pevent<span class="token punctuation">;</span></span>
<span class="line">             <span class="token punctuation">}</span></span>
<span class="line">             <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">case</span> OS_DEL_ALWAYS<span class="token operator">:</span>                                <span class="token comment">/* ALWAYS DELETE THE MUTEX ---------------- */</span></span>
<span class="line">             pip  <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">/* Get PIP of mutex          */</span></span>
<span class="line">             prio <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;</span> OS_MUTEX_KEEP_LOWER_8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Get owner&#39;s original prio */</span></span>
<span class="line">             ptcb <span class="token operator">=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span>pevent<span class="token operator">-&gt;</span>OSEventPtr<span class="token punctuation">;</span></span>
<span class="line">             <span class="token keyword">if</span> <span class="token punctuation">(</span>ptcb <span class="token operator">!=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">/* See if any task owns the mutex           */</span></span>
<span class="line">                 <span class="token keyword">if</span> <span class="token punctuation">(</span>ptcb<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">==</span> pip<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">/* See if original prio was changed         */</span></span>
<span class="line">                     <span class="token function">OSMutex_RdyAtPrio</span><span class="token punctuation">(</span>ptcb<span class="token punctuation">,</span> prio<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Yes, Restore the task&#39;s original prio    */</span></span>
<span class="line">                 <span class="token punctuation">}</span></span>
<span class="line">             <span class="token punctuation">}</span></span>
<span class="line">             <span class="token keyword">while</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">!=</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/* Ready ALL tasks waiting for mutex        */</span></span>
<span class="line">                 <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">OS_EventTaskRdy</span><span class="token punctuation">(</span>pevent<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">,</span> OS_STAT_MUTEX<span class="token punctuation">,</span> OS_STAT_PEND_OK<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_EVENT_NAME_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">             pevent<span class="token operator">-&gt;</span>OSEventName <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">             pip                 <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             OSTCBPrioTbl<span class="token punctuation">[</span>pip<span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">/* Free up the PIP                          */</span></span>
<span class="line">             pevent<span class="token operator">-&gt;</span>OSEventType <span class="token operator">=</span> OS_EVENT_TYPE_UNUSED<span class="token punctuation">;</span></span>
<span class="line">             pevent<span class="token operator">-&gt;</span>OSEventPtr  <span class="token operator">=</span> OSEventFreeList<span class="token punctuation">;</span>        <span class="token comment">/* Return Event Control Block to free list  */</span></span>
<span class="line">             pevent<span class="token operator">-&gt;</span>OSEventCnt  <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line">             OSEventFreeList     <span class="token operator">=</span> pevent<span class="token punctuation">;</span>                 <span class="token comment">/* Get next free event control block        */</span></span>
<span class="line">             <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks_waiting <span class="token operator">==</span> OS_TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">/* Reschedule only if task(s) were waiting  */</span></span>
<span class="line">                 <span class="token function">OS_Sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">/* Find highest priority task ready to run  */</span></span>
<span class="line">             <span class="token punctuation">}</span></span>
<span class="line">             <span class="token operator">*</span>perr         <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">             pevent_return <span class="token operator">=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">/* Mutex has been deleted                   */</span></span>
<span class="line">             <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">             <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token operator">*</span>perr         <span class="token operator">=</span> OS_ERR_INVALID_OPT<span class="token punctuation">;</span></span>
<span class="line">             pevent_return <span class="token operator">=</span> pevent<span class="token punctuation">;</span></span>
<span class="line">             <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>pevent_return<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-4-等待互斥信号量-osmutexpend-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-4-等待互斥信号量-osmutexpend-函数"><span>6.2.4 等待互斥信号量 - OSMutexPend() 函数</span></a></h2><p>等待一个互斥信号量。如果 mutex 已被占用，则将任务加入 mutex 的等待列表中，直到得到 mutex 或延时期满。如果在延时期内 mutex 被释放，等待 mutex 的最高优先级的任务进入就绪状态。</p><p>原理：</p><ul><li>访问 ECB 中的 <code>OSEventCnt</code> 变量</li><li>如果可用，则直接占用 mutex，并将优先级保存在低 8 位中</li><li>如果当前 mutex 被占用，且当前任务优先级高于占用者优先级，需要将占用者优先级提升为 PIP</li><li>挂起任务，直到得到 mutex 或延时期满</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                  PEND ON MUTUAL EXCLUSION SEMAPHORE</span>
<span class="line">*</span>
<span class="line">* Description: This function waits for a mutual exclusion semaphore.</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent        is a pointer to the event control block associated with the desired</span>
<span class="line">*                            mutex.</span>
<span class="line">*</span>
<span class="line">*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will</span>
<span class="line">*                            wait for the resource up to the amount of time specified by this argument.</span>
<span class="line">*                            If you specify 0, however, your task will wait forever at the specified</span>
<span class="line">*                            mutex or, until the resource becomes available.</span>
<span class="line">*</span>
<span class="line">*              perr          is a pointer to where an error message will be deposited.  Possible error</span>
<span class="line">*                            messages are:</span>
<span class="line">*                               OS_ERR_NONE        The call was successful and your task owns the mutex</span>
<span class="line">*                               OS_ERR_TIMEOUT     The mutex was not available within the specified &#39;timeout&#39;.</span>
<span class="line">*                               OS_ERR_PEND_ABORT  The wait on the mutex was aborted.</span>
<span class="line">*                               OS_ERR_EVENT_TYPE  If you didn&#39;t pass a pointer to a mutex</span>
<span class="line">*                               OS_ERR_PEVENT_NULL &#39;pevent&#39; is a NULL pointer</span>
<span class="line">*                               OS_ERR_PEND_ISR    If you called this function from an ISR and the result</span>
<span class="line">*                                                  would lead to a suspension.</span>
<span class="line">*                               OS_ERR_PIP_LOWER   If the priority of the task that owns the Mutex is</span>
<span class="line">*                                                  HIGHER (i.e. a lower number) than the PIP.  This error</span>
<span class="line">*                                                  indicates that you did not set the PIP higher (lower</span>
<span class="line">*                                                  number) than ALL the tasks that compete for the Mutex.</span>
<span class="line">*                                                  Unfortunately, this is something that could not be</span>
<span class="line">*                                                  detected when the Mutex is created because we don&#39;t know</span>
<span class="line">*                                                  what tasks will be using the Mutex.</span>
<span class="line">*                               OS_ERR_PEND_LOCKED If you called this function when the scheduler is locked</span>
<span class="line">*</span>
<span class="line">* Returns    : none</span>
<span class="line">*</span>
<span class="line">* Note(s)    : 1) The task that owns the Mutex MUST NOT pend on any other event while it owns the mutex.</span>
<span class="line">*</span>
<span class="line">*              2) You MUST NOT change the priority of the task that owns the mutex</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">OSMutexPend</span> <span class="token punctuation">(</span>OS_EVENT  <span class="token operator">*</span>pevent<span class="token punctuation">,</span></span>
<span class="line">                   INT32U     timeout<span class="token punctuation">,</span></span>
<span class="line">                   INT8U     <span class="token operator">*</span>perr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    INT8U      pip<span class="token punctuation">;</span>                                        <span class="token comment">/* Priority Inheritance Priority (PIP)      */</span></span>
<span class="line">    INT8U      mprio<span class="token punctuation">;</span>                                      <span class="token comment">/* Mutex owner priority                     */</span></span>
<span class="line">    BOOLEAN    rdy<span class="token punctuation">;</span>                                        <span class="token comment">/* Flag indicating task was ready           */</span></span>
<span class="line">    OS_TCB    <span class="token operator">*</span>ptcb<span class="token punctuation">;</span></span>
<span class="line">    OS_EVENT  <span class="token operator">*</span>pevent2<span class="token punctuation">;</span></span>
<span class="line">    INT8U      y<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                               </span><span class="token comment">/* Allocate storage for CPU status register */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>perr <span class="token operator">==</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent <span class="token operator">==</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment">/* Validate &#39;pevent&#39;                        */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PEVENT_NULL<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventType <span class="token operator">!=</span> OS_EVENT_TYPE_MUTEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">/* Validate event block type                */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_EVENT_TYPE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSIntNesting <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment">/* See if called from ISR ...               */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PEND_ISR<span class="token punctuation">;</span>                           <span class="token comment">/* ... can&#39;t PEND from an ISR               */</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSLockNesting <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token comment">/* See if called with scheduler locked ...  */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PEND_LOCKED<span class="token punctuation">;</span>                        <span class="token comment">/* ... can&#39;t PEND when locked               */</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">/*$PAGE*/</span>\f</span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pip <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">/* Get PIP from mutex                       */</span></span>
<span class="line">                                                           <span class="token comment">/* Is Mutex available?                      */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;</span> OS_MUTEX_KEEP_LOWER_8<span class="token punctuation">)</span> <span class="token operator">==</span> OS_MUTEX_AVAILABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;=</span> OS_MUTEX_KEEP_UPPER_8<span class="token punctuation">;</span>       <span class="token comment">/* Yes, Acquire the resource                */</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">|=</span> OSTCBCur<span class="token operator">-&gt;</span>OSTCBPrio<span class="token punctuation">;</span>         <span class="token comment">/*      Save priority of owning task        */</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventPtr  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>OSTCBCur<span class="token punctuation">;</span>            <span class="token comment">/*      Point to owning task&#39;s OS_TCB       */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">&lt;=</span> pip<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">/*      PIP &#39;must&#39; have a SMALLER prio ...  */</span></span>
<span class="line">            <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">/*      ... than current task!              */</span></span>
<span class="line">            <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PIP_LOWER<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    mprio <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;</span> OS_MUTEX_KEEP_LOWER_8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* No, Get priority of mutex owner   */</span></span>
<span class="line">    ptcb  <span class="token operator">=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">/*     Point to TCB of mutex owner   */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptcb<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">&gt;</span> pip<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  <span class="token comment">/*     Need to promote prio of owner?*/</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>mprio <span class="token operator">&gt;</span> OSTCBCur<span class="token operator">-&gt;</span>OSTCBPrio<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            y <span class="token operator">=</span> ptcb<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>OSRdyTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;</span> ptcb<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">/*     See if mutex owner is ready   */</span></span>
<span class="line">                OSRdyTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token operator">~</span>ptcb<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">;</span>         <span class="token comment">/*     Yes, Remove owner from Rdy ...*/</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>OSRdyTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">/*          ... list at current prio */</span></span>
<span class="line">                    OSRdyGrp <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token operator">~</span>ptcb<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                rdy <span class="token operator">=</span> OS_TRUE<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                pevent2 <span class="token operator">=</span> ptcb<span class="token operator">-&gt;</span>OSTCBEventPtr<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent2 <span class="token operator">!=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">/* Remove from event wait list       */</span></span>
<span class="line">                    y <span class="token operator">=</span> ptcb<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">;</span></span>
<span class="line">                    pevent2<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token operator">~</span>ptcb<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent2<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        pevent2<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token operator">~</span>ptcb<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                rdy <span class="token operator">=</span> OS_FALSE<span class="token punctuation">;</span>                            <span class="token comment">/* No                                       */</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            ptcb<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">=</span> pip<span class="token punctuation">;</span>                         <span class="token comment">/* Change owner task prio to PIP            */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_LOWEST_PRIO <span class="token operator">&lt;=</span> <span class="token number">63u</span></span></span></span>
<span class="line">            ptcb<span class="token operator">-&gt;</span>OSTCBY    <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span> ptcb<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">&gt;&gt;</span> <span class="token number">3u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ptcb<span class="token operator">-&gt;</span>OSTCBX    <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span> ptcb<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">&amp;</span> <span class="token number">0x07u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">            ptcb<span class="token operator">-&gt;</span>OSTCBY    <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>ptcb<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">&gt;&gt;</span> <span class="token number">4u</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFu</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ptcb<span class="token operator">-&gt;</span>OSTCBX    <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span> ptcb<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">&amp;</span> <span class="token number">0x0Fu</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">            ptcb<span class="token operator">-&gt;</span>OSTCBBitY <span class="token operator">=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1uL</span> <span class="token operator">&lt;&lt;</span> ptcb<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ptcb<span class="token operator">-&gt;</span>OSTCBBitX <span class="token operator">=</span> <span class="token punctuation">(</span>OS_PRIO<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1uL</span> <span class="token operator">&lt;&lt;</span> ptcb<span class="token operator">-&gt;</span>OSTCBX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>rdy <span class="token operator">==</span> OS_TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">/* If task was ready at owner&#39;s priority ...*/</span></span>
<span class="line">                OSRdyGrp               <span class="token operator">|=</span> ptcb<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span> <span class="token comment">/* ... make it ready at new priority.       */</span></span>
<span class="line">                OSRdyTbl<span class="token punctuation">[</span>ptcb<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">]</span> <span class="token operator">|=</span> ptcb<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                pevent2 <span class="token operator">=</span> ptcb<span class="token operator">-&gt;</span>OSTCBEventPtr<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent2 <span class="token operator">!=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/* Add to event wait list                   */</span></span>
<span class="line">                    pevent2<span class="token operator">-&gt;</span>OSEventGrp               <span class="token operator">|=</span> ptcb<span class="token operator">-&gt;</span>OSTCBBitY<span class="token punctuation">;</span></span>
<span class="line">                    pevent2<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span>ptcb<span class="token operator">-&gt;</span>OSTCBY<span class="token punctuation">]</span> <span class="token operator">|=</span> ptcb<span class="token operator">-&gt;</span>OSTCBBitX<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            OSTCBPrioTbl<span class="token punctuation">[</span>pip<span class="token punctuation">]</span> <span class="token operator">=</span> ptcb<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBStat     <span class="token operator">|=</span> OS_STAT_MUTEX<span class="token punctuation">;</span>         <span class="token comment">/* Mutex not available, pend current task        */</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBStatPend  <span class="token operator">=</span> OS_STAT_PEND_OK<span class="token punctuation">;</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBDly       <span class="token operator">=</span> timeout<span class="token punctuation">;</span>               <span class="token comment">/* Store timeout in current task&#39;s TCB           */</span></span>
<span class="line">    <span class="token function">OS_EventTaskWait</span><span class="token punctuation">(</span>pevent<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">/* Suspend task until event or timeout occurs    */</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">OS_Sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">/* Find next highest priority task ready         */</span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBStatPend<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/* See if we timed-out or aborted                */</span></span>
<span class="line">        <span class="token keyword">case</span> OS_STAT_PEND_OK<span class="token operator">:</span></span>
<span class="line">             <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">             <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">case</span> OS_STAT_PEND_ABORT<span class="token operator">:</span></span>
<span class="line">             <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PEND_ABORT<span class="token punctuation">;</span>               <span class="token comment">/* Indicate that we aborted getting mutex        */</span></span>
<span class="line">             <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">case</span> OS_STAT_PEND_TO<span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">             <span class="token function">OS_EventTaskRemove</span><span class="token punctuation">(</span>OSTCBCur<span class="token punctuation">,</span> pevent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_TIMEOUT<span class="token punctuation">;</span>                  <span class="token comment">/* Indicate that we didn&#39;t get mutex within TO   */</span></span>
<span class="line">             <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBStat          <span class="token operator">=</span>  OS_STAT_RDY<span class="token punctuation">;</span>      <span class="token comment">/* Set   task  status to ready                   */</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBStatPend      <span class="token operator">=</span>  OS_STAT_PEND_OK<span class="token punctuation">;</span>  <span class="token comment">/* Clear pend  status                            */</span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBEventPtr      <span class="token operator">=</span> <span class="token punctuation">(</span>OS_EVENT  <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/* Clear event pointers                          */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>OS_EVENT_MULTI_EN <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span></span></span></span>
<span class="line">    OSTCBCur<span class="token operator">-&gt;</span>OSTCBEventMultiPtr <span class="token operator">=</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-5-释放互斥信号量-osmutexpost-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-5-释放互斥信号量-osmutexpost-函数"><span>6.2.5 释放互斥信号量 - OSMutexPost() 函数</span></a></h2><p>发出一个 mutex：</p><ul><li>如果 mutex 占用者的优先级已经被升高，则恢复原优先级</li><li>如果多个任务在等待 mutex，则具有最高优先级的任务获得 mutex，并进行任务切换</li></ul><p>原理：</p><ul><li>检查 mutex 释放者的优先级是否被提升；如果提升，则恢复至原有优先级</li><li>检查是否有任务在等待该 mutex <ul><li>如果有，则最高优先级的任务得到这个 mutex</li><li>如果没有，则将 mutex 置为可用状态</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                  POST TO A MUTUAL EXCLUSION SEMAPHORE</span>
<span class="line">*</span>
<span class="line">* Description: This function signals a mutual exclusion semaphore</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent              is a pointer to the event control block associated with the desired</span>
<span class="line">*                                  mutex.</span>
<span class="line">*</span>
<span class="line">* Returns    : OS_ERR_NONE             The call was successful and the mutex was signaled.</span>
<span class="line">*              OS_ERR_EVENT_TYPE       If you didn&#39;t pass a pointer to a mutex</span>
<span class="line">*              OS_ERR_PEVENT_NULL      &#39;pevent&#39; is a NULL pointer</span>
<span class="line">*              OS_ERR_POST_ISR         Attempted to post from an ISR (not valid for MUTEXes)</span>
<span class="line">*              OS_ERR_NOT_MUTEX_OWNER  The task that did the post is NOT the owner of the MUTEX.</span>
<span class="line">*              OS_ERR_PIP_LOWER        If the priority of the new task that owns the Mutex is</span>
<span class="line">*                                      HIGHER (i.e. a lower number) than the PIP.  This error</span>
<span class="line">*                                      indicates that you did not set the PIP higher (lower</span>
<span class="line">*                                      number) than ALL the tasks that compete for the Mutex.</span>
<span class="line">*                                      Unfortunately, this is something that could not be</span>
<span class="line">*                                      detected when the Mutex is created because we don&#39;t know</span>
<span class="line">*                                      what tasks will be using the Mutex.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line">INT8U  <span class="token function">OSMutexPost</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span>pevent<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    INT8U      pip<span class="token punctuation">;</span>                                   <span class="token comment">/* Priority inheritance priority                 */</span></span>
<span class="line">    INT8U      prio<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                          </span><span class="token comment">/* Allocate storage for CPU status register      */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSIntNesting <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">/* See if called from ISR ...                    */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_POST_ISR<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">/* ... can&#39;t POST mutex from an ISR              */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent <span class="token operator">==</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">/* Validate &#39;pevent&#39;                             */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_PEVENT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventType <span class="token operator">!=</span> OS_EVENT_TYPE_MUTEX<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* Validate event block type                     */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_EVENT_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pip  <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/* Get priority inheritance priority of mutex    */</span></span>
<span class="line">    prio <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;</span> OS_MUTEX_KEEP_LOWER_8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Get owner&#39;s original priority      */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSTCBCur <span class="token operator">!=</span> <span class="token punctuation">(</span>OS_TCB <span class="token operator">*</span><span class="token punctuation">)</span>pevent<span class="token operator">-&gt;</span>OSEventPtr<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">/* See if posting task owns the MUTEX            */</span></span>
<span class="line">        <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_NOT_MUTEX_OWNER<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">==</span> pip<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">/* Did we have to raise current task&#39;s priority? */</span></span>
<span class="line">        <span class="token function">OSMutex_RdyAtPrio</span><span class="token punctuation">(</span>OSTCBCur<span class="token punctuation">,</span> prio<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/* Restore the task&#39;s original priority          */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    OSTCBPrioTbl<span class="token punctuation">[</span>pip<span class="token punctuation">]</span> <span class="token operator">=</span> OS_TCB_RESERVED<span class="token punctuation">;</span>              <span class="token comment">/* Reserve table entry                           */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventGrp <span class="token operator">!=</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">/* Any task waiting for the mutex?               */</span></span>
<span class="line">                                                      <span class="token comment">/* Yes, Make HPT waiting for mutex ready         */</span></span>
<span class="line">        prio                <span class="token operator">=</span> <span class="token function">OS_EventTaskRdy</span><span class="token punctuation">(</span>pevent<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">,</span> OS_STAT_MUTEX<span class="token punctuation">,</span> OS_STAT_PEND_OK<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;=</span> OS_MUTEX_KEEP_UPPER_8<span class="token punctuation">;</span>  <span class="token comment">/*      Save priority of mutex&#39;s new owner       */</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">|=</span> prio<span class="token punctuation">;</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventPtr  <span class="token operator">=</span> OSTCBPrioTbl<span class="token punctuation">[</span>prio<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">/*      Link to new mutex owner&#39;s OS_TCB         */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>prio <span class="token operator">&lt;=</span> pip<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">/*      PIP &#39;must&#39; have a SMALLER prio ...       */</span></span>
<span class="line">            <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">/*      ... than current task!                   */</span></span>
<span class="line">            <span class="token function">OS_Sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">/*      Find highest priority task ready to run  */</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_PIP_LOWER<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">OS_Sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">/*      Find highest priority task ready to run  */</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">|=</span> OS_MUTEX_AVAILABLE<span class="token punctuation">;</span>         <span class="token comment">/* No,  Mutex is now available                   */</span></span>
<span class="line">    pevent<span class="token operator">-&gt;</span>OSEventPtr  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-6-无等待地获取互斥信号量-osmutexaccept-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-6-无等待地获取互斥信号量-osmutexaccept-函数"><span>6.2.6 无等待地获取互斥信号量 - OSMutexAccept() 函数</span></a></h2><p>查看互斥信号量是否可用。调用者不会被挂起。</p><p>原理：通过判断 ECB <code>OSEventCnt</code> 的低 8 位判断 mutex 是否可用</p><ul><li>如果可用，则将调用者优先级保存至低 8 位，并占用 mutex</li><li>如果不可用，则返回 0</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                   ACCEPT MUTUAL EXCLUSION SEMAPHORE</span>
<span class="line">*</span>
<span class="line">* Description: This  function checks the mutual exclusion semaphore to see if a resource is available.</span>
<span class="line">*              Unlike OSMutexPend(), OSMutexAccept() does not suspend the calling task if the resource is</span>
<span class="line">*              not available or the event did not occur.</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent     is a pointer to the event control block</span>
<span class="line">*</span>
<span class="line">*              perr       is a pointer to an error code which will be returned to your application:</span>
<span class="line">*                            OS_ERR_NONE         if the call was successful.</span>
<span class="line">*                            OS_ERR_EVENT_TYPE   if &#39;pevent&#39; is not a pointer to a mutex</span>
<span class="line">*                            OS_ERR_PEVENT_NULL  &#39;pevent&#39; is a NULL pointer</span>
<span class="line">*                            OS_ERR_PEND_ISR     if you called this function from an ISR</span>
<span class="line">*                            OS_ERR_PIP_LOWER    If the priority of the task that owns the Mutex is</span>
<span class="line">*                                                HIGHER (i.e. a lower number) than the PIP.  This error</span>
<span class="line">*                                                indicates that you did not set the PIP higher (lower</span>
<span class="line">*                                                number) than ALL the tasks that compete for the Mutex.</span>
<span class="line">*                                                Unfortunately, this is something that could not be</span>
<span class="line">*                                                detected when the Mutex is created because we don&#39;t know</span>
<span class="line">*                                                what tasks will be using the Mutex.</span>
<span class="line">*</span>
<span class="line">* Returns    : == OS_TRUE    if the resource is available, the mutual exclusion semaphore is acquired</span>
<span class="line">*              == OS_FALSE   a) if the resource is not available</span>
<span class="line">*                            b) you didn&#39;t pass a pointer to a mutual exclusion semaphore</span>
<span class="line">*                            c) you called this function from an ISR</span>
<span class="line">*</span>
<span class="line">* Warning(s) : This function CANNOT be called from an ISR because mutual exclusion semaphores are</span>
<span class="line">*              intended to be used by tasks only.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_MUTEX_ACCEPT_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">BOOLEAN  <span class="token function">OSMutexAccept</span> <span class="token punctuation">(</span>OS_EVENT  <span class="token operator">*</span>pevent<span class="token punctuation">,</span></span>
<span class="line">                        INT8U     <span class="token operator">*</span>perr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    INT8U      pip<span class="token punctuation">;</span>                                    <span class="token comment">/* Priority Inheritance Priority (PIP)          */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                           </span><span class="token comment">/* Allocate storage for CPU status register     */</span></span></span>
<span class="line">    OS_CPU_SR  cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_SAFETY_CRITICAL</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>perr <span class="token operator">==</span> <span class="token punctuation">(</span>INT8U <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">OS_SAFETY_CRITICAL_EXCEPTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent <span class="token operator">==</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">/* Validate &#39;pevent&#39;                            */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PEVENT_NULL<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventType <span class="token operator">!=</span> OS_EVENT_TYPE_MUTEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* Validate event block type                    */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_EVENT_TYPE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSIntNesting <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                           <span class="token comment">/* Make sure it&#39;s not called from an ISR        */</span></span>
<span class="line">        <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PEND_ISR<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">/* Get value (0 or 1) of Mutex                  */</span></span>
<span class="line">    pip <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/* Get PIP from mutex                           */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;</span> OS_MUTEX_KEEP_LOWER_8<span class="token punctuation">)</span> <span class="token operator">==</span> OS_MUTEX_AVAILABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;=</span> OS_MUTEX_KEEP_UPPER_8<span class="token punctuation">;</span>   <span class="token comment">/*      Mask off LSByte (Acquire Mutex)         */</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">|=</span> OSTCBCur<span class="token operator">-&gt;</span>OSTCBPrio<span class="token punctuation">;</span>     <span class="token comment">/*      Save current task priority in LSByte    */</span></span>
<span class="line">        pevent<span class="token operator">-&gt;</span>OSEventPtr  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>OSTCBCur<span class="token punctuation">;</span>        <span class="token comment">/*      Link TCB of task owning Mutex           */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>OSTCBCur<span class="token operator">-&gt;</span>OSTCBPrio <span class="token operator">&lt;=</span> pip<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">/*      PIP &#39;must&#39; have a SMALLER prio ...      */</span></span>
<span class="line">            <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">/*      ... than current task!                  */</span></span>
<span class="line">            <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_PIP_LOWER<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>perr <span class="token operator">=</span> OS_ERR_NONE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-7-获取当前互斥信号量的状态-osmutexquery-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-7-获取当前互斥信号量的状态-osmutexquery-函数"><span>6.2.7 获取当前互斥信号量的状态 - OSMutexQuery() 函数</span></a></h2><p>通过 <code>OS_MUTEX_DATA</code> 数据结构来复制 mutex ECB 中当前的状态。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*                                     QUERY A MUTUAL EXCLUSION SEMAPHORE</span>
<span class="line">*</span>
<span class="line">* Description: This function obtains information about a mutex</span>
<span class="line">*</span>
<span class="line">* Arguments  : pevent          is a pointer to the event control block associated with the desired mutex</span>
<span class="line">*</span>
<span class="line">*              p_mutex_data    is a pointer to a structure that will contain information about the mutex</span>
<span class="line">*</span>
<span class="line">* Returns    : OS_ERR_NONE          The call was successful and the message was sent</span>
<span class="line">*              OS_ERR_QUERY_ISR     If you called this function from an ISR</span>
<span class="line">*              OS_ERR_PEVENT_NULL   If &#39;pevent&#39;       is a NULL pointer</span>
<span class="line">*              OS_ERR_PDATA_NULL    If &#39;p_mutex_data&#39; is a NULL pointer</span>
<span class="line">*              OS_ERR_EVENT_TYPE    If you are attempting to obtain data from a non mutex.</span>
<span class="line">*********************************************************************************************************</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_MUTEX_QUERY_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">INT8U  <span class="token function">OSMutexQuery</span> <span class="token punctuation">(</span>OS_EVENT       <span class="token operator">*</span>pevent<span class="token punctuation">,</span></span>
<span class="line">                     OS_MUTEX_DATA  <span class="token operator">*</span>p_mutex_data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    INT8U       i<span class="token punctuation">;</span></span>
<span class="line">    OS_PRIO    <span class="token operator">*</span>psrc<span class="token punctuation">;</span></span>
<span class="line">    OS_PRIO    <span class="token operator">*</span>pdest<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_CRITICAL_METHOD <span class="token operator">==</span> <span class="token number">3u</span>                     </span><span class="token comment">/* Allocate storage for CPU status register           */</span></span></span>
<span class="line">    OS_CPU_SR   cpu_sr <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>OSIntNesting <span class="token operator">&gt;</span> <span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment">/* See if called from ISR ...               */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_QUERY_ISR<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">/* ... can&#39;t QUERY mutex from an ISR        */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OS_ARG_CHK_EN <span class="token operator">&gt;</span> <span class="token number">0u</span></span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent <span class="token operator">==</span> <span class="token punctuation">(</span>OS_EVENT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment">/* Validate &#39;pevent&#39;                        */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_PEVENT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p_mutex_data <span class="token operator">==</span> <span class="token punctuation">(</span>OS_MUTEX_DATA <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">/* Validate &#39;p_mutex_data&#39;                  */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_PDATA_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventType <span class="token operator">!=</span> OS_EVENT_TYPE_MUTEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">/* Validate event block type                */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_EVENT_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_ENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    p_mutex_data<span class="token operator">-&gt;</span>OSMutexPIP  <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&gt;&gt;</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    p_mutex_data<span class="token operator">-&gt;</span>OSOwnerPrio <span class="token operator">=</span> <span class="token punctuation">(</span>INT8U<span class="token punctuation">)</span><span class="token punctuation">(</span>pevent<span class="token operator">-&gt;</span>OSEventCnt <span class="token operator">&amp;</span> OS_MUTEX_KEEP_LOWER_8<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>p_mutex_data<span class="token operator">-&gt;</span>OSOwnerPrio <span class="token operator">==</span> <span class="token number">0xFFu</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        p_mutex_data<span class="token operator">-&gt;</span>OSValue <span class="token operator">=</span> OS_TRUE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        p_mutex_data<span class="token operator">-&gt;</span>OSValue <span class="token operator">=</span> OS_FALSE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    p_mutex_data<span class="token operator">-&gt;</span>OSEventGrp  <span class="token operator">=</span> pevent<span class="token operator">-&gt;</span>OSEventGrp<span class="token punctuation">;</span>        <span class="token comment">/* Copy wait list                           */</span></span>
<span class="line">    psrc                      <span class="token operator">=</span> <span class="token operator">&amp;</span>pevent<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    pdest                     <span class="token operator">=</span> <span class="token operator">&amp;</span>p_mutex_data<span class="token operator">-&gt;</span>OSEventTbl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> OS_EVENT_TBL_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">*</span>pdest<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>psrc<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">OS_EXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>OS_ERR_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>与普通的信号量基本相同吧，需要注意的是对于 PIP 的处理。</p>`,41)]))}const i=s(t,[["render",l],["__file","Chapter 6.2 - 互斥信号量管理.html.vue"]]),u=JSON.parse('{"path":"/uc-os-ii-code-notes/Chapter%206.2%20-%20%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%AE%A1%E7%90%86.html","title":"Chapter 6.2 - 互斥信号量管理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"6.2.1 概述","slug":"_6-2-1-概述","link":"#_6-2-1-概述","children":[]},{"level":2,"title":"6.2.2 建立互斥信号量 - OSMutexCreate() 函数","slug":"_6-2-2-建立互斥信号量-osmutexcreate-函数","link":"#_6-2-2-建立互斥信号量-osmutexcreate-函数","children":[]},{"level":2,"title":"6.2.3 删除互斥信号量 - OSMutexDel() 函数","slug":"_6-2-3-删除互斥信号量-osmutexdel-函数","link":"#_6-2-3-删除互斥信号量-osmutexdel-函数","children":[]},{"level":2,"title":"6.2.4 等待互斥信号量 - OSMutexPend() 函数","slug":"_6-2-4-等待互斥信号量-osmutexpend-函数","link":"#_6-2-4-等待互斥信号量-osmutexpend-函数","children":[]},{"level":2,"title":"6.2.5 释放互斥信号量 - OSMutexPost() 函数","slug":"_6-2-5-释放互斥信号量-osmutexpost-函数","link":"#_6-2-5-释放互斥信号量-osmutexpost-函数","children":[]},{"level":2,"title":"6.2.6 无等待地获取互斥信号量 - OSMutexAccept() 函数","slug":"_6-2-6-无等待地获取互斥信号量-osmutexaccept-函数","link":"#_6-2-6-无等待地获取互斥信号量-osmutexaccept-函数","children":[]},{"level":2,"title":"6.2.7 获取当前互斥信号量的状态 - OSMutexQuery() 函数","slug":"_6-2-7-获取当前互斥信号量的状态-osmutexquery-函数","link":"#_6-2-7-获取当前互斥信号量的状态-osmutexquery-函数","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"uc-os-ii-code-notes/Chapter 6.2 - 互斥信号量管理.md"}');export{i as comp,u as data};
