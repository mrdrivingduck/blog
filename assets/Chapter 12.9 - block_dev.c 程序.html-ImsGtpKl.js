import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t="/blog/assets/12-27-CE-aBgLO.png",o={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="chapter-12-9-block-dev-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-12-9-block-dev-c-程序"><span>Chapter 12.9 - block_dev.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 09 / 09 20:51</p><p>Nanjing, Jiangsu, China</p><hr><p>接下来的部分是文件系统的数据访问操作，即系统调用 <code>sys_write()</code> 和 <code>sys_read()</code>，以及不同设备的低层支持函数：</p><ul><li>访问正规文件：<code>file_write()</code> / <code>file_read()</code></li><li>访问管道文件：<code>pipe_write()</code> / <code>pipe_read()</code></li><li>访问块设备文件：<code>block_write()</code> / <code>block_read()</code></li><li>访问字符设备文件：<code>rw_char()</code></li></ul><p>在系统调用中，根据参数提供的文件描述符的属性，判断出文件属于哪种类型，分别调用相应的处理函数，并进入对应的驱动程序中。</p><h2 id="_12-9-block-dev-c-程序" tabindex="-1"><a class="header-anchor" href="#_12-9-block-dev-c-程序"><span>12.9 block_dev.c 程序</span></a></h2><h3 id="_12-9-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_12-9-1-功能描述"><span>12.9.1 功能描述</span></a></h3><p><code>block_read()</code> 和 <code>block_write()</code> 两个函数分别用于读写块设备上的原始数据。由于块设备对磁盘的读写是以盘块为单位的，因此函数中，首先需要把参数中的文件指针映射为 <strong>数据块号</strong> 和 <strong>块内偏移</strong>，然后将对应的块读入缓冲区中，并从指定的块内偏移开始处理数据。若还有数据，则继续读取下一块，之后块内偏移总是为 0。原理如图所示：</p><p><img src="'+t+`" alt="12-27"></p><h3 id="_12-9-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_12-9-2-代码注释"><span>12.9.2 代码注释</span></a></h3><h4 id="block-write-数据块写函数" tabindex="-1"><a class="header-anchor" href="#block-write-数据块写函数"><span>block_write() - 数据块写函数</span></a></h4><p>将 buf 中长度为 count 的数据写到设备 dev 上 pos 开始的位置上。从内核的角度来说，只需要将数据写入缓冲区即可，由块设备驱动程序负责将缓冲区中的数据同步到块设备上。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">block_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">;</span> <span class="token comment">// pos 所在的数据块号</span></span>
<span class="line">    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 块内偏移</span></span>
<span class="line">    <span class="token keyword">int</span> chars<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 累计写入字节数</span></span>
<span class="line">    <span class="token keyword">int</span> size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">register</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设备允许的最大数据块总数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>blk_size<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        size <span class="token operator">=</span> blk_size<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">MINOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        size <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 仍有字节需要被写</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 要写的数据块不能超过设备容许的最大数据块数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> written <span class="token operator">?</span> written <span class="token operator">:</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">        chars <span class="token operator">=</span> BLOCK_SIZE <span class="token operator">-</span> offset<span class="token punctuation">;</span> <span class="token comment">// 本数据块可写入的字节数</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 只需要写 count 即可</span></span>
<span class="line">            chars <span class="token operator">=</span> count<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">==</span> BLOCK_SIZE<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 恰好需要写一整块，直接申请</span></span>
<span class="line">            bh <span class="token operator">=</span> <span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token comment">// 读入当前块，并预读下两块</span></span>
<span class="line">            bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        block<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 下一块</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> written <span class="token operator">?</span> written <span class="token operator">:</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">        p <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_data <span class="token operator">+</span> offset<span class="token punctuation">;</span> <span class="token comment">// p 指向缓冲区中待写位置</span></span>
<span class="line">        offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 除了第一块，之后 offset 都为 0</span></span>
<span class="line">        </span>
<span class="line">        <span class="token operator">*</span>pos <span class="token operator">+=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        written <span class="token operator">+=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        count <span class="token operator">-=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 从用户空间写入缓冲区</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放缓冲区</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> written<span class="token punctuation">;</span> <span class="token comment">// 返回已写入字节数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="block-read-数据块读函数" tabindex="-1"><a class="header-anchor" href="#block-read-数据块读函数"><span>block_read() - 数据块读函数</span></a></h4><p>从设备 dev 的 pos 位置，将 count 字节的数据读入用户缓冲区 buf 中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">block_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&gt;&gt;</span> BLOCK_SIZE_BITS<span class="token punctuation">;</span> <span class="token comment">// 数据块号</span></span>
<span class="line">    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token operator">*</span>pos <span class="token operator">&amp;</span> <span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 块内偏移</span></span>
<span class="line">    <span class="token keyword">int</span> chars<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 累积读入字节数</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">register</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>blk_size<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        size <span class="token operator">=</span> blk_size<span class="token punctuation">[</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">MINOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        size <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 仍有字节需要读取</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 当前读入块号已经大于等于设备上的总块数</span></span>
<span class="line">            <span class="token keyword">return</span> read <span class="token operator">?</span> read <span class="token operator">:</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">        chars <span class="token operator">=</span> BLOCK_SIZE <span class="token operator">-</span> offset<span class="token punctuation">;</span> <span class="token comment">// 本块中需要读取的字节数</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">&gt;</span> count<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 要读取的字节数不满一块</span></span>
<span class="line">            chars <span class="token operator">=</span> count<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">breada</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> block<span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 读入需要读取的数据块，并预读后两块</span></span>
<span class="line">            <span class="token keyword">return</span> read <span class="token operator">?</span> read <span class="token operator">:</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span></span>
<span class="line">        block<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        p <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_data <span class="token operator">+</span> offset<span class="token punctuation">;</span> <span class="token comment">// p 指向缓冲区读取位置开始处</span></span>
<span class="line">        offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 除第一块以外，之后块内偏移都为 0</span></span>
<span class="line">        </span>
<span class="line">        <span class="token operator">*</span>pos <span class="token operator">+=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        read <span class="token operator">+=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        count <span class="token operator">-=</span> chars<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">put_fs_byte</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)]))}const r=s(o,[["render",c],["__file","Chapter 12.9 - block_dev.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%2012%20-%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Chapter%2012.9%20-%20block_dev.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 12.9 - block_dev.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"12.9 block_dev.c 程序","slug":"_12-9-block-dev-c-程序","link":"#_12-9-block-dev-c-程序","children":[{"level":3,"title":"12.9.1 功能描述","slug":"_12-9-1-功能描述","link":"#_12-9-1-功能描述","children":[]},{"level":3,"title":"12.9.2 代码注释","slug":"_12-9-2-代码注释","link":"#_12-9-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 12 - 文件系统/Chapter 12.9 - block_dev.c 程序.md"}');export{r as comp,u as data};
