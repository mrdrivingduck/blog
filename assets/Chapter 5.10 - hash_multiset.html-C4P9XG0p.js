import{_ as n,c as a,a as t,o as p}from"./app-7eKjwDat.js";const e={};function o(c,s){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="chapter-5-10-hash-multiset" tabindex="-1"><a class="header-anchor" href="#chapter-5-10-hash-multiset"><span>Chapter 5.10 - hash_multiset</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 06 23:41</p><p>Nanjing, Jiangsu, China</p><hr><p>SGI STL 的 hash_multiset 以 hashtable 作为底层机制。</p><ul><li>与 multiset (底层为 RB-Tree) 的区别：无序性</li><li>与 hash_set 的区别：允许 key 值重复</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Value</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_HashFcn</span>  <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>hash<span class="token operator">&lt;</span>_Value<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_EqualKey</span> <span class="token function">__STL_DEPENDENT_DEFAULT_TMPL</span><span class="token punctuation">(</span>equal_to<span class="token operator">&lt;</span>_Value<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span>  <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Value<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">hash_multiset</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 hash_set 使用的底层结构类似，因此代码基本相同。比较明显的区别是，构造函数或插入函数中，使用的是 <code>insert_equal()</code> 而不是 <code>insert_unique()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __obj<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_equal</span><span class="token punctuation">(</span>__obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __f<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __l<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _M_ht<span class="token punctuation">.</span><span class="token function">insert_equal</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span>__l<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __f<span class="token punctuation">,</span> const_iterator __l<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> _M_ht<span class="token punctuation">.</span><span class="token function">insert_equal</span><span class="token punctuation">(</span>__f<span class="token punctuation">,</span> __l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，以下两个函数将能够返回任意值或区间 (这是 key 重复的特性决定的)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">size_type <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 返回指定 key 值的个数</span></span>
<span class="line"></span>
<span class="line">pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> iterator<span class="token operator">&gt;</span> <span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __key<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">// 返回指定 key 值的迭代器区间</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> _M_ht<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>__key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const i=n(e,[["render",o],["__file","Chapter 5.10 - hash_multiset.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%205%20-%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%205.10%20-%20hash_multiset.html","title":"Chapter 5.10 - hash_multiset","lang":"en-US","frontmatter":{},"headers":[],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 5 - 关联式容器/Chapter 5.10 - hash_multiset.md"}');export{i as comp,u as data};
