import{_ as s,c as a,a as n,o as l}from"./app-7eKjwDat.js";const i={};function o(d,e){return l(),a("div",null,e[0]||(e[0]=[n(`<h1 id="docker-service-building" tabindex="-1"><a class="header-anchor" href="#docker-service-building"><span>Docker - Service Building</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 09 / 10 22:45</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="一个简单的博客网站" tabindex="-1"><a class="header-anchor" href="#一个简单的博客网站"><span>一个简单的博客网站</span></a></h2><p>通过灵活运用 Docker 的卷、网络等特性，通过不同的镜像和容器共同构建应用服务。只记录思路。使用 Vue.js 开发一个博客网站，构建为静态资源后，部署到 Nginx 服务器上。在这个场景中，最起码需要用到两个镜像：</p><ul><li>一个镜像中包含 Node.js 环境，能够将 Vue.js 代码编译为静态资源</li><li>一个镜像中运行 Nginx 服务器，使网站能够工作</li></ul><p>对上述两个镜像进行构建 (只需要构建一次即可)。每当网站更新时，需要进行以下流程：</p><ol><li>从 Node.js 镜像中启动容器，通过一个卷将源代码挂载到容器中，执行 <code>npm run build</code> 将 Vue.js 代码编译为静态资源，保存到一个专门的资源卷中</li><li>从 Nginx 镜像中启动容器 (实际上启动一次也够了)，挂载与 Node.js 共享的资源卷，其中保存了网站静态资源</li><li>当网站需要更新时，清理并重复上述流程</li></ol><h3 id="node-js-镜像" tabindex="-1"><a class="header-anchor" href="#node-js-镜像"><span>Node.js 镜像</span></a></h3><p>基于一个基础镜像：</p><ol><li>安装 Node.js 环境</li><li>通过 <code>VOLUME</code> 声明 <strong>网页代码卷</strong> 和编译后的 <strong>资源卷</strong></li><li>通过 <code>WORKDIR</code> 将工作目录声明为网页代码卷所在位置</li><li>通过 <code>ENTRYPOINT</code> 指令指定构建命令与参数，如 <code>npm run build</code></li></ol><p>从这个镜像启动容器时，需要将网页的 Vue.js 源代码目录作为卷挂载到容器中。容器将在这个目录下运行网页构建。</p><h3 id="nginx-镜像" tabindex="-1"><a class="header-anchor" href="#nginx-镜像"><span>Nginx 镜像</span></a></h3><p>基于一个基础镜像：</p><ol><li>安装 Nginx</li><li>通过 <code>ADD</code> 指令添加好配置文件</li><li>通过 <code>VOLUME</code> 指定存放网页静态资源的卷</li><li>通过 <code>EXPOSE</code> 指令声明暴露的 Nginx 服务端口</li><li>通过 <code>EXTRYPOINT</code> 和 <code>CMD</code> 指令启动 Nginx 服务</li></ol><h3 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器"><span>启动容器</span></a></h3><p>在启动多个容器时，当这些容器共享卷时，通过 <code>docker run</code> 的 <code>--volumes-from &lt;container&gt;</code> 选项可以直接将指定容器的所有卷全部加入到命令正要启动的容器中。即使删除了使用卷的最后一个容器，卷中的数据也会持久保存。</p><p>当网站的 Vue.js 源代码被更新后，只需重新从 Node.js 镜像通过 <code>docker start</code> 启动容器即可。由于容器间共享的卷会被实时自动更新，因此 Nginx 容器不需要被更新或重启。</p><h3 id="备份卷" tabindex="-1"><a class="header-anchor" href="#备份卷"><span>备份卷</span></a></h3><p>当担心不小心删除某个卷时，我们可以轻松备份它。简单来说，我们可以专门构建一个用于备份卷的容器：</p><ul><li>挂载一个将被备份的卷</li><li>挂载一个存放备份卷的宿主机路径 (实际上这也是一个卷)</li><li>在容器启动时，对将要备份的卷运行 <code>tar</code> 命令打包，并保存到存放备份卷的卷中</li></ul><p>这里会使用到 <code>docker run</code> 命令的 <code>--rm</code> 标志 - 这个标志会使容器进程运行完毕后自动删除容器，因此专门用于那些 <strong>只会被使用一次</strong> 的容器。</p><p>最后，启动一次这个容器，就成功把指定的卷备份了一次。</p><h2 id="捕获多容器应用的日志" tabindex="-1"><a class="header-anchor" href="#捕获多容器应用的日志"><span>捕获多容器应用的日志</span></a></h2><p>当宿主机上运行着一个由多个容器组成的应用时，如何方便地聚合它们的日志？</p><p>首先，所有的容器都会挂载一个卷，将日志存放到宿主机上。不同的容器肯定会对应着不同的日志文件 (比如一个 Node.js + Redis 构成的系统)。接下来，通过一个构建一个能够运行 <em>Logstash</em> 的镜像来聚合日志。</p><p>在镜像中安装 <em>Logstash</em>，并将 <em>Logstash</em> 的配置文件通过 <code>ADD</code> 拷贝到容器内，配置文件中指定了两类信息：</p><ol><li><em>Logstash</em> 将要监视的所有日志文件 (如 Node.js 容器的日志、Redis 主从结点的日志)</li><li><em>Logstash</em> 的输出方式 (比如输出到 STDOUT)</li></ol><p>最后，将 <em>Logstash</em> 的启动命令 <code>/bin/logstash --config=/etc/logstash.conf</code> 作为镜像的 <code>ENTRYPOINT</code>。从这个镜像中启动容器，就能够在当前容器的 STDOUT 上聚合所有容器输出的日志。</p><h2 id="不使用-ssh-管理-docker-容器" tabindex="-1"><a class="header-anchor" href="#不使用-ssh-管理-docker-容器"><span>不使用 SSH 管理 Docker 容器</span></a></h2><p>当我们想要操作一台远程服务器 (虚拟机) 时，通常要通过 SSH 登录上去。当我们想操作一个容器时，由于容器内没有运行 <code>sshd</code> 服务，否则不能使用这种方法。Docker 提供了很多种方法满足了类似需要：</p><ol><li>使用卷，可以直接公开挂载到容器内的卷目录，甚至可以公开容器内的 socket</li><li>可以通过 <code>docker kill</code> 给容器发送信号</li><li>通过 <em>nsenter</em> 登入容器</li></ol><p><em>Nsenter</em> 可以实现与 SSH 类似的功能，它可以让用户登入一个已经存在的容器的 shell，而不需要任何 <code>sshd</code> 等守护进程。<em>Nsenter</em> 的安装命令还让我的脑子有点没转过来：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-v</span> /usr/local/bin:/target jpetazzo/nsenter</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>大致意思就是这个镜像会把 <em>nsenter</em> 安装到容器内的 <code>/target</code> 目录下。现在把宿主机的 <code>/usr/local/bin</code> 作为卷挂载到容器内的 <code>/target</code> 目录下，也就是容器内运行的命令会把 <em>nsenter</em> 安装到宿主机的 <code>/usr/local/bin</code> 目录下。</p><p>安装成功后，在宿主机上获取容器进程的 pid，然后使用 <em>nsenter</em> 登入容器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> nsenter <span class="token parameter variable">--target</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span> <span class="token parameter variable">--mount</span> <span class="token parameter variable">--uts</span> <span class="token parameter variable">--ipc</span> <span class="token parameter variable">--net</span> <span class="token parameter variable">--pid</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在上述命令的后面，还可以直接给出想要在容器内 shell 上执行的命令 (比如 <code>ls</code>)。</p><hr>`,41)]))}const c=s(i,[["render",o],["__file","Docker Service Building.html.vue"]]),t=JSON.parse('{"path":"/notes/Docker/Docker%20Service%20Building.html","title":"Docker - Service Building","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一个简单的博客网站","slug":"一个简单的博客网站","link":"#一个简单的博客网站","children":[{"level":3,"title":"Node.js 镜像","slug":"node-js-镜像","link":"#node-js-镜像","children":[]},{"level":3,"title":"Nginx 镜像","slug":"nginx-镜像","link":"#nginx-镜像","children":[]},{"level":3,"title":"启动容器","slug":"启动容器","link":"#启动容器","children":[]},{"level":3,"title":"备份卷","slug":"备份卷","link":"#备份卷","children":[]}]},{"level":2,"title":"捕获多容器应用的日志","slug":"捕获多容器应用的日志","link":"#捕获多容器应用的日志","children":[]},{"level":2,"title":"不使用 SSH 管理 Docker 容器","slug":"不使用-ssh-管理-docker-容器","link":"#不使用-ssh-管理-docker-容器","children":[]}],"git":{},"filePathRelative":"notes/Docker/Docker Service Building.md"}');export{c as comp,t as data};
