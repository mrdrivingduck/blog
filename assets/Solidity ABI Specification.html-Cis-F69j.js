import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const o={};function p(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="solidity-abi-specification" tabindex="-1"><a class="header-anchor" href="#solidity-abi-specification"><span>Solidity - ABI Specification</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 03 / 05 15:27</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p><em>Application Binary Interface (ABI)</em> 是与 contract 进行交互的标准方式，不管是在区块链之外，还是 contract-contract 的交互。数据会根据其数据类型被编码。</p><p>总体来说，对一个函数 <code>f</code> 的调用，并带有 <code>a_1, ..., a_n</code> 的参数，会被编码为：<code>function_selector(f) enc((a_1, ..., a_n))</code>，即函数 <code>f</code> 的选择符，以及所有参数组合为 tuple 后进行编码的形式。返回值也是 <code>enc((v_1, ..., v_k))</code> 的形式。</p><h2 id="function-selector" tabindex="-1"><a class="header-anchor" href="#function-selector"><span>Function Selector</span></a></h2><p>函数选择符用于定位特定地址的 contract 中的一个唯一的函数。其计算方法是 <strong>函数签名</strong> 的 <em>Keccak-256 (SHA-3)</em> hash 的前四个字节。</p><p>其中，<strong>函数签名</strong> 被定义为函数名 + 函数参数的类型列表。其中，参数类型用逗号隔开，函数签名中没有任何空格。注意函数的返回值不是签名的一部分。</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.7.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token builtin">bytes3</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token builtin">uint32</span> x<span class="token punctuation">,</span> <span class="token builtin">bool</span> y<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span> r <span class="token operator">=</span> x <span class="token operator">&gt;</span> <span class="token number">32</span> <span class="token operator">||</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">sam</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如，对于函数 <code>baz()</code>，其函数签名是：<code>baz(uint32,bool)</code>。然后计算这个签名的 SHA-3，并取前四个字节，就成为函数的 function selector。给定这个 function selector，就相当于确定了要调用的函数。</p><h2 id="argument-encoding" tabindex="-1"><a class="header-anchor" href="#argument-encoding"><span>Argument Encoding</span></a></h2><p>在调用函数时，除了唯一确定要调用的那个函数，还需要将函数参数进行传递。函数参数也需要被编码为特定的格式进行传递。</p><p>可被编码的数据类型：</p><ul><li><code>uint&lt;M&gt;</code> - 其中 <code>0 &lt; M &lt;= 256</code>，<code>M % 8 == 0</code></li><li><code>int&lt;M&gt;</code></li><li><code>address</code> - 等价于 <code>uint160</code> (20 Bytes)</li><li><code>uint</code> / <code>int</code> - 等价于 256-bit 的对应形式</li><li><code>bool</code> - 等价于 <code>uint8</code></li><li><code>fixed&lt;M&gt;x&lt;N&gt;</code> - 带符号的定点数，<code>v = v / (10 ** n)</code></li><li><code>ufixed&lt;M&gt;x&lt;N&gt;</code> - 无符号的定点数</li><li><code>fixed</code> / <code>ufixed</code> - 等价于 <code>fixed128x18</code> / <code>ufixed128x18</code></li><li><code>bytes&lt;M&gt;</code> - M 个字节的二进制数据 (32 Bytes 以下)</li><li><code>function</code> - 20 Bytes 的地址 + 4 Bytes 的 function selector</li></ul><p>定长数组：</p><ul><li><code>&lt;type&gt;[M]</code></li></ul><p>不定长类型:</p><ul><li><code>bytes</code></li><li><code>string</code></li><li><code>&lt;type&gt;[]</code></li></ul><p>所有的类型都可以被组合为 tuple - <code>(T1,T2,...,Tn)</code>。</p><p>以上所有类型，都会被按照特定的格式进行编码。比如，以参数 <code>(69, true)</code> 调用上述 <code>baz()</code> 时，会被编码为：</p><ul><li><code>0xcdcd77c0</code> - <code>sha3(&quot;baz(uint32,bool)&quot;)</code></li><li><code>0x0000000000000000000000000000000000000000000000000000000000000045</code> - 69</li><li><code>0x0000000000000000000000000000000000000000000000000000000000000001</code> - true</li></ul><p>然后拼接起来。</p><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>JSON</span></a></h2><p>上述编码形式用于 contract-contract 之间的交互。对于 contract 与区块链以外 (比如应用程序) 的交互，contract 提供了接口的 JSON 格式描述，实际上一个 contract 对应了一个 JSON Array。其中，每个 JSON 对象描述一个函数或 event。JSON 对象中包含的域：</p><ul><li><code>type</code> - 函数类型：<code>&quot;function&quot;</code> / <code>&quot;constructor&quot;</code> / <code>&quot;receive&quot;</code> / <code>&quot;fallback&quot;</code></li><li><code>name</code> - 函数名</li><li><code>inputs</code> - 函数输入 (参数) <ul><li><code>name</code> - 参数名</li><li><code>type</code> - 参数类型</li><li><code>components</code> (给结构体使用)</li></ul></li><li><code>outputs</code> - 函数输出</li><li><code>stateMutability</code> - 函数描述：<code>pure</code> / <code>view</code> / <code>nonpayable</code> / <code>payable</code></li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;inputs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;payable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;stateMutability&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nonpayable&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;constructor&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;constant&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;inputs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;donate&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;outputs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;payable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;stateMutability&quot;</span><span class="token operator">:</span> <span class="token string">&quot;payable&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;function&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;constant&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;inputs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;outputs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;payable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;stateMutability&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nonpayable&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;function&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,30)]))}const i=s(o,[["render",p],["__file","Solidity ABI Specification.html.vue"]]),u=JSON.parse('{"path":"/notes/Solidity/Solidity%20ABI%20Specification.html","title":"Solidity - ABI Specification","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"Function Selector","slug":"function-selector","link":"#function-selector","children":[]},{"level":2,"title":"Argument Encoding","slug":"argument-encoding","link":"#argument-encoding","children":[]},{"level":2,"title":"JSON","slug":"json","link":"#json","children":[]}],"git":{},"filePathRelative":"notes/Solidity/Solidity ABI Specification.md"}');export{i as comp,u as data};
