import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="algorithm-monotonic-stack" tabindex="-1"><a class="header-anchor" href="#algorithm-monotonic-stack"><span>Algorithm - Monotonic Stack</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 12 / 02 22:46</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p>最近刷 <em>LeetCode</em> 经常会碰到 <strong>单调栈</strong>，特此总结一下。顾名思义，单调栈就是栈内序列是单调递增或单调递减的栈。单调递增栈有什么用途？有哪些使用场景？</p><h2 id="next-higher-man" tabindex="-1"><a class="header-anchor" href="#next-higher-man"><span>Next Higher Man</span></a></h2><p>试想一些身高不同的人无序站队，现在想要知道每一个人一回头能看见的第一个人有多高，也就是身后第一个比他高的人的身高。暴力解法需要 O(N^2) 的复杂度。</p><p>如果从后向前遍历，用一个单调栈就可以记录已经每一个遍历位置之前比它高的人的身高。具体地，如果栈为空，或当前元素比栈顶元素小，那么就将当前元素入栈；如果当前元素比栈顶大，那么不停出栈，直到栈为空或当前元素比栈顶元素小为止，然后将当前元素入栈。</p><p>这个逻辑的本质是，栈中存放了当前位置之后 <strong>身高高于当前位置</strong> 的所有身高。如果当前位置的身高低于栈顶位置的身高，那么当前身高可能会作为之前位置中更矮的人后头看到的第一个高于自己的身高，所以要入栈；而如果当前位置的身高高于栈顶身高，那么当前身高将会遮掉栈中之后位置所有低于自己的身高，所以需要不断 pop 栈中元素，直到栈为空 (没有元素比自己高了) 或当前身高低于栈顶身高 (无法遮住后面更高的人)。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">            |</span>
<span class="line">   |        |</span>
<span class="line">|  |  |     |</span>
<span class="line">|  |  |  |  |</span>
<span class="line">|  |  |  |  |</span>
<span class="line">0  1  2  3  4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 <code>4</code> 位置开始。<code>4</code> 回头看发现栈空且没有比自己更高的人了，于是入栈：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">4 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>3</code> 位置回头看，发现自己遮不住 <code>4</code> (低于栈顶元素)，于是入栈：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">3 4 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>2</code> 位置回头看，发现自己比 <code>3</code> 高，对于更前面的位置，完全可以遮住 <code>3</code>，于是将 <code>3</code> 弹出；但是自己仍然遮不住 <code>4</code>，于是入栈：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">2 4 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>1</code> 位置回头看，发现自己能盖住 <code>2</code> 但盖不住 <code>4</code>，对于之前位置的元素来说，其实已经不可能看到 <code>2</code> 了，于是将其出栈，自身入栈：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1 4 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>0</code> 位置回头看，发现自己盖不过 <code>1</code> 也盖不住 <code>4</code>，于是自身入栈：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">0 1 4 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以看到，该栈形成了一个从栈顶开始递增的序列。在时间复杂度上，每个元素实际上只会出入栈一次，所以是 O(n)。</p><h2 id="biggest-number" tabindex="-1"><a class="header-anchor" href="#biggest-number"><span>Biggest Number</span></a></h2><p>这是今天刷一道 hard 的 <em>LeetCode</em> 题目时用到的一个子功能，挺有意思。给定一个无序的数组，需要找出一个指定长度的子序列，使得这个子序列组成的数的数值最大。比如，对于 <code>[ 3, 5, 2, 8, 6, 4 ]</code>，从其中组成的最大的三位数应该是 <code>864</code>，这里实际上也用到了单调栈的思想。</p><p>既然要组成最大的三位数，那么我们肯定希望位数越高 (越左边) 的数尽可能大，依次单调递减。这里需要特别注意的情况有以下几个：</p><ol><li>由于位数是固定的 (比如三位数)，因此单调栈的容量也是固定的</li><li>贪心可能会有问题，栈中的内容并不严格递减，考虑 <code>[ 3, 5, 2, 8, 9, 4 ]</code> 的情况：如果按照单调栈的思想，最终栈中将只会剩下 <code>9</code> 和 <code>4</code>，从而无法满足三位数的要求 - 也就是说在 pop 元素时还需要考虑剩余序列的长度</li></ol><p>最终实现的代码如下，仍有优化空间：</p><ul><li>条件分支上的优化 (先后顺序，技巧等)</li><li>通过参数支持动态传入比较函数 (类似 STL 的 <code>sort()</code>)</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">decending_stack</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>source<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// capacity &lt;= source.size()</span></span>
<span class="line">    <span class="token comment">// 栈容量不可高于序列长度，否则永远不可能找到这样的序列</span></span>
<span class="line"></span>
<span class="line">    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stack<span class="token punctuation">;</span></span>
<span class="line">    stack<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">capacity</span> <span class="token generic class-name"><span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> capacity <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> stack<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 栈为空时，直接 push</span></span>
<span class="line">            stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当前元素不高于栈顶元素，那么可以作为栈顶元素的更低位</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 栈不为空，当前元素高于栈顶元素</span></span>
<span class="line">            <span class="token comment">// 此时需要 pop 直至栈空，或当前元素不高于栈顶</span></span>
<span class="line">            <span class="token comment">// 重要的限制条件：考虑序列中的剩余元素，如果不够用，则不能 pop</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                    source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                    stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">&gt;</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// stack element + (remaining element) &gt; stack capacity</span></span>
<span class="line">                stack<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 当前元素入栈</span></span>
<span class="line">            stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> stack<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88.md" target="_blank" rel="noopener noreferrer">GitHub fucking-algorithm 单调栈</a></p>`,33)]))}const l=s(p,[["render",c],["__file","Algorithm Monotonic Stack.html.vue"]]),u=JSON.parse('{"path":"/notes/Algorithm/Algorithm%20Monotonic%20Stack.html","title":"Algorithm - Monotonic Stack","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"Next Higher Man","slug":"next-higher-man","link":"#next-higher-man","children":[]},{"level":2,"title":"Biggest Number","slug":"biggest-number","link":"#biggest-number","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/Algorithm/Algorithm Monotonic Stack.md"}');export{l as comp,u as data};
