import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-9-4-ll-rw-blk-c-程序" tabindex="-1"><a class="header-anchor" href="#chapter-9-4-ll-rw-blk-c-程序"><span>Chapter 9.4 - ll_rw_blk.c 程序</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 08 / 23 20:22</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="_9-4-ll-rw-blk-c-程序" tabindex="-1"><a class="header-anchor" href="#_9-4-ll-rw-blk-c-程序"><span>9.4 ll_rw_blk.c 程序</span></a></h2><h3 id="_9-4-1-功能描述" tabindex="-1"><a class="header-anchor" href="#_9-4-1-功能描述"><span>9.4.1 功能描述</span></a></h3><p>用于执行低层块设备读/写操作，是所有块设备与系统其它部分的接口程序。通过调用 <code>ll_rw_block()</code> 函数，系统中其它程序可以异步读写块设备中的数据。主要功能：</p><ul><li>创建读写请求项</li><li>插入到指定设备的请求队列中</li></ul><p>实际读写操作由对应设备的请求项处理函数 <code>do_XX_request()</code> 完成。<code>ll_rw_block()</code> 函数：</p><ul><li>针对一个块设备，建立起一个请求项</li><li>测试块设备的当前请求项 <ul><li>若为空，则设备空闲，将请求项作为设备的当前请求项，并直接调用请求项处理函数</li><li>若不为空，则使用电梯算法将请求项插入请求项链表中，等待处理</li></ul></li></ul><p>请求项处理函数结束后，在中断处理过程中，通过回调 C 函数再次调用请求项处理函数，处理链表中的其余项；只要请求项列表不为空，都会被陆续处理。当请求项链表为空时，请求项处理程序不再向设备控制器发送命令，而是立刻退出。</p><h3 id="_9-4-2-代码注释" tabindex="-1"><a class="header-anchor" href="#_9-4-2-代码注释"><span>9.4.2 代码注释</span></a></h3><h4 id="几个数据结构的定义" tabindex="-1"><a class="header-anchor" href="#几个数据结构的定义"><span>几个数据结构的定义</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 32 个设备请求项</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">request</span> request<span class="token punctuation">[</span>NR_REQUEST<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 请求数组没有空闲项时的临时等待处</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> wait_for_request <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 块设备数组，每项中包含 设备处理函数指针 和 设备当前请求项指针</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">blk_dev_struct</span> blk_dev<span class="token punctuation">[</span>NR_BLK_DEV<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 0 - 无设备</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 1 - 内存</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 2 - 软驱</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 3 - 硬盘</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 4 - ttyx 设备</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 5 - tty 设备</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span>  <span class="token comment">// 6 - lp 打印机设备</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 所有块设备的逻辑块总数 (1 块 = 1 KB)</span></span>
<span class="line"><span class="token comment">// blk_size[MAJOR][MINOR] 为某个子设备上的数据块数</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token operator">*</span> blk_size<span class="token punctuation">[</span>NR_BLK_DEV<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="缓冲块的加锁与解锁函数-lock-buffer-unlock-buffer" tabindex="-1"><a class="header-anchor" href="#缓冲块的加锁与解锁函数-lock-buffer-unlock-buffer"><span>缓冲块的加锁与解锁函数 lock_buffer() &amp; unlock_buffer()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">lock_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关中断</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 缓冲区已被锁定，则睡眠，直到缓冲区解锁</span></span>
<span class="line">        <span class="token comment">// 睡眠结束后仍在循环中</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bh<span class="token operator">-&gt;</span>b_wait<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 锁定缓冲区</span></span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开中断</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;ll_rw_block.c: buffer not locked\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bh<span class="token operator">-&gt;</span>b_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 解锁</span></span>
<span class="line">    <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bh<span class="token operator">-&gt;</span>b_wait<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒等待缓冲区的任务</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="附-电梯算法排序函数宏-in-order" tabindex="-1"><a class="header-anchor" href="#附-电梯算法排序函数宏-in-order"><span><em>附 - 电梯算法排序函数宏 IN_ORDER</em></span></a></h4><p>参数分别为两个请求项结构体的指针，用于在请求项链表中判断顺序。注意优先级：<code>&amp;&amp;</code> &gt; <code>||</code>。显然，按照逻辑，首先判断请求的命令，<code>READ(0)</code> 优先于 <code>WRITE(1)</code>。如果命令相同，则再判断设备号。比如，应当按顺序依次操作各个分区？如果设备号也相同，再比较扇区号，按顺序操作分区。这样调度，磁头移动的总距离比较小</p><blockquote><p>个人理解：可以把这个宏理解为 <code>&lt;</code> 运算符的重载。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IN_ORDER</span><span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token punctuation">(</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">||</span> </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">==</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>cmd <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> </span><span class="token punctuation">\\</span></span>
<span class="line">        <span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">||</span> </span><span class="token punctuation">\\</span></span>
<span class="line">        <span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">==</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sector <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>sector </span><span class="token punctuation">\\</span></span>
<span class="line">    <span class="token expression"><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token expression"><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将请求项插入链表子函数-add-request" tabindex="-1"><a class="header-anchor" href="#将请求项插入链表子函数-add-request"><span>将请求项插入链表子函数 add_request()</span></a></h4><p>参数给出指定的 <strong>块设备结构</strong> 指针和已经设置好的 <strong>请求项结构</strong> 指针。如果设备的 <strong>当前请求项</strong> 为空，则设置当前请求项后，立刻调用请求处理函数。否则将请求项插入链表中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add_request</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blk_dev_struct</span> <span class="token operator">*</span> dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> req<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> tmp<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    req<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 防止请求项被销毁时指针错乱</span></span>
<span class="line">    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关中断</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>bh<span class="token punctuation">)</span></span>
<span class="line">        req<span class="token operator">-&gt;</span>bh<span class="token operator">-&gt;</span>b_dirt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> dev<span class="token operator">-&gt;</span>current_request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 设备当前请求项为空</span></span>
<span class="line">        dev<span class="token operator">-&gt;</span>current_request <span class="token operator">=</span> req<span class="token punctuation">;</span> <span class="token comment">// 设备当前请求项指向当前请求项</span></span>
<span class="line">        <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开中断</span></span>
<span class="line">        <span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>request_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立刻调用设备请求处理函数</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设备当前请求项不为空</span></span>
<span class="line">    <span class="token comment">// tmp 目前指向链表头，即当前正被设备处理的请求</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> tmp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> tmp <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// tmp-&gt;next 为每次进行判断的项</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token operator">-&gt;</span>bh<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 请求项的缓冲块头指针为空</span></span>
<span class="line">            <span class="token comment">// 需要找一个项，已经有可用的缓冲块</span></span>
<span class="line">            <span class="token comment">// 意思是，没有缓冲块的请求项最优先？？？</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>bh<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 电梯算法，IN_ORDER 相当于 &lt; 运算符</span></span>
<span class="line">        <span class="token comment">// (tmp &lt; req || tmp &gt;= tmp-&gt;next) &amp;&amp; req &lt; tmp-&gt;next</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">IN_ORDER</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">IN_ORDER</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">            <span class="token function">IN_ORDER</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> tmp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将 req 插入到 tmp 和 tmp-&gt;next 之间</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">    tmp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> req<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开中断</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建请求项并插入请求队列-make-request" tabindex="-1"><a class="header-anchor" href="#创建请求项并插入请求队列-make-request"><span>创建请求项并插入请求队列 make_request()</span></a></h4><p>参数为：</p><ul><li>主设备号</li><li>命令</li><li>存放数据的缓冲区头指针</li></ul><p>创建请求项时，为保证 <strong>读请求</strong> 的优先性，请求队列的后 1/3 仅用于读请求。在请求数组中搜索空闲项时：</p><ul><li>对于读请求，从数组尾部开始搜索</li><li>对于写请求，从数组的 2/3 处开始搜索</li></ul><p>这样能保证请求队列的后 1/3 全部是读请求。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">make_request</span><span class="token punctuation">(</span><span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 判断命令合法性</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rw_ahead <span class="token operator">=</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READA <span class="token operator">||</span> rw <span class="token operator">==</span> WRITEA<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_lock<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READA<span class="token punctuation">)</span></span>
<span class="line">            rw <span class="token operator">=</span> READ<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            rw <span class="token operator">=</span> WRITE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">!=</span> READ <span class="token operator">&amp;&amp;</span> rw <span class="token operator">!=</span> WRITE<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Bad block dev command, must be R/W/RA/WA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">lock_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rw <span class="token operator">==</span> WRITE <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bh<span class="token operator">-&gt;</span>b_dirt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READ <span class="token operator">&amp;&amp;</span> bh<span class="token operator">-&gt;</span>b_uptodate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">unlock_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// 搜索空闲请求项</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> READ<span class="token punctuation">)</span></span>
<span class="line">        req <span class="token operator">=</span> request <span class="token operator">+</span> NR_REQUEST<span class="token punctuation">;</span> <span class="token comment">// 数组尾部</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        req <span class="token operator">=</span> request <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NR_REQUEST <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组 2/3 处</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>req <span class="token operator">&gt;=</span> request<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>dev <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 找到了空闲项</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req <span class="token operator">&lt;</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 搜索已经超出了数组首地址，说明没有空闲项</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rw_ahead<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">unlock_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 使该进程睡眠，并加入请求队列中</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_for_request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 进程被唤醒后，从这里继续执行</span></span>
<span class="line">        <span class="token comment">// 重新搜索空闲请求项</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// req 已经指向找到的空闲请求项</span></span>
<span class="line">    <span class="token comment">// 向空闲请求项中填写请求信息，并加入队列</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">;</span> <span class="token comment">// 设备号</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>cmd <span class="token operator">=</span> rw<span class="token punctuation">;</span> <span class="token comment">// 命令</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>errors <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 操作产生的错误次数</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>sector <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_blocknr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 起始扇区 (缓冲块转换为扇区)</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>nr_sectors <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 读写一个数据块 (2 个扇区)</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>buffer <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_data<span class="token punctuation">;</span> <span class="token comment">// 需要读写的数据缓冲区</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>waiting <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 等待操作完成的任务</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>bh <span class="token operator">=</span> bh<span class="token punctuation">;</span> <span class="token comment">// 缓冲块头指针</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 下一请求项</span></span>
<span class="line">    <span class="token function">add_request</span><span class="token punctuation">(</span>blk_dev <span class="token operator">+</span> major<span class="token punctuation">.</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// blk_dev[major]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="低级数据块读写函数-ll-rw-block" tabindex="-1"><a class="header-anchor" href="#低级数据块读写函数-ll-rw-block"><span>低级数据块读写函数 ll_rw_block()</span></a></h4><p>每次读写 1KB 的数据块 (2 个扇区)，是块设备驱动程序与系统其它部分之间的接口函数。创建请求项，并插入指定块设备的请求项链表中。在调用该函数之前，调用者需要把读/写块设备的信息保存在缓冲区头结构中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">ll_rw_block</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>major <span class="token operator">=</span> <span class="token function">MAJOR</span><span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_dev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> NR_BLK_DEV <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>blk_dev<span class="token punctuation">[</span>major<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 主设备号不存在 || 该设备的请求处理函数不存在</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to read nonexistent block-device\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">make_request</span><span class="token punctuation">(</span>major<span class="token punctuation">,</span> rw<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="低级页面读写函数-ll-rw-page" tabindex="-1"><a class="header-anchor" href="#低级页面读写函数-ll-rw-page"><span>低级页面读写函数 ll_rw_page()</span></a></h4><p>每次读写 4KB 的页 (8 个扇区)。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">ll_rw_page</span><span class="token punctuation">(</span><span class="token keyword">int</span> rw<span class="token punctuation">,</span> <span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span> req<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> major <span class="token operator">=</span> <span class="token function">MAJOR</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 参数合法性检测</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>major <span class="token operator">&gt;=</span> NR_BLK_DEV <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>blk_dev<span class="token punctuation">[</span>major<span class="token punctuation">]</span><span class="token punctuation">.</span>request_fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 主设备号不存在 || 设备的请求操作函数不存在</span></span>
<span class="line">        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;Trying to read nonexistent block-device\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">!=</span> READ <span class="token operator">&amp;&amp;</span> rw <span class="token operator">!=</span> WRITE<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 命令不是 READ 也不是 WRITE，内核出错停机</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Bad block dev command, must be R/W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">repeat<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// 搜索空闲请求项</span></span>
<span class="line">    req <span class="token operator">=</span> request <span class="token operator">+</span> NR_REQUEST<span class="token punctuation">;</span> <span class="token comment">// 指向请求数组结尾</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>req <span class="token operator">&gt;=</span> request<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>dev <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 空闲项</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req <span class="token operator">&lt;</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 未找到空闲项</span></span>
<span class="line">        <span class="token comment">// 睡眠，并加入等待队列</span></span>
<span class="line">        <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait_for_request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 被唤醒后从该处继续执行，重新搜索空闲请求项</span></span>
<span class="line">        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 找到空闲请求项</span></span>
<span class="line">    <span class="token comment">// 填写信息并加入请求项链表中</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> dev<span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>cmd <span class="token operator">=</span> rw<span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>errors <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>sector <span class="token operator">=</span> page <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>nr_sectors <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>waiting <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>bh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span> <span class="token comment">// 当前进程置为不可中断等待</span></span>
<span class="line">    <span class="token function">add_request</span><span class="token punctuation">(</span>blk_dev <span class="token operator">+</span> major<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入请求项链表</span></span>
<span class="line">    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调度其它进程运行</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="块设备初始化函数-blk-dev-init" tabindex="-1"><a class="header-anchor" href="#块设备初始化函数-blk-dev-init"><span>块设备初始化函数 blk_dev_init()</span></a></h4><p>由初始化程序 <code>main.c</code> 调用，主要功能是初始化请求项数组：</p><ul><li>将所有请求项置为空闲 (dev == -1)</li><li>将所有链表指针置为 NULL</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">blk_dev_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_REQUEST<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        request<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dev <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        request<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42)]))}const i=s(t,[["render",l],["__file","Chapter 9.4 - ll_rw_blk.c 程序.html.vue"]]),u=JSON.parse('{"path":"/linux-kernel-comments-notes/Chapter%209%20-%20%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/Chapter%209.4%20-%20ll_rw_blk.c%20%E7%A8%8B%E5%BA%8F.html","title":"Chapter 9.4 - ll_rw_blk.c 程序","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"9.4 ll_rw_blk.c 程序","slug":"_9-4-ll-rw-blk-c-程序","link":"#_9-4-ll-rw-blk-c-程序","children":[{"level":3,"title":"9.4.1 功能描述","slug":"_9-4-1-功能描述","link":"#_9-4-1-功能描述","children":[]},{"level":3,"title":"9.4.2 代码注释","slug":"_9-4-2-代码注释","link":"#_9-4-2-代码注释","children":[]}]}],"git":{},"filePathRelative":"linux-kernel-comments-notes/Chapter 9 - 块设备驱动程序/Chapter 9.4 - ll_rw_blk.c 程序.md"}');export{i as comp,u as data};
