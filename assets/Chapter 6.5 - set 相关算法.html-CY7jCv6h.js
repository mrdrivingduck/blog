import{_ as n,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(l,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="chapter-6-5-set-相关算法" tabindex="-1"><a class="header-anchor" href="#chapter-6-5-set-相关算法"><span>Chapter 6.5 - set 相关算法</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 14 16:14</p><p>Nanjing, Jiangsu, China</p><hr><p>在 STL 中，STL 的定义要求 set 的元素不得重复，并且经过排序。基于这个定义，hash_set 和 hash_multiset 由于不排序，因此不可以应用下面的算法。</p><p>set 的这几个相关算法默认都使用了 <code>operator&lt;</code>，配合两个序列的元素作为操作数 (两种不同位置)，可以得到两个序列对应元素的小于 / 大于 / 等于三种相对关系，从而实现相应操作。<code>operator&lt;</code> 全都可以换成用户自定义的仿函数。</p><h2 id="_6-5-1-set-union" tabindex="-1"><a class="header-anchor" href="#_6-5-1-set-union"><span>6.5.1 set_union</span></a></h2><p><code>set_union()</code> 构造两个 set 的并集，也就是构造一个集合，集合内包含两个 set 内的每一个元素。如果两个 set 都出现了同一个元素，那么每一对相同元素将会对应目标集合中的一个元素 (看代码实现可知)。算法使用 <code>operator&lt;</code> 来确定两个元素是否相等 (<code>a &lt; b</code> / <code>b &lt; a</code>)，也可以接收用户提供的二元仿函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">set_union</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                      _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                      _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 未到两个序列的尾部</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first1 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第一个集合的元素较小</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span>      <span class="token comment">// 复制第一个集合的元素到目标集合</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>                 <span class="token comment">// 第一个集合的下一个元素</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第二个集合的元素较小</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first2<span class="token punctuation">;</span>           <span class="token comment">// 复制第二个集合的元素到目标集合</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span>                      <span class="token comment">// 第二个集合的下一个元素</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 两个集合的元素相等</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span>  <span class="token comment">// 复制一个元素到目标集合 (因此一对相等元素对应目标集合的一个元素)</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>             <span class="token comment">// 两个集合的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first2<span class="token punctuation">,</span> __last2<span class="token punctuation">,</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 拷贝未到结尾的序列剩余元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">set_union</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                      _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                      _OutputIter __result<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 接收用户提供的二元仿函数</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Compare<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// operator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first2<span class="token punctuation">,</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// operator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first2<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first2<span class="token punctuation">,</span> __last2<span class="token punctuation">,</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-5-2-set-intersection" tabindex="-1"><a class="header-anchor" href="#_6-5-2-set-intersection"><span>6.5.2 set_intersection</span></a></h2><p><code>set_intersection()</code> 构造两个 set 的交集，即集合内为同时出现在两个 set 内的每一对元素。同样提供两个版本：<code>operator&lt;</code> 版本和用户自定义的二元仿函数版本。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">set_intersection</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                             _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                             _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span>  <span class="token comment">// 两个集合没到尾部</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first1 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span>  <span class="token comment">// 第一个集合的元素比第二个集合的元素小</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>               <span class="token comment">// 第一个集合的下一个元素 (前一个元素不可能在交集中)</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span>  <span class="token comment">// 第二个集合的元素比第一个集合的元素小</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span>                    <span class="token comment">// 第二个集合的下一个元素 (前一个元素不可能在交集中)</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 第一个集合的元素与第二个集合的元素相等</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span>  <span class="token comment">// 复制该元素到目标集合中</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>             <span class="token comment">// 第一个集合的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span>             <span class="token comment">// 第二个集合的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span>             <span class="token comment">// 目标集合的下一个位置</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span>  <span class="token comment">// 返回目标集合尾迭代器</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">set_intersection</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                             _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                             _OutputIter __result<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Compare<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// operator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first2<span class="token punctuation">,</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// opeator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-5-3-set-difference" tabindex="-1"><a class="header-anchor" href="#_6-5-3-set-difference"><span>6.5.3 set_difference</span></a></h2><p>构造两个集合之间的差集，即出现在第一个集合但没有出现在第二个集合中的所有元素。同样支持 <code>operator&lt;</code> 和用户自定义仿函数的实现版本。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">set_difference</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                           _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                           _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span>  <span class="token comment">// 两个序列没到结尾</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first1 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第一个集合中的元素 &lt; 第二个集合中的元素</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span>      <span class="token comment">// 这个元素肯定不会出现在第二个集合中，加入差集</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>                 <span class="token comment">// 第一个集合的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span>                 <span class="token comment">// 目标集合的下一个位置</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span>  <span class="token comment">// 第二个集合中的元素 &lt; 第一个集合中的元素</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span>                    <span class="token comment">// 第二个集合中的下一个元素 (忽略当前元素)</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment">// 第一个集合中的元素 == 第二个集合中的元素，肯定不在差集中</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>  <span class="token comment">// 第一个集合中的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span>  <span class="token comment">// 第二个集合中的下一个元素</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 第一个集合中的剩余元素全部复制到差集中</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter <span class="token function">set_difference</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                           _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                           _OutputIter __result<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Compare<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 将 operator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first2<span class="token punctuation">,</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 将 operator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-5-4-set-symmetric-difference" tabindex="-1"><a class="header-anchor" href="#_6-5-4-set-symmetric-difference"><span>6.5.4 set_symmetric_difference</span></a></h2><p><code>set_symmetric_difference()</code> 可以得到两个集合的对称差集，即 <code>(S1 - S2) ∪ (S2 - S1)</code>，<em>出现在第一个集合但不出现在第二个集合</em> 以及 <em>出现在第二个集合但不出现在第一个集合</em> 的每一个元素。参考之前非对称差集的实现 (<code>set_difference()</code>) 就可以知道如何实现这个函数。同样，支持 <code>operator&lt;</code> 和二元仿函数两个版本。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter</span>
<span class="line"><span class="token function">set_symmetric_difference</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                         _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                         _OutputIter __result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">                 _LessThanComparable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span>  <span class="token comment">// 两个序列都没有到尾部</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first1 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第一个集合的元素 &lt; 第二个集合的元素</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span>      <span class="token comment">// 第一个集合的元素加入对称差集</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>                 <span class="token comment">// 第一个集合的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第二个集合的元素 &lt; 第一个集合的元素</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first2<span class="token punctuation">;</span>           <span class="token comment">// 第二个集合的元素加入对称差集</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span>                      <span class="token comment">// 第二个集合的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment">// 第一个集合的元素 == 第二个集合的元素，这对元素肯定不在对称差集中</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>  <span class="token comment">// 第一个集合的下一个元素</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span>  <span class="token comment">// 第二个集合的下一个元素</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first2<span class="token punctuation">,</span> __last2<span class="token punctuation">,</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将还未到结尾的集合剩余元素加入到对称差集中</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InputIter1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_InputIter2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_OutputIter</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">_Compare</span><span class="token operator">&gt;</span></span>
<span class="line">_OutputIter</span>
<span class="line"><span class="token function">set_symmetric_difference</span><span class="token punctuation">(</span>_InputIter1 __first1<span class="token punctuation">,</span> _InputIter1 __last1<span class="token punctuation">,</span></span>
<span class="line">                         _InputIter2 __first2<span class="token punctuation">,</span> _InputIter2 __last2<span class="token punctuation">,</span></span>
<span class="line">                         _OutputIter __result<span class="token punctuation">,</span></span>
<span class="line">                         _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter1<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_InputIter2<span class="token punctuation">,</span> _InputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES</span><span class="token punctuation">(</span>_OutputIter<span class="token punctuation">,</span> _OutputIterator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_REQUIRES_SAME_TYPE</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">__STL_BINARY_FUNCTION_CHECK</span><span class="token punctuation">(</span>_Compare<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter1<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span></span>
<span class="line">       <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIter2<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first1<span class="token punctuation">,</span> <span class="token operator">*</span>__first2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// operator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span><span class="token operator">*</span>__first2<span class="token punctuation">,</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// operator&lt; 替换为二元仿函数</span></span>
<span class="line">      <span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token operator">*</span>__first2<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">++</span>__first1<span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">++</span>__first2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first2<span class="token punctuation">,</span> __last2<span class="token punctuation">,</span> <span class="token function">copy</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __last1<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)]))}const i=n(e,[["render",o],["__file","Chapter 6.5 - set 相关算法.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%206%20-%20%E7%AE%97%E6%B3%95/Chapter%206.5%20-%20set%20%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html","title":"Chapter 6.5 - set 相关算法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"6.5.1 set_union","slug":"_6-5-1-set-union","link":"#_6-5-1-set-union","children":[]},{"level":2,"title":"6.5.2 set_intersection","slug":"_6-5-2-set-intersection","link":"#_6-5-2-set-intersection","children":[]},{"level":2,"title":"6.5.3 set_difference","slug":"_6-5-3-set-difference","link":"#_6-5-3-set-difference","children":[]},{"level":2,"title":"6.5.4 set_symmetric_difference","slug":"_6-5-4-set-symmetric-difference","link":"#_6-5-4-set-symmetric-difference","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 6 - 算法/Chapter 6.5 - set 相关算法.md"}');export{i as comp,u as data};
