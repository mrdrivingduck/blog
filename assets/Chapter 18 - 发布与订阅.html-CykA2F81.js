import{_ as n,c as a,a as e,o as i}from"./app-7eKjwDat.js";const p={};function t(l,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="chapter-18-发布与订阅" tabindex="-1"><a class="header-anchor" href="#chapter-18-发布与订阅"><span>Chapter 18 - 发布与订阅</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 09 20:53</p><p>Nanjing, Jiangsu, China</p><hr><p>Redis 客户端可以订阅一个或多个频道，称为频道的订阅者，每当其它客户端向被订阅的频道发送消息时，频道的 <strong>所有订阅者</strong> 都会收到这条消息。另外，客户端还可以订阅一个 <strong>频道模式</strong>，当其它客户端向某个频道发布消息时，如果频道与频道模式匹配，那么除了频道订阅者以外，频道模式的订阅者也能接收到消息。</p><h2 id="subscription" tabindex="-1"><a class="header-anchor" href="#subscription"><span>Subscription</span></a></h2><p>Redis 服务器将所有订阅关系维护在服务器状态的 <code>pubsub_channels</code> 字典中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    dict <span class="token operator">*</span>pubsub_channels<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典的 key 是被订阅的频道名；字典的 value 是一个链表，记录了订阅该频道的所有客户端。当客户端发出订阅请求时，服务器首先查找对应的频道名是否存在，如果存在，那么直接将客户端加入链表；如果不存在，则会新建一个键，并将客户端放到链表的第一个位置。</p><p>解除订阅的过程恰恰相反。服务器通过遍历订阅字典，把客户端从频道 key 对应的链表中删除。如果客户端被移除后，频道 key 对应的链表为空，那么这个 key 也将会从字典中删除。</p><h2 id="pattern-subscription" tabindex="-1"><a class="header-anchor" href="#pattern-subscription"><span>Pattern Subscription</span></a></h2><p>服务器将所有模式的订阅信息维护在服务器状态中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    list <span class="token operator">*</span>pubsub_patterns<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个属性是一个链表，其中的每个结点都记录了一个被订阅的 pattern 和对应的客户端：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pubsubPattern</span> <span class="token punctuation">{</span></span>
<span class="line">    redisClient <span class="token operator">*</span>client<span class="token punctuation">;</span></span>
<span class="line">    robj <span class="token operator">*</span>pattern<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当客户端请求订阅模式时，将构造一个新的 <code>pubsubPattern</code> 结构，并添加到链表尾部；退订时，只需要将该结构从链表中移除。</p><hr><h2 id="publishing-message" tabindex="-1"><a class="header-anchor" href="#publishing-message"><span>Publishing Message</span></a></h2><p>当 Redis 客户端执行 <code>PUBLISH &lt;channel&gt; &lt;message&gt;</code> 后，服务器将执行如下动作：</p><ol><li>将 message 发给 channel 的所有订阅者</li><li>将消息发送给所有与 channel 匹配的 pattern 对应的订阅者</li></ol><p>第一步，服务器从 <code>pubsub_channels</code> 字典中取得该频道对应的客户端链表，遍历链表依次将消息发送给订阅者客户端；第二步，服务器遍历 <code>pubsub_patterns</code> 链表，如果 pattern 匹配，也将消息推送给对应的客户端。</p><hr><h2 id="subscription-information" tabindex="-1"><a class="header-anchor" href="#subscription-information"><span>Subscription Information</span></a></h2><p>客户端可以通过命令查看服务器中的所有订阅关系。</p><h3 id="pubsub-channels" tabindex="-1"><a class="header-anchor" href="#pubsub-channels"><span>PUBSUB CHANNELS</span></a></h3><p>该命令返回服务器当前被订阅的频道。遍历服务器的频道字典即可。如果命令还指定了 pattern，则只返回匹配的频道。</p><h3 id="pubsub-numsub" tabindex="-1"><a class="header-anchor" href="#pubsub-numsub"><span>PUBSUB NUMSUB</span></a></h3><p>返回频道的订阅者数量。服务器通过 <code>pubsub_channels</code> 字典，找到频道对应的订阅者链表，然后返回订阅者链表的长度。</p><h3 id="pubsub-numpat" tabindex="-1"><a class="header-anchor" href="#pubsub-numpat"><span>PUBSUB NUMPAT</span></a></h3><p>返回服务器当前订阅模式的数量。服务器直接返回 <code>pubsub_patterns</code> 链表的长度。</p>`,31)]))}const r=n(p,[["render",t],["__file","Chapter 18 - 发布与订阅.html.vue"]]),u=JSON.parse('{"path":"/redis-implementation-notes/Part%204%20-%20%E7%8B%AC%E7%AB%8B%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/Chapter%2018%20-%20%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85.html","title":"Chapter 18 - 发布与订阅","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Subscription","slug":"subscription","link":"#subscription","children":[]},{"level":2,"title":"Pattern Subscription","slug":"pattern-subscription","link":"#pattern-subscription","children":[]},{"level":2,"title":"Publishing Message","slug":"publishing-message","link":"#publishing-message","children":[]},{"level":2,"title":"Subscription Information","slug":"subscription-information","link":"#subscription-information","children":[{"level":3,"title":"PUBSUB CHANNELS","slug":"pubsub-channels","link":"#pubsub-channels","children":[]},{"level":3,"title":"PUBSUB NUMSUB","slug":"pubsub-numsub","link":"#pubsub-numsub","children":[]},{"level":3,"title":"PUBSUB NUMPAT","slug":"pubsub-numpat","link":"#pubsub-numpat","children":[]}]}],"git":{},"filePathRelative":"redis-implementation-notes/Part 4 - 独立功能的实现/Chapter 18 - 发布与订阅.md"}');export{r as comp,u as data};
