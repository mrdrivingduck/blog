import{_ as s,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="java-thread" tabindex="-1"><a class="header-anchor" href="#java-thread"><span>Java - Thread</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 10 / 29 17:11</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="java-thread-1" tabindex="-1"><a class="header-anchor" href="#java-thread-1"><span>Java Thread</span></a></h2><p>Java 程序天生就是多线程程序，在启动一个普通的 Java 程序时，将起码包含以下线程：</p><ol><li>Main 线程 - 用户程序入口</li><li>Reference Handler - 清楚引用的线程</li><li>Finalizer - 调用对象 finalize 函数的线程</li><li>Signal Dispatcher - 分发处理发送给 JVM 进程信号的线程</li></ol><h2 id="thread-priority" tabindex="-1"><a class="header-anchor" href="#thread-priority"><span>Thread Priority</span></a></h2><p>在 Java 线程中，通过整形成员变量 <code>priority</code> 来控制线程优先级，取值范围为 1 - 10。在线程创建的时候可以使用 <code>setPriority(int)</code> 函数来修改默认的优先级 <code>5</code>。在不同 JVM 和 OS 上，线程的规划会存在差异，有些 OS 甚至会忽略对线程优先级的设定 - 因此线程优先级 <strong>不能作为程序正确性的依赖</strong>。</p><h2 id="thread-status" tabindex="-1"><a class="header-anchor" href="#thread-status"><span>Thread Status</span></a></h2><p>Java 线程在生命周期中只可能有如下几种状态：</p><ul><li><code>NEW</code> - 初始状态，刚刚被创建，还没有调用 <code>start()</code> 函数</li><li><code>RUNNABLE</code> - 运行状态，笼统地包含 OS 中的 <strong>就绪</strong> 和 <strong>运行</strong> 两种状态</li><li><code>BLOCKED</code> - 阻塞状态，线程阻塞于锁</li><li><code>WAITING</code> - 等待状态，需要等待其它线程做出一些特定的动作 (通知 / 中断)</li><li><code>TIME_WAITING</code> - 超时等待，在指定时间内自行返回</li><li><code>TERMINATED</code> - 终止状态，线程执行完毕</li></ul><p>Daemon 线程工作在程序后台进行调度和支持工作，但是 JVM 退出时 Daemon 线程中的 <code>finally</code> 块不一定会被执行，所以不能依靠 <code>finally()</code> 来进行资源关闭或清理。</p><h2 id="start-stop" tabindex="-1"><a class="header-anchor" href="#start-stop"><span>Start / Stop</span></a></h2><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>Build</span></a></h3><p>线程对象在构造时需要提供属性：</p><ul><li>所属线程组</li><li>线程优先级</li><li>是否是 daemon 线程</li><li>...</li></ul><p>一个新构造的线程对象由其 parent 线程进行空间分配，并继承了 parent 线程的大部分信息，但是会获得一个唯一的 ID 来标识这个线程。至此，线程对象就在堆上初始化完毕等待运行。</p><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span>Start</span></a></h3><p>线程对象初始化完毕后，调用 <code>start()</code> 即可启动线程。具体含义是 parent 线程 (即调用 <code>start()</code> 的线程) 告知 JVM 的线程调度器可以启动该线程。</p><h3 id="interrupt" tabindex="-1"><a class="header-anchor" href="#interrupt"><span>Interrupt</span></a></h3><p>中断可以理解为线程的一个 <strong>标志位</strong> 属性，表示线程是否被其它线程中断过。当其它线程通过调用该线程的 <code>interrupt()</code> 可以将该线程的中断标志位置为。线程可以通过 <code>isInterrupted()</code> 函数检查自身的中断标志位来对中断进行响应，还可以调用 <code>Thread.interrupted()</code> 对当前线程的中断标志位进行 <strong>复位</strong>。</p><h3 id="suspend-resume-stop" tabindex="-1"><a class="header-anchor" href="#suspend-resume-stop"><span>Suspend / Resume / Stop</span></a></h3><p>这些是 <strong>过时</strong> 的线程 API：</p><ul><li><code>suspend()</code> - 暂停线程</li><li><code>resume()</code> - 线程继续工作</li><li><code>stop()</code> - 停止线程</li></ul><p>这些 API 过期的原因有，对于 <code>suspend()</code> 来说，在调用后线程不会释放已经占有的资源，而是占着资源进入睡眠状态，这样很容易引发死锁；类似地，<code>stop()</code> 终结线程时，没有给予线程完成资源释放工作的机会，从而无法保证资源的正常释放。</p><p>上面提到的中断实际上是一种安全而优雅的停止线程的方式 - 线程只需要检查自身的中断标志位就可以决定是否停止。</p><h2 id="inter-thread-communication" tabindex="-1"><a class="header-anchor" href="#inter-thread-communication"><span>Inter-Thread Communication</span></a></h2><h3 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>Synchronized</span></a></h3><p>对于 <code>synchronized</code> 函数块来说，JVM 使用 <code>monitorenter</code> 和 <code>monitorexit</code> 指令实现同步；对于 <code>synchronized</code> 函数来说，则是依靠函数修饰符上的 <code>ACC_SYNCHRONIZED</code> 实现。本质上，是对一个对象的 monitor 进行排他获取。任意一个对象都有自己的 monitor。在进入 <code>synchronized</code> 修饰的代码时，线程需要获取到锁对象的 monitor 才能进入临界区，其它线程将会被 <strong>阻塞</strong> 在临界区的入口处，进入 <code>BLOCKED</code> 状态。</p><p>当线程进入 <code>BLOCKED</code> 状态后，将会进入到相应对象的 <strong>同步队列 (Synchronized Queue)</strong> 中。当锁对象被线程释放后，释放操作将会唤醒阻塞在同步队列中的线程，使这些线程重新尝试对锁对象的 monitor 进行获取。</p><h3 id="wait-notify" tabindex="-1"><a class="header-anchor" href="#wait-notify"><span>Wait / Notify</span></a></h3><p>线程 A 调用了对象 O 的 <code>wait()</code> 函数后进入 <code>WAITING</code> 状态，线程 B 调用对象 O 的 <code>notify()</code> / <code>notifyAll()</code> 函数后，线程 A 将从 <code>wait()</code> 函数返回进行后续工作。使用细节：</p><ol><li>使用 <code>wait()</code> / <code>notify()</code> / <code>notifyAll()</code> 时 <strong>需要对调用对象加锁</strong></li><li>调用 <code>wait()</code> 后，线程状态由 <code>RUNNING</code> 变为 <code>WAITING</code>，<strong>放弃锁</strong> 并进入 <strong>等待队列 (Wait Queue)</strong></li><li>调用 <code>notify()</code> / <code>notifyAll()</code> 后，等待线程暂时不会从 <code>wait()</code> 返回 (因为锁还在调用 <code>notify()</code> 的线程手上)</li><li><code>notify()</code> 函数将等待队列中的一个等待线程移入同步队列；<code>notifyAll()</code> 函数将等待队列中的全部线程都移入同步队列，被移动的线程状态由 <code>WAITING</code> 变为 <code>BLOCKED</code></li><li>调用 <code>notify()</code> 的线程释放锁后，某个之前正在等待的线程重新获得了锁，此时才会从 <code>wait()</code> 返回并继续向下进行</li></ol><p>等待方的编程范式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取对象锁</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 条件不满足，每轮等待要重新检查等待条件</span></span>
<span class="line">        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// lock TO DO ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通知方的编程范式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// condition TO DO ...</span></span>
<span class="line">    lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe"><span>Pipe</span></a></h3><p>另外，线程间还可以通过 <code>PipedOutputStream</code> / <code>PipedInputStream</code> / <code>PipedReader</code> / <code>PipedWriter</code> 来创建两个线程之间的管道进行通信。这类流都需要调用 <code>connect()</code> 函数将输入流和输出流绑定，否则将会抛出异常。</p><h3 id="thread-join" tabindex="-1"><a class="header-anchor" href="#thread-join"><span>Thread.join()</span></a></h3><p>如果线程 A 中执行了 <code>thread.join()</code>，代表线程 A 将等待 <code>thread</code> 线程终止后，才会从这个函数返回；另外，这个函数还有超时版本。通过线程 A 调用的 <code>thread.join()</code> 的源代码来看看线程 A 是如何等待的：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">  * Waits at most <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">millis</span></span><span class="token punctuation">}</span> milliseconds for this thread to</span>
<span class="line">  * die. A timeout of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> means to wait forever.</span>
<span class="line">  *</span>
<span class="line">  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> This implementation uses a loop of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>wait</span></span><span class="token punctuation">}</span> calls</span>
<span class="line">  * conditioned on <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>isAlive</span></span><span class="token punctuation">}</span>. As a thread terminates the</span>
<span class="line">  * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>notifyAll</span></span><span class="token punctuation">}</span> method is invoked. It is recommended that</span>
<span class="line">  * applications not use <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">wait</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">notify</span></span><span class="token punctuation">}</span>, or</span>
<span class="line">  * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">notifyAll</span></span><span class="token punctuation">}</span> on <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Thread</span></span></span><span class="token punctuation">}</span> instances.</span>
<span class="line">  *</span>
<span class="line">  * <span class="token keyword">@param</span>  <span class="token parameter">millis</span></span>
<span class="line">  *         the time to wait in milliseconds</span>
<span class="line">  *</span>
<span class="line">  * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span></span>
<span class="line">  *          if the value of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">millis</span></span><span class="token punctuation">}</span> is negative</span>
<span class="line">  *</span>
<span class="line">  * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">InterruptedException</span></span></span>
<span class="line">  *          if any thread has interrupted the current thread. The</span>
<span class="line">  *          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>interrupted status<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> of the current thread is</span>
<span class="line">  *          cleared when this exception is thrown.</span>
<span class="line">  */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout value is negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">long</span> delay <span class="token operator">=</span> millis <span class="token operator">-</span> now<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">wait</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> base<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于非定时版本来说，<code>millis</code> 参数会传入 <code>0L</code>，那么函数实际有效的逻辑只有：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是不断判断 <code>thread</code> 线程是否还存活，如果还存活，就继续等待。当 <code>thread</code> 线程自身终止时，将会调用自身的 <code>notifyAll()</code> 函数，从而通知所有等待该线程终止的线程 (包括线程 A)。</p><h3 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span>ThreadLocal</span></a></h3><blockquote><p>下次单独研究 👶</p></blockquote><h2 id="timeout-waiting" tabindex="-1"><a class="header-anchor" href="#timeout-waiting"><span>Timeout Waiting</span></a></h2><p>如何在 wait / notify 编程范式中加入超时等待的功能？定义变量：</p><ul><li>剩余等待时间 <code>remaining = T</code> (初始化)</li><li>超时时间 <code>future = now + T</code></li></ul><p>那么只需要对等待 <code>remaining</code> 的时间即可。如果中途线程被唤醒，那么需要重新计算一下剩余等待时间：</p><ul><li>如果剩余等待时间还有，那么继续 wait</li><li>如果剩余等待时间已过，那么退出</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> mills<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 隐式对当前对象加锁</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">long</span> future <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mills<span class="token punctuation">;</span> <span class="token comment">// 超时时间</span></span>
<span class="line">    <span class="token keyword">long</span> remaining <span class="token operator">=</span> mills<span class="token punctuation">;</span> <span class="token comment">// 剩余时间</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 结果还未满足，且还有剩余时间</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> remaining <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">wait</span><span class="token punctuation">(</span>remaining<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待</span></span>
<span class="line">        remaining <span class="token operator">=</span> future <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 被唤醒后重新计算剩余时间</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 结果已满足 OR 剩余时间已经耗尽</span></span>
<span class="line">    <span class="token comment">// 返回结果</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,56)]))}const c=s(p,[["render",l],["__file","Java Thread.html.vue"]]),d=JSON.parse('{"path":"/notes/Java/Java%20Thread.html","title":"Java - Thread","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Java Thread","slug":"java-thread-1","link":"#java-thread-1","children":[]},{"level":2,"title":"Thread Priority","slug":"thread-priority","link":"#thread-priority","children":[]},{"level":2,"title":"Thread Status","slug":"thread-status","link":"#thread-status","children":[]},{"level":2,"title":"Start / Stop","slug":"start-stop","link":"#start-stop","children":[{"level":3,"title":"Build","slug":"build","link":"#build","children":[]},{"level":3,"title":"Start","slug":"start","link":"#start","children":[]},{"level":3,"title":"Interrupt","slug":"interrupt","link":"#interrupt","children":[]},{"level":3,"title":"Suspend / Resume / Stop","slug":"suspend-resume-stop","link":"#suspend-resume-stop","children":[]}]},{"level":2,"title":"Inter-Thread Communication","slug":"inter-thread-communication","link":"#inter-thread-communication","children":[{"level":3,"title":"Synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":3,"title":"Wait / Notify","slug":"wait-notify","link":"#wait-notify","children":[]},{"level":3,"title":"Pipe","slug":"pipe","link":"#pipe","children":[]},{"level":3,"title":"Thread.join()","slug":"thread-join","link":"#thread-join","children":[]},{"level":3,"title":"ThreadLocal","slug":"threadlocal","link":"#threadlocal","children":[]}]},{"level":2,"title":"Timeout Waiting","slug":"timeout-waiting","link":"#timeout-waiting","children":[]}],"git":{},"filePathRelative":"notes/Java/Java Thread.md"}');export{c as comp,d as data};
