import{_ as s,c as a,a as p,o as e}from"./app-7eKjwDat.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-9-9-9-10-文件的异步-i-o-与-tcp" tabindex="-1"><a class="header-anchor" href="#chapter-9-9-9-10-文件的异步-i-o-与-tcp"><span>Chapter 9.9-9.10 - 文件的异步 I/O 与 TCP</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 07 / 28 10:08</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_9-9-文件的异步-i-o" tabindex="-1"><a class="header-anchor" href="#_9-9-文件的异步-i-o"><span>9.9 文件的异步 I/O</span></a></h2><p>Linux kernel 2.6.2x 之后开始支持文件异步 I/O (不是 glibc 库中基于多线程实现的异步 I/O)。这种 I/O 由内核实现，只有内核成功完成了磁盘操作，内核才会通知进程。Nginx 把读取文件的操作 <strong>异步地</strong> 提交给内核后，内核会通知 I/O 设备独立工作，此时 Nginx 进程又可以继续充分使用 CPU。另外，当大量读事件堆积到 I/O 设备上时，能够充分发挥 <em>电梯调度算法</em> 的优势，降低读取磁盘扇区的成本。</p><blockquote><p>Linux 内核级别的文件异步 I/O 不支持 <strong>高速缓冲</strong> - 即使需要读取的磁盘块已经位于 buffer 中，内核也还是会到磁盘上读取。从单个请求的角度看，有可能降低处理速度；但是从阻塞 worker 进程的角度来说还是有所改进的。</p><p>考虑使用场景。如果大部分用户请求对文件的操作都会落到缓存中，那么最好不使用异步 I/O。</p></blockquote><h3 id="_9-9-1-linux-内核提供的文件异步-i-o" tabindex="-1"><a class="header-anchor" href="#_9-9-1-linux-内核提供的文件异步-i-o"><span>9.9.1 Linux 内核提供的文件异步 I/O</span></a></h3><p>个人认为，异步 I/O 的 API 与事件机制与 EPOLL 高度类似。首先使用 <code>io_setup()</code> 获得一个异步 I/O 上下文的描述符 (对应 <code>epoll_create()</code>)，然后使用 <code>io_submit()</code> 和 <code>io_cancel()</code> 向内核中添加或删除事件 (对应 <code>epoll_ctl()</code>)。最后调用 <code>io_getevents()</code> 获取已经就绪的事件 (对应 <code>epoll_wait()</code>)。</p><p>Nginx 中只使用了异步 I/O 中的 <strong>读取</strong>，而不支持异步写入。因为文件的异步 I/O 不使用 buffer，而文件的写入通常是落入 buffer 的，再由内核统一将 dirty page 写入磁盘。</p><p>在 <code>epoll_create()</code> 执行后，如果开启了文件异步 I/O，那么就获取一个异步 I/O 上下文的描述符句柄，并为其设置一个回调函数后，加入 EPOLL 的通知列表中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_epoll_aio_init</span><span class="token punctuation">(</span><span class="token class-name">ngx_cycle_t</span> <span class="token operator">*</span>cycle<span class="token punctuation">,</span> <span class="token class-name">ngx_epoll_conf_t</span> <span class="token operator">*</span>epcf<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span>                 n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span>  ee<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取异步 I/O 上下文描述符</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>NGX_HAVE_SYS_EVENTFD_H<span class="token punctuation">)</span></span></span></span>
<span class="line">    ngx_eventfd <span class="token operator">=</span> <span class="token function">eventfd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line">    ngx_eventfd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_eventfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ngx_eventfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;eventfd() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ngx_file_aio <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;eventfd: %d&quot;</span><span class="token punctuation">,</span> ngx_eventfd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>ngx_eventfd<span class="token punctuation">,</span> FIONBIO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;ioctl(eventfd, FIONBIO) failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化上下文容量</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">io_setup</span><span class="token punctuation">(</span>epcf<span class="token operator">-&gt;</span>aio_requests<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ngx_aio_ctx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;io_setup() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置 fd 与被 EPOLL 激活时的回调函数</span></span>
<span class="line">    ngx_eventfd_event<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_eventfd_conn<span class="token punctuation">;</span></span>
<span class="line">    ngx_eventfd_event<span class="token punctuation">.</span>handler <span class="token operator">=</span> ngx_epoll_eventfd_handler<span class="token punctuation">;</span></span>
<span class="line">    ngx_eventfd_event<span class="token punctuation">.</span>log <span class="token operator">=</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">;</span></span>
<span class="line">    ngx_eventfd_event<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_eventfd_conn<span class="token punctuation">.</span>fd <span class="token operator">=</span> ngx_eventfd<span class="token punctuation">;</span></span>
<span class="line">    ngx_eventfd_conn<span class="token punctuation">.</span>read <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_eventfd_event<span class="token punctuation">;</span></span>
<span class="line">    ngx_eventfd_conn<span class="token punctuation">.</span>log <span class="token operator">=</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ee<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token operator">|</span>EPOLLET<span class="token punctuation">;</span></span>
<span class="line">    ee<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_eventfd_conn<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 加入 EPOLL 的查看列表中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> ngx_eventfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ee<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                  <span class="token string">&quot;epoll_ctl(EPOLL_CTL_ADD, eventfd) failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">io_destroy</span><span class="token punctuation">(</span>ngx_aio_ctx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;io_destroy() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">failed<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>ngx_eventfd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> cycle<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;eventfd close() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ngx_eventfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_aio_ctx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    ngx_file_aio <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>epoll_wait()</code> 中检测到异步 I/O 事件就绪后，调用回调函数 <code>ngx_epoll_eventfd_handler()</code>，获取所有已经就绪的 I/O 事件，并放入延后队列中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_epoll_eventfd_handler</span><span class="token punctuation">(</span><span class="token class-name">ngx_event_t</span> <span class="token operator">*</span>ev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span>               n<span class="token punctuation">,</span> events<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">long</span>              i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uint64_t</span>          ready<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_err_t</span>         err<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_event_t</span>      <span class="token operator">*</span>e<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ngx_event_aio_t</span>  <span class="token operator">*</span>aio<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">io_event</span>   event<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">timespec</span>   ts<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;eventfd handler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取本次已经就绪的异步 I/O 事件数量，保存在 ready 中</span></span>
<span class="line">    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>ngx_eventfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ready<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    err <span class="token operator">=</span> ngx_errno<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;eventfd: %d&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> NGX_EAGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token string">&quot;read(eventfd) failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;read(eventfd) returned only %d bytes&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ts<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    ts<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 直到所有就绪事件处理完</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将就绪事件复制到 events 数组中 (如果一次处理不完，还要多循环几次)</span></span>
<span class="line">        events <span class="token operator">=</span> <span class="token function">io_getevents</span><span class="token punctuation">(</span>ngx_aio_ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> event<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                       <span class="token string">&quot;io_getevents: %d&quot;</span><span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 减去已经从内核取出的事件数</span></span>
<span class="line">            ready <span class="token operator">-=</span> events<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 开始依次处理每一个事件</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> events<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">ngx_log_debug4</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_EVENT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                               <span class="token string">&quot;io_event: %XL %XL %L %L&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>obj<span class="token punctuation">,</span></span>
<span class="line">                                event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>res<span class="token punctuation">,</span> event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ngx_event_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span> event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                e<span class="token operator">-&gt;</span>complete <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                e<span class="token operator">-&gt;</span>active <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                e<span class="token operator">-&gt;</span>ready <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                aio <span class="token operator">=</span> e<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span></span>
<span class="line">                aio<span class="token operator">-&gt;</span>res <span class="token operator">=</span> event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// 放入延后处理队列中</span></span>
<span class="line">                <span class="token function">ngx_post_event</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ngx_posted_events<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* events == -1 */</span></span>
<span class="line">        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token string">&quot;io_getevents() failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在延后队列中的事件被执行时，再调用每个事件对应的回调函数，处理业务：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">ngx_file_aio_event_handler</span><span class="token punctuation">(</span><span class="token class-name">ngx_event_t</span> <span class="token operator">*</span>ev<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ngx_event_aio_t</span>  <span class="token operator">*</span>aio<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    aio <span class="token operator">=</span> ev<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ev<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token string">&quot;aio event handler fd:%d %V&quot;</span><span class="token punctuation">,</span> aio<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>aio<span class="token operator">-&gt;</span>file<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_file_aio_result</span><span class="token punctuation">(</span>aio<span class="token operator">-&gt;</span>file<span class="token punctuation">,</span> aio<span class="token punctuation">,</span> ev<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_AGAIN<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调用回调函数，处理业务</span></span>
<span class="line">        aio<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_9-10-tcp-协议与-nginx" tabindex="-1"><a class="header-anchor" href="#_9-10-tcp-协议与-nginx"><span>9.10 TCP 协议与 Nginx</span></a></h2><p>TCP 面向连接，基于建立成功的 TCP 连接为通信双方提供可靠的字节流服务。建立连接需要通过 <strong>三次握手</strong>：</p><ol><li>客户端向服务器发起连接 (SYN)</li><li>服务器确认连接，并向客户端也发起连接 (ACK + SYN)</li><li>客户端确认连接 (ACK)</li></ol><p>连接建立的过程由 OS 内核完成，Nginx 等应用程序只是从内核中取出已经建立好的 TCP 连接。</p><p>内核在调用 <code>listen()</code> 函数后，会为监听端口建立以下两个队列：</p><ul><li>SYN 队列 (未完成握手队列)</li><li>ACCEPT 队列 (已完成握手队列)</li></ul><p>客户端的 SYN 到达服务器后，内核会把信息放到 SYN 队列中，并向客户端回复 SYN + ACK；客户端再次发来 ACK 时，内核会把连接从 SYN 队列中取出，放入 ACCEPT 队列中。<code>accept()</code> 函数实际上就是把连接从 ACCEPT 队列中取出。如果有大量的连接同时到达，而应用程序不能及时调用 <code>accept()</code> 函数，将导致两个队列填满，内核将无法接收新的连接。比如某个 Nginx 模块长时间陷入某个函数的执行，没来得及调用 <code>accept()</code>。</p><p>内核为每个 TCP 连接都分配了内存，分别充当发送/接收缓冲区。TCP 连接建立时，就可以判断出双方网络间最适宜的、不会再被切分的报文大小 - MSS (最大报文段长度)。<code>send()</code> 调用的成功并不意味着报文已经成功发送，而是要发送的数据已经成功被内核从用户态拷贝到了内核态的写缓冲区中。接收报文时，由于 Nginx 是事件驱动的，只有通过 EPOLL 通知 worker 进程接收到了报文，<code>recv()</code> 才会被调用，将 TCP 读缓冲区中的内容拷贝到用户态内存中：</p><ul><li>receive 队列是允许用户直接读取的，已经接收到的、排好序的 TCP 报文</li><li>out_of_order 队列存放的是乱序的报文</li></ul><p>Nginx 使用好 TCP 协议，就要有效率地使用 CPU 和内存 - 只有在必要时才使用 <code>send()</code> / <code>recv()</code> 函数。只有接收到报文，且接收到足够多的报文时，worker 进程才调用 <code>recv()</code> 函数；只有写缓冲区中有空闲空间时，才调用 <code>send()</code> 函数。</p>`,28)]))}const i=s(t,[["render",l],["__file","Chapter 9.9-9.10 - 文件的异步 IO 与 TCP.html.vue"]]),u=JSON.parse('{"path":"/understanding-nginx-notes/Part%203%20-%20%E6%B7%B1%E5%85%A5%20Nginx/Chapter%209.9-9.10%20-%20%E6%96%87%E4%BB%B6%E7%9A%84%E5%BC%82%E6%AD%A5%20IO%20%E4%B8%8E%20TCP.html","title":"Chapter 9.9-9.10 - 文件的异步 I/O 与 TCP","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"9.9 文件的异步 I/O","slug":"_9-9-文件的异步-i-o","link":"#_9-9-文件的异步-i-o","children":[{"level":3,"title":"9.9.1 Linux 内核提供的文件异步 I/O","slug":"_9-9-1-linux-内核提供的文件异步-i-o","link":"#_9-9-1-linux-内核提供的文件异步-i-o","children":[]}]},{"level":2,"title":"9.10 TCP 协议与 Nginx","slug":"_9-10-tcp-协议与-nginx","link":"#_9-10-tcp-协议与-nginx","children":[]}],"git":{},"filePathRelative":"understanding-nginx-notes/Part 3 - 深入 Nginx/Chapter 9.9-9.10 - 文件的异步 IO 与 TCP.md"}');export{i as comp,u as data};
