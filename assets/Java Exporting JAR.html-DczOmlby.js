import{_ as a,c as i,a as l,o as n}from"./app-7eKjwDat.js";const r={};function s(t,e){return n(),i("div",null,e[0]||(e[0]=[l(`<h1 id="java-exporting-jar" tabindex="-1"><a class="header-anchor" href="#java-exporting-jar"><span>Java - Exporting JAR</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 05 / 13 09:57</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="library-jar" tabindex="-1"><a class="header-anchor" href="#library-jar"><span>Library JAR</span></a></h2><p>不可执行，可被其它程序依赖。可以直接用 Eclipse 导出：</p><ul><li>选择 JAR file</li><li>选择打包进 JAR 中的类</li><li>选择导出的 JAR 路径与名称</li><li>使用自动生成的配置文件 <code>manifest.mf</code></li></ul><p>直接可以获得 <code>xxx.jar</code>。</p><hr><h2 id="runnable-jar" tabindex="-1"><a class="header-anchor" href="#runnable-jar"><span>Runnable JAR</span></a></h2><p>可以直接被执行的 JAR 文件：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ java -jar xxx.jar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可能依赖了其它 JAR，需要指定一个可被执行的主类。</p><h3 id="自定义-manifest-mf-并用-eclipse-导出" tabindex="-1"><a class="header-anchor" href="#自定义-manifest-mf-并用-eclipse-导出"><span>自定义 <code>manifest.mf</code>，并用 Eclipse 导出</span></a></h3><p>在项目根目录创建一个 <code>manifest.mf</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Manifest-Version: 1.0</span>
<span class="line">Main-Class: iot.zjt.protector.FileProtector</span>
<span class="line">Class-Path: lib/encryption-machine-1.1.jar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Attention</p><ul><li>每行最多 <code>72</code> 个字符</li><li>多个 <code>.jar</code> 要用空格隔开</li><li>换行时，行首需要有一个空格，行尾也要有空格</li><li>行尾如果没有空格，则与下一行是连起来的</li><li>最后一行为空行</li></ul><p>使用 Eclipse 的导出工具，选择 JAR file</p><ul><li>选择打包进 JAR 中的类</li><li>选择导出的 JAR 路径与名称</li><li>选择自定义的配置文件 <code>manifest.mf</code></li><li>选择执行的主类</li></ul><p>导出完成后，<code>xxx.jar</code> 会在同目录下的 <code>lib/</code> 中寻找依赖的其余 JAR。这种方法太麻烦，总觉得不太爽 😤</p><h3 id="直接用-eclipse-导出" tabindex="-1"><a class="header-anchor" href="#直接用-eclipse-导出"><span>直接用 Eclipse 导出</span></a></h3><p>在 Eclipse 的 Export 中直接选择 Runnable JAR file:</p><ul><li>Launch Configuration - 选定执行主类</li><li>Export Destination - 导出路径与名称</li><li>Library Handling <ul><li>Extract required libraries into generated JAR - 将其余 JAR 解压为 <code>.class</code> 并打包进生成的 JAR 中</li><li>Package required libraries into generated JAR - 不对其余的 JAR 进行解压，直接打包进生成的 JAR 中</li><li>Copy required libraries into a sub-folder next to the generated JAR - 将依赖的 JAR 放在生成 JAR 的同级目录的某个子文件夹下</li></ul></li></ul><p>其中，前两种选项最终可以只输出一个 <code>.jar</code>；后一种选项除了 <code>.jar</code> 以外，还有一个文件夹，里面是所有依赖的 JAR。</p><hr>`,27)]))}const d=a(r,[["render",s],["__file","Java Exporting JAR.html.vue"]]),p=JSON.parse('{"path":"/notes/Java/Java%20Exporting%20JAR.html","title":"Java - Exporting JAR","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Library JAR","slug":"library-jar","link":"#library-jar","children":[]},{"level":2,"title":"Runnable JAR","slug":"runnable-jar","link":"#runnable-jar","children":[{"level":3,"title":"自定义 manifest.mf，并用 Eclipse 导出","slug":"自定义-manifest-mf-并用-eclipse-导出","link":"#自定义-manifest-mf-并用-eclipse-导出","children":[]},{"level":3,"title":"直接用 Eclipse 导出","slug":"直接用-eclipse-导出","link":"#直接用-eclipse-导出","children":[]}]}],"git":{},"filePathRelative":"notes/Java/Java Exporting JAR.md"}');export{d as comp,p as data};
