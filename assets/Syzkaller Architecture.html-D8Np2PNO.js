import{_ as n,c as a,a as e,o as l}from"./app-7eKjwDat.js";const i="/blog/assets/syzkaller-GhOvR_2-.png",t={};function p(o,s){return l(),a("div",null,s[0]||(s[0]=[e('<h1 id="syzkaller-architecture" tabindex="-1"><a class="header-anchor" href="#syzkaller-architecture"><span>Syzkaller - Architecture</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 07 / 04 15:05</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="what-is-syzkaller" tabindex="-1"><a class="header-anchor" href="#what-is-syzkaller"><span>What is syzkaller</span></a></h2><p><a href="https://github.com/google/syzkaller" target="_blank" rel="noopener noreferrer"><strong>syzkaller</strong></a> is an unsupervised, coverage-guided kernel fuzzer by <em>Google</em> implemented in Golang.</p><p>Supported OSes:</p><ul><li>Akaros</li><li>FreeBSD</li><li>Fuchsia</li><li>gVisor</li><li>Linux</li><li>NetBSD</li><li>OpenBSD</li><li>Windows</li></ul><p>被用于 Linux 内核的 fuzzing。</p><hr><h2 id="how-syzkaller-works" tabindex="-1"><a class="header-anchor" href="#how-syzkaller-works"><span>How syzkaller Works</span></a></h2><p>红色标签代表对应的配置选项：</p><p><img src="'+i+`" alt="syzkaller"></p><ul><li>syz-manager <ul><li>该进程启动、监控、重启所有的 VM 实例</li><li>在 VM 实例中启动 <code>syz-fuzzer</code> 进程</li><li>负责维护语料库和 crash 的存储</li><li>与 <code>syz-fuzzer</code> 相反，运行在一个内核稳定的 host 上，不会受到 fuzzing 的影响</li></ul></li><li>syz-fuzzer <ul><li>该进程运行在不稳定的 VM 中</li><li>引导 fuzzing 过程的进行 <ul><li>输入产生、改变、最小化</li></ul></li><li>通过 RPC 将触发新 coverage 的输入发送回 <code>syz-manager</code></li><li>启动 <code>syz-executor</code> 进程</li></ul></li><li>syz-executor <ul><li>该进程执行单独的一个输入 (一系列系统调用)</li><li>从 <code>syz-fuzzer</code> 接受程序并执行，并将结果返回</li><li>被设计得尽可能简单 (C++)</li></ul></li></ul><hr><h2 id="syscall-descriptions" tabindex="-1"><a class="header-anchor" href="#syscall-descriptions"><span>Syscall Descriptions</span></a></h2><p><code>syz-fuzzer</code> 进程产生用于测试 kernel syscall 的程序，由 <code>syz-executor</code> 进行执行。对应的系统调用接口需要在指定目录下被声明，从而使 syzkaller 能够利用这些系统调用接口生成程序。</p><p>系统调用描述文件位于 syzkaller 目录的 <code>/sys/:OS/:*.txt</code> 中：比如，<code>sys/linux/dev_snd_midi.txt</code> 中包含了 Linux MIDI 接口的描述。</p><hr><h2 id="crash-reports" tabindex="-1"><a class="header-anchor" href="#crash-reports"><span>Crash Reports</span></a></h2><p>syzkaller 发现 crash 后，将会把信息保存到 <code>workdir/crashes</code> 中。该目录下的每一个子目录都代表了一次单独的 crash，由唯一的字符串表示，用于调试和复现。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> - crashes/</span>
<span class="line">   - 6e512290efa36515a7a27e53623304d20d1c3e</span>
<span class="line">     - description</span>
<span class="line">     - log0</span>
<span class="line">     - report0</span>
<span class="line">     - log1</span>
<span class="line">     - report1</span>
<span class="line">     ...</span>
<span class="line">   - 77c578906abe311d06227b9dc3bffa4c52676f</span>
<span class="line">     - description</span>
<span class="line">     - log0</span>
<span class="line">     - report0</span>
<span class="line">     ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>decription</code> 文件由正则表达式提取</li><li><code>logN</code> 文件包含原始的 syzkaller 日志 <ul><li>包括内核控制台输出</li><li>包括 crash 之前的程序执行状况</li><li>输入 <code>syz-repro</code> 工具用于 crash 定位和最小化</li><li>输入 <code>syz-execprog</code> 工具用于人工定位</li></ul></li><li><code>reportN</code> 文件包含符号化的内核 crash 报告和后续处理过程</li></ul><p>通常来说，只需要一对 <code>logN</code> 和 <code>reportN</code> 文件就足够。但有时 crash 很难复现，因此 syzkaller 保存多达 100 对。有三种特殊类型的 crash：</p><ul><li><code>no output from test machine</code></li><li><code>lost connection to test machine</code></li><li><code>test machine is not executing programs</code></li></ul><p>对于这几种 crash，通常看不到 <code>reportN</code> 文件。有时这些问题由 syzkaller 本身的 BUG 导致（尤其是看到日志中有 <code>Go panic</code> 信息时）。但更多情况下，被测试内核应该是发生了死锁等情况。</p><hr><h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use"><span>How to Use</span></a></h2><p>启动 <code>syz-manager</code> 进程：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ ./bin/syz-manager -config my.cfg</span>
<span class="line">2017/06/14 16:39:05 loading corpus...</span>
<span class="line">2017/06/14 16:39:05 loaded 0 programs (0 total, 0 deleted)</span>
<span class="line">2017/06/14 16:39:05 serving http on http://127.0.0.1:56741</span>
<span class="line">2017/06/14 16:39:05 serving rpc on tcp://127.0.0.1:34918</span>
<span class="line">2017/06/14 16:39:05 booting test machines...</span>
<span class="line">2017/06/14 16:39:05 wait for the connection from test machine...</span>
<span class="line">2017/06/14 16:39:59 received first connection from test machine vm-9</span>
<span class="line">2017/06/14 16:40:05 executed 293, cover 43260, crashes 0, repro 0</span>
<span class="line">2017/06/14 16:40:15 executed 5992, cover 88463, crashes 0, repro 0</span>
<span class="line">2017/06/14 16:40:25 executed 10959, cover 116991, crashes 0, repro 0</span>
<span class="line">2017/06/14 16:40:35 executed 15504, cover 132403, crashes 0, repro 0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>syz-manager</code> 进程会启动 VM 并开始 fuzzing</li><li><code>-config</code> 选项给定了配置文件的位置</li><li>Crashes、数据和其它信息将会暴露在配置文件中的 HTTP 地址上</li></ul><p>配置文件是 JSON 格式的，示例：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;linux/amd64&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;http&quot;</span><span class="token operator">:</span> <span class="token string">&quot;myhost.com:56741&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;workdir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/syzkaller/workdir&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;kernel_obj&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/linux/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;image&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/linux_image/wheezy.img&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;sshkey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/linux_image/ssh/id_rsa&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;syzkaller&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/syzkaller&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;disable_syscalls&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;keyctl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;add_key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;request_key&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;suppressions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;some known bug&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;procs&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;qemu&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;vm&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;cpu&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;mem&quot;</span><span class="token operator">:</span> <span class="token number">2048</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;kernel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/linux/arch/x86/boot/bzImage&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;initrd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;linux/initrd&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的参数：https://github.com/google/syzkaller/blob/master/pkg/mgrconfig/config.go</p><p>一旦 syzkaller 检测到 VM 中的内核 crash,将会自动启动进程重现这个 crash。</p><ul><li>默认情况下，将会使用 4 个 VM 重现该 crash</li><li>最小化导致该 crash 的程序</li></ul><p>这可能会停止 fuzzing，因为所有的 VM 实例都忙于重现这个 BUG。重现的过程可能只需几分钟，可能需要一小时，取决于这个 crash 是否容易重现。</p><p>如果重现成功，syzkaller 将会生成两种形式的代码：syzkaller 程序或 C 程序：</p><ul><li>总是优先生成 C 程序，但由于有时因为各种原因，只能生成 syzkaller 程序</li><li>syzkaller 程序可以被执行，用于手动重现、调试产生的 crash</li></ul><hr>`,41)]))}const c=n(t,[["render",p],["__file","Syzkaller Architecture.html.vue"]]),u=JSON.parse('{"path":"/notes/Operating%20System/Syzkaller%20Architecture.html","title":"Syzkaller - Architecture","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"What is syzkaller","slug":"what-is-syzkaller","link":"#what-is-syzkaller","children":[]},{"level":2,"title":"How syzkaller Works","slug":"how-syzkaller-works","link":"#how-syzkaller-works","children":[]},{"level":2,"title":"Syscall Descriptions","slug":"syscall-descriptions","link":"#syscall-descriptions","children":[]},{"level":2,"title":"Crash Reports","slug":"crash-reports","link":"#crash-reports","children":[]},{"level":2,"title":"How to Use","slug":"how-to-use","link":"#how-to-use","children":[]}],"git":{},"filePathRelative":"notes/Operating System/Syzkaller Architecture.md"}');export{c as comp,u as data};
