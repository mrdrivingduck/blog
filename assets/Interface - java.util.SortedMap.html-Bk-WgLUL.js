import{_ as n,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="interface-java-util-sortedmap" tabindex="-1"><a class="header-anchor" href="#interface-java-util-sortedmap"><span>Interface - java.util.SortedMap</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 11 / 13 13:37</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种 Map 对 key 有顺序保证：Map 根据 key 的自然顺序或 <code>Comparator</code> 的结果进行排列，这种顺序反映在迭代器迭代 Map 时。</p><p>另外有几个额外操作利用了有序这一特性- 插入 Map 的 key 必须是可比较的。key 的比较是通过 <code>compareTo()</code> 而不是 <code>equals()</code> 完成的</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Map</span></span><span class="token punctuation">}</span> that further provides a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>total ordering<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> on its keys.</span>
<span class="line"> * The map is ordered according to the <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Comparable</span></span> natural</span>
<span class="line"> * ordering<span class="token punctuation">}</span> of its keys, or by a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Comparator</span></span><span class="token punctuation">}</span> typically</span>
<span class="line"> * provided at sorted map creation time.  This order is reflected when</span>
<span class="line"> * iterating over the sorted map&#39;s collection views (returned by the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">entrySet</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">keySet</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">values</span></span><span class="token punctuation">}</span> methods).</span>
<span class="line"> * Several additional operations are provided to take advantage of the</span>
<span class="line"> * ordering.  (This interface is the map analogue of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SortedSet</span></span><span class="token punctuation">}</span>.)</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>All keys inserted into a sorted map must implement the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Comparable</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * interface (or be accepted by the specified comparator).  Furthermore, all</span>
<span class="line"> * such keys must be <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>mutually comparable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>: <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">k1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> (or</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>) must not throw a</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ClassCastException</span></span></span><span class="token punctuation">}</span> for any keys <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">k1</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">k2</span></span><span class="token punctuation">}</span> in</span>
<span class="line"> * the sorted map.  Attempts to violate this restriction will cause the</span>
<span class="line"> * offending method or constructor invocation to throw a</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ClassCastException</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Note that the ordering maintained by a sorted map (whether or not an</span>
<span class="line"> * explicit comparator is provided) must be <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>consistent with equals<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> if</span>
<span class="line"> * the sorted map is to correctly implement the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Map</span></span></span><span class="token punctuation">}</span> interface.  (See</span>
<span class="line"> * the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Comparable</span></span></span><span class="token punctuation">}</span> interface or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Comparator</span></span></span><span class="token punctuation">}</span> interface for a</span>
<span class="line"> * precise definition of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>consistent with equals<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>.)  This is so because</span>
<span class="line"> * the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Map</span></span></span><span class="token punctuation">}</span> interface is defined in terms of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">equals</span></span><span class="token punctuation">}</span></span>
<span class="line"> * operation, but a sorted map performs all key comparisons using its</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">compareTo</span></span><span class="token punctuation">}</span> (or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">compare</span></span><span class="token punctuation">}</span>) method, so two keys that are</span>
<span class="line"> * deemed equal by this method are, from the standpoint of the sorted map,</span>
<span class="line"> * equal.  The behavior of a tree map <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>is<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> well-defined even if its</span>
<span class="line"> * ordering is inconsistent with equals; it just fails to obey the general</span>
<span class="line"> * contract of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Map</span></span></span><span class="token punctuation">}</span> interface.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>All general-purpose sorted map implementation classes should provide four</span>
<span class="line"> * &quot;standard&quot; constructors. It is not possible to enforce this recommendation</span>
<span class="line"> * though as required constructors cannot be specified by interfaces. The</span>
<span class="line"> * expected &quot;standard&quot; constructors for all sorted map implementations are:</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>A void (no arguments) constructor, which creates an empty sorted map</span>
<span class="line"> *   sorted according to the natural ordering of its keys.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>A constructor with a single argument of type <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Comparator</span></span></span><span class="token punctuation">}</span>, which</span>
<span class="line"> *   creates an empty sorted map sorted according to the specified comparator.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>A constructor with a single argument of type <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Map</span></span></span><span class="token punctuation">}</span>, which creates</span>
<span class="line"> *   a new map with the same key-value mappings as its argument, sorted</span>
<span class="line"> *   according to the keys&#39; natural ordering.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>A constructor with a single argument of type <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">SortedMap</span></span></span><span class="token punctuation">}</span>, which</span>
<span class="line"> *   creates a new sorted map with the same key-value mappings and the same</span>
<span class="line"> *   ordering as the input sorted map.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>Note<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>: several methods return submaps with restricted key</span>
<span class="line"> * ranges. Such ranges are <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>half-open<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>, that is, they include their low</span>
<span class="line"> * endpoint but not their high endpoint (where applicable).  If you need a</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>closed range<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> (which includes both endpoints), and the key type</span>
<span class="line"> * allows for calculation of the successor of a given key, merely request</span>
<span class="line"> * the subrange from <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">lowEndpoint</span></span><span class="token punctuation">}</span> to</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">successor</span><span class="token punctuation">(</span>highEndpoint<span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>.  For example, suppose that <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">m</span></span><span class="token punctuation">}</span></span>
<span class="line"> * is a map whose keys are strings.  The following idiom obtains a view</span>
<span class="line"> * containing all of the key-value mappings in <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">m</span></span><span class="token punctuation">}</span> whose keys are</span>
<span class="line"> * between <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">low</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">high</span></span><span class="token punctuation">}</span>, inclusive:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token code-section">*   <span class="token line"><span class="token code language-java"><span class="token class-name">SortedMap</span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token code language-java"><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">V</span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token code language-java"> sub <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">subMap</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token operator">+</span><span class="token string">&quot;\\0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * A similar technique can be used to generate an <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>open range<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * (which contains neither endpoint).  The following idiom obtains a</span>
<span class="line"> * view containing all of the key-value mappings in <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">m</span></span><span class="token punctuation">}</span> whose keys</span>
<span class="line"> * are between <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">low</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">high</span></span><span class="token punctuation">}</span>, exclusive:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token code-section">*   <span class="token line"><span class="token code language-java"><span class="token class-name">SortedMap</span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token code language-java"><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">V</span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token code language-java"> sub <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">subMap</span><span class="token punctuation">(</span>low<span class="token operator">+</span><span class="token string">&quot;\\0&quot;</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This interface is a member of the</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{@docRoot}/../technotes/guides/collections/index.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * Java Collections Framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">&gt;</span></span> the type of keys maintained by this map</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> the type of mapped values</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span>  Josh Bloch</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Map</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">TreeMap</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">SortedSet</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Comparator</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Comparable</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Collection</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ClassCastException</span></span></span>
<span class="line"> * <span class="token keyword">@since</span> 1.2</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the comparator used to order the keys in this map, or</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if this map uses the <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Comparable</span></span></span>
<span class="line"> * natural ordering<span class="token punctuation">}</span> of its keys.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> the comparator used to order the keys in this map,</span>
<span class="line"> *         or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if this map uses the natural ordering</span>
<span class="line"> *         of its keys</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 <code>Comparator</code>。如果 <code>Comparator</code> 为空，那么按照自然顺序进行排序。</p><hr><p>以下是一些根据 key 的排序特性定义的子集操作，子集是集合部分元素的引用。所以对子集的操作会反应在全集中，反之亦然。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a view of the portion of this map whose keys range from</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span>, inclusive, to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span>, exclusive.  (If</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span> are equal, the returned map</span>
<span class="line"> * is empty.)  The returned map is backed by this map, so changes</span>
<span class="line"> * in the returned map are reflected in this map, and vice-versa.</span>
<span class="line"> * The returned map supports all optional map operations that this</span>
<span class="line"> * map supports.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The returned map will throw an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">IllegalArgumentException</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * on an attempt to insert a key outside its range.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">fromKey</span> low endpoint (inclusive) of the keys in the returned map</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">toKey</span> high endpoint (exclusive) of the keys in the returned map</span>
<span class="line"> * <span class="token keyword">@return</span> a view of the portion of this map whose keys range from</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span>, inclusive, to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span>, exclusive</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ClassCastException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span></span>
<span class="line"> *         cannot be compared to one another using this map&#39;s comparator</span>
<span class="line"> *         (or, if the map has no comparator, using natural ordering).</span>
<span class="line"> *         Implementations may, but are not required to, throw this</span>
<span class="line"> *         exception if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span></span>
<span class="line"> *         cannot be compared to keys currently in the map.</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span></span>
<span class="line"> *         is null and this map does not permit null keys</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> is greater than</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span>; or if this map itself has a restricted</span>
<span class="line"> *         range, and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span> lies</span>
<span class="line"> *         outside the bounds of the range</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">subMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> fromKey<span class="token punctuation">,</span> <span class="token class-name">K</span> toKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 <code>[fromKey, toKey)</code> 的子集。如果 <code>fromKey == toKey</code>，那么返回的集合为空。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a view of the portion of this map whose keys are</span>
<span class="line"> * strictly less than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span>.  The returned map is backed</span>
<span class="line"> * by this map, so changes in the returned map are reflected in</span>
<span class="line"> * this map, and vice-versa.  The returned map supports all</span>
<span class="line"> * optional map operations that this map supports.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The returned map will throw an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">IllegalArgumentException</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * on an attempt to insert a key outside its range.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">toKey</span> high endpoint (exclusive) of the keys in the returned map</span>
<span class="line"> * <span class="token keyword">@return</span> a view of the portion of this map whose keys are strictly</span>
<span class="line"> *         less than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ClassCastException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span> is not compatible</span>
<span class="line"> *         with this map&#39;s comparator (or, if the map has no comparator,</span>
<span class="line"> *         if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span> does not implement <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Comparable</span></span><span class="token punctuation">}</span>).</span>
<span class="line"> *         Implementations may, but are not required to, throw this</span>
<span class="line"> *         exception if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span> cannot be compared to keys</span>
<span class="line"> *         currently in the map.</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span> is null and</span>
<span class="line"> *         this map does not permit null keys</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if this map itself has a</span>
<span class="line"> *         restricted range, and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toKey</span></span><span class="token punctuation">}</span> lies outside the</span>
<span class="line"> *         bounds of the range</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">headMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> toKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 key 值 <code>&lt;</code> <code>toKey</code> 的子集。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a view of the portion of this map whose keys are</span>
<span class="line"> * greater than or equal to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span>.  The returned map is</span>
<span class="line"> * backed by this map, so changes in the returned map are</span>
<span class="line"> * reflected in this map, and vice-versa.  The returned map</span>
<span class="line"> * supports all optional map operations that this map supports.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The returned map will throw an <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">IllegalArgumentException</span></span></span><span class="token punctuation">}</span></span>
<span class="line"> * on an attempt to insert a key outside its range.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">fromKey</span> low endpoint (inclusive) of the keys in the returned map</span>
<span class="line"> * <span class="token keyword">@return</span> a view of the portion of this map whose keys are greater</span>
<span class="line"> *         than or equal to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ClassCastException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> is not compatible</span>
<span class="line"> *         with this map&#39;s comparator (or, if the map has no comparator,</span>
<span class="line"> *         if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> does not implement <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Comparable</span></span><span class="token punctuation">}</span>).</span>
<span class="line"> *         Implementations may, but are not required to, throw this</span>
<span class="line"> *         exception if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> cannot be compared to keys</span>
<span class="line"> *         currently in the map.</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> is null and</span>
<span class="line"> *         this map does not permit null keys</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if this map itself has a</span>
<span class="line"> *         restricted range, and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fromKey</span></span><span class="token punctuation">}</span> lies outside the</span>
<span class="line"> *         bounds of the range</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">tailMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> fromKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 key 值 <code>≥</code> <code>fromKey</code> 的子集。</p><hr><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the first (lowest) key currently in this map.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> the first (lowest) key currently in this map</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NoSuchElementException</span></span> if this map is empty</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">K</span> <span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the last (highest) key currently in this map.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> the last (highest) key currently in this map</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NoSuchElementException</span></span> if this map is empty</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">K</span> <span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回最小 / 最大的 key。</p><hr><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Set</span></span><span class="token punctuation">}</span> view of the keys contained in this map.</span>
<span class="line"> * The set&#39;s iterator returns the keys in ascending order.</span>
<span class="line"> * The set is backed by the map, so changes to the map are</span>
<span class="line"> * reflected in the set, and vice-versa.  If the map is modified</span>
<span class="line"> * while an iteration over the set is in progress (except through</span>
<span class="line"> * the iterator&#39;s own <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">remove</span></span><span class="token punctuation">}</span> operation), the results of</span>
<span class="line"> * the iteration are undefined.  The set supports element removal,</span>
<span class="line"> * which removes the corresponding mapping from the map, via the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Iterator</span><span class="token punctuation">.</span>remove</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Set</span><span class="token punctuation">.</span>remove</span></span><span class="token punctuation">}</span>,</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">removeAll</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">retainAll</span></span><span class="token punctuation">}</span>, and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">clear</span></span><span class="token punctuation">}</span></span>
<span class="line"> * operations.  It does not support the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">add</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">addAll</span></span><span class="token punctuation">}</span></span>
<span class="line"> * operations.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> a set view of the keys contained in this map, sorted in</span>
<span class="line"> *         ascending order</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 Map 中的所有 key，Set 的迭代器以升序迭代所有的 key。这个集合是被 Map 内部维护的，对该集合的操作会体现在 Map 中，反之亦然。对该集合进行迭代时，如果 Map 被修改 (除了迭代器自身的 <code>remove()</code>)，行为未知。</p><p>这个集合支持移出，但不支持插入。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Collection</span></span><span class="token punctuation">}</span> view of the values contained in this map.</span>
<span class="line"> * The collection&#39;s iterator returns the values in ascending order</span>
<span class="line"> * of the corresponding keys.</span>
<span class="line"> * The collection is backed by the map, so changes to the map are</span>
<span class="line"> * reflected in the collection, and vice-versa.  If the map is</span>
<span class="line"> * modified while an iteration over the collection is in progress</span>
<span class="line"> * (except through the iterator&#39;s own <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">remove</span></span><span class="token punctuation">}</span> operation),</span>
<span class="line"> * the results of the iteration are undefined.  The collection</span>
<span class="line"> * supports element removal, which removes the corresponding</span>
<span class="line"> * mapping from the map, via the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Iterator</span><span class="token punctuation">.</span>remove</span></span><span class="token punctuation">}</span>,</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Collection</span><span class="token punctuation">.</span>remove</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">removeAll</span></span><span class="token punctuation">}</span>,</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">retainAll</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">clear</span></span><span class="token punctuation">}</span> operations.  It does not</span>
<span class="line"> * support the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">add</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">addAll</span></span><span class="token punctuation">}</span> operations.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> a collection view of the values contained in this map,</span>
<span class="line"> *         sorted in ascending key order</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的顺序按照其对应的 key 的升序排列。同样支持移出，但不支持插入，且迭代期间不可并发修改。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Set</span></span><span class="token punctuation">}</span> view of the mappings contained in this map.</span>
<span class="line"> * The set&#39;s iterator returns the entries in ascending key order.</span>
<span class="line"> * The set is backed by the map, so changes to the map are</span>
<span class="line"> * reflected in the set, and vice-versa.  If the map is modified</span>
<span class="line"> * while an iteration over the set is in progress (except through</span>
<span class="line"> * the iterator&#39;s own <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">remove</span></span><span class="token punctuation">}</span> operation, or through the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">setValue</span></span><span class="token punctuation">}</span> operation on a map entry returned by the</span>
<span class="line"> * iterator) the results of the iteration are undefined.  The set</span>
<span class="line"> * supports element removal, which removes the corresponding</span>
<span class="line"> * mapping from the map, via the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Iterator</span><span class="token punctuation">.</span>remove</span></span><span class="token punctuation">}</span>,</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Set</span><span class="token punctuation">.</span>remove</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">removeAll</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">retainAll</span></span><span class="token punctuation">}</span> and</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">clear</span></span><span class="token punctuation">}</span> operations.  It does not support the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">add</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">addAll</span></span><span class="token punctuation">}</span> operations.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> a set view of the mappings contained in this map,</span>
<span class="line"> *         sorted in ascending key order</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 key 和 value 作为一个整体 entry 返回，返回的次序依旧是按照 key 的升序排列。</p><hr>`,33)]))}const i=n(t,[["render",c],["__file","Interface - java.util.SortedMap.html.vue"]]),u=JSON.parse('{"path":"/jdk-source-code-analysis/java.util/Interface%20-%20java.util.SortedMap.html","title":"Interface - java.util.SortedMap","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]}],"git":{},"filePathRelative":"jdk-source-code-analysis/java.util/Interface - java.util.SortedMap.md"}');export{i as comp,u as data};
