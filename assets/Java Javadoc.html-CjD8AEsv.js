import{_ as a,c as s,a as e,o as t}from"./app-7eKjwDat.js";const c="/blog/assets/javadoc-DXi5CL9x.png",l={};function i(p,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="java-javadoc" tabindex="-1"><a class="header-anchor" href="#java-javadoc"><span>Java - <em>Javadoc</em></span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 02 / 19 12:36</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="what-is-javadoc" tabindex="-1"><a class="header-anchor" href="#what-is-javadoc"><span>What is <em>Javadoc</em> ?</span></a></h2><p><a href="https://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html" target="_blank" rel="noopener noreferrer"><em>Javadoc</em></a> 是 <em>Sun</em> 开发的 Java 文档生成工具。该工具可以从 Java 源代码的注释中生成 HTML 格式的 API 文档。HTML 格式可以将相关文档通过超链接连接在一起。</p><p><em>Javadoc</em> 中使用的 <strong>doc comments</strong> 格式是记录 Java 类的行业标准。以前，通常由专业的技术文档编写者来编写软件的独立文档，是这些文档与代码本身保持同步非常困难。<em>Javadoc</em> 使得文档可以直接内嵌在代码中，从而解决了代码与文档的同步问题。</p><p><em>Javadoc</em> 不会影响 Java 代码执行的性能。在编译时，注释会被移除。</p><h2 id="javadoc-structure" tabindex="-1"><a class="header-anchor" href="#javadoc-structure"><span><em>Javadoc</em> Structure</span></a></h2><p>通过标准的多行注释 <code>/*</code> 和 <code>*/</code> 在代码中编写注释 - 其中，起始标记具有额外的星号 <code>/**</code>。注释中：</p><ol><li>第一段是对所标记的对象 (类、函数、变量) 的文字描述</li><li>第二段是不同数量的描述性标签</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Some statements...</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> xxx</span>
<span class="line"> * <span class="token keyword">@version</span> xxx</span>
<span class="line"> * <span class="token keyword">@since</span> xxx</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Javadoc</em> 中支持的部分标签：</p><table><thead><tr><th>Tag &amp; Parameter</th><th>Usage</th><th>Applies to</th></tr></thead><tbody><tr><td><code>@author &lt;name&gt;</code></td><td>作者</td><td>Class, Interface, Enum</td></tr><tr><td><code>@version &lt;version&gt;</code></td><td>软件的当前版本</td><td>Class, Interface, Enum</td></tr><tr><td><code>@since &lt;since_version&gt;</code></td><td>该功能开始出现的第一个版本</td><td>Class, Interface, Enum, Field, Method</td></tr><tr><td><code>@see &lt;reference&gt;</code></td><td>指向其它元素或文档的链接</td><td>Class, Interface, Enum, Field, Method</td></tr><tr><td><code>@param &lt;name&gt; &lt;description&gt;</code></td><td>描述函数的一个参数</td><td>Method</td></tr><tr><td><code>@return &lt;description&gt;</code></td><td>描述函数的返回值</td><td>Method</td></tr><tr><td><code>@exception &lt;class_name&gt; &lt;description&gt;</code> / <code>@throws &lt;class_name&gt; &lt;description&gt;</code></td><td>描述函数中会抛出的异常</td><td>Method</td></tr><tr><td><code>@deprecated &lt;description&gt;</code></td><td>描述一个已经过时的函数</td><td>Class, Interface, Enum, Field, Method</td></tr><tr><td><code>{@link &lt;reference&gt;}</code></td><td>链接到其它位置 (网页)</td><td>Class, Interface, Enum, Field, Method</td></tr><tr><td><code>{@linkplain &lt;reference&gt; &lt;text&gt;}</code></td><td>与前者相同，但是显示的文本可以不是链接</td><td>Class, Interface, Enum, Field, Method</td></tr><tr><td><code>{@inheritDoc}</code></td><td>拷贝被重写函数的描述</td><td>Overriding Method</td></tr><tr><td><code>{@value &lt;STATIC_FIELD&gt;}</code></td><td>返回静态域的值</td><td>Static Field</td></tr><tr><td><code>{@code &lt;code&gt;}</code></td><td>代码块，相当于 Markdown 中的 \`\`</td><td>Class, Interface, Enum, Field, Method</td></tr></tbody></table><h2 id="examples-of-javadoc-in-jdk-8" tabindex="-1"><a class="header-anchor" href="#examples-of-javadoc-in-jdk-8"><span>Examples of <em>Javadoc</em> in JDK 8</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * An <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">int</span></span></span><span class="token punctuation">}</span> value that may be updated atomically.  See the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> java.util.concurrent.atomic<span class="token punctuation">}</span> package specification for</span>
<span class="line"> * description of the properties of atomic variables. An</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">AtomicInteger</span></span></span><span class="token punctuation">}</span> is used in applications such as atomically</span>
<span class="line"> * incremented counters, and cannot be used as a replacement for an</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Integer</span></span><span class="token punctuation">}</span>. However, this class does extend</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Number</span></span></span><span class="token punctuation">}</span> to allow uniform access by tools and utilities that</span>
<span class="line"> * deal with numerically-based classes.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@since</span> 1.5</span>
<span class="line"> * <span class="token keyword">@author</span> Doug Lea</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicInteger</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Atomically updates the current value with the results of</span>
<span class="line"> * applying the given function to the current and given values,</span>
<span class="line"> * returning the previous value. The function should be</span>
<span class="line"> * side-effect-free, since it may be re-applied when attempted</span>
<span class="line"> * updates fail due to contention among threads.  The function</span>
<span class="line"> * is applied with the current value as its first argument,</span>
<span class="line"> * and the given update as the second argument.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">x</span> the update value</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">accumulatorFunction</span> a side-effect-free function of two arguments</span>
<span class="line"> * <span class="token keyword">@return</span> the previous value</span>
<span class="line"> * <span class="token keyword">@since</span> 1.8</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAccumulate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span></span>
<span class="line">                                    <span class="token class-name">IntBinaryOperator</span> accumulatorFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        prev <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        next <span class="token operator">=</span> accumulatorFunction<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> prev<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Inserts the specified element at the end of this deque if it is</span>
<span class="line"> * possible to do so immediately without violating capacity restrictions,</span>
<span class="line"> * returning <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> upon success and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> if no space is</span>
<span class="line"> * currently available.</span>
<span class="line"> * When using a capacity-restricted deque, this method is generally</span>
<span class="line"> * preferable to the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span> addLast<span class="token punctuation">}</span> method, which can</span>
<span class="line"> * fail to insert an element only by throwing an exception.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">e</span> the element to add</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ClassCastException</span></span> <span class="token punctuation">{</span><span class="token keyword">@inheritDoc</span><span class="token punctuation">}</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the specified element is null</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> <span class="token punctuation">{</span><span class="token keyword">@inheritDoc</span><span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javadoc-effect" tabindex="-1"><a class="header-anchor" href="#javadoc-effect"><span><em>Javadoc</em> Effect</span></a></h2><p><img src="`+c+'" alt="javadoc"></p><h2 id="issue-include-reference-to-unit-test-classes-in-javadoc" tabindex="-1"><a class="header-anchor" href="#issue-include-reference-to-unit-test-classes-in-javadoc"><span>Issue: Include Reference to Unit Test Classes in <em>Javadoc</em></span></a></h2><p>试图在 Java 代码中使用 <code>@see</code> 指向对应的单元测试类，失败。Explanation on <a href="https://stackoverflow.com/questions/45160647/include-link-to-unit-test-classes-in-javadoc" target="_blank" rel="noopener noreferrer">StackOverflow</a>。想来也有道理：</p><ul><li>单元测试是用于测试 Java 代码的，因此在单元测试中使用 <code>@see</code> 指向对应的 Java 代码合情合理</li><li>而 Java 代码不是为单元测试而设计的，因此从 Java 代码中引用对应的测试类不合理</li></ul><hr>',25)]))}const d=a(l,[["render",i],["__file","Java Javadoc.html.vue"]]),r=JSON.parse('{"path":"/notes/Java/Java%20Javadoc.html","title":"Java - Javadoc","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"What is Javadoc ?","slug":"what-is-javadoc","link":"#what-is-javadoc","children":[]},{"level":2,"title":"Javadoc Structure","slug":"javadoc-structure","link":"#javadoc-structure","children":[]},{"level":2,"title":"Examples of Javadoc in JDK 8","slug":"examples-of-javadoc-in-jdk-8","link":"#examples-of-javadoc-in-jdk-8","children":[]},{"level":2,"title":"Javadoc Effect","slug":"javadoc-effect","link":"#javadoc-effect","children":[]},{"level":2,"title":"Issue: Include Reference to Unit Test Classes in Javadoc","slug":"issue-include-reference-to-unit-test-classes-in-javadoc","link":"#issue-include-reference-to-unit-test-classes-in-javadoc","children":[]}],"git":{},"filePathRelative":"notes/Java/Java Javadoc.md"}');export{d as comp,r as data};
