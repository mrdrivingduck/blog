import{_ as t,c as o,a as d,o as i}from"./app-7eKjwDat.js";const s="/blog/assets/git-reset-workflow-DWwyH72J.png",c="/blog/assets/git-last-commit-8IfVEJu_.png",r="/blog/assets/git-edit-file-BzIqWpt-.png",l="/blog/assets/git-add-file-CKtKVW27.png",a="/blog/assets/git-commit-CA5t8gG7.png",n="/blog/assets/git-reset-soft-4R7nZNUV.png",p="/blog/assets/git-reset-mixed-sPNcCz1r.png",g="/blog/assets/git-reset-hard-D8o2XE8Z.png",h="/blog/assets/git-reset-file-DiWSXF-t.png",m={};function f(u,e){return i(),o("div",null,e[0]||(e[0]=[d('<h1 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset"><span>Git - Reset</span></a></h1><p>Created by : Mr Dk.</p><p>2019 / 04 / 04 17:29</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h2><p>用 Git 的时候，有时候会遇到一些需要撤销更改，或者回退的情况。以前是自己一个人玩，基本不会遇到类似的问题。现在正在和一个牛 b 博士进行协作，动不动他就会把仓库弄乱 😑。今天花了点时间了解了一下 Git 的管理思维。</p><h2 id="the-three-trees" tabindex="-1"><a class="header-anchor" href="#the-three-trees"><span>The Three Trees</span></a></h2><p>不知道为何在 Git 中将其命名为 <strong>树</strong>。其实它的意思是一个 <strong>文件的集合</strong>，而不是数据结构。</p><table><thead><tr><th>Tree</th><th>Role</th></tr></thead><tbody><tr><td>HEAD</td><td>Last commit snapshot, next parent</td></tr><tr><td>Index</td><td>Proposed next commit snapshot</td></tr><tr><td>Working Directory</td><td>Sandbox</td></tr></tbody></table><p>其中，<code>HEAD</code> 和 <code>Index</code> 记录在 <code>/.git</code> 文件夹中，<code>Working Derectory</code> 就是展现的工作目录。</p><ul><li><p>HEAD 是当前分支引用的指针，指向分支上的最后一次提交。即 <strong>上一次提交的快照</strong>，是开始一次编辑之前的初始状态。</p></li><li><p>Index 是 <strong>预期的下一次提交</strong>，也就是 Git 中所谓的 <strong>暂存区域</strong>：stage。在其中，一些文件将会被替换为新版本。</p></li><li><p>工作目录中的文件在提交至暂存区之前，可以随意编辑。</p></li></ul><h2 id="workflow" tabindex="-1"><a class="header-anchor" href="#workflow"><span>Workflow</span></a></h2><p>Git 主要通过操作上述三棵树的状态来进行版本控制，直观上来看：</p><ul><li>将 <code>Working Directory</code> 中的变更提交到暂存区 <code>Index</code></li><li>将暂存区 <code>Index</code> 中的变更提交到 <code>HEAD</code></li><li>树之间可以进行状态转移、切换</li></ul><img src="'+s+'" alt="git-reset-workflow" style="zoom:80%;"><h3 id="一次正常的提交过程" tabindex="-1"><a class="header-anchor" href="#一次正常的提交过程"><span>一次正常的提交过程</span></a></h3><p>假设 Git 仓库中最后一次提交的 <code>file.txt</code> 文件的版本为 <code>V1</code>。在上一次的 <code>git commit</code> 提交完成之后：</p><img src="'+c+'" alt="git-last-commit" style="zoom:80%;"><p>接下来，对工作目录中的 <code>file.txt</code> 进行了相应的改动，改动后的版本为 <code>V2</code>：</p><img src="'+r+'" alt="git-edit-file" style="zoom:80%;"><p>接下来，使用 <code>git add file.txt</code> 将 <code>V2</code> 版本保存到暂存区：</p><img src="'+l+'" alt="git-add-file" style="zoom:80%;"><p>最后，使用 <code>git commit</code> 将 <code>V2</code> 版本从暂存区中提交，<code>HEAD</code> 指针前进：</p><img src="'+a+'" alt="git-commit" style="zoom:80%;"><p>只要三棵树的状态一致，就认为目录是干净的。</p><p>在切换分支时：</p><ul><li>修改 <code>HEAD</code> 指针指向对应分支</li><li>将 <code>Index</code> 填充为该次提交的快照</li><li>将 <code>Index</code> 中的内容复制到 <code>Working Directory</code> 中</li></ul><h2 id="reset" tabindex="-1"><a class="header-anchor" href="#reset"><span>Reset</span></a></h2><h3 id="soft" tabindex="-1"><a class="header-anchor" href="#soft"><span>Soft</span></a></h3><p><code>reset</code> 做的第一件事是移动 <code>HEAD</code> 指针的指向。本质上相当于 <strong>撤销了上一次的 <code>git commit</code></strong>，回滚到了 <code>git commit</code> 之前。<code>git reset --soft</code> 在这一步结束后停止：</p><img src="'+n+'" alt="git-reset-soft" style="zoom:80%;"><p>在这一步中，可以对 <code>Index</code> 进行更新，并重新 <code>git commit</code>。</p><h3 id="mixed" tabindex="-1"><a class="header-anchor" href="#mixed"><span>Mixed</span></a></h3><p><code>reset</code> 要做的第二件事，除了上一步的 <code>HEAD</code> 指针前移以外，还会恢复 <code>Index</code> 的状态。这是 <code>git reset</code> 的默认行为。</p><p>本质是：撤销上一次的 <code>git commit</code>，还会取消暂存所有的东西。相当于回滚到 <code>git commit</code> 和 <code>git add</code> 命令执行之前。<code>git reset [--mixed]</code> 在这一步结束后停止。</p><img src="'+p+'" alt="git-reset-mixed" style="zoom:80%;"><h3 id="hard" tabindex="-1"><a class="header-anchor" href="#hard"><span>Hard</span></a></h3><p><code>reset</code> 做的第三件事是将 <code>Working Directory</code> 恢复到 <code>HEAD</code> 指向的状态。在这一步下，撤销了所有的 <code>git commit</code>、<code>git add</code> 和 <code>Working Directory</code> 中的所有修改。<code>git reset --hard</code> 在这一步结束后停止：</p><img src="'+g+'" alt="git-reset-hard" style="zoom:80%;"><p><code>git reset --hard</code> 是一个危险的操作，因为它强制覆盖了工作目录中的文件，无法恢复。</p><h3 id="review" tabindex="-1"><a class="header-anchor" href="#review"><span>Review</span></a></h3><p>Git 的 <code>reset</code> 命令以特定顺序重写三棵树：</p><ul><li>移动 <code>HEAD</code> 指针 - 指定 <code>--soft</code> 则到此停止</li><li>恢复 <code>Index</code> - 指定 <code>--mixed</code> 或不指定（默认），则到此停止</li><li>恢复 <code>Working Directory</code> - 指定 <code>--hard</code> 则到此停止</li></ul><p>可以为 <code>reset</code> 提供一个作用路径，将作用范围限定为指定的文件或文件集合。由于 <code>HEAD</code> 是一个指针，无法同时指向两个提交，因此会跳过这一步；但 <code>Index</code> 和 <code>Working Directory</code> 可以部分更新。</p><p>假如运行 <code>git reset file.txt</code> (<code>git reset --mixed HEAD file.txt</code>)</p><ol><li>移动 <code>HEAD</code> 指针 (跳过)</li><li>将 <code>Index</code> 恢复至 <code>HEAD</code> 的对应版本</li></ol><p>本质上：将 <code>file.txt</code> 从 <code>HEAD</code> 复制到 <code>Index</code> 中；实际上：产生了 <strong>取消暂存文件</strong> 的效果。</p><img src="'+h+`" alt="git-reset-file" style="zoom:80%;"><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>挺复杂的 有了图就容易理解多了。归纳一下可能会用的比较多的场景：</p><ol><li><p>取消暂存的文件</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ git reset HEAD &lt;file_name&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>撤销对文件的修改</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ git checkout -- &lt;file_name&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol>`,52)]))}const b=t(m,[["render",f],["__file","Git Reset.html.vue"]]),_=JSON.parse('{"path":"/notes/Git/Git%20Reset.html","title":"Git - Reset","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about","link":"#about","children":[]},{"level":2,"title":"The Three Trees","slug":"the-three-trees","link":"#the-three-trees","children":[]},{"level":2,"title":"Workflow","slug":"workflow","link":"#workflow","children":[{"level":3,"title":"一次正常的提交过程","slug":"一次正常的提交过程","link":"#一次正常的提交过程","children":[]}]},{"level":2,"title":"Reset","slug":"reset","link":"#reset","children":[{"level":3,"title":"Soft","slug":"soft","link":"#soft","children":[]},{"level":3,"title":"Mixed","slug":"mixed","link":"#mixed","children":[]},{"level":3,"title":"Hard","slug":"hard","link":"#hard","children":[]},{"level":3,"title":"Review","slug":"review","link":"#review","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"notes/Git/Git Reset.md"}');export{b as comp,_ as data};
