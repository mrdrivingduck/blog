import{_ as n,c as s,a,o as t}from"./app-7eKjwDat.js";const p={};function o(c,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="c-stl-priority-queue" tabindex="-1"><a class="header-anchor" href="#c-stl-priority-queue"><span>C++ STL priority_queue</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 11 / 22 16:43</p><p>Chongqing, China</p><hr><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">priority_queue</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供对指定容器类型的组织方式。将容器内元素组织为一个堆，每次保证优先级最高的元素出队列。其中，三个模板参数的含义分别为：</p><ul><li>泛型类型 T</li><li>底层容器的实现类型 container，只支持 <code>vector</code> 或 <code>deque</code>，默认为 <code>vector</code>，底层容器需要支持 <em>随机访问迭代器</em> 的如下操作： <ul><li><code>empty()</code></li><li><code>size()</code></li><li><code>front()</code></li><li><code>push_back()</code></li><li><code>pop_back()</code></li></ul></li><li>第三个参数是比较函数 compare，默认为 <code>less&lt;T&gt;</code>，堆化后每次出队的是优先级最高的元素 (大顶堆)</li></ul><blockquote><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p>Type of the elements. Aliased as member type <code>priority_queue::value_type</code>.</p><h3 id="container" tabindex="-1"><a class="header-anchor" href="#container"><span>Container</span></a></h3><p>Type of the internal <em>underlying container</em> object where the elements are stored. Its <code>value_type</code> shall be <code>T</code>. Aliased as member type <code>priority_queue::container_type</code>.</p><h3 id="compare" tabindex="-1"><a class="header-anchor" href="#compare"><span>Compare</span></a></h3><p>A binary predicate that takes two elements (of type <code>T</code>) as arguments and returns a <code>bool</code>. The expression <code>comp(a,b)</code>, where comp is an object of this type and a and b are elements in the container, shall return <code>true</code> if a is considered to go before b in the <em>strict weak ordering</em> the function defines. The priority<em>queue uses this function to maintain the elements sorted in a way that preserves _heap properties</em> (i.e., that the element popped is the last according to this <em>strict weak ordering</em>). This can be a function pointer or a function object, and defaults to <code>less&lt;T&gt;</code>, which returns the same as applying the <em>less-than operator</em> (<code>a&lt;b</code>).</p><p>另外，可以自行使用 <code>#include &lt;algorithm&gt;</code> 中的 <code>make_heap()</code> 等函数手动对 <code>vector</code> 等容器建堆，效果一致。</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// using std::priority_queue;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pq<span class="token punctuation">;</span></span>
<span class="line">priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> pq<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="member-functions" tabindex="-1"><a class="header-anchor" href="#member-functions"><span>Member Functions</span></a></h2><ul><li><code>empty()</code></li><li><code>size()</code></li><li><code>top()</code></li><li><code>push()</code></li><li><code>pop()</code></li><li><code>emplace()</code>: construct and insert element</li><li><code>swap()</code></li></ul><h2 id="self-defined-comparison" tabindex="-1"><a class="header-anchor" href="#self-defined-comparison"><span>Self-Defined Comparison</span></a></h2><p>如果想要自定义比较函数，需要自行定义一个结构体，并重载 <code>()</code> 运算符：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">comp</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>flight1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>flight2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> flight1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> flight2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">priority_queue<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> comp<span class="token operator">&gt;</span> heap<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="http://www.cplusplus.com/reference/queue/priority_queue/" target="_blank" rel="noopener noreferrer">cplusplus.com - priority_queue</a></p><p><a href="http://c.biancheng.net/view/7010.html" target="_blank" rel="noopener noreferrer">STL priority_queue 底层实现 (深度剖析)</a></p>`,22)]))}const i=n(p,[["render",o],["__file","C__ STL priority_queue.html.vue"]]),r=JSON.parse('{"path":"/notes/C__/C__%20STL%20priority_queue.html","title":"C++ STL priority_queue","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]},{"level":2,"title":"Member Functions","slug":"member-functions","link":"#member-functions","children":[]},{"level":2,"title":"Self-Defined Comparison","slug":"self-defined-comparison","link":"#self-defined-comparison","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ STL priority_queue.md"}');export{i as comp,r as data};
