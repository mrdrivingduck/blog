import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_4-3-channelhandlercontext" tabindex="-1"><a class="header-anchor" href="#_4-3-channelhandlercontext"><span>4.3 - ChannelHandlerContext</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 02 / 20 22:37</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="channelhandlercontext" tabindex="-1"><a class="header-anchor" href="#channelhandlercontext"><span>ChannelHandlerContext</span></a></h2><p>使得一个 <code>ChannelHandler</code> 能够与 <code>ChannelPipeline</code> 及其其它 <code>ChannelHandler</code> 交互：</p><ul><li>通知 <code>ChannelPipeline</code> 中下一个 <code>ChannelHandler</code></li><li>动态修改 <code>ChannelPipeline</code></li></ul><p>另外，还可以用于保存状态变量。</p><h3 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h3><p><code>ChannelHandlerContext</code> 继承了 <code>ChannelInboundInvoker</code> 和 <code>ChannelOutboundInvoker</code> 接口，从而继承了调用 <code>ChannelInboundHandler</code> 和 <code>ChannelOutboundHandler</code> 的所有函数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Enables a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> to interact with its <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span></span>
<span class="line"> * and other handlers. Among other things a handler can notify the next <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> in the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span> as well as modify the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span> it belongs to dynamically.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Notify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * You can notify the closest handler in the same <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span> by calling one of the various methods</span>
<span class="line"> * provided here.</span>
<span class="line"> *</span>
<span class="line"> * Please refer to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span> to understand how an event flows.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Modifying a pipeline<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * You can get the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span> your handler belongs to by calling</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.  A non-trivial application could insert, remove, or</span>
<span class="line"> * replace handlers in the pipeline dynamically at runtime.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Retrieving for later use<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * You can keep the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span> for later use, such as</span>
<span class="line"> * triggering an event outside the handler methods, even from a different thread.</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * public class MyHandler extends <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelDuplexHandler</span></span><span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line"> *</span>
<span class="line"> *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>private <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span> ctx;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> *     public void beforeAdd(<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span> ctx) <span class="token punctuation">{</span></span>
<span class="line"> *         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>this.ctx = ctx;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *     <span class="token punctuation">}</span></span>
<span class="line"> *</span>
<span class="line"> *     public void login(String username, password) <span class="token punctuation">{</span></span>
<span class="line"> *         ctx.write(new LoginMessage(username, password));</span>
<span class="line"> *     <span class="token punctuation">}</span></span>
<span class="line"> *     ...</span>
<span class="line"> * <span class="token punctuation">}</span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Storing stateful information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token class-name">AttributeKey</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> allow you to</span>
<span class="line"> * store and access stateful information that is related with a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> / <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> and its</span>
<span class="line"> * context. Please refer to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> to learn various recommended</span>
<span class="line"> * ways to manage stateful information.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>A handler can have more than one <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> *</span>
<span class="line"> * Please note that a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> instance can be added to more than</span>
<span class="line"> * one <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>.  It means a single <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span></span>
<span class="line"> * instance can have more than one <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span> and therefore</span>
<span class="line"> * the single instance can be invoked with different</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span>s if it is added to one or more <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>s more than once.</span>
<span class="line"> * Also note that a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> that is supposed to be added to multiple <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>s should</span>
<span class="line"> * be marked as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelHandler</span><span class="token punctuation">.</span><span class="token class-name">Sharable</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Additional resources worth reading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * Please refer to the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span>, and</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span> to find out more about inbound and outbound operations,</span>
<span class="line"> * what fundamental differences they have, how they flow in a  pipeline,  and how to handle</span>
<span class="line"> * the operation in your application.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChannelHandlerContext</span> <span class="token keyword">extends</span> <span class="token class-name">AttributeMap</span><span class="token punctuation">,</span> <span class="token class-name">ChannelInboundInvoker</span><span class="token punctuation">,</span> <span class="token class-name">ChannelOutboundInvoker</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline"><span>Pipeline</span></a></h3><p>返回 <code>ChannelHandlerContext</code> 绑定的 <code>Channel</code>、<code>ChannelHandler</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> which is bound to the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Channel</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Returns the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EventExecutor</span></span><span class="token punctuation">}</span> which is used to execute an arbitrary task.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">EventExecutor</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * The unique name of the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span>.The name was used when then <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span></span>
<span class="line"> * was added to the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>. This name can also be used to access the registered</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> from the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> that is bound this <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelHandler</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> which belongs to this context was removed</span>
<span class="line"> * from the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>. Note that this method is only meant to be called from with in the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EventLoop</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return the assigned <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ChannelPipeline</span> <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Return the assigned <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ByteBufAllocator</span></span><span class="token punctuation">}</span> which will be used to allocate <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ByteBuf</span></span><span class="token punctuation">}</span>s.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">ByteBufAllocator</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="abstractchannelhandlercontext" tabindex="-1"><a class="header-anchor" href="#abstractchannelhandlercontext"><span>AbstractChannelHandlerContext</span></a></h2><p><code>ChannelHandlerContext</code> 接口的抽象类实现。</p><h3 id="definition-1" tabindex="-1"><a class="header-anchor" href="#definition-1"><span>Definition</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractChannelHandlerContext</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLeakHint</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state"><span>State</span></a></h3><p>使用一个变量来记录 <code>ChannelHandlerContext</code> 的状态。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">&gt;</span></span> <span class="token constant">HANDLER_STATE_UPDATER</span> <span class="token operator">=</span></span>
<span class="line">        <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;handlerState&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span><span class="token punctuation">#</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is about to be called.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ADD_PENDING</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span><span class="token punctuation">#</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> was called.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ADD_COMPLETE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span><span class="token punctuation">#</span><span class="token function">handlerRemoved</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> was called.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">REMOVE_COMPLETE</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Neither <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span><span class="token punctuation">#</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>
<span class="line"> * nor <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span><span class="token punctuation">#</span><span class="token function">handlerRemoved</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> was called.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INIT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> handlerState <span class="token operator">=</span> <span class="token constant">INIT</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="next" tabindex="-1"><a class="header-anchor" href="#next"><span>Next</span></a></h3><p>类内维护了对前一个 <code>ChannelHandlerContext</code> 和后一个 <code>ChannelHandlerContext</code> 的引用，形成了逻辑上的双向链表。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">volatile</span> <span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">volatile</span> <span class="token class-name">AbstractChannelHandlerContext</span> prev<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>该逻辑链表用于实现 <code>ChannelInboundHandler</code> 和 <code>ChannelOutboundHandler</code> 接口中定义的 <strong>调用下一个同方向 handler 的同名函数</strong> 的逻辑。</p><ol><li>从当前 <code>ChannelHandlerContext</code> 开始沿链表找到下一个同方向 (入站 / 出站) 的 <code>ChannelHandlerContext</code></li><li>取得下一个处理事件的 <code>ChannelHandlerContext</code> 的执行线程</li><li>如果执行线程是 <code>EventLoop</code> 线程，则立刻开始执行下一个 <code>ChannelHandlerContext</code> 的同名函数；否则先将任务添加到 <code>EventLoop</code> 的任务队列稍后执行</li></ol><p>以下函数根据入站 / 出站方向遍历 <code>ChannelHandlerContext</code> 链表，直到找到下一个同向的 <code>ChannelHandlerContext</code>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token class-name">AbstractChannelHandlerContext</span> <span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token keyword">int</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">AbstractChannelHandlerContext</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">EventExecutor</span> currentExecutor <span class="token operator">=</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">skipContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> currentExecutor<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> <span class="token constant">MASK_ONLY_INBOUND</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">AbstractChannelHandlerContext</span> <span class="token function">findContextOutbound</span><span class="token punctuation">(</span><span class="token keyword">int</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">AbstractChannelHandlerContext</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">EventExecutor</span> currentExecutor <span class="token operator">=</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">skipContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> currentExecutor<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> <span class="token constant">MASK_ONLY_OUTBOUND</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">skipContext</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">AbstractChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">EventExecutor</span> currentExecutor<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">,</span> <span class="token keyword">int</span> onlyMask<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Ensure we correctly handle MASK_EXCEPTION_CAUGHT which is not included in the MASK_EXCEPTION_CAUGHT</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>executionMask <span class="token operator">&amp;</span> <span class="token punctuation">(</span>onlyMask <span class="token operator">|</span> mask<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token comment">// We can only skip if the EventExecutor is the same as otherwise we need to ensure we offload</span></span>
<span class="line">        <span class="token comment">// everything to preserve ordering.</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        <span class="token comment">// See https://github.com/netty/netty/issues/10067</span></span>
<span class="line">        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> currentExecutor <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>executionMask <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到下一个同向的 <code>ChannelHandlerContext</code> 后，获取到执行器并调用同名函数：</p><ul><li>如果当前线程是 <code>EventLoop</code> 线程，则立刻调用</li><li>如果当前线程不是 <code>EventLoop</code> 线程，则将调用逻辑包装为一个 <code>Runnable</code> 任务，添加到执行器的任务队列中</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ChannelHandlerContext</span> <span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">invokeChannelActive</span><span class="token punctuation">(</span><span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token constant">MASK_CHANNEL_ACTIVE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelActive</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        next<span class="token punctuation">.</span><span class="token function">invokeChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                next<span class="token punctuation">.</span><span class="token function">invokeChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelInboundHandler</span><span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">invokeExceptionCaught</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Makes best possible effort to detect if <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span><span class="token punctuation">#</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> was called</span>
<span class="line"> * yet. If not return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> and if called or could not detect return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * If this method returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> we will not invoke the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> but just forward the event.</span>
<span class="line"> * This is needed as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DefaultChannelPipeline</span></span><span class="token punctuation">}</span> may already put the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span></span><span class="token punctuation">}</span> in the linked-list</span>
<span class="line"> * but not called <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandler</span><span class="token punctuation">#</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Store in local variable to reduce volatile reads.</span></span>
<span class="line">    <span class="token keyword">int</span> handlerState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerState<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> handlerState <span class="token operator">==</span> <span class="token constant">ADD_COMPLETE</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>ordered <span class="token operator">&amp;&amp;</span> handlerState <span class="token operator">==</span> <span class="token constant">ADD_PENDING</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="defaultchannelhandlercontext" tabindex="-1"><a class="header-anchor" href="#defaultchannelhandlercontext"><span>DefaultChannelHandlerContext</span></a></h2><p>基本上所有的成员变量都已经被维护在 <code>AbstractChannelHandlerContext</code> 类内。该类继承抽象类，类内仅维护对应的 <code>ChannelHandler</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DefaultChannelHandlerContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractChannelHandlerContext</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">DefaultChannelHandlerContext</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">DefaultChannelPipeline</span> pipeline<span class="token punctuation">,</span> <span class="token class-name">EventExecutor</span> executor<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> name<span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ChannelHandler</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> handler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)]))}const i=s(t,[["render",l],["__file","4.3 - ChannelHandlerContext.html.vue"]]),u=JSON.parse('{"path":"/netty-in-action-notes/4.3%20-%20ChannelHandlerContext.html","title":"4.3 - ChannelHandlerContext","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"ChannelHandlerContext","slug":"channelhandlercontext","link":"#channelhandlercontext","children":[{"level":3,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":3,"title":"Pipeline","slug":"pipeline","link":"#pipeline","children":[]}]},{"level":2,"title":"AbstractChannelHandlerContext","slug":"abstractchannelhandlercontext","link":"#abstractchannelhandlercontext","children":[{"level":3,"title":"Definition","slug":"definition-1","link":"#definition-1","children":[]},{"level":3,"title":"State","slug":"state","link":"#state","children":[]},{"level":3,"title":"Next","slug":"next","link":"#next","children":[]}]},{"level":2,"title":"DefaultChannelHandlerContext","slug":"defaultchannelhandlercontext","link":"#defaultchannelhandlercontext","children":[]}],"git":{},"filePathRelative":"netty-in-action-notes/4.3 - ChannelHandlerContext.md"}');export{i as comp,u as data};
