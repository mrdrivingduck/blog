import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const t={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="c-stl-unordered-map" tabindex="-1"><a class="header-anchor" href="#c-stl-unordered-map"><span>C++ STL unordered_map</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 11 / 27 20:08</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="template" tabindex="-1"><a class="header-anchor" href="#template"><span>Template</span></a></h2><p><code>unordered_map</code> 容器与 <code>map</code> 都是以 key 为唯一标识符的，区别在于底层实现。<code>map</code> 底层使用 <em>红黑树</em> 实现，因此维护了 key 值之间的顺序关系，对 <code>map</code> 的遍历将会是有序的。而 <code>unordered_map</code> 底层使用 hash table 实现。在遍历时，会按照 bucket 来遍历，元素并不是有序的。</p><p>模板定义：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span>                                    <span class="token comment">// unordered_map::key_type</span></span>
<span class="line">           <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>                                      <span class="token comment">// unordered_map::mapped_type</span></span>
<span class="line">           <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> hash<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span>                       <span class="token comment">// unordered_map::hasher</span></span>
<span class="line">           <span class="token keyword">class</span> <span class="token class-name">Pred</span> <span class="token operator">=</span> equal_to<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span>                   <span class="token comment">// unordered_map::key_equal</span></span>
<span class="line">           <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>  <span class="token comment">// unordered_map::allocator_type</span></span>
<span class="line">           <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">unordered_map</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要引用的头文件与命名空间：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// using std::pair;</span></span>
<span class="line"><span class="token comment">// using std::make_pair;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration"><span>Declaration</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> map<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h2><p>有如下几种插入方式：</p><ul><li>该容器重载了 <code>[]</code> 运算符，可以以类似字典的方式插入元素 <ul><li>如果容器中已有 key 的对应元素，则直接返回该元素的引用</li><li>如果容器中没有 key 的对应元素，则创建新元素插入容器中，并返回该元素的引用</li></ul></li><li>通过构造 <code>pair&lt;&gt;</code> 来插入元素</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">map<span class="token punctuation">[</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">pair<span class="token operator">&lt;</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span> inserted</span>
<span class="line">	<span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入操作返回指向插入元素的迭代器，以及插入是否成功。</p><h2 id="erase" tabindex="-1"><a class="header-anchor" href="#erase"><span>Erase</span></a></h2><p>以迭代器作为参数，删除元素；也可以直接用 key 来删除元素。</p><p>由于本容器无序，所以 <strong>范围删除</strong> 的结果不可预测。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">map<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 范围删除</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="search" tabindex="-1"><a class="header-anchor" href="#search"><span>Search</span></a></h2><p>以 key 为元素查找。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator iter <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// FOUND</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// cout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，还可以计算 key 元素的个数。对于该容器来说，要么是 1，要么是 0。含义上相当于 <code>exist()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="element-access" tabindex="-1"><a class="header-anchor" href="#element-access"><span>Element Access</span></a></h2><p>两种方式可以访问 value 的引用，与 <code>string</code> 类似：</p><ul><li><code>[]</code> 运算符</li><li><code>at()</code> 函数</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">map<span class="token punctuation">[</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bucket" tabindex="-1"><a class="header-anchor" href="#bucket"><span>Bucket</span></a></h2><p>传统的容量操作只体现容器内被用户操作的元素个数，而 <code>unordered_map</code> 内部维护的 hash 桶容量通过这组 API 返回。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> bucket_count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 取得桶的个数</span></span>
<span class="line"><span class="token keyword">int</span> bucket_size <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">bucket_size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 第 0 个桶中的元素数量</span></span>
<span class="line"><span class="token keyword">int</span> max_bucket_count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 桶的最大个数</span></span>
<span class="line"><span class="token keyword">int</span> bucket_id <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Tom 位于第几个 bucket 中，参数为 key_type</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>Hash</span></a></h2><p>与 hash 算法相关的量：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">float</span> load_factor <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 计算公式为 size / bucket_count，衡量容器的填充程度</span></span>
<span class="line"><span class="token keyword">float</span> max_load_factor <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">max_load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">max_load_factor</span><span class="token punctuation">(</span>max_load_factor <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// set</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">rehash</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 设置 hash 桶数量的最小值</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// 设置 hash 桶的数量至最适合存放至少 n 个元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p><a href="http://www.cplusplus.com/reference/unordered_map/unordered_map/" target="_blank" rel="noopener noreferrer">cplusplus.com - unordered_map</a></p><p><a href="https://www.geeksforgeeks.org/unordered_map-in-cpp-stl/" target="_blank" rel="noopener noreferrer">GeeksforGeeks - unordered_map in C++ STL</a></p>`,41)]))}const i=s(t,[["render",c],["__file","C__ STL unordered_map.html.vue"]]),r=JSON.parse('{"path":"/notes/C__/C__%20STL%20unordered_map.html","title":"C++ STL unordered_map","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Template","slug":"template","link":"#template","children":[]},{"level":2,"title":"Declaration","slug":"declaration","link":"#declaration","children":[]},{"level":2,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":2,"title":"Erase","slug":"erase","link":"#erase","children":[]},{"level":2,"title":"Search","slug":"search","link":"#search","children":[]},{"level":2,"title":"Element Access","slug":"element-access","link":"#element-access","children":[]},{"level":2,"title":"Bucket","slug":"bucket","link":"#bucket","children":[]},{"level":2,"title":"Hash","slug":"hash","link":"#hash","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{},"filePathRelative":"notes/C++/C++ STL unordered_map.md"}');export{i as comp,r as data};
