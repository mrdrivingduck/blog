import{_ as n,c as a,a as e,o as t}from"./app-7eKjwDat.js";const p="/blog/assets/slither-reentrancy-CLj040a1.png",l={};function i(o,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="solidity-slither" tabindex="-1"><a class="header-anchor" href="#solidity-slither"><span>Solidity - Slither</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 02 / 28 18:57</p><p>Ningbo, Zhejiang, China</p><hr><h2 id="about-slither" tabindex="-1"><a class="header-anchor" href="#about-slither"><span>About <em>Slither</em></span></a></h2><p>是一个 Python 3 实现的 Solidity 静态分析框架。</p><p>根据 <em>slither</em> 的 <a href="https://arxiv.org/abs/1908.09878" target="_blank" rel="noopener noreferrer">论文</a>，该工具借由 Solidity 编译器产生的 AST，恢复出继承关系图、控制流图等重要信息；并将 Solidity 代码转换为 <em>SSA</em> (Static Single Assessment) 形式的中间表示形式 - <em>SlithIR</em> 。最终，对这种中间表示形式进行代码分析，从而进行威胁检测和代码优化。</p><h2 id="slithir" tabindex="-1"><a class="header-anchor" href="#slithir"><span><em>SlithIR</em></span></a></h2><p>为什么需要中间表示形式？</p><p>编译器通常可能会将一个程序转换为 AST。然而，编译器可以继续使用各种信息丰富 AST，以便于进行深入的程序分析。比如，Solidity 中有继承机制，这意味着函数可以在当前 contract 源代码以外被定义。IR 可以使这些函数线性化，从而便于对函数执行流进行分析。</p><p>类似于 C 语言、LLVM IR、x86 汇编代码。C 语言很明确地进行了函数调用，但缺失了底层系统的细节，比如访问位置的具体信息等；而对于 x86 汇编来说，又缺失了函数调用的传递细节。而 LLVM IR 同时保留了细节信息，因此能够进行深入的程序分析和代码优化。</p><h3 id="variables" tabindex="-1"><a class="header-anchor" href="#variables"><span>Variables</span></a></h3><p>状态变量、局部变量、常量等</p><p>暂时型变量、引用型变量</p><h3 id="operators" tabindex="-1"><a class="header-anchor" href="#operators"><span>Operators</span></a></h3><p>赋值、一元、二元操作符</p><p>解引用、取成员操作符</p><p>函数调用操作符 (多种)</p><h3 id="ssa" tabindex="-1"><a class="header-anchor" href="#ssa"><span>SSA</span></a></h3><p>这个概念在 LLVM 中也有，但是我暂时还是没有办法理解它的作用。从形式上看，就是将表达式转化为 <strong>每个变量只能被赋值一次</strong> 的形式。这么做有利于分析，但是具体怎么个有利，以后再深入研究。</p><h2 id="python-api" tabindex="-1"><a class="header-anchor" href="#python-api"><span>Python API</span></a></h2><p>对于上述过程有所了解后，API 的用处就显而易见了。API 接收一个 Solidity 源文件作为输入，并将输入分析为一个 Slither 对象：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> slither<span class="token punctuation">.</span>slither <span class="token keyword">import</span> Slither</span>
<span class="line"></span>
<span class="line">slither <span class="token operator">=</span> Slither<span class="token punctuation">(</span><span class="token string">&#39;file.sol&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，通过这个 Slither 对象，可以获得所有的 Contract 对象：</p><ul><li><code>contracts()</code> - 源文件中所有的 contract</li><li><code>contracts_derived()</code> - 源文件中所有非继承 contract</li><li><code>get_contract_from_name()</code> - 返回指定名称的 contract</li></ul><p>对于每一个 Contract 对象：</p><ul><li><code>name()</code> - 得到 contract 的名称</li><li><code>functions()</code> - 得到 contract 中所有的函数 (Function 对象)</li><li><code>modifiers()</code> - 得到 contract 中所有的 modifier</li><li><code>inheritance()</code> - 所有继承的 contract</li><li><code>get_xxx()</code> - 取得 Function 对象、StateVariable 对象等</li></ul><p>对于每一个 Function 对象或 Modifier 对象：</p><ul><li><code>name()</code> - 函数名</li><li><code>nodes()</code> - 得到函数中所有的 CFG 结点对象 (Node)</li><li><code>entry_point()</code> - CFG 的入口结点</li><li><code>variables_read()</code> / <code>variables_written()</code> - 被读取或写入的变量列表</li><li><code>state_variables_read()</code> / <code>state_variables_written()</code> - 被读取或写入的状态变量列表</li></ul><p>对于变量，则有很多不同的类型 - 状态变量、局部变量等，具有属性如变量名、是否被初始化等。</p><p>对于 CFG 结点对象 Node，其中包含：</p><ul><li><code>type()</code> - 返回结点的类型</li><li><code>expression()</code> - 与该结点相关的表达式 (Expression)</li><li>读取/写入 的 变量/状态变量</li></ul><p>而一个 Expression 对象则是一个基于 AST 的代码表示。</p><p>基于这些 API，就可以根据不同威胁种类的特定模式，实现对应的检测逻辑。已经内置的代码分析有：</p><ul><li>read/write - 识别对于变量的读写</li><li>protected functions - 只有 contract owner 有权限执行的函数</li><li>data dependency analysis - 对于数据依赖进行的分析 (某个变量是否依赖于另一个变量)</li></ul><h2 id="detectors" tabindex="-1"><a class="header-anchor" href="#detectors"><span>Detectors</span></a></h2><p>检测器使用上述 API 对代码进行分析，从而实现威胁检测或代码优化。目前已经实现了 <a href="https://github.com/crytic/slither/blob/master/README.md#detectors" target="_blank" rel="noopener noreferrer">40 个检测器</a>。</p><p>其中每一个检测器的骨架如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> slither<span class="token punctuation">.</span>detectors<span class="token punctuation">.</span>abstract_detector <span class="token keyword">import</span> AbstractDetector<span class="token punctuation">,</span> DetectorClassification</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Skeleton</span><span class="token punctuation">(</span>AbstractDetector<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Documentation</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    ARGUMENT <span class="token operator">=</span> <span class="token string">&#39;mydetector&#39;</span> <span class="token comment"># slither will launch the detector with slither.py --detect mydetector</span></span>
<span class="line">    HELP <span class="token operator">=</span> <span class="token string">&#39;Help printed by slither&#39;</span></span>
<span class="line">    IMPACT <span class="token operator">=</span> DetectorClassification<span class="token punctuation">.</span>HIGH</span>
<span class="line">    CONFIDENCE <span class="token operator">=</span> DetectorClassification<span class="token punctuation">.</span>HIGH</span>
<span class="line"></span>
<span class="line">    WIKI <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line">    WIKI_TITLE <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    WIKI_DESCRIPTION <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    WIKI_EXPLOIT_SCENARIO <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    WIKI_RECOMMENDATION <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_detect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        info <span class="token operator">=</span> <span class="token string">&#39;This is an example!&#39;</span></span>
<span class="line"></span>
<span class="line">        finding <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_json_result<span class="token punctuation">(</span>info<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span>finding<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于每一种攻击，在 <em>slither</em> 的 <a href="https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities" target="_blank" rel="noopener noreferrer">WIKI</a> 中阐述了威胁发生的原因与示例的威胁场景。在相应的检测器中，定义了这种威胁的严重程度，和分析这个威胁的信心。</p><p>对于每一种威胁，重写 <code>_detect()</code> 函数实现相应的检测逻辑，然后返回一系列的 finding，即 <em>slither</em> 在分析结束后将会打印的信息 (类似编译器的警告信息)。另外还有几个用于辅助的函数，可以将指定的变量 / 结点 / 函数 / contract 加入到最终的 finding 中。Finding 中的信息可以集成到 IDE 里作为代码静态分析的提示。</p><p>以 <code>unused_state_variables</code> 为例。这个检测器用于检测 contract 中所有未被使用的状态变量：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">Module detecting unused state variables</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> slither<span class="token punctuation">.</span>detectors<span class="token punctuation">.</span>abstract_detector <span class="token keyword">import</span> AbstractDetector<span class="token punctuation">,</span> DetectorClassification</span>
<span class="line"><span class="token keyword">from</span> slither<span class="token punctuation">.</span>core<span class="token punctuation">.</span>solidity_types <span class="token keyword">import</span> ArrayType</span>
<span class="line"><span class="token keyword">from</span> slither<span class="token punctuation">.</span>visitors<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>export_values <span class="token keyword">import</span> ExportValues</span>
<span class="line"><span class="token keyword">from</span> slither<span class="token punctuation">.</span>core<span class="token punctuation">.</span>variables<span class="token punctuation">.</span>state_variable <span class="token keyword">import</span> StateVariable</span>
<span class="line"><span class="token keyword">from</span> slither<span class="token punctuation">.</span>formatters<span class="token punctuation">.</span>variables<span class="token punctuation">.</span>unused_state_variables <span class="token keyword">import</span> <span class="token builtin">format</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UnusedStateVars</span><span class="token punctuation">(</span>AbstractDetector<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Unused state variables detector</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    ARGUMENT <span class="token operator">=</span> <span class="token string">&#39;unused-state&#39;</span></span>
<span class="line">    HELP <span class="token operator">=</span> <span class="token string">&#39;Unused state variables&#39;</span></span>
<span class="line">    IMPACT <span class="token operator">=</span> DetectorClassification<span class="token punctuation">.</span>INFORMATIONAL</span>
<span class="line">    CONFIDENCE <span class="token operator">=</span> DetectorClassification<span class="token punctuation">.</span>HIGH</span>
<span class="line"></span>
<span class="line">    WIKI <span class="token operator">=</span> <span class="token string">&#39;https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    WIKI_TITLE <span class="token operator">=</span> <span class="token string">&#39;Unused state variables&#39;</span></span>
<span class="line">    WIKI_DESCRIPTION <span class="token operator">=</span> <span class="token string">&#39;Unused state variable.&#39;</span></span>
<span class="line">    WIKI_EXPLOIT_SCENARIO <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    WIKI_RECOMMENDATION <span class="token operator">=</span> <span class="token string">&#39;Remove unused state variables.&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">detect_unused</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> contract<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> contract<span class="token punctuation">.</span>is_signature_only<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line">        <span class="token comment"># Get all the variables read in all the functions and modifiers</span></span>
<span class="line"></span>
<span class="line">        all_functions <span class="token operator">=</span> <span class="token punctuation">(</span>contract<span class="token punctuation">.</span>all_functions_called <span class="token operator">+</span> contract<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span></span>
<span class="line">        variables_used <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>state_variables_read <span class="token keyword">for</span> x <span class="token keyword">in</span> all_functions<span class="token punctuation">]</span></span>
<span class="line">        variables_used <span class="token operator">+=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>state_variables_written <span class="token keyword">for</span> x <span class="token keyword">in</span> all_functions <span class="token keyword">if</span> <span class="token keyword">not</span> x<span class="token punctuation">.</span>is_constructor_variables<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        array_candidates <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>variables <span class="token keyword">for</span> x <span class="token keyword">in</span> all_functions<span class="token punctuation">]</span></span>
<span class="line">        array_candidates <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> sl <span class="token keyword">in</span> array_candidates <span class="token keyword">for</span> i <span class="token keyword">in</span> sl<span class="token punctuation">]</span> <span class="token operator">+</span> contract<span class="token punctuation">.</span>state_variables</span>
<span class="line">        array_candidates <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">.</span>length <span class="token keyword">for</span> x <span class="token keyword">in</span> array_candidates <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> ArrayType<span class="token punctuation">)</span> <span class="token keyword">and</span> x<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span></span>
<span class="line">        array_candidates <span class="token operator">=</span> <span class="token punctuation">[</span>ExportValues<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> array_candidates<span class="token punctuation">]</span></span>
<span class="line">        array_candidates <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> sl <span class="token keyword">in</span> array_candidates <span class="token keyword">for</span> i <span class="token keyword">in</span> sl<span class="token punctuation">]</span></span>
<span class="line">        array_candidates <span class="token operator">=</span> <span class="token punctuation">[</span>v <span class="token keyword">for</span> v <span class="token keyword">in</span> array_candidates <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> StateVariable<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Flat list</span></span>
<span class="line">        variables_used <span class="token operator">=</span> <span class="token punctuation">[</span>item <span class="token keyword">for</span> sublist <span class="token keyword">in</span> variables_used <span class="token keyword">for</span> item <span class="token keyword">in</span> sublist<span class="token punctuation">]</span></span>
<span class="line">        variables_used <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>variables_used <span class="token operator">+</span> array_candidates<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Return the variables unused that are not public</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> contract<span class="token punctuation">.</span>variables <span class="token keyword">if</span></span>
<span class="line">                x <span class="token keyword">not</span> <span class="token keyword">in</span> variables_used <span class="token keyword">and</span> x<span class="token punctuation">.</span>visibility <span class="token operator">!=</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_detect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot; Detect unused state variables</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line">        results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>slither<span class="token punctuation">.</span>contracts_derived<span class="token punctuation">:</span></span>
<span class="line">            unusedVars <span class="token operator">=</span> self<span class="token punctuation">.</span>detect_unused<span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> unusedVars<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">for</span> var <span class="token keyword">in</span> unusedVars<span class="token punctuation">:</span></span>
<span class="line">                    info <span class="token operator">=</span> <span class="token punctuation">[</span>var<span class="token punctuation">,</span> <span class="token string">&quot; is never used in &quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">]</span></span>
<span class="line">                    json <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_result<span class="token punctuation">(</span>info<span class="token punctuation">)</span></span>
<span class="line">                    results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>json<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> results</span>
<span class="line"></span>
<span class="line">    <span class="token decorator annotation punctuation">@staticmethod</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_format</span><span class="token punctuation">(</span>slither<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">format</span><span class="token punctuation">(</span>slither<span class="token punctuation">,</span> result<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，在 <code>_detect()</code> 函数中，调用了 <em>slither</em> 提供的 API，对源文件中的每一个 contract 进行遍历，并调用 <code>detect_unused()</code> 进行检测 - 如果有未被使用的状态变量，则加入到 <code>results</code> 变量中，作为分析结束后的提示。在 <code>detect_unused()</code> 中，收集 contract 中会使用到的所有函数，并提取函数中对变量的读写操作进行分析。如果操作满足特定的模式，就能得出未被使用的状态变量，完成检测。</p><hr><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><p>举一个 <strong>重入</strong> (Reentrancy) 威胁的例子。想象如下的场景：</p><div class="language-solidity line-numbers-mode" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">withdrawBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// send userBalance[msg.sender] ethers to msg.sender</span></span>
<span class="line">    <span class="token comment">// if msg.sender is a contract, it will call its fallback function</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>userBalance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    userBalance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个退款的场景。用户在合约内存有一定的 Ether，想要退款。该合约先将用户在该合约中的余额通过转账退回给用户，然后更新合约中记账的数据结构。然而，当调用转账的函数时，如果用户也是一个 contract，就会触发用户的 fallback function - 在该函数中，恶意用户可能又会调用一次退款函数。此时，由于记账的数据结构还没有更新，合约就会重复退款给用户，以此类推。</p><p>检测这种威胁的原则就是，搜索 CFG，在一次外部调用之后，是否出现了对状态变量的写入操作。</p><h2 id="installation-usage" tabindex="-1"><a class="header-anchor" href="#installation-usage"><span>Installation &amp;&amp; Usage</span></a></h2><p>首先安装 <em>slither</em> 本身：</p><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">$ pip3 install slither-analyzer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于 <em>slither</em> 需要编译器的 AST，因此需要 <a href="https://github.com/ethereum/solidity/" target="_blank" rel="noopener noreferrer"><em>sloc</em></a> 编译器。</p><p>使用 <em>slither</em> 对一个具有重入威胁的合约进行分析：</p><p><img src="`+p+'" alt="slither-reentrancy"></p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>根据 <em>slither</em> 的论文，从三个角度与其它的静态分析工具进行了对比：</p><ul><li>性能 - 分析是否快速</li><li>鲁棒性 - 分析是否经常失败</li><li>准确率 - 分析是否出现误报</li></ul><p>在这三个方面，<em>slither</em> 都优于其它的工具。</p><hr>',63)]))}const r=n(l,[["render",i],["__file","Solidity Slither.html.vue"]]),u=JSON.parse('{"path":"/notes/Solidity/Solidity%20Slither.html","title":"Solidity - Slither","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"About Slither","slug":"about-slither","link":"#about-slither","children":[]},{"level":2,"title":"SlithIR","slug":"slithir","link":"#slithir","children":[{"level":3,"title":"Variables","slug":"variables","link":"#variables","children":[]},{"level":3,"title":"Operators","slug":"operators","link":"#operators","children":[]},{"level":3,"title":"SSA","slug":"ssa","link":"#ssa","children":[]}]},{"level":2,"title":"Python API","slug":"python-api","link":"#python-api","children":[]},{"level":2,"title":"Detectors","slug":"detectors","link":"#detectors","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Installation && Usage","slug":"installation-usage","link":"#installation-usage","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{},"filePathRelative":"notes/Solidity/Solidity Slither.md"}');export{r as comp,u as data};
