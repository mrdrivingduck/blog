import{_ as s,c as a,a as e,o as p}from"./app-7eKjwDat.js";const l={};function t(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="chapter-5-跳跃表" tabindex="-1"><a class="header-anchor" href="#chapter-5-跳跃表"><span>Chapter 5 - 跳跃表</span></a></h1><p>Created by : Mr Dk.</p><p>2020 / 06 / 01 18:36</p><p>Nanjing, Jiangsu, China</p><hr><p>跳跃表 (skiplist) 是一种 <strong>有序数据结构</strong>，在每个结点中维持了多个指向其它结点的指针 (空间开销)，从而达到快速访问的效果。跳跃表支持平均 O(log(N))，最坏 O(N) 的查找复杂度。</p><p>在大部分情况下，跳跃表的查找效率与平衡树相当，但实现与维护比平衡树更加简单。关于书本中的跳跃表我觉得讲得不是很透彻，<a href="https://www.jianshu.com/p/43039adeb122" target="_blank" rel="noopener noreferrer">这篇博客</a> 中的图不错。大致含义是，在普通链表上建立一级索引、二级索引......索引层数越多，空间开销越多，查找越快。</p><h2 id="node-definition" tabindex="-1"><a class="header-anchor" href="#node-definition"><span>Node Definition</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span> <span class="token comment">// 后向指针</span></span>
<span class="line">    <span class="token keyword">double</span> score<span class="token punctuation">;</span> <span class="token comment">// 分值 (顺序)</span></span>
<span class="line">    robj <span class="token operator">*</span>obj<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 层</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span> <span class="token comment">// 跨度</span></span>
<span class="line">    <span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 skiplist 时，根据 <em>幂次定律 (Power Law)</em> (越大的数出现的概率越小) 在 1-32 之间选择一个数作为 <code>level[]</code> 数组的大小，即索引高度。</p><ul><li><code>level[]</code> 中的每一层都有一个前向指针 <code>forward</code>，用于从表头方向访问表尾方向的结点</li><li><code>span</code> 跨度实际上是用于计算排位，而不是用于遍历</li><li>后退指针每次只能回退一个结点 (因为只有一层)</li></ul><p>跳跃表中的内容分为：</p><ul><li><code>obj</code> - 成员对象 (指向一个 SDS)</li><li><code>score</code> - 分值 (跳跃表的排序基准，从小到大)</li></ul><p>成员对象必须是唯一的，<code>score</code> 的值可以相同，相同时按 <code>obj</code> 对应 SDS 的字典序排序。</p><h2 id="table-definition" tabindex="-1"><a class="header-anchor" href="#table-definition"><span>Table Definition</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span> <span class="token comment">// 表中结点数量</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> level<span class="token punctuation">;</span> <span class="token comment">// 表中索引的最高层数</span></span>
<span class="line"><span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，表头结点不算在 <code>length</code> 和 <code>level</code> 中。</p>`,17)]))}const c=s(l,[["render",t],["__file","Chapter 5 - 跳跃表.html.vue"]]),d=JSON.parse('{"path":"/redis-implementation-notes/Part%201%20-%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1/Chapter%205%20-%20%E8%B7%B3%E8%B7%83%E8%A1%A8.html","title":"Chapter 5 - 跳跃表","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Node Definition","slug":"node-definition","link":"#node-definition","children":[]},{"level":2,"title":"Table Definition","slug":"table-definition","link":"#table-definition","children":[]}],"git":{},"filePathRelative":"redis-implementation-notes/Part 1 - 数据结构与对象/Chapter 5 - 跳跃表.md"}');export{c as comp,d as data};
