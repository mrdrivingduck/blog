import{_ as s,c as a,a as p,o as t}from"./app-7eKjwDat.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="chapter-4-9-slist" tabindex="-1"><a class="header-anchor" href="#chapter-4-9-slist"><span>Chapter 4.9 - slist</span></a></h1><p>Created by : Mr Dk.</p><p>2021 / 04 / 05 11:22</p><p>Nanjing, Jiangsu, China</p><hr><h2 id="_4-9-1-slist-概述" tabindex="-1"><a class="header-anchor" href="#_4-9-1-slist-概述"><span>4.9.1 slist 概述</span></a></h2><p>STL 的 list 是双向链表。SGI STL 还另外提供了一个单向链表 slist。该容器不在标准规格以内。slist 的迭代器是单项的 forward iterator，而 list 的迭代器是双向的 bidirectional iterator。因此，slist 的功能受到了许多限制。它们的共同点是，对容器进行修改操作不太容易使迭代器失效 (因为只是修改了部分指针)。</p><p>根据 STL 的习惯，插入操作发生在迭代器指定的结点之前，而由于单向链表没有办法获得前一个结点的引用，因此，slist 需要从头开始寻找插入位置。也就是说，除了在 slist 起点附近，调用 <code>insert()</code> 或 <code>erase()</code> 都是不智的。根据 slist 的特性，slist 特别提供了 <code>insert_after()</code> 和 <code>erase_after()</code>。另外，出于效率考虑，slist 只提供 <code>push_front()</code>，不提供 <code>push_back()</code>。</p><h2 id="_4-9-2-slist-的结点" tabindex="-1"><a class="header-anchor" href="#_4-9-2-slist-的结点"><span>4.9.2 slist 的结点</span></a></h2><p>结点运用继承关系定义：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Slist_node_base</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Slist_node_base<span class="token operator">*</span> _M_next<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Slist_node</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Slist_node_base</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  _Tp _M_data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链接新结点：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">inline</span> _Slist_node_base<span class="token operator">*</span></span>
<span class="line"><span class="token function">__slist_make_link</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __prev_node<span class="token punctuation">,</span></span>
<span class="line">                  _Slist_node_base<span class="token operator">*</span> __new_node<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  __new_node<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __prev_node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">  __prev_node<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __new_node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __new_node<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获得某个结点的前一个结点 (需要从头开始找)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">inline</span> _Slist_node_base<span class="token operator">*</span></span>
<span class="line"><span class="token function">__slist_previous</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __head<span class="token punctuation">,</span></span>
<span class="line">                 <span class="token keyword">const</span> _Slist_node_base<span class="token operator">*</span> __node<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__head <span class="token operator">&amp;&amp;</span> __head<span class="token operator">-&gt;</span>_M_next <span class="token operator">!=</span> __node<span class="token punctuation">)</span></span>
<span class="line">    __head <span class="token operator">=</span> __head<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __head<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">const</span> _Slist_node_base<span class="token operator">*</span></span>
<span class="line"><span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Slist_node_base<span class="token operator">*</span> __head<span class="token punctuation">,</span></span>
<span class="line">                 <span class="token keyword">const</span> _Slist_node_base<span class="token operator">*</span> __node<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__head <span class="token operator">&amp;&amp;</span> __head<span class="token operator">-&gt;</span>_M_next <span class="token operator">!=</span> __node<span class="token punctuation">)</span></span>
<span class="line">    __head <span class="token operator">=</span> __head<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __head<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取结点个数 (从前开始找)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">inline</span> size_t <span class="token function">__slist_size</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __node<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  size_t __result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> __node <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> __node <span class="token operator">=</span> __node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">++</span>__result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> __result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-9-3-slist-的迭代器" tabindex="-1"><a class="header-anchor" href="#_4-9-3-slist-的迭代器"><span>4.9.3 slist 的迭代器</span></a></h2><p>内部维护了一个指向结点的指针。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Slist_iterator_base</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> size_t               size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t            difference_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> forward_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 单向迭代器</span></span>
<span class="line"></span>
<span class="line">  _Slist_node_base<span class="token operator">*</span> _M_node<span class="token punctuation">;</span> <span class="token comment">// 指向结点的指针</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_node <span class="token operator">=</span> _M_node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Slist_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_node <span class="token operator">==</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Slist_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _M_node <span class="token operator">!=</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ref</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ptr</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Slist_iterator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Slist_iterator_base</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span>             iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span> const_iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Ref<span class="token punctuation">,</span> _Ptr<span class="token operator">&gt;</span>             _Self<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp              value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Ptr             pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Ref             reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span> _Node<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_Slist_iterator</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_Slist_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_Slist_iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> iterator<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> _M_node<span class="token punctuation">)</span><span class="token operator">-&gt;</span>_M_data<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  pointer <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-9-4-slist-的数据结构" tabindex="-1"><a class="header-anchor" href="#_4-9-4-slist-的数据结构"><span>4.9.4 slist 的数据结构</span></a></h2><p>slist 内维护了一个实物头结点。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_Slist_base</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Alloc allocator_type<span class="token punctuation">;</span></span>
<span class="line">  allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">_Slist_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _M_head<span class="token punctuation">.</span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">~</span><span class="token function">_Slist_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">_M_erase_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_M_head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> simple_alloc<span class="token operator">&lt;</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">,</span> _Alloc<span class="token operator">&gt;</span> _Alloc_type<span class="token punctuation">;</span> <span class="token comment">// 以结点为单位分配内存</span></span>
<span class="line">  _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _Alloc_type<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">{</span> _Alloc_type<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  _Slist_node_base<span class="token operator">*</span> <span class="token function">_M_erase_after</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __pos<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> __next <span class="token operator">=</span> <span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>__pos<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _Slist_node_base<span class="token operator">*</span> __next_next <span class="token operator">=</span> __next<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">    __pos<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __next_next<span class="token punctuation">;</span> <span class="token comment">// 取下结点</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__next<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 析构结点</span></span>
<span class="line">    <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 释放结点空间</span></span>
<span class="line">    <span class="token keyword">return</span> __next_next<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  _Slist_node_base<span class="token operator">*</span> <span class="token function">_M_erase_after</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span><span class="token punctuation">,</span> _Slist_node_base<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span><span class="token operator">:</span></span>
<span class="line">  _Slist_node_base _M_head<span class="token punctuation">;</span> <span class="token comment">// 头结点 (不是结点指针，而就是一个结点)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除一个范围以内的结点 (由范围之前的一个结点和范围内最后一个结点的下一个结点指示)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span>
<span class="line">_Slist_node_base<span class="token operator">*</span></span>
<span class="line"><span class="token class-name">_Slist_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">_M_erase_after</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __before_first<span class="token punctuation">,</span></span>
<span class="line">                                        _Slist_node_base<span class="token operator">*</span> __last_node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> __cur <span class="token operator">=</span> <span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>__before_first<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>__cur <span class="token operator">!=</span> __last_node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span> __tmp <span class="token operator">=</span> __cur<span class="token punctuation">;</span></span>
<span class="line">    __cur <span class="token operator">=</span> <span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">*</span><span class="token punctuation">)</span> __cur<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__tmp<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  __before_first<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> __last_node<span class="token punctuation">;</span> <span class="token comment">// before_first 和 last_node 都被保留了</span></span>
<span class="line">  <span class="token keyword">return</span> __last_node<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>slist 主类：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> <span class="token function">__STL_DEFAULT_ALLOCATOR</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">slist</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">_Slist_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Alloc</span><span class="token operator">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// requirements:</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">__STL_CLASS_REQUIRES</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Assignable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_base<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">&gt;</span> _Base<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Tp                value_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> value_type<span class="token operator">*</span>       pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> value_type<span class="token operator">&amp;</span>       reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> size_t            size_type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> ptrdiff_t         difference_type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span>             iterator<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">&gt;</span> const_iterator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>allocator_type allocator_type<span class="token punctuation">;</span></span>
<span class="line">  allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _Base<span class="token double-colon punctuation">::</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span>      _Node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_node_base      _Node_base<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">typedef</span> _Slist_iterator_base  _Iterator_base<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  _Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Node<span class="token operator">*</span> __node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配结点空间</span></span>
<span class="line">    __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__node<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 拷贝构造结点</span></span>
<span class="line">      __node<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  _Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Node<span class="token operator">*</span> __node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配结点空间</span></span>
<span class="line">    __STL_TRY <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__node<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 拷贝构造结点</span></span>
<span class="line">      __node<span class="token operator">-&gt;</span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">__STL_UNWIND</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> __node<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">slist</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">slist</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span>  <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">_M_insert_after_fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">explicit</span> <span class="token function">slist</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span><span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">_M_insert_after_fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> <span class="token function">value_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">slist</span><span class="token punctuation">(</span>const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span>  <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">_M_insert_after_range</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">slist</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span>  <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">_M_insert_after_range</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">slist</span><span class="token punctuation">(</span><span class="token keyword">const</span> slist<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token function">_M_insert_after_range</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  slist<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> slist<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token operator">~</span><span class="token function">slist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>迭代器与相关操作：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 头结点的下一个元素</span></span>
<span class="line">const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">const_iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                               <span class="token comment">// 空指针</span></span>
<span class="line">const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">const_iterator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Experimental new feature: before_begin() returns a</span></span>
<span class="line"><span class="token comment">// non-dereferenceable iterator that, when incremented, yields</span></span>
<span class="line"><span class="token comment">// begin().  This iterator may be used as the argument to</span></span>
<span class="line"><span class="token comment">// insert_after, erase_after, etc.  Note that even for an empty</span></span>
<span class="line"><span class="token comment">// slist, before_begin() is not the same iterator as end().  It</span></span>
<span class="line"><span class="token comment">// is always necessary to increment before_begin() at least once to</span></span>
<span class="line"><span class="token comment">// obtain end().</span></span>
<span class="line">iterator <span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 头结点</span></span>
<span class="line">const_iterator <span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">const_iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">__slist_size</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>slist<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span> __STD<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">,</span> __x<span class="token punctuation">.</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 交换两个头结点的 next</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持从 slist 的头部进行操作：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token operator">-&gt;</span>_M_data<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token operator">-&gt;</span>_M_data<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span>   <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__slist_make_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">__slist_make_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _Node<span class="token operator">*</span> __node <span class="token operator">=</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">.</span>_M_next <span class="token operator">=</span> __node<span class="token operator">-&gt;</span>_M_next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__node<span class="token operator">-&gt;</span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回迭代器的前一个位置 (需要从头遍历)：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">iterator <span class="token function">previous</span><span class="token punctuation">(</span>const_iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">const_iterator <span class="token function">previous</span><span class="token punctuation">(</span>const_iterator __pos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">const_iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>_M_head<span class="token punctuation">,</span></span>
<span class="line">                                                    __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效率较高的插入：<code>insert_after()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">_Node<span class="token operator">*</span> <span class="token function">_M_insert_after</span><span class="token punctuation">(</span>_Node_base<span class="token operator">*</span> __pos<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__slist_make_link</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在当前位置之后插入</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">_Node<span class="token operator">*</span> <span class="token function">_M_insert_after</span><span class="token punctuation">(</span>_Node_base<span class="token operator">*</span> __pos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__slist_make_link</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在当前位置之后插入</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_insert_after_fill</span><span class="token punctuation">(</span>_Node_base<span class="token operator">*</span> __pos<span class="token punctuation">,</span></span>
<span class="line">                          size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_type __i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> __i <span class="token operator">&lt;</span> __n<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span></span>
<span class="line">        __pos <span class="token operator">=</span> <span class="token function">__slist_make_link</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 在当前位置之后插入多个</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_insert_after_range</span><span class="token punctuation">(</span>_Node_base<span class="token operator">*</span> __pos<span class="token punctuation">,</span>                        <span class="token comment">// 在当前位置之后插入一个范围</span></span>
<span class="line">                           const_iterator __first<span class="token punctuation">,</span> const_iterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        __pos <span class="token operator">=</span> <span class="token function">__slist_make_link</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_M_insert_after_range</span><span class="token punctuation">(</span>_Node_base<span class="token operator">*</span> __pos<span class="token punctuation">,</span>                        <span class="token comment">// 在当前位置之后插入一个范围</span></span>
<span class="line">                           <span class="token keyword">const</span> value_type<span class="token operator">*</span> __first<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">const</span> value_type<span class="token operator">*</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        __pos <span class="token operator">=</span> <span class="token function">__slist_make_link</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">++</span>__first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)]))}const i=s(e,[["render",o],["__file","Chapter 4.9 - slist.html.vue"]]),u=JSON.parse('{"path":"/the-annotated-stl-sources-notes/Chapter%204%20-%20%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8/Chapter%204.9%20-%20slist.html","title":"Chapter 4.9 - slist","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.9.1 slist 概述","slug":"_4-9-1-slist-概述","link":"#_4-9-1-slist-概述","children":[]},{"level":2,"title":"4.9.2 slist 的结点","slug":"_4-9-2-slist-的结点","link":"#_4-9-2-slist-的结点","children":[]},{"level":2,"title":"4.9.3 slist 的迭代器","slug":"_4-9-3-slist-的迭代器","link":"#_4-9-3-slist-的迭代器","children":[]},{"level":2,"title":"4.9.4 slist 的数据结构","slug":"_4-9-4-slist-的数据结构","link":"#_4-9-4-slist-的数据结构","children":[]}],"git":{},"filePathRelative":"the-annotated-stl-sources-notes/Chapter 4 - 序列式容器/Chapter 4.9 - slist.md"}');export{i as comp,u as data};
